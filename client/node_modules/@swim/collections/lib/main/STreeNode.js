import { __extends } from "tslib";
import { STree } from "./STree";
import { STreePage } from "./STreePage";
var STreeNode = (function (_super) {
    __extends(STreeNode, _super);
    function STreeNode(pages, knots, size) {
        var _this = _super.call(this) || this;
        _this._pages = pages;
        if (knots === void 0 || size === void 0) {
            knots = new Array(pages.length - 1);
            size = 0;
            for (var i = 0, n = knots.length; i < n; i += 1) {
                size += pages[i].size;
                knots[i] = size;
            }
            size += pages[knots.length].size;
        }
        _this._knots = knots;
        _this._size = size;
        return _this;
    }
    Object.defineProperty(STreeNode.prototype, "arity", {
        get: function () {
            return this._pages.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(STreeNode.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: true,
        configurable: true
    });
    STreeNode.prototype.isEmpty = function () {
        return this._size === 0;
    };
    STreeNode.prototype.get = function (index) {
        var x = this.lookup(index);
        if (x >= 0) {
            x += 1;
        }
        else {
            x = -(x + 1);
        }
        var i = x === 0 ? index : index - this._knots[x - 1];
        return this._pages[x].get(i);
    };
    STreeNode.prototype.getEntry = function (index) {
        var x = this.lookup(index);
        if (x >= 0) {
            x += 1;
        }
        else {
            x = -(x + 1);
        }
        var i = x === 0 ? index : index - this._knots[x - 1];
        return this._pages[x].getEntry(i);
    };
    STreeNode.prototype.updated = function (index, newValue, tree) {
        var x = this.lookup(index);
        if (x >= 0) {
            x += 1;
        }
        else {
            x = -(x + 1);
        }
        var i = x === 0 ? index : index - this._knots[x - 1];
        var oldPage = this._pages[x];
        var newPage = oldPage.updated(i, newValue, tree);
        if (oldPage !== newPage) {
            if (oldPage.size !== newPage.size && tree.pageShouldSplit(newPage)) {
                return this.updatedPageSplit(x, newPage, oldPage);
            }
            else {
                return this.updatedPage(x, newPage, oldPage);
            }
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.updatedPage = function (x, newPage, oldPage) {
        var oldPages = this._pages;
        var newPages = oldPages.slice(0);
        newPages[x] = newPage;
        var oldKnots = this._knots;
        var newKnots;
        var newSize;
        if (oldPages.length - 1 > 0) {
            newKnots = oldKnots.slice(0);
            if (x > 0) {
                newSize = oldKnots[x - 1];
            }
            else {
                newSize = 0;
            }
            for (var i = x; i < newKnots.length; i += 1) {
                newSize += newPages[i].size;
                newKnots[i] = newSize;
            }
            newSize += newPages[newKnots.length].size;
        }
        else {
            newKnots = [];
            newSize = 0;
        }
        return new STreeNode(newPages, newKnots, newSize);
    };
    STreeNode.prototype.updatedPageSplit = function (x, newPage, oldPage) {
        var oldPages = this._pages;
        var newPages = new Array(oldPages.length + 1);
        for (var i = 0; i < x; i += 1) {
            newPages[i] = oldPages[i];
        }
        var newLeftPage = newPage.splitLeft(newPage.arity >>> 1);
        var newRightPage = newPage.splitRight(newPage.arity >>> 1);
        newPages[x] = newLeftPage;
        newPages[x + 1] = newRightPage;
        for (var i = x + 1; i < oldPages.length; i += 1) {
            newPages[i + 1] = oldPages[i];
        }
        return new STreeNode(newPages);
    };
    STreeNode.prototype.updatedPageMerge = function (x, newPage, oldPage) {
        var oldPages = this._pages;
        var midPages = newPage._pages;
        var newPages = new Array(oldPages.length + midPages.length - 1);
        for (var i = 0; i < x; i += 1) {
            newPages[i] = oldPages[i];
        }
        for (var i = 0; i < midPages.length; i += 1) {
            newPages[i + x] = midPages[i];
        }
        for (var i = x + 1; i < oldPages.length; i += 1) {
            newPages[i + midPages.length - 1] = oldPages[i];
        }
        return new STreeNode(newPages);
    };
    STreeNode.prototype.inserted = function (index, newValue, id, tree) {
        var x = this.lookup(index);
        if (x >= 0) {
            x += 1;
        }
        else {
            x = -(x + 1);
        }
        var subIndex = x === 0 ? index : index - this._knots[x - 1];
        var oldPage = this._pages[x];
        var newPage = oldPage.inserted(subIndex, newValue, id, tree);
        if (oldPage !== newPage) {
            if (tree.pageShouldSplit(newPage)) {
                return this.updatedPageSplit(x, newPage, oldPage);
            }
            else {
                return this.updatedPage(x, newPage, oldPage);
            }
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.removed = function (index, tree) {
        var x = this.lookup(index);
        if (x >= 0) {
            x += 1;
        }
        else {
            x = -(x + 1);
        }
        var subIndex = x === 0 ? index : index - this._knots[x - 1];
        var oldPage = this._pages[x];
        var newPage = oldPage.removed(subIndex, tree);
        if (oldPage !== newPage) {
            return this.replacedPage(x, newPage, oldPage, tree);
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.replacedPage = function (x, newPage, oldPage, tree) {
        if (!newPage.isEmpty()) {
            if (newPage instanceof STreeNode && tree.pageShouldMerge(newPage)) {
                return this.updatedPageMerge(x, newPage, oldPage);
            }
            else {
                return this.updatedPage(x, newPage, oldPage);
            }
        }
        else if (this._pages.length > 2) {
            return this.removedPage(x, newPage, oldPage);
        }
        else if (this._pages.length > 1) {
            if (x === 0) {
                return this._pages[1];
            }
            else {
                return this._pages[0];
            }
        }
        else {
            return STreePage.empty();
        }
    };
    STreeNode.prototype.removedPage = function (x, newPage, oldPage) {
        var oldPages = this._pages;
        var newPages = new Array(oldPages.length - 1);
        for (var i = 0; i < x; i += 1) {
            newPages[i] = oldPages[i];
        }
        for (var i = x + 1; i < oldPages.length; i += 1) {
            newPages[i - 1] = oldPages[i];
        }
        var oldKnots = this._knots;
        var newKnots = new Array(oldKnots.length - 1);
        var newSize;
        if (x > 0) {
            for (var i = 0; i < x; i += 1) {
                newKnots[i] = oldKnots[i];
            }
            newSize = oldKnots[x - 1];
        }
        else {
            newSize = 0;
        }
        for (var i = x; i < newKnots.length; i += 1) {
            newSize += newPages[i].size;
            newKnots[i] = newSize;
        }
        newSize += newPages[newKnots.length].size;
        return new STreeNode(newPages, newKnots, newSize);
    };
    STreeNode.prototype.drop = function (lower, tree) {
        if (lower > 0) {
            if (lower < this._size) {
                var x = this.lookup(lower);
                if (x >= 0) {
                    x += 1;
                }
                else {
                    x = -(x + 1);
                }
                lower = x === 0 ? lower : lower - this._knots[x - 1];
                var oldPages = this._pages;
                var n = oldPages.length - x;
                if (n > 1) {
                    var newNode = void 0;
                    if (x > 0) {
                        var newPages = new Array(n);
                        for (var i = 0; i < n; i += 1) {
                            newPages[i] = oldPages[i + x];
                        }
                        newNode = new STreeNode(newPages);
                    }
                    else {
                        newNode = this;
                    }
                    if (lower > 0) {
                        var oldPage = oldPages[x];
                        var newPage = oldPage.drop(lower, tree);
                        return newNode.replacedPage(0, newPage, oldPage, tree);
                    }
                    else {
                        return newNode;
                    }
                }
                else {
                    return oldPages[x].drop(lower, tree);
                }
            }
            else {
                return STreePage.empty();
            }
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.take = function (upper, tree) {
        if (upper < this._size) {
            if (upper > 0) {
                var x = this.lookup(upper);
                if (x >= 0) {
                    x += 1;
                }
                else {
                    x = -(x + 1);
                }
                upper = x === 0 ? upper : upper - this._knots[x - 1];
                var oldPages = this._pages;
                var n = upper === 0 ? x : x + 1;
                if (n > 1) {
                    var newNode = void 0;
                    if (x < oldPages.length) {
                        var newPages = new Array(n);
                        for (var i = 0; i < n; i += 1) {
                            newPages[i] = oldPages[i];
                        }
                        var newKnots = new Array(n - 1);
                        for (var i = 0; i < newKnots.length; i += 1) {
                            newKnots[i] = this._knots[i];
                        }
                        var newSize = newKnots[n - 2] + newPages[n - 1].size;
                        newNode = new STreeNode(newPages, newKnots, newSize);
                    }
                    else {
                        newNode = this;
                    }
                    if (upper > 0) {
                        var oldPage = oldPages[x];
                        var newPage = oldPage.take(upper, tree);
                        return newNode.replacedPage(x, newPage, oldPage, tree);
                    }
                    else {
                        return newNode;
                    }
                }
                else if (upper > 0) {
                    return oldPages[0].take(upper, tree);
                }
                else {
                    return oldPages[0];
                }
            }
            else {
                return STreePage.empty();
            }
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.balanced = function (tree) {
        if (this._pages.length > 1 && tree.pageShouldSplit(this)) {
            var x = this._knots.length >>> 1;
            return this.split(x);
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.split = function (x) {
        var newPages = new Array(2);
        var newLeftPage = this.splitLeft(x);
        var newRightPage = this.splitRight(x);
        newPages[0] = newLeftPage;
        newPages[1] = newRightPage;
        var newKnots = new Array(1);
        newKnots[0] = newLeftPage._size;
        return new STreeNode(newPages, newKnots, this._size);
    };
    STreeNode.prototype.splitLeft = function (x) {
        var oldPages = this._pages;
        var newPages = new Array(x + 1);
        for (var i = 0; i < x + 1; i += 1) {
            newPages[i] = oldPages[i];
        }
        var oldKnots = this._knots;
        var newKnots = new Array(x);
        for (var i = 0; i < x; i += 1) {
            newKnots[i] = oldKnots[i];
        }
        var newSize = 0;
        for (var i = 0; i <= x; i += 1) {
            newSize += newPages[i].size;
        }
        return new STreeNode(newPages, newKnots, newSize);
    };
    STreeNode.prototype.splitRight = function (x) {
        var oldPages = this._pages;
        var y = oldPages.length - (x + 1);
        var newPages = new Array(y);
        for (var i = 0; i < y; i += 1) {
            newPages[i] = oldPages[i + (x + 1)];
        }
        var newKnots = new Array(y - 1);
        var newSize;
        if (y > 0) {
            newSize = newPages[0].size;
            for (var i = 1; i < y; i += 1) {
                newKnots[i - 1] = newSize;
                newSize += newPages[i].size;
            }
        }
        else {
            newSize = 0;
        }
        return new STreeNode(newPages, newKnots, newSize);
    };
    STreeNode.prototype.forEach = function (callback, thisArg, offset, tree) {
        for (var i = 0; i < this._pages.length; i += 1) {
            var page = this._pages[i];
            var result = page.forEach(callback, thisArg, offset, tree);
            if (result !== void 0) {
                return result;
            }
            offset += page.size;
        }
        return void 0;
    };
    STreeNode.prototype.entries = function () {
        return new STree.NodeCursor(this._pages);
    };
    STreeNode.prototype.reverseEntries = function () {
        return new STree.NodeCursor(this._pages, this._size, this._pages.length);
    };
    STreeNode.prototype.lookup = function (index) {
        var lo = 0;
        var hi = this._knots.length - 1;
        while (lo <= hi) {
            var mid = (lo + hi) >>> 1;
            if (index > this._knots[mid]) {
                lo = mid + 1;
            }
            else if (index < this._knots[mid]) {
                hi = mid - 1;
            }
            else {
                return mid;
            }
        }
        return -(lo + 1);
    };
    return STreeNode;
}(STreePage));
export { STreeNode };
STree.Node = STreeNode;
//# sourceMappingURL=STreeNode.js.map