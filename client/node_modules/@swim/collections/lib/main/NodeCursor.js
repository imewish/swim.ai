import { __extends } from "tslib";
import { Cursor } from "@swim/util";
var NodeCursor = (function (_super) {
    __extends(NodeCursor, _super);
    function NodeCursor(pages, index, pageIndex, pageCursor) {
        if (index === void 0) { index = 0; }
        if (pageIndex === void 0) { pageIndex = 0; }
        var _this = _super.call(this) || this;
        _this._pages = pages;
        _this._index = index;
        _this._pageIndex = pageIndex;
        _this._pageCursor = pageCursor;
        return _this;
    }
    NodeCursor.prototype.isEmpty = function () {
        do {
            if (this._pageCursor) {
                if (!this._pageCursor.isEmpty()) {
                    return false;
                }
                else {
                    this._pageCursor = void 0;
                }
            }
            else if (this._pageIndex < this._pages.length) {
                this._pageCursor = this.pageCursor(this._pages[this._pageIndex]);
                this._pageIndex += 1;
            }
            else {
                this._pageIndex = this._pages.length;
                return true;
            }
        } while (true);
    };
    NodeCursor.prototype.head = function () {
        do {
            if (this._pageCursor) {
                if (!this._pageCursor.isEmpty()) {
                    return this._pageCursor.head();
                }
                else {
                    this._pageCursor = void 0;
                }
            }
            else {
                if (this._pageIndex < this._pages.length) {
                    this._pageCursor = this.pageCursor(this._pages[this._pageIndex]);
                    this._pageIndex += 1;
                }
                else {
                    this._pageIndex = this._pages.length;
                    throw new Error("empty");
                }
            }
        } while (true);
    };
    NodeCursor.prototype.step = function () {
        do {
            if (this._pageCursor) {
                if (!this._pageCursor.isEmpty()) {
                    this._index += 1;
                    return;
                }
                else {
                    this._pageCursor = void 0;
                }
            }
            else {
                if (this._pageIndex < this._pages.length) {
                    this._pageCursor = this.pageCursor(this._pages[this._pageIndex]);
                    this._pageIndex += 1;
                }
                else {
                    this._pageIndex = this._pages.length;
                    throw new Error("empty");
                }
            }
        } while (true);
    };
    NodeCursor.prototype.skip = function (count) {
        while (count > 0) {
            if (this._pageCursor) {
                if (this._pageCursor.hasNext()) {
                    this._index += 1;
                    count -= 1;
                    this._pageCursor.next();
                }
                else {
                    this._pageCursor = void 0;
                }
            }
            else if (this._pageIndex < this._pages.length) {
                var page = this._pages[this._pageIndex];
                var pageSize = this.pageSize(page);
                this._pageIndex += 1;
                if (pageSize < count) {
                    this._pageCursor = this.pageCursor(page);
                    if (count > 0) {
                        this._index += count;
                        this._pageCursor.skip(count);
                        count = 0;
                    }
                    break;
                }
                else {
                    this._index += pageSize;
                    count -= pageSize;
                }
            }
            else {
                break;
            }
        }
    };
    NodeCursor.prototype.hasNext = function () {
        do {
            if (this._pageCursor) {
                if (this._pageCursor.hasNext()) {
                    return true;
                }
                else {
                    this._pageCursor = void 0;
                }
            }
            else if (this._pageIndex < this._pages.length) {
                this._pageCursor = this.pageCursor(this._pages[this._pageIndex]);
                this._pageIndex += 1;
            }
            else {
                this._pageIndex = this._pages.length;
                return false;
            }
        } while (true);
    };
    NodeCursor.prototype.nextIndex = function () {
        return this._index;
    };
    NodeCursor.prototype.next = function () {
        do {
            if (this._pageCursor) {
                if (this._pageCursor.hasNext()) {
                    this._index += 1;
                    return this._pageCursor.next();
                }
                else {
                    this._pageCursor = void 0;
                }
            }
            else {
                if (this._pageIndex < this._pages.length) {
                    this._pageCursor = this.pageCursor(this._pages[this._pageIndex]);
                    this._pageIndex += 1;
                }
                else {
                    this._pageIndex = this._pages.length;
                    return { done: true };
                }
            }
        } while (true);
    };
    NodeCursor.prototype.hasPrevious = function () {
        do {
            if (this._pageCursor) {
                if (this._pageCursor.hasPrevious()) {
                    return true;
                }
                else {
                    this._pageCursor = void 0;
                }
            }
            else if (this._pageIndex > 0) {
                this._pageCursor = this.reversePageCursor(this._pages[this._pageIndex - 1]);
                this._pageIndex -= 1;
            }
            else {
                this._pageIndex = 0;
                return false;
            }
        } while (true);
    };
    NodeCursor.prototype.previousIndex = function () {
        return this._index - 1;
    };
    NodeCursor.prototype.previous = function () {
        do {
            if (this._pageCursor) {
                if (this._pageCursor.hasPrevious()) {
                    this._index -= 1;
                    return this._pageCursor.previous();
                }
                else {
                    this._pageCursor = void 0;
                }
            }
            else if (this._pageIndex > 0) {
                this._pageCursor = this.reversePageCursor(this._pages[this._pageIndex - 1]);
                this._pageIndex -= 1;
            }
            else {
                this._pageIndex = 0;
                return { done: true };
            }
        } while (true);
    };
    NodeCursor.prototype.set = function (newValue) {
        this._pageCursor.set(newValue);
    };
    NodeCursor.prototype.delete = function () {
        this._pageCursor.delete();
    };
    return NodeCursor;
}(Cursor));
export { NodeCursor };
//# sourceMappingURL=NodeCursor.js.map