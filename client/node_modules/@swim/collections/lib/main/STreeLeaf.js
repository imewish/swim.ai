import { __extends } from "tslib";
import { Cursor } from "@swim/util";
import { STree } from "./STree";
import { STreePage } from "./STreePage";
var STreeLeaf = (function (_super) {
    __extends(STreeLeaf, _super);
    function STreeLeaf(slots) {
        var _this = _super.call(this) || this;
        _this._slots = slots;
        return _this;
    }
    Object.defineProperty(STreeLeaf.prototype, "arity", {
        get: function () {
            return this._slots.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(STreeLeaf.prototype, "size", {
        get: function () {
            return this._slots.length;
        },
        enumerable: true,
        configurable: true
    });
    STreeLeaf.prototype.isEmpty = function () {
        return this._slots.length === 0;
    };
    STreeLeaf.prototype.get = function (index) {
        var slot = this._slots[index];
        if (slot) {
            return slot[1];
        }
        else {
            return void 0;
        }
    };
    STreeLeaf.prototype.getEntry = function (index) {
        return this._slots[index];
    };
    STreeLeaf.prototype.updated = function (index, newValue, tree) {
        if (index < 0 || index >= this._slots.length) {
            throw new RangeError("" + index);
        }
        return this.updatedItem(index, newValue);
    };
    STreeLeaf.prototype.updatedItem = function (index, newValue) {
        var oldItems = this._slots;
        var oldSlot = oldItems[index];
        if (newValue !== oldSlot[1]) {
            var newValues = oldItems.slice(0);
            newValues[index] = [oldSlot[0], newValue];
            return new STreeLeaf(newValues);
        }
        else {
            return this;
        }
    };
    STreeLeaf.prototype.inserted = function (index, newValue, id, tree) {
        if (index < 0 || index > this._slots.length) {
            throw new RangeError("" + index);
        }
        return this.insertedItem(index, newValue, id, tree);
    };
    STreeLeaf.prototype.insertedItem = function (index, newValue, id, tree) {
        if (id === void 0) {
            id = tree.identify(newValue);
        }
        var oldSlots = this._slots;
        var newSlots = new Array(oldSlots.length + 1);
        for (var i = 0; i < index; i += 1) {
            newSlots[i] = oldSlots[i];
        }
        newSlots[index] = [id, newValue];
        for (var i = index; i < oldSlots.length; i += 1) {
            newSlots[i + 1] = oldSlots[i];
        }
        return new STreeLeaf(newSlots);
    };
    STreeLeaf.prototype.removed = function (index, tree) {
        if (index < 0 || index >= this._slots.length) {
            throw new RangeError("" + index);
        }
        if (this._slots.length > 1) {
            return this.removedSlot(index);
        }
        else {
            return STreePage.empty();
        }
    };
    STreeLeaf.prototype.removedSlot = function (index) {
        var oldSlots = this._slots;
        var newSlots = new Array(oldSlots.length - 1);
        for (var i = 0; i < index; i += 1) {
            newSlots[i] = oldSlots[i];
        }
        for (var i = index; i < newSlots.length; i += 1) {
            newSlots[i] = oldSlots[i + 1];
        }
        return new STreeLeaf(newSlots);
    };
    STreeLeaf.prototype.drop = function (lower, tree) {
        var oldSlots = this._slots;
        if (lower > 0 && oldSlots.length > 0) {
            if (lower < oldSlots.length) {
                var size = oldSlots.length - lower;
                var newSlots = new Array(size);
                for (var i = 0; i < size; i += 1) {
                    newSlots[i] = oldSlots[i + lower];
                }
                return new STreeLeaf(newSlots);
            }
            else {
                return STreePage.empty();
            }
        }
        else {
            return this;
        }
    };
    STreeLeaf.prototype.take = function (upper, tree) {
        var oldSlots = this._slots;
        if (upper < oldSlots.length && oldSlots.length > 0) {
            if (upper > 0) {
                var newSlots = new Array(upper);
                for (var i = 0; i < upper; i += 1) {
                    newSlots[i] = oldSlots[i];
                }
                return new STreeLeaf(newSlots);
            }
            else {
                return STreePage.empty();
            }
        }
        else {
            return this;
        }
    };
    STreeLeaf.prototype.balanced = function (tree) {
        var size = this._slots.length;
        if (size > 1 && tree.pageShouldSplit(this)) {
            return this.split(size >>> 1);
        }
        else {
            return this;
        }
    };
    STreeLeaf.prototype.split = function (index) {
        var newPages = new Array(2);
        var newLeftPage = this.splitLeft(index);
        var newRightPage = this.splitRight(index);
        newPages[0] = newLeftPage;
        newPages[1] = newRightPage;
        var newKnots = new Array(1);
        newKnots[0] = index;
        return new STree.Node(newPages, newKnots, this._slots.length);
    };
    STreeLeaf.prototype.splitLeft = function (index) {
        var oldSlots = this._slots;
        var newSlots = new Array(index);
        for (var i = 0; i < index; i += 1) {
            newSlots[i] = oldSlots[i];
        }
        return new STreeLeaf(newSlots);
    };
    STreeLeaf.prototype.splitRight = function (index) {
        var oldSlots = this._slots;
        var newSize = oldSlots.length - index;
        var newSlots = new Array(newSize);
        for (var i = 0; i < newSize; i += 1) {
            newSlots[i] = oldSlots[i + index];
        }
        return new STreeLeaf(newSlots);
    };
    STreeLeaf.prototype.forEach = function (callback, thisArg, offset, tree) {
        for (var i = 0; i < this._slots.length; i += 1) {
            var slot = this._slots[i];
            var result = callback.call(thisArg, slot[1], offset + i, tree, slot[0]);
            if (result !== void 0) {
                return result;
            }
        }
        return void 0;
    };
    STreeLeaf.prototype.entries = function () {
        return Cursor.array(this._slots);
    };
    STreeLeaf.prototype.reverseEntries = function () {
        return Cursor.array(this._slots, this._slots.length);
    };
    return STreeLeaf;
}(STreePage));
export { STreeLeaf };
STree.Leaf = STreeLeaf;
//# sourceMappingURL=STreeLeaf.js.map