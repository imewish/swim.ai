import { Cursor } from "@swim/util";
import { BTreeContext } from "./BTreeContext";
import { BTree } from "./BTree";
import { BTreePage } from "./BTreePage";
export declare class BTreeNode<K, V, U> extends BTreePage<K, V, U> {
    readonly _pages: BTreePage<K, V, U>[];
    readonly _knots: K[];
    readonly _fold: U | undefined;
    readonly _size: number;
    constructor(pages: BTreePage<K, V, U>[], knots: K[], fold: U | undefined, size: number);
    get arity(): number;
    get size(): number;
    isEmpty(): boolean;
    fold(): U | undefined;
    minKey(): K;
    maxKey(): K;
    has(key: K, tree: BTreeContext<K, V>): boolean;
    get(key: K, tree: BTreeContext<K, V>): V | undefined;
    getEntry(x: number): [K, V] | undefined;
    firstEntry(): [K, V] | undefined;
    lastEntry(): [K, V] | undefined;
    nextEntry(key: K, tree: BTreeContext<K, V>): [K, V] | undefined;
    previousEntry(key: K, tree: BTreeContext<K, V>): [K, V] | undefined;
    updated(key: K, newValue: V, tree: BTreeContext<K, V>): BTreeNode<K, V, U>;
    private updatedPage;
    private updatedPageSplit;
    private updatedPageMerge;
    removed(key: K, tree: BTreeContext<K, V>): BTreePage<K, V, U>;
    private replacedPage;
    private removedPage;
    drop(lower: number, tree: BTreeContext<K, V>): BTreePage<K, V, U>;
    take(upper: number, tree: BTreeContext<K, V>): BTreePage<K, V, U>;
    balanced(tree: BTreeContext<K, V>): BTreeNode<K, V, U>;
    split(x: number): BTreeNode<K, V, U>;
    splitLeft(x: number): BTreeNode<K, V, U>;
    splitRight(x: number): BTreeNode<K, V, U>;
    reduced(identity: U, accumulator: (result: U, element: V) => U, combiner: (result: U, result2: U) => U): BTreeNode<K, V, U>;
    forEach<T, S>(callback: (this: S, key: K, value: V, tree: BTree<K, V>) => T | void, thisArg: S, tree: BTree<K, V>): T | undefined;
    entries(): Cursor<[K, V]>;
    reverseEntries(): Cursor<[K, V]>;
    private lookup;
    protected newNode(pages: BTreePage<K, V, U>[], knots: K[], fold: U | undefined, size: number): BTreeNode<K, V, U>;
}
//# sourceMappingURL=BTreeNode.d.ts.map