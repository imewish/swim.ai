import { __extends } from "tslib";
import { STreeContext } from "./STreeContext";
var STree = (function (_super) {
    __extends(STree, _super);
    function STree(root) {
        if (root === void 0) { root = STree.Page.empty(); }
        var _this = _super.call(this) || this;
        _this.root = root;
        return _this;
    }
    Object.defineProperty(STree.prototype, "length", {
        get: function () {
            return this.root.size;
        },
        enumerable: true,
        configurable: true
    });
    STree.prototype.isEmpty = function () {
        return this.root.isEmpty();
    };
    STree.prototype.get = function (index, id) {
        if (id !== void 0) {
            index = this.lookup(id, index);
            if (index < 0) {
                return void 0;
            }
        }
        return this.root.get(index);
    };
    STree.prototype.getEntry = function (index, id) {
        if (id !== void 0) {
            index = this.lookup(id, index);
            if (index < 0) {
                return void 0;
            }
        }
        return this.root.getEntry(index);
    };
    STree.prototype.set = function (index, newValue, id) {
        if (id !== void 0) {
            index = this.lookup(id, index);
            if (index < 0) {
                throw new RangeError("" + id);
            }
        }
        var oldRoot = this.root;
        if (index < 0 || index >= oldRoot.size) {
            throw new RangeError("" + index);
        }
        this.root = oldRoot.updated(index, newValue, this);
        return this;
    };
    STree.prototype.insert = function (index, newValue, id) {
        var oldRoot = this.root;
        if (index < 0 || index > oldRoot.size) {
            throw new RangeError("" + index);
        }
        this.root = oldRoot.inserted(index, newValue, id, this).balanced(this);
        return this;
    };
    STree.prototype.remove = function (index, id) {
        if (id !== void 0) {
            index = this.lookup(id, index);
            if (index < 0) {
                throw new RangeError("" + id);
            }
        }
        var oldRoot = this.root;
        if (index < 0 || index > oldRoot.size) {
            throw new RangeError("" + index);
        }
        this.root = oldRoot.removed(index, this);
        return this;
    };
    STree.prototype.push = function () {
        var newValues = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newValues[_i] = arguments[_i];
        }
        var newRoot = this.root;
        for (var i = 0; i < newValues.length; i += 1) {
            newRoot = newRoot.inserted(newRoot.size, newValues[i], void 0, this).balanced(this);
        }
        this.root = newRoot;
        return newRoot.size;
    };
    STree.prototype.pop = function () {
        var oldRoot = this.root;
        var index = oldRoot.size - 1;
        if (index >= 0) {
            var oldValue = oldRoot.get(index);
            this.root = oldRoot.removed(index, this);
            return oldValue;
        }
        else {
            return void 0;
        }
    };
    STree.prototype.unshift = function () {
        var newValues = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newValues[_i] = arguments[_i];
        }
        var newRoot = this.root;
        for (var i = newValues.length - 1; i >= 0; i -= 1) {
            newRoot = newRoot.inserted(0, newValues[i], void 0, this).balanced(this);
        }
        this.root = newRoot;
        return newRoot.size;
    };
    STree.prototype.shift = function () {
        var oldRoot = this.root;
        if (oldRoot.size > 0) {
            var oldValue = oldRoot.get(0);
            this.root = oldRoot.removed(0, this);
            return oldValue;
        }
        else {
            return void 0;
        }
    };
    STree.prototype.move = function (fromIndex, toIndex, id) {
        if (id !== void 0) {
            fromIndex = this.lookup(id, fromIndex);
            if (fromIndex < 0) {
                throw new RangeError("" + id);
            }
        }
        var oldRoot = this.root;
        if (fromIndex < 0 || fromIndex >= oldRoot.size) {
            throw new RangeError("" + fromIndex);
        }
        if (toIndex < 0 || toIndex >= oldRoot.size) {
            throw new RangeError("" + toIndex);
        }
        if (fromIndex !== toIndex) {
            var entry = oldRoot.getEntry(fromIndex);
            this.root = oldRoot.removed(fromIndex, this)
                .inserted(toIndex, entry[1], entry[0], this)
                .balanced(this);
        }
        return this;
    };
    STree.prototype.splice = function (start, deleteCount) {
        var newValues = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newValues[_i - 2] = arguments[_i];
        }
        var newRoot = this.root;
        if (start < 0) {
            start = newRoot.size + start;
        }
        start = Math.min(Math.max(0, start), newRoot.size);
        if (deleteCount === void 0) {
            deleteCount = newRoot.size - start;
        }
        var deleted = [];
        for (var i = start, n = start + deleteCount; i < n; i += 1) {
            deleted.push(newRoot.get(start));
            newRoot = newRoot.removed(start, this);
        }
        for (var i = 0; i < newValues.length; i += 1) {
            newRoot = newRoot.inserted(start + i, newValues[i], void 0, this).balanced(this);
        }
        this.root = newRoot;
        return deleted;
    };
    STree.prototype.drop = function (lower) {
        var oldRoot = this.root;
        if (lower > 0 && oldRoot.size > 0) {
            if (lower < oldRoot.size) {
                this.root = oldRoot.drop(lower, this);
            }
            else {
                this.root = STree.Page.empty();
            }
        }
        return this;
    };
    STree.prototype.take = function (upper) {
        var oldRoot = this.root;
        if (upper < oldRoot.size && oldRoot.size > 0) {
            if (upper > 0) {
                this.root = oldRoot.take(upper, this);
            }
            else {
                this.root = STree.Page.empty();
            }
        }
        return this;
    };
    STree.prototype.clear = function () {
        this.root = STree.Page.empty();
    };
    STree.prototype.forEach = function (callback, thisArg) {
        return this.root.forEach(callback, thisArg, 0, this);
    };
    STree.prototype.keys = function () {
        return this.root.keys();
    };
    STree.prototype.values = function () {
        return this.root.values();
    };
    STree.prototype.entries = function () {
        return this.root.entries();
    };
    STree.prototype.reverseKeys = function () {
        return this.root.reverseKeys();
    };
    STree.prototype.reverseValues = function () {
        return this.root.reverseValues();
    };
    STree.prototype.reverseEntries = function () {
        return this.root.reverseEntries();
    };
    STree.prototype.clone = function () {
        return this.copy(this.root);
    };
    STree.prototype.copy = function (root) {
        var tree = new STree(root);
        if (tree.identify !== this.identify) {
            tree.identify = this.identify;
        }
        if (tree.compare !== this.compare) {
            tree.compare = this.compare;
        }
        if (tree.pageSplitSize !== this.pageSplitSize) {
            tree.pageSplitSize = this.pageSplitSize;
        }
        return tree;
    };
    STree.prototype.lookup = function (id, start) {
        if (start === void 0) { start = 0; }
        var root = this.root;
        start = Math.min(Math.max(0, start), root.size - 1);
        var index = start;
        do {
            var entry = root.getEntry(index);
            if (entry && this.compare(entry[0], id) === 0) {
                return index;
            }
            index = (index + 1) % root.size;
        } while (isFinite(index) && index !== start);
        return -1;
    };
    return STree;
}(STreeContext));
export { STree };
STree.prototype.pageSplitSize = 32;
//# sourceMappingURL=STree.js.map