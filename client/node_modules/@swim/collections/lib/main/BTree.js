import { __extends } from "tslib";
import { BTreeContext } from "./BTreeContext";
var BTree = (function (_super) {
    __extends(BTree, _super);
    function BTree(root) {
        if (root === void 0) { root = BTree.Page.empty(); }
        var _this = _super.call(this) || this;
        _this.root = root;
        return _this;
    }
    Object.defineProperty(BTree.prototype, "size", {
        get: function () {
            return this.root.size;
        },
        enumerable: true,
        configurable: true
    });
    BTree.prototype.isEmpty = function () {
        return this.root.isEmpty();
    };
    BTree.prototype.has = function (key) {
        return this.root.has(key, this);
    };
    BTree.prototype.get = function (key) {
        return this.root.get(key, this);
    };
    BTree.prototype.getEntry = function (index) {
        return this.root.getEntry(index);
    };
    BTree.prototype.firstKey = function () {
        var entry = this.root.firstEntry();
        if (entry) {
            return entry[0];
        }
        else {
            return void 0;
        }
    };
    BTree.prototype.firstValue = function () {
        var entry = this.root.firstEntry();
        if (entry) {
            return entry[1];
        }
        else {
            return void 0;
        }
    };
    BTree.prototype.firstEntry = function () {
        return this.root.firstEntry();
    };
    BTree.prototype.lastKey = function () {
        var entry = this.root.lastEntry();
        if (entry) {
            return entry[0];
        }
        else {
            return void 0;
        }
    };
    BTree.prototype.lastValue = function () {
        var entry = this.root.lastEntry();
        if (entry) {
            return entry[1];
        }
        else {
            return void 0;
        }
    };
    BTree.prototype.lastEntry = function () {
        return this.root.lastEntry();
    };
    BTree.prototype.nextKey = function (key) {
        var entry = this.root.nextEntry(key, this);
        if (entry) {
            return entry[0];
        }
        else {
            return void 0;
        }
    };
    BTree.prototype.nextValue = function (key) {
        var entry = this.root.nextEntry(key, this);
        if (entry) {
            return entry[1];
        }
        else {
            return void 0;
        }
    };
    BTree.prototype.nextEntry = function (key) {
        return this.root.nextEntry(key, this);
    };
    BTree.prototype.previousKey = function (key) {
        var entry = this.root.previousEntry(key, this);
        if (entry) {
            return entry[0];
        }
        else {
            return void 0;
        }
    };
    BTree.prototype.previousValue = function (key) {
        var entry = this.root.previousEntry(key, this);
        if (entry) {
            return entry[1];
        }
        else {
            return void 0;
        }
    };
    BTree.prototype.previousEntry = function (key) {
        return this.root.previousEntry(key, this);
    };
    BTree.prototype.set = function (key, newValue) {
        var oldRoot = this.root;
        var newRoot = this.root.updated(key, newValue, this);
        if (oldRoot !== newRoot) {
            if (newRoot.size > oldRoot.size) {
                newRoot = newRoot.balanced(this);
            }
            this.root = newRoot;
        }
        return this;
    };
    BTree.prototype.delete = function (key) {
        var oldRoot = this.root;
        var newRoot = this.root.removed(key, this);
        if (oldRoot !== newRoot) {
            this.root = newRoot;
            return true;
        }
        else {
            return false;
        }
    };
    BTree.prototype.drop = function (lower) {
        if (lower > 0 && this.root.size > 0) {
            if (lower < this.root.size) {
                this.root = this.root.drop(lower, this);
            }
            else {
                this.root = BTree.Page.empty();
            }
        }
        return this;
    };
    BTree.prototype.take = function (upper) {
        if (upper < this.root.size && this.root.size > 0) {
            if (upper > 0) {
                this.root = this.root.take(upper, this);
            }
            else {
                this.root = BTree.Page.empty();
            }
        }
        return this;
    };
    BTree.prototype.clear = function () {
        this.root = BTree.Page.empty();
    };
    BTree.prototype.updated = function (key, newValue) {
        var oldRoot = this.root;
        var newRoot = oldRoot.updated(key, newValue, this);
        if (oldRoot !== newRoot) {
            if (newRoot.size > oldRoot.size) {
                newRoot = newRoot.balanced(this);
            }
            return this.copy(newRoot);
        }
        else {
            return this;
        }
    };
    BTree.prototype.removed = function (key) {
        var oldRoot = this.root;
        var newRoot = oldRoot.removed(key, this);
        if (oldRoot !== newRoot) {
            return this.copy(newRoot);
        }
        else {
            return this;
        }
    };
    BTree.prototype.cleared = function () {
        if (!this.root.isEmpty()) {
            return this.copy(BTree.Page.empty());
        }
        else {
            return this;
        }
    };
    BTree.prototype.reduced = function (identity, accumulator, combiner) {
        var oldRoot = this.root;
        var newRoot = oldRoot.reduced(identity, accumulator, combiner);
        if (oldRoot !== newRoot) {
            this.root = newRoot;
        }
        return newRoot.fold();
    };
    BTree.prototype.forEach = function (callback, thisArg) {
        return this.root.forEach(callback, thisArg, this);
    };
    BTree.prototype.keys = function () {
        return this.root.keys();
    };
    BTree.prototype.values = function () {
        return this.root.values();
    };
    BTree.prototype.entries = function () {
        return this.root.entries();
    };
    BTree.prototype.reverseKeys = function () {
        return this.root.reverseKeys();
    };
    BTree.prototype.reverseValues = function () {
        return this.root.reverseValues();
    };
    BTree.prototype.reverseEntries = function () {
        return this.root.reverseEntries();
    };
    BTree.prototype.clone = function () {
        return this.copy(this.root);
    };
    BTree.prototype.copy = function (root) {
        var tree = new BTree(root);
        if (tree.compare !== this.compare) {
            tree.compare = this.compare;
        }
        if (tree.pageSplitSize !== this.pageSplitSize) {
            tree.pageSplitSize = this.pageSplitSize;
        }
        return tree;
    };
    return BTree;
}(BTreeContext));
export { BTree };
//# sourceMappingURL=BTree.js.map