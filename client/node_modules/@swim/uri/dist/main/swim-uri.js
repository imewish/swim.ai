(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@swim/codec'), require('@swim/util'), require('@swim/structure')) :
    typeof define === 'function' && define.amd ? define(['exports', '@swim/codec', '@swim/util', '@swim/structure'], factory) :
    (global = global || self, factory(global.swim = global.swim || {}, global.swim, global.swim, global.swim));
}(this, (function (exports, codec, util, structure) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var UriException = (function (_super) {
        __extends(UriException, _super);
        function UriException(message) {
            var _this = _super.call(this, message instanceof codec.Diagnostic ? message.message() || void 0 : message) || this;
            if (message instanceof codec.Diagnostic) {
                _this.diagnostic = message;
            }
            _this.__proto__ = UriException.prototype;
            return _this;
        }
        UriException.prototype.toString = function () {
            if (this.diagnostic) {
                return this.diagnostic.toString();
            }
            else {
                return _super.prototype.toString.call(this);
            }
        };
        return UriException;
    }(Error));

    var Uri = (function () {
        function Uri(scheme, authority, path, query, fragment) {
            this._scheme = scheme;
            this._authority = authority;
            this._path = path;
            this._query = query;
            this._fragment = fragment;
        }
        Uri.prototype.isDefined = function () {
            return this._scheme.isDefined() || this._authority.isDefined() || this._path.isDefined()
                || this._query.isDefined() || this._fragment.isDefined();
        };
        Uri.prototype.isEmpty = function () {
            return !this._scheme.isDefined() && !this._authority.isDefined() && this._path.isEmpty()
                && !this._query.isDefined() && !this._fragment.isDefined();
        };
        Uri.prototype.scheme = function (scheme) {
            if (scheme === void 0) {
                return this._scheme;
            }
            else {
                scheme = Uri.Scheme.fromAny(scheme);
                if (scheme !== this._scheme) {
                    return this.copy(scheme, this._authority, this._path, this._query, this._fragment);
                }
                else {
                    return this;
                }
            }
        };
        Uri.prototype.schemePart = function (scheme) {
            if (scheme === void 0) {
                return this._scheme.toString();
            }
            else {
                return this.scheme(Uri.Scheme.parse(scheme));
            }
        };
        Uri.prototype.schemeName = function (scheme) {
            if (scheme === void 0) {
                return this._scheme.name();
            }
            else {
                return this.scheme(Uri.Scheme.from(scheme));
            }
        };
        Uri.prototype.authority = function (authority) {
            if (authority === void 0) {
                return this._authority;
            }
            else {
                authority = Uri.Authority.fromAny(authority);
                if (authority !== this._authority) {
                    return this.copy(this._scheme, authority, this._path, this._query, this._fragment);
                }
                else {
                    return this;
                }
            }
        };
        Uri.prototype.authorityPart = function (authority) {
            if (authority === void 0) {
                return this._authority.toString();
            }
            else {
                return this.authority(Uri.Authority.parse(authority));
            }
        };
        Uri.prototype.user = function (user) {
            if (user === void 0) {
                return this._authority.user();
            }
            else {
                return this.authority(this._authority.user(user));
            }
        };
        Uri.prototype.userPart = function (user) {
            if (user === void 0) {
                return this._authority.userPart();
            }
            else {
                return this.authority(this._authority.userPart(user));
            }
        };
        Uri.prototype.username = function (username, password) {
            if (username === void 0) {
                return this._authority.username();
            }
            else {
                return this.authority(this._authority.username(username, password));
            }
        };
        Uri.prototype.password = function (password) {
            if (password === void 0) {
                return this._authority.password();
            }
            else {
                return this.authority(this._authority.password(password));
            }
        };
        Uri.prototype.host = function (host) {
            if (host === void 0) {
                return this._authority.host();
            }
            else {
                return this.authority(this._authority.host(host));
            }
        };
        Uri.prototype.hostPart = function (host) {
            if (host === void 0) {
                return this._authority.hostPart();
            }
            else {
                return this.authority(this._authority.hostPart(host));
            }
        };
        Uri.prototype.hostAddress = function () {
            return this._authority.hostAddress();
        };
        Uri.prototype.hostName = function (address) {
            if (address === void 0) {
                return this._authority.hostName();
            }
            else {
                return this.authority(this._authority.hostName(address));
            }
        };
        Uri.prototype.hostIPv4 = function (address) {
            if (address === void 0) {
                return this._authority.hostIPv4();
            }
            else {
                return this.authority(this._authority.hostIPv4(address));
            }
        };
        Uri.prototype.hostIPv6 = function (address) {
            if (address === void 0) {
                return this._authority.hostIPv6();
            }
            else {
                return this.authority(this._authority.hostIPv6(address));
            }
        };
        Uri.prototype.port = function (port) {
            if (port === void 0) {
                return this._authority.port();
            }
            else {
                return this.authority(this._authority.port(port));
            }
        };
        Uri.prototype.portPart = function (port) {
            if (port === void 0) {
                return this._authority.portPart();
            }
            else {
                return this.authority(this._authority.portPart(port));
            }
        };
        Uri.prototype.portNumber = function (port) {
            if (port === void 0) {
                return this._authority.portNumber();
            }
            else {
                return this.authority(this._authority.portNumber(port));
            }
        };
        Uri.prototype.path = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            if (arguments.length === 0) {
                return this._path;
            }
            else {
                var path = Uri.Path.from.apply(void 0, components);
                if (path !== this._path) {
                    return this.copy(this._scheme, this._authority, path, this._query, this._fragment);
                }
                else {
                    return this;
                }
            }
        };
        Uri.prototype.pathPart = function (path) {
            if (path === void 0) {
                return this._path.toString();
            }
            else {
                return this.path(Uri.Path.parse(path));
            }
        };
        Uri.prototype.pathName = function (name) {
            if (name === void 0) {
                return this._path.name();
            }
            else {
                return this.path(this._path.name(name));
            }
        };
        Uri.prototype.parentPath = function () {
            return this._path.parent();
        };
        Uri.prototype.basePath = function () {
            return this._path.base();
        };
        Uri.prototype.parent = function () {
            return Uri.from(this._scheme, this._authority, this._path.parent());
        };
        Uri.prototype.base = function () {
            return Uri.from(this._scheme, this._authority, this._path.base());
        };
        Uri.prototype.appendedPath = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            return this.path(this._path.appended.apply(this._path, arguments));
        };
        Uri.prototype.appendedSlash = function () {
            return this.path(this._path.appendedSlash());
        };
        Uri.prototype.appendedSegment = function (segment) {
            return this.path(this._path.appendedSegment(segment));
        };
        Uri.prototype.prependedPath = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            return this.path(this._path.prepended.apply(this._path, arguments));
        };
        Uri.prototype.prependedSlash = function () {
            return this.path(this._path.prependedSlash());
        };
        Uri.prototype.prependedSegment = function (segment) {
            return this.path(this._path.prependedSegment(segment));
        };
        Uri.prototype.query = function (query) {
            if (query === void 0) {
                return this._query;
            }
            else {
                query = Uri.Query.fromAny(query);
                if (query !== this._query) {
                    return this.copy(this._scheme, this._authority, this._path, query, this._fragment);
                }
                else {
                    return this;
                }
            }
        };
        Uri.prototype.queryPart = function (query) {
            if (query === void 0) {
                return this._query.toString();
            }
            else {
                return this.query(Uri.Query.parse(query));
            }
        };
        Uri.prototype.updatedQuery = function (key, value) {
            return this.query(this._query.updated(key, value));
        };
        Uri.prototype.removedQuery = function (key) {
            return this.query(this._query.removed(key));
        };
        Uri.prototype.appendedQuery = function (key, value) {
            return this.query(this._query.appended(key, value));
        };
        Uri.prototype.prependedQuery = function (key, value) {
            return this.query(this._query.prepended(key, value));
        };
        Uri.prototype.fragment = function (fragment) {
            if (fragment === void 0) {
                return this._fragment;
            }
            else {
                fragment = Uri.Fragment.fromAny(fragment);
                if (fragment !== this._fragment) {
                    return Uri.from(this._scheme, this._authority, this._path, this._query, fragment);
                }
                else {
                    return this;
                }
            }
        };
        Uri.prototype.fragmentPart = function (fragment) {
            if (fragment === void 0) {
                return this._fragment.toString();
            }
            else {
                return this.fragment(Uri.Fragment.parse(fragment));
            }
        };
        Uri.prototype.fragmentIdentifier = function (identifier) {
            if (identifier === void 0) {
                return this._fragment.identifier();
            }
            else {
                return this.fragment(Uri.Fragment.from(identifier));
            }
        };
        Uri.prototype.endpoint = function () {
            if (this._path.isDefined() || this._query.isDefined() || this._fragment.isDefined()) {
                return Uri.from(this._scheme, this._authority);
            }
            else {
                return this;
            }
        };
        Uri.prototype.resolve = function (relative) {
            relative = Uri.fromAny(relative);
            if (relative._scheme.isDefined()) {
                return this.copy(relative._scheme, relative._authority, relative._path.removeDotSegments(), relative._query, relative._fragment);
            }
            else if (relative._authority.isDefined()) {
                return this.copy(this._scheme, relative._authority, relative._path.removeDotSegments(), relative._query, relative._fragment);
            }
            else if (relative._path.isEmpty()) {
                return this.copy(this._scheme, this._authority, this._path, relative._query.isDefined() ? relative._query : this._query, relative._fragment);
            }
            else if (relative._path.isAbsolute()) {
                return this.copy(this._scheme, this._authority, relative._path.removeDotSegments(), relative._query, relative._fragment);
            }
            else {
                return this.copy(this._scheme, this._authority, this.merge(relative._path).removeDotSegments(), relative._query, relative._fragment);
            }
        };
        Uri.prototype.merge = function (relative) {
            if (this._authority.isDefined() && this._path.isEmpty()) {
                return relative.prependedSlash();
            }
            else if (this._path.isEmpty()) {
                return relative;
            }
            else {
                return this._path.merge(relative);
            }
        };
        Uri.prototype.unresolve = function (absolute) {
            absolute = Uri.fromAny(absolute);
            if (!this._scheme.equals(absolute._scheme) || !this._authority.equals(absolute._authority)) {
                return absolute;
            }
            else {
                return Uri.from(Uri.Scheme.undefined(), Uri.Authority.undefined(), this._path.unmerge(absolute._path), absolute._query, absolute._fragment);
            }
        };
        Uri.prototype.copy = function (scheme, authority, path, query, fragment) {
            return Uri.from(scheme, authority, path, query, fragment);
        };
        Uri.prototype.toAny = function () {
            var uri = {};
            uri.scheme = this._scheme.toAny();
            this._authority.toAny(uri);
            uri.path = this._path.toAny();
            uri.query = this._query.toAny();
            uri.fragment = this._fragment.toAny();
            return uri;
        };
        Uri.prototype.compareTo = function (that) {
            var order = this.toString().localeCompare(that.toString());
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        };
        Uri.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Uri) {
                return this.toString() === that.toString();
            }
            return false;
        };
        Uri.prototype.hashCode = function () {
            if (this._hashCode === void 0) {
                this._hashCode = util.Murmur3.hash(this.toString());
            }
            return this._hashCode;
        };
        Uri.prototype.debug = function (output) {
            output = output.write("Uri").write(46);
            if (this.isDefined()) {
                output = output.write("parse").write(40).write(34).display(this).write(34).write(41);
            }
            else {
                output = output.write("empty").write(40).write(41);
            }
        };
        Uri.prototype.display = function (output) {
            if (this._string != null) {
                output = output.write(this._string);
            }
            else {
                if (this._scheme.isDefined()) {
                    output.display(this._scheme).write(58);
                }
                if (this._authority.isDefined()) {
                    output = output.write(47).write(47).display(this._authority);
                }
                output.display(this._path);
                if (this._query.isDefined()) {
                    output = output.write(63).display(this._query);
                }
                if (this._fragment.isDefined()) {
                    output = output.write(35).display(this._fragment);
                }
            }
        };
        Uri.prototype.toString = function () {
            if (this._string === void 0) {
                this._string = codec.Format.display(this);
            }
            return this._string;
        };
        Uri.empty = function () {
            if (Uri._empty === void 0) {
                Uri._empty = new Uri(Uri.Scheme.undefined(), Uri.Authority.undefined(), Uri.Path.empty(), Uri.Query.undefined(), Uri.Fragment.undefined());
            }
            return Uri._empty;
        };
        Uri.from = function (scheme, authority, path, query, fragment) {
            if (scheme === void 0) { scheme = Uri.Scheme.undefined(); }
            if (authority === void 0) { authority = Uri.Authority.undefined(); }
            if (path === void 0) { path = Uri.Path.empty(); }
            if (query === void 0) { query = Uri.Query.undefined(); }
            if (fragment === void 0) { fragment = Uri.Fragment.undefined(); }
            if (scheme.isDefined() || authority.isDefined() || path.isDefined()
                || query.isDefined() || fragment.isDefined()) {
                return new Uri(scheme, authority, path, query, fragment);
            }
            else {
                return Uri.empty();
            }
        };
        Uri.fromAny = function (uri) {
            if (uri === null || uri === void 0) {
                return Uri.empty();
            }
            else if (uri instanceof Uri) {
                return uri;
            }
            else if (typeof uri === "object") {
                var scheme = Uri.Scheme.fromAny(uri.scheme);
                var authority = Uri.Authority.fromAny(uri.authority || uri);
                var path = Uri.Path.fromAny(uri.path);
                var query = Uri.Query.fromAny(uri.query);
                var fragment = Uri.Fragment.fromAny(uri.fragment);
                if (scheme.isDefined() || authority.isDefined() || path.isDefined()
                    || query.isDefined() || fragment.isDefined()) {
                    return new Uri(scheme, authority, path, query, fragment);
                }
                else {
                    return Uri.empty();
                }
            }
            else if (typeof uri === "string") {
                return Uri.parse(uri);
            }
            else {
                throw new TypeError("" + uri);
            }
        };
        Uri.scheme = function (scheme) {
            scheme = Uri.Scheme.fromAny(scheme);
            return Uri.from(scheme, void 0, void 0, void 0, void 0);
        };
        Uri.schemePart = function (part) {
            var scheme = Uri.Scheme.parse(part);
            return Uri.from(scheme, void 0, void 0, void 0, void 0);
        };
        Uri.schemeName = function (name) {
            var scheme = Uri.Scheme.from(name);
            return Uri.from(scheme, void 0, void 0, void 0, void 0);
        };
        Uri.authority = function (authority) {
            authority = Uri.Authority.fromAny(authority);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.authorityPart = function (part) {
            var authority = Uri.Authority.parse(part);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.user = function (user) {
            var authority = Uri.Authority.user(user);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.userPart = function (part) {
            var authority = Uri.Authority.userPart(part);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.username = function (username, password) {
            var authority = Uri.Authority.username(username, password);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.password = function (password) {
            var authority = Uri.Authority.password(password);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.host = function (host) {
            var authority = Uri.Authority.host(host);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.hostPart = function (part) {
            var authority = Uri.Authority.hostPart(part);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.hostName = function (address) {
            var authority = Uri.Authority.hostName(address);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.hostIPv4 = function (address) {
            var authority = Uri.Authority.hostIPv4(address);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.hostIPv6 = function (address) {
            var authority = Uri.Authority.hostIPv6(address);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.port = function (port) {
            var authority = Uri.Authority.port(port);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.portPart = function (part) {
            var authority = Uri.Authority.portPart(part);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.portNumber = function (number) {
            var authority = Uri.Authority.portNumber(number);
            return Uri.from(void 0, authority, void 0, void 0, void 0);
        };
        Uri.path = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            var path = Uri.Path.from.apply(void 0, components);
            return Uri.from(void 0, void 0, path, void 0, void 0);
        };
        Uri.pathPart = function (part) {
            var path = Uri.Path.parse(part);
            return Uri.from(void 0, void 0, path, void 0, void 0);
        };
        Uri.query = function (query) {
            query = Uri.Query.fromAny(query);
            return Uri.from(void 0, void 0, void 0, query, void 0);
        };
        Uri.queryPart = function (part) {
            var query = Uri.Query.parse(part);
            return Uri.from(void 0, void 0, void 0, query, void 0);
        };
        Uri.fragment = function (fragment) {
            fragment = Uri.Fragment.fromAny(fragment);
            return Uri.from(void 0, void 0, void 0, void 0, fragment);
        };
        Uri.fragmentPart = function (part) {
            var fragment = Uri.Fragment.parse(part);
            return Uri.from(void 0, void 0, void 0, void 0, fragment);
        };
        Uri.fragmentIdentifier = function (identifier) {
            var fragment = Uri.Fragment.from(identifier);
            return Uri.from(void 0, void 0, void 0, void 0, fragment);
        };
        Uri.standardParser = function () {
            if (!this._standardParser) {
                this._standardParser = new Uri.Parser();
            }
            return this._standardParser;
        };
        Uri.parse = function (string) {
            return Uri.standardParser().parseAbsoluteString(string);
        };
        Uri.isUnreservedChar = function (c) {
            return c >= 65 && c <= 90
                || c >= 97 && c <= 122
                || c >= 48 && c <= 57
                || c === 45 || c === 46
                || c === 95 || c === 126;
        };
        Uri.isSubDelimChar = function (c) {
            return c === 33 || c === 36
                || c === 38 || c === 40
                || c === 41 || c === 42
                || c === 43 || c === 44
                || c === 59 || c === 61
                || c === 39;
        };
        Uri.isSchemeChar = function (c) {
            return c >= 65 && c <= 90
                || c >= 97 && c <= 122
                || c >= 48 && c <= 57
                || c === 43 || c === 45
                || c === 46;
        };
        Uri.isUserInfoChar = function (c) {
            return Uri.isUnreservedChar(c)
                || Uri.isSubDelimChar(c)
                || c === 58;
        };
        Uri.isUserChar = function (c) {
            return Uri.isUnreservedChar(c)
                || Uri.isSubDelimChar(c);
        };
        Uri.isHostChar = function (c) {
            return Uri.isUnreservedChar(c)
                || Uri.isSubDelimChar(c);
        };
        Uri.isPathChar = function (c) {
            return Uri.isUnreservedChar(c)
                || Uri.isSubDelimChar(c)
                || c === 58 || c === 64;
        };
        Uri.isQueryChar = function (c) {
            return Uri.isUnreservedChar(c)
                || Uri.isSubDelimChar(c)
                || c === 47 || c === 58
                || c === 63 || c === 64;
        };
        Uri.isParamChar = function (c) {
            return Uri.isUnreservedChar(c)
                || c === 33 || c === 36
                || c === 40 || c === 41
                || c === 42 || c === 43
                || c === 44 || c === 47
                || c === 58 || c === 59
                || c === 63 || c === 64
                || c === 39;
        };
        Uri.isFragmentChar = function (c) {
            return Uri.isUnreservedChar(c)
                || Uri.isSubDelimChar(c)
                || c === 47 || c === 58
                || c === 63 || c === 64;
        };
        Uri.isAlpha = function (c) {
            return c >= 65 && c <= 90
                || c >= 97 && c <= 122;
        };
        Uri.toLowerCase = function (c) {
            if (c >= 65 && c <= 90) {
                return c + (97 - 65);
            }
            else {
                return c;
            }
        };
        Uri.writeScheme = function (scheme, output) {
            for (var i = 0, n = scheme.length; i < n; i += 1) {
                var c = scheme.charCodeAt(i);
                if (i > 0 && Uri.isSchemeChar(c) || i === 0 && Uri.isAlpha(c)) {
                    output = output.write(c);
                }
                else {
                    throw new UriException("Invalid scheme: " + scheme);
                }
            }
        };
        Uri.writeUserInfo = function (userInfo, output) {
            for (var i = 0, n = userInfo.length; i < n; i += 1) {
                var c = userInfo.charCodeAt(i);
                if (Uri.isUserInfoChar(c)) {
                    output = output.write(c);
                }
                else {
                    Uri.writeEncoded(c, output);
                }
            }
        };
        Uri.writeUser = function (user, output) {
            for (var i = 0, n = user.length; i < n; i += 1) {
                var c = user.charCodeAt(i);
                if (Uri.isUserChar(c)) {
                    output = output.write(c);
                }
                else {
                    Uri.writeEncoded(c, output);
                }
            }
        };
        Uri.writeHost = function (address, output) {
            for (var i = 0, n = address.length; i < n; i += 1) {
                var c = address.charCodeAt(i);
                if (Uri.isHostChar(c)) {
                    output = output.write(c);
                }
                else {
                    Uri.writeEncoded(c, output);
                }
            }
        };
        Uri.writeHostLiteral = function (address, output) {
            for (var i = 0, n = address.length; i < n; i += 1) {
                var c = address.charCodeAt(i);
                if (Uri.isHostChar(c) || c === 58) {
                    output = output.write(c);
                }
                else {
                    Uri.writeEncoded(c, output);
                }
            }
        };
        Uri.writePathSegment = function (segment, output) {
            for (var i = 0, n = segment.length; i < n; i += 1) {
                var c = segment.charCodeAt(i);
                if (Uri.isPathChar(c)) {
                    output = output.write(c);
                }
                else {
                    Uri.writeEncoded(c, output);
                }
            }
        };
        Uri.writeQuery = function (query, output) {
            for (var i = 0, n = query.length; i < n; i += 1) {
                var c = query.charCodeAt(i);
                if (Uri.isQueryChar(c)) {
                    output = output.write(c);
                }
                else {
                    Uri.writeEncoded(c, output);
                }
            }
        };
        Uri.writeParam = function (param, output) {
            for (var i = 0, n = param.length; i < n; i += 1) {
                var c = param.charCodeAt(i);
                if (Uri.isParamChar(c)) {
                    output = output.write(c);
                }
                else {
                    Uri.writeEncoded(c, output);
                }
            }
        };
        Uri.writeFragment = function (fragment, output) {
            for (var i = 0, n = fragment.length; i < n; i += 1) {
                var c = fragment.charCodeAt(i);
                if (Uri.isFragmentChar(c)) {
                    output = output.write(c);
                }
                else {
                    Uri.writeEncoded(c, output);
                }
            }
        };
        Uri.writeEncoded = function (c, output) {
            if (c === 0x00) {
                Uri.writePctEncoded(0xC0, output);
                Uri.writePctEncoded(0x80, output);
            }
            else if (c >= 0x00 && c <= 0x7F) {
                Uri.writePctEncoded(c, output);
            }
            else if (c >= 0x80 && c <= 0x07FF) {
                Uri.writePctEncoded(0xC0 | (c >>> 6), output);
                Uri.writePctEncoded(0x80 | (c & 0x3F), output);
            }
            else if (c >= 0x0800 && c <= 0xFFFF
                || c >= 0xE000 && c <= 0xFFFF) {
                Uri.writePctEncoded(0xE0 | (c >>> 12), output);
                Uri.writePctEncoded(0x80 | (c >>> 6 & 0x3F), output);
                Uri.writePctEncoded(0x80 | (c & 0x3F), output);
            }
            else if (c >= 0x10000 && c <= 0x10FFFF) {
                Uri.writePctEncoded(0xF0 | (c >>> 18), output);
                Uri.writePctEncoded(0x80 | (c >>> 12 & 0x3F), output);
                Uri.writePctEncoded(0x80 | (c >>> 6 & 0x3F), output);
                Uri.writePctEncoded(0x80 | (c & 0x3F), output);
            }
            else {
                Uri.writePctEncoded(0xEF, output);
                Uri.writePctEncoded(0xBF, output);
                Uri.writePctEncoded(0xBD, output);
            }
        };
        Uri.writePctEncoded = function (c, output) {
            output = output.write(37)
                .write(codec.Base16.lowercase().encodeDigit(c >>> 4 & 0xF))
                .write(codec.Base16.lowercase().encodeDigit(c & 0xF));
        };
        Uri.form = function () {
            if (!Uri._form) {
                Uri._form = new Uri.Form(Uri.empty());
            }
            return Uri._form;
        };
        return Uri;
    }());

    var UriScheme = (function () {
        function UriScheme(name) {
            this._name = name;
        }
        UriScheme.prototype.isDefined = function () {
            return this._name.length !== 0;
        };
        UriScheme.prototype.name = function () {
            return this._name;
        };
        UriScheme.prototype.toAny = function () {
            return this._name.length !== 0 ? this._name : void 0;
        };
        UriScheme.prototype.compareTo = function (that) {
            var order = this._name.localeCompare(that._name);
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        };
        UriScheme.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UriScheme) {
                return this._name === that._name;
            }
            return false;
        };
        UriScheme.prototype.hashCode = function () {
            return util.Murmur3.hash(this._name);
        };
        UriScheme.prototype.debug = function (output) {
            output = output.write("UriScheme").write(46);
            if (this.isDefined()) {
                output = output.write("parse").write(40).write(34).display(this).write(34).write(41);
            }
            else {
                output = output.write("undefined").write(40).write(41);
            }
        };
        UriScheme.prototype.display = function (output) {
            Uri.writeScheme(this._name, output);
        };
        UriScheme.prototype.toString = function () {
            return this._name;
        };
        UriScheme.undefined = function () {
            if (UriScheme._undefined === void 0) {
                UriScheme._undefined = new UriScheme("");
            }
            return UriScheme._undefined;
        };
        UriScheme.from = function (name) {
            var cache = UriScheme.cache();
            var scheme = cache.get(name);
            if (scheme) {
                return scheme;
            }
            else {
                return cache.put(name, new UriScheme(name));
            }
        };
        UriScheme.fromAny = function (scheme) {
            if (scheme === null || scheme === void 0) {
                return UriScheme.undefined();
            }
            else if (scheme instanceof UriScheme) {
                return scheme;
            }
            else if (typeof scheme === "string") {
                return UriScheme.parse(scheme);
            }
            else {
                throw new TypeError("" + scheme);
            }
        };
        UriScheme.parse = function (string) {
            return Uri.standardParser().parseSchemeString(string);
        };
        UriScheme.cache = function () {
            if (UriScheme._cache === void 0) {
                var cacheSize = 4;
                UriScheme._cache = new util.HashGenCacheMap(cacheSize);
            }
            return UriScheme._cache;
        };
        return UriScheme;
    }());
    Uri.Scheme = UriScheme;

    var UriAuthority = (function () {
        function UriAuthority(user, host, port) {
            this._user = user;
            this._host = host;
            this._port = port;
        }
        UriAuthority.prototype.isDefined = function () {
            return this._user.isDefined() || this._host.isDefined() || this._port.isDefined();
        };
        UriAuthority.prototype.user = function (user) {
            if (user === void 0) {
                return this._user;
            }
            else {
                user = Uri.User.fromAny(user);
                if (user !== this._user) {
                    return this.copy(user, this._host, this._port);
                }
                else {
                    return this;
                }
            }
        };
        UriAuthority.prototype.userPart = function (user) {
            if (user === void 0) {
                return this._user.toString();
            }
            else {
                return this.user(Uri.User.parse(user));
            }
        };
        UriAuthority.prototype.username = function (username, password) {
            if (username === void 0) {
                return this._user._username || "";
            }
            else if (password === void 0) {
                return this.user(this._user.username(username));
            }
            else {
                return this.user(Uri.User.from(username, password));
            }
        };
        UriAuthority.prototype.password = function (password) {
            if (password === void 0) {
                return this._user.password();
            }
            else {
                return this.user(this._user.password(password));
            }
        };
        UriAuthority.prototype.host = function (host) {
            if (host === void 0) {
                return this._host;
            }
            else {
                host = Uri.Host.fromAny(host);
                if (host !== this._host) {
                    return this.copy(this._user, host, this._port);
                }
                else {
                    return this;
                }
            }
        };
        UriAuthority.prototype.hostPart = function (host) {
            if (host === void 0) {
                return this._host.toString();
            }
            else {
                return this.host(Uri.Host.parse(host));
            }
        };
        UriAuthority.prototype.hostAddress = function () {
            return this._host.address();
        };
        UriAuthority.prototype.hostName = function (address) {
            if (address === void 0) {
                return this._host.name();
            }
            else {
                return this.host(Uri.Host.from(address));
            }
        };
        UriAuthority.prototype.hostIPv4 = function (address) {
            if (address === void 0) {
                return this._host.ipv4();
            }
            else {
                return this.host(Uri.Host.ipv4(address));
            }
        };
        UriAuthority.prototype.hostIPv6 = function (address) {
            if (address === void 0) {
                return this._host.ipv6();
            }
            else {
                return this.host(Uri.Host.ipv6(address));
            }
        };
        UriAuthority.prototype.port = function (port) {
            if (port === void 0) {
                return this._port;
            }
            else {
                port = Uri.Port.fromAny(port);
                if (port !== this._port) {
                    return this.copy(this._user, this._host, port);
                }
                else {
                    return this;
                }
            }
        };
        UriAuthority.prototype.portPart = function (port) {
            if (port === void 0) {
                return this._port.toString();
            }
            else {
                return this.port(Uri.Port.parse(port));
            }
        };
        UriAuthority.prototype.portNumber = function (port) {
            if (port === void 0) {
                return this._port.number();
            }
            else {
                return this.port(Uri.Port.from(port));
            }
        };
        UriAuthority.prototype.copy = function (user, host, port) {
            return UriAuthority.from(user, host, port);
        };
        UriAuthority.prototype.toAny = function (authority) {
            if (this.isDefined()) {
                authority = authority || {};
                this._user.toAny(authority);
                if (this._host.isDefined()) {
                    authority.host = this._host.toAny();
                }
                if (this._port.isDefined()) {
                    authority.port = this._port.toAny();
                }
            }
            return authority;
        };
        UriAuthority.prototype.compareTo = function (that) {
            var order = this.toString().localeCompare(that.toString());
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        };
        UriAuthority.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UriAuthority) {
                return this.toString() === that.toString();
            }
            return false;
        };
        UriAuthority.prototype.hashCode = function () {
            if (this._hashCode === void 0) {
                this._hashCode = util.Murmur3.hash(this.toString());
            }
            return this._hashCode;
        };
        UriAuthority.prototype.debug = function (output) {
            output = output.write("UriAuthority").write(46);
            if (this.isDefined()) {
                output = output.write("parse").write(40).write(34).display(this).write(34).write(41);
            }
            else {
                output = output.write("undefined").write(40).write(41);
            }
        };
        UriAuthority.prototype.display = function (output) {
            if (this._string !== void 0) {
                output = output.write(this._string);
            }
            else {
                if (this._user.isDefined()) {
                    output.display(this._user).write(64);
                }
                output.display(this._host);
                if (this._port.isDefined()) {
                    output = output.write(58).display(this._port);
                }
            }
        };
        UriAuthority.prototype.toString = function () {
            if (this._string === void 0) {
                this._string = codec.Format.display(this);
            }
            return this._string;
        };
        UriAuthority.undefined = function () {
            if (UriAuthority._undefined === void 0) {
                UriAuthority._undefined = new UriAuthority(Uri.User.undefined(), Uri.Host.undefined(), Uri.Port.undefined());
            }
            return UriAuthority._undefined;
        };
        UriAuthority.from = function (user, host, port) {
            if (user === void 0) { user = Uri.User.undefined(); }
            if (host === void 0) { host = Uri.Host.undefined(); }
            if (port === void 0) { port = Uri.Port.undefined(); }
            if (user.isDefined() || host.isDefined() || port.isDefined()) {
                return new UriAuthority(user, host, port);
            }
            else {
                return UriAuthority.undefined();
            }
        };
        UriAuthority.fromAny = function (authority) {
            if (authority === null || authority === void 0) {
                return UriAuthority.undefined();
            }
            else if (authority instanceof UriAuthority) {
                return authority;
            }
            else if (typeof authority === "object") {
                var user = Uri.User.fromAny(authority.user || authority);
                var host = Uri.Host.fromAny(authority.host);
                var port = Uri.Port.fromAny(authority.port);
                return UriAuthority.from(user, host, port);
            }
            else if (typeof authority === "string") {
                return UriAuthority.parse(authority);
            }
            else {
                throw new TypeError("" + authority);
            }
        };
        UriAuthority.user = function (user) {
            user = Uri.User.fromAny(user);
            return UriAuthority.from(user, void 0, void 0);
        };
        UriAuthority.userPart = function (part) {
            var user = Uri.User.parse(part);
            return UriAuthority.from(user, void 0, void 0);
        };
        UriAuthority.username = function (username, password) {
            var user = Uri.User.from(username, password);
            return UriAuthority.from(user, void 0, void 0);
        };
        UriAuthority.password = function (password) {
            var user = Uri.User.from("", password);
            return UriAuthority.from(user, void 0, void 0);
        };
        UriAuthority.host = function (host) {
            host = Uri.Host.fromAny(host);
            return UriAuthority.from(void 0, host, void 0);
        };
        UriAuthority.hostPart = function (part) {
            var host = Uri.Host.parse(part);
            return UriAuthority.from(void 0, host, void 0);
        };
        UriAuthority.hostName = function (address) {
            var host = Uri.Host.from(address);
            return UriAuthority.from(void 0, host, void 0);
        };
        UriAuthority.hostIPv4 = function (address) {
            var host = Uri.Host.ipv4(address);
            return UriAuthority.from(void 0, host, void 0);
        };
        UriAuthority.hostIPv6 = function (address) {
            var host = Uri.Host.ipv6(address);
            return UriAuthority.from(void 0, host, void 0);
        };
        UriAuthority.port = function (port) {
            port = Uri.Port.fromAny(port);
            return UriAuthority.from(void 0, void 0, port);
        };
        UriAuthority.portPart = function (part) {
            var port = Uri.Port.parse(part);
            return UriAuthority.from(void 0, void 0, port);
        };
        UriAuthority.portNumber = function (number) {
            var port = Uri.Port.from(number);
            return UriAuthority.from(void 0, void 0, port);
        };
        UriAuthority.parse = function (string) {
            return Uri.standardParser().parseAuthorityString(string);
        };
        return UriAuthority;
    }());
    Uri.Authority = UriAuthority;

    var UriUser = (function () {
        function UriUser(username, password) {
            this._username = username;
            this._password = password;
        }
        UriUser.prototype.isDefined = function () {
            return this._username !== null;
        };
        UriUser.prototype.username = function (username) {
            if (username === void 0) {
                return this._username || "";
            }
            else {
                if (username !== this._username) {
                    return this.copy(username, this._password);
                }
                else {
                    return this;
                }
            }
        };
        UriUser.prototype.password = function (password) {
            if (password === void 0) {
                return this._password;
            }
            else {
                if (password !== this._password) {
                    return this.copy(this._username, password);
                }
                else {
                    return this;
                }
            }
        };
        UriUser.prototype.copy = function (username, password) {
            return UriUser.from(username, password);
        };
        UriUser.prototype.toAny = function (user) {
            if (this._username !== null) {
                user = user || {};
                user.username = this._username;
                if (this._password !== null) {
                    user.password = this._password;
                }
            }
            return user;
        };
        UriUser.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UriUser) {
                return this._username === that._username && this._password === that._password;
            }
            return false;
        };
        UriUser.prototype.hashCode = function () {
            if (UriUser._hashSeed === void 0) {
                UriUser._hashSeed = util.Murmur3.seed(UriUser);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(UriUser._hashSeed, util.Murmur3.hash(this._username)), util.Murmur3.hash(this._password)));
        };
        UriUser.prototype.debug = function (output) {
            output = output.write("UriUser").write(46);
            if (this.isDefined()) {
                output = output.write("parse").write(40).write(34).display(this).write(34).write(41);
            }
            else {
                output = output.write("undefined").write(40).write(41);
            }
        };
        UriUser.prototype.display = function (output) {
            if (this._username != null) {
                Uri.writeUser(this._username, output);
                if (this._password != null) {
                    output = output.write(58);
                    Uri.writeUser(this._password, output);
                }
            }
        };
        UriUser.prototype.toString = function () {
            return codec.Format.display(this);
        };
        UriUser.undefined = function () {
            if (UriUser._undefined === void 0) {
                UriUser._undefined = new UriUser(null, null);
            }
            return UriUser._undefined;
        };
        UriUser.from = function (username, password) {
            if (password === void 0) { password = null; }
            if (username !== null || password !== null) {
                return new UriUser(username || "", password);
            }
            else {
                return UriUser.undefined();
            }
        };
        UriUser.fromAny = function (user) {
            if (user === null || user === void 0) {
                return UriUser.undefined();
            }
            else if (user instanceof UriUser) {
                return user;
            }
            else if (typeof user === "object") {
                var username = typeof user.username === "string" ? user.username : null;
                var password = typeof user.password === "string" ? user.password : null;
                return UriUser.from(username, password);
            }
            else if (typeof user === "string") {
                return UriUser.parse(user);
            }
            else {
                throw new TypeError("" + user);
            }
        };
        UriUser.parse = function (string) {
            return Uri.standardParser().parseUserString(string);
        };
        return UriUser;
    }());
    Uri.User = UriUser;

    var UriHost = (function () {
        function UriHost() {
        }
        UriHost.prototype.isDefined = function () {
            return true;
        };
        UriHost.prototype.name = function () {
            return null;
        };
        UriHost.prototype.ipv4 = function () {
            return null;
        };
        UriHost.prototype.ipv6 = function () {
            return null;
        };
        UriHost.prototype.toAny = function () {
            return this.toString();
        };
        UriHost.prototype.compareTo = function (that) {
            var order = this.toString().localeCompare(that.toString());
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        };
        UriHost.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UriHost) {
                return this.toString() === that.toString();
            }
            return false;
        };
        UriHost.prototype.hashCode = function () {
            if (this._hashCode === void 0) {
                this._hashCode = util.Murmur3.hash(this.toString());
            }
            return this._hashCode;
        };
        UriHost.undefined = function () {
            if (UriHost._undefined === void 0) {
                UriHost._undefined = new Uri.HostUndefined();
            }
            return UriHost._undefined;
        };
        UriHost.from = function (address) {
            var cache = UriHost.cache();
            var host = cache.get(address);
            if (host instanceof Uri.HostName) {
                return host;
            }
            else {
                return cache.put(address, new Uri.HostName(address));
            }
        };
        UriHost.ipv4 = function (address) {
            var cache = UriHost.cache();
            var host = cache.get(address);
            if (host instanceof Uri.HostIPv4) {
                return host;
            }
            else {
                return cache.put(address, new Uri.HostIPv4(address));
            }
        };
        UriHost.ipv6 = function (address) {
            var cache = UriHost.cache();
            var host = cache.get(address);
            if (host instanceof Uri.HostIPv6) {
                return host;
            }
            else {
                return cache.put(address, new Uri.HostIPv6(address));
            }
        };
        UriHost.fromAny = function (host) {
            if (host === null || host === void 0) {
                return UriHost.undefined();
            }
            else if (host instanceof UriHost) {
                return host;
            }
            else if (typeof host === "string") {
                return UriHost.parse(host);
            }
            else {
                throw new TypeError("" + host);
            }
        };
        UriHost.parse = function (string) {
            return Uri.standardParser().parseHostString(string);
        };
        UriHost.cache = function () {
            if (UriHost._cache === void 0) {
                var cacheSize = 16;
                UriHost._cache = new util.HashGenCacheMap(cacheSize);
            }
            return UriHost._cache;
        };
        return UriHost;
    }());
    Uri.Host = UriHost;

    var UriHostName = (function (_super) {
        __extends(UriHostName, _super);
        function UriHostName(address) {
            var _this = _super.call(this) || this;
            _this._address = address;
            return _this;
        }
        UriHostName.prototype.address = function () {
            return this._address;
        };
        UriHostName.prototype.name = function () {
            return this._address;
        };
        UriHostName.prototype.debug = function (output) {
            output = output.write("UriHost").write(46).write("from")
                .write(40).debug(this._address).write(41);
        };
        UriHostName.prototype.display = function (output) {
            Uri.writeHost(this._address, output);
        };
        UriHostName.prototype.toString = function () {
            return this._address;
        };
        return UriHostName;
    }(UriHost));
    Uri.HostName = UriHostName;

    var UriHostIPv4 = (function (_super) {
        __extends(UriHostIPv4, _super);
        function UriHostIPv4(address) {
            var _this = _super.call(this) || this;
            _this._address = address;
            return _this;
        }
        UriHostIPv4.prototype.address = function () {
            return this._address;
        };
        UriHostIPv4.prototype.ipv4 = function () {
            return this._address;
        };
        UriHostIPv4.prototype.debug = function (output) {
            output = output.write("UriHost").write(46).write("ipv4")
                .write(40).debug(this._address).write(41);
        };
        UriHostIPv4.prototype.display = function (output) {
            Uri.writeHost(this._address, output);
        };
        UriHostIPv4.prototype.toString = function () {
            return this._address;
        };
        return UriHostIPv4;
    }(UriHost));
    Uri.HostIPv4 = UriHostIPv4;

    var UriHostIPv6 = (function (_super) {
        __extends(UriHostIPv6, _super);
        function UriHostIPv6(address) {
            var _this = _super.call(this) || this;
            _this._address = address;
            return _this;
        }
        UriHostIPv6.prototype.address = function () {
            return this._address;
        };
        UriHostIPv6.prototype.ipv6 = function () {
            return this._address;
        };
        UriHostIPv6.prototype.debug = function (output) {
            output = output.write("UriHost").write(46).write("ipv6")
                .write(40).debug(this._address).write(41);
        };
        UriHostIPv6.prototype.display = function (output) {
            if (this._string != null) {
                output = output.write(this._string);
            }
            else {
                output = output.write(91);
                Uri.writeHostLiteral(this._address, output);
                output = output.write(93);
            }
        };
        UriHostIPv6.prototype.toString = function () {
            if (this._string == null) {
                this._string = "[" + this.address + "]";
            }
            return this._string;
        };
        return UriHostIPv6;
    }(UriHost));
    Uri.HostIPv6 = UriHostIPv6;

    var UriHostUndefined = (function (_super) {
        __extends(UriHostUndefined, _super);
        function UriHostUndefined() {
            return _super.call(this) || this;
        }
        UriHostUndefined.prototype.isDefined = function () {
            return false;
        };
        UriHostUndefined.prototype.address = function () {
            return "";
        };
        UriHostUndefined.prototype.debug = function (output) {
            output = output.write("UriHost").write(46).write("undefined")
                .write(40).write(41);
        };
        UriHostUndefined.prototype.display = function (output) {
        };
        UriHostUndefined.prototype.toString = function () {
            return "";
        };
        return UriHostUndefined;
    }(UriHost));
    Uri.HostUndefined = UriHostUndefined;

    var UriPort = (function () {
        function UriPort(num) {
            this._number = num;
        }
        UriPort.prototype.isDefined = function () {
            return this._number !== 0;
        };
        UriPort.prototype.number = function () {
            return this._number;
        };
        UriPort.prototype.valueOf = function () {
            return this._number;
        };
        UriPort.prototype.toAny = function () {
            return this._number;
        };
        UriPort.prototype.compareTo = function (that) {
            return this._number < that._number ? -1 : this._number > that._number ? 1 : 0;
        };
        UriPort.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UriPort) {
                return this._number === that._number;
            }
            return false;
        };
        UriPort.prototype.hashCode = function () {
            if (UriPort._hashSeed === void 0) {
                UriPort._hashSeed = util.Murmur3.seed(UriPort);
            }
            return util.Murmur3.mash(util.Murmur3.mix(UriPort._hashSeed, this._number));
        };
        UriPort.prototype.debug = function (output) {
            output = output.write("UriPort").write(46);
            if (this.isDefined()) {
                output = output.write("from").write(40);
                codec.Format.displayNumber(this._number, output);
                output = output.write(41);
            }
            else {
                output = output.write("undefined").write(40).write(41);
            }
        };
        UriPort.prototype.display = function (output) {
            codec.Format.displayNumber(this._number, output);
        };
        UriPort.prototype.toString = function () {
            return "" + this._number;
        };
        UriPort.undefined = function () {
            if (UriPort._undefined === void 0) {
                UriPort._undefined = new UriPort(0);
            }
            return UriPort._undefined;
        };
        UriPort.from = function (number) {
            if (number > 0) {
                var cache = UriPort.cache();
                var port = cache.get(number);
                if (port !== void 0) {
                    return port;
                }
                else {
                    return cache.put(number, new UriPort(number));
                }
            }
            else if (number === 0) {
                return UriPort.undefined();
            }
            else {
                throw new TypeError("" + number);
            }
        };
        UriPort.fromAny = function (port) {
            if (port === null || port === void 0) {
                return UriPort.undefined();
            }
            else if (port instanceof UriPort) {
                return port;
            }
            else if (typeof port === "number") {
                return UriPort.from(port);
            }
            else if (typeof port === "string") {
                return UriPort.parse(port);
            }
            else {
                throw new TypeError("" + port);
            }
        };
        UriPort.parse = function (string) {
            return Uri.standardParser().parsePortString(string);
        };
        UriPort.cache = function () {
            if (UriPort._cache === void 0) {
                var cacheSize = 4;
                UriPort._cache = new util.HashGenCacheMap(cacheSize);
            }
            return UriPort._cache;
        };
        return UriPort;
    }());
    Uri.Port = UriPort;

    var UriPath = (function () {
        function UriPath() {
        }
        Object.defineProperty(UriPath.prototype, "length", {
            get: function () {
                var n = 0;
                var path = this;
                while (!path.isEmpty()) {
                    n += 1;
                    path = path.tail();
                }
                return n;
            },
            enumerable: true,
            configurable: true
        });
        UriPath.prototype.get = function (index) {
            var i = 0;
            var path = this;
            while (!path.isEmpty()) {
                if (i < index) {
                    i += 1;
                    path = path.tail();
                }
                else {
                    return path.head();
                }
            }
            return void 0;
        };
        UriPath.prototype.name = function (name) {
            if (name === void 0) {
                if (this.isEmpty()) {
                    return "";
                }
                var path = this;
                do {
                    var tail = path.tail();
                    if (tail.isEmpty()) {
                        return path.isRelative() ? path.head() : "";
                    }
                    else {
                        path = tail;
                    }
                } while (true);
            }
            else {
                var builder = new Uri.PathBuilder();
                builder.addPath(this.base());
                builder.addSegment(name);
                return builder.bind();
            }
        };
        UriPath.prototype.foot = function () {
            if (this.isEmpty()) {
                return this;
            }
            var path = this;
            do {
                var tail = path.tail();
                if (tail.isEmpty()) {
                    return path;
                }
                else {
                    path = tail;
                }
            } while (true);
        };
        UriPath.prototype.isSubpathOf = function (b) {
            b = UriPath.fromAny(b);
            var a = this;
            while (!a.isEmpty() && !b.isEmpty()) {
                if (a.head() !== b.head()) {
                    return false;
                }
                a = a.tail();
                b = b.tail();
            }
            return b.isEmpty();
        };
        UriPath.prototype.appended = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            if (arguments.length > 0) {
                var builder = new Uri.PathBuilder();
                builder.addPath(this);
                builder.push.apply(builder, arguments);
                return builder.bind();
            }
            else {
                return this;
            }
        };
        UriPath.prototype.appendedSlash = function () {
            var builder = new Uri.PathBuilder();
            builder.addPath(this);
            builder.addSlash();
            return builder.bind();
        };
        UriPath.prototype.appendedSegment = function (segment) {
            var builder = new Uri.PathBuilder();
            builder.addPath(this);
            builder.addSegment(segment);
            return builder.bind();
        };
        UriPath.prototype.prepended = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            if (arguments.length > 0) {
                var builder = new Uri.PathBuilder();
                builder.push.apply(builder, arguments);
                builder.addPath(this);
                return builder.bind();
            }
            else {
                return this;
            }
        };
        UriPath.prototype.prependedSlash = function () {
            return UriPath.slash(this);
        };
        UriPath.prototype.prependedSegment = function (segment) {
            if (this.isEmpty() || this.isAbsolute()) {
                return UriPath.segment(segment, this);
            }
            else {
                return UriPath.segment(segment, UriPath.slash(this));
            }
        };
        UriPath.prototype.resolve = function (that) {
            if (that.isEmpty()) {
                return this;
            }
            else if (that.isAbsolute() || this.isEmpty()) {
                return that.removeDotSegments();
            }
            else {
                return this.merge(that).removeDotSegments();
            }
        };
        UriPath.prototype.removeDotSegments = function () {
            var path = this;
            var builder = new Uri.PathBuilder();
            while (!path.isEmpty()) {
                var head = path.head();
                if (head === "." || head === "..") {
                    path = path.tail();
                    if (!path.isEmpty()) {
                        path = path.tail();
                    }
                }
                else if (path.isAbsolute()) {
                    var rest = path.tail();
                    if (!rest.isEmpty()) {
                        var next = rest.head();
                        if (next === ".") {
                            path = rest.tail();
                            if (path.isEmpty()) {
                                path = UriPath.slash();
                            }
                        }
                        else if (next === "..") {
                            path = rest.tail();
                            if (path.isEmpty()) {
                                path = UriPath.slash();
                            }
                            if (!builder.isEmpty() && !builder.pop().isAbsolute()) {
                                if (!builder.isEmpty()) {
                                    builder.pop();
                                }
                            }
                        }
                        else {
                            builder.push(head, next);
                            path = rest.tail();
                        }
                    }
                    else {
                        builder.push(path.head());
                        path = path.tail();
                    }
                }
                else {
                    builder.push(path.head());
                    path = path.tail();
                }
            }
            return builder.bind();
        };
        UriPath.prototype.merge = function (that) {
            if (!this.isEmpty()) {
                var builder = new Uri.PathBuilder();
                var prev = this;
                do {
                    var next = prev.tail();
                    if (!next.isEmpty()) {
                        if (prev.isAbsolute()) {
                            builder.addSlash();
                        }
                        else {
                            builder.addSegment(prev.head());
                        }
                        prev = next;
                    }
                    else {
                        if (prev.isAbsolute()) {
                            builder.addSlash();
                        }
                        break;
                    }
                } while (true);
                builder.addPath(that);
                return builder.bind();
            }
            else {
                return that;
            }
        };
        UriPath.prototype.unmerge = function (relative, root) {
            if (root === void 0) { root = relative; }
            var base = this;
            do {
                if (base.isEmpty()) {
                    if (!relative.isEmpty() && !relative.tail().isEmpty()) {
                        return relative.tail();
                    }
                    else {
                        return relative;
                    }
                }
                else if (base.isRelative()) {
                    return relative;
                }
                else if (relative.isRelative()) {
                    return UriPath.slash(relative);
                }
                else {
                    var a = base.tail();
                    var b = relative.tail();
                    if (!a.isEmpty() && b.isEmpty()) {
                        return UriPath.slash();
                    }
                    else if (a.isEmpty() || b.isEmpty() || a.head() !== b.head()) {
                        return b;
                    }
                    else {
                        a = a.tail();
                        b = b.tail();
                        if (!a.isEmpty() && b.isEmpty()) {
                            return root;
                        }
                        else {
                            base = a;
                            relative = b;
                        }
                    }
                }
            } while (true);
        };
        UriPath.prototype.toAny = function () {
            var components = [];
            var path = this;
            while (!path.isEmpty()) {
                components.push(path.head());
                path = path.tail();
            }
            return components;
        };
        UriPath.prototype.compareTo = function (that) {
            var order = this.toString().localeCompare(that.toString());
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        };
        UriPath.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UriPath) {
                return this.toString() === that.toString();
            }
            return false;
        };
        UriPath.prototype.hashCode = function () {
            if (this._hashCode === void 0) {
                this._hashCode = util.Murmur3.hash(this.toString());
            }
            return this._hashCode;
        };
        UriPath.prototype.display = function (output) {
            var path = this;
            while (!path.isEmpty()) {
                if (path.isAbsolute()) {
                    output = output.write(47);
                }
                else {
                    Uri.writePathSegment(path.head(), output);
                }
                path = path.tail();
            }
        };
        UriPath.builder = function () {
            return new Uri.PathBuilder();
        };
        UriPath.empty = function () {
            if (UriPath._empty === void 0) {
                UriPath._empty = new Uri.PathEmpty();
            }
            return UriPath._empty;
        };
        UriPath.slash = function (tail) {
            if (tail === void 0) { tail = UriPath.empty(); }
            if (tail === UriPath.empty()) {
                if (UriPath._slash === void 0) {
                    UriPath._slash = new Uri.PathSlash(tail);
                }
                return UriPath._slash;
            }
            else {
                return new Uri.PathSlash(tail);
            }
        };
        UriPath.segment = function (segment, tail) {
            if (tail === void 0) { tail = UriPath.empty(); }
            segment = this.cacheSegment(segment);
            return new Uri.PathSegment(segment, tail);
        };
        UriPath.from = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            var builder = new Uri.PathBuilder();
            builder.push.apply(builder, arguments);
            return builder.bind();
        };
        UriPath.fromAny = function (path) {
            if (path === null || path === void 0) {
                return UriPath.empty();
            }
            else if (path instanceof UriPath) {
                return path;
            }
            else if (Array.isArray(path)) {
                return UriPath.from.apply(void 0, arguments);
            }
            else if (typeof path === "string") {
                return UriPath.parse(path);
            }
            else {
                throw new TypeError("" + path);
            }
        };
        UriPath.parse = function (string) {
            return Uri.standardParser().parsePathString(string);
        };
        UriPath.segmentCache = function () {
            if (UriPath._segmentCache === void 0) {
                var segmentCacheSize = 64;
                UriPath._segmentCache = new util.HashGenCacheSet(segmentCacheSize);
            }
            return UriPath._segmentCache;
        };
        UriPath.cacheSegment = function (segment) {
            if (segment.length <= 32) {
                return this.segmentCache().put(segment);
            }
            else {
                return segment;
            }
        };
        UriPath.pathForm = function () {
            if (!UriPath._pathForm) {
                UriPath._pathForm = new Uri.PathForm(UriPath.empty());
            }
            return UriPath._pathForm;
        };
        return UriPath;
    }());
    Uri.Path = UriPath;

    var UriPathSegment = (function (_super) {
        __extends(UriPathSegment, _super);
        function UriPathSegment(head, tail) {
            var _this = _super.call(this) || this;
            _this._head = head;
            _this._tail = tail;
            return _this;
        }
        UriPathSegment.prototype.isDefined = function () {
            return true;
        };
        UriPathSegment.prototype.isAbsolute = function () {
            return false;
        };
        UriPathSegment.prototype.isRelative = function () {
            return true;
        };
        UriPathSegment.prototype.isEmpty = function () {
            return false;
        };
        UriPathSegment.prototype.head = function () {
            return this._head;
        };
        UriPathSegment.prototype.tail = function () {
            return this._tail;
        };
        UriPathSegment.prototype.setTail = function (tail) {
            if (tail.isAbsolute()) {
                this._tail = tail;
            }
            else {
                this._tail = UriPath.slash(tail);
            }
        };
        UriPathSegment.prototype.dealias = function () {
            return new UriPathSegment(this._head, this._tail);
        };
        UriPathSegment.prototype.parent = function () {
            var tail = this._tail;
            if (tail.isEmpty()) {
                return UriPath.empty();
            }
            else {
                var next = tail.tail();
                if (next.isEmpty()) {
                    return UriPath.empty();
                }
                else {
                    return new UriPathSegment(this._head, tail.parent());
                }
            }
        };
        UriPathSegment.prototype.base = function () {
            var tail = this._tail;
            if (tail.isEmpty()) {
                return UriPath.empty();
            }
            else {
                return new UriPathSegment(this._head, tail.base());
            }
        };
        UriPathSegment.prototype.prependedSegment = function (segment) {
            return UriPath.segment(segment, UriPath.slash(this));
        };
        UriPathSegment.prototype.debug = function (output) {
            output = output.write("UriPath").write(46).write("parse")
                .write(40).write(34).display(this).write(34).write(41);
        };
        UriPathSegment.prototype.display = function (output) {
            if (this._string !== void 0) {
                output = output.write(this._string);
            }
            else {
                _super.prototype.display.call(this, output);
            }
        };
        UriPathSegment.prototype.toString = function () {
            if (this._string === void 0) {
                this._string = codec.Format.display(this);
            }
            return this._string;
        };
        return UriPathSegment;
    }(UriPath));
    Uri.PathSegment = UriPathSegment;

    var UriPathSlash = (function (_super) {
        __extends(UriPathSlash, _super);
        function UriPathSlash(tail) {
            var _this = _super.call(this) || this;
            _this._tail = tail;
            return _this;
        }
        UriPathSlash.prototype.isDefined = function () {
            return true;
        };
        UriPathSlash.prototype.isAbsolute = function () {
            return true;
        };
        UriPathSlash.prototype.isRelative = function () {
            return false;
        };
        UriPathSlash.prototype.isEmpty = function () {
            return false;
        };
        UriPathSlash.prototype.head = function () {
            return "/";
        };
        UriPathSlash.prototype.tail = function () {
            return this._tail;
        };
        UriPathSlash.prototype.setTail = function (tail) {
            this._tail = tail;
        };
        UriPathSlash.prototype.dealias = function () {
            return new UriPathSlash(this._tail);
        };
        UriPathSlash.prototype.parent = function () {
            var tail = this._tail;
            if (tail.isEmpty()) {
                return UriPath.empty();
            }
            else {
                var next = tail.tail();
                if (next.isEmpty()) {
                    return UriPath.slash();
                }
                else {
                    return new UriPathSlash(tail.parent());
                }
            }
        };
        UriPathSlash.prototype.base = function () {
            var tail = this._tail;
            if (tail.isEmpty()) {
                return this;
            }
            else {
                return new UriPathSlash(tail.base());
            }
        };
        UriPathSlash.prototype.prependedSegment = function (segment) {
            return UriPath.segment(segment, this);
        };
        UriPathSlash.prototype.debug = function (output) {
            output = output.write("UriPath").write(46).write("parse")
                .write(40).write(34).display(this).write(34).write(41);
        };
        UriPathSlash.prototype.display = function (output) {
            if (this._string !== void 0) {
                output = output.write(this._string);
            }
            else {
                _super.prototype.display.call(this, output);
            }
        };
        UriPathSlash.prototype.toString = function () {
            if (this._string === void 0) {
                this._string = codec.Format.display(this);
            }
            return this._string;
        };
        return UriPathSlash;
    }(UriPath));
    Uri.PathSlash = UriPathSlash;

    var UriPathEmpty = (function (_super) {
        __extends(UriPathEmpty, _super);
        function UriPathEmpty() {
            return _super.call(this) || this;
        }
        UriPathEmpty.prototype.isDefined = function () {
            return false;
        };
        UriPathEmpty.prototype.isAbsolute = function () {
            return false;
        };
        UriPathEmpty.prototype.isRelative = function () {
            return true;
        };
        UriPathEmpty.prototype.isEmpty = function () {
            return true;
        };
        UriPathEmpty.prototype.head = function () {
            throw new Error("Empty UriPath");
        };
        UriPathEmpty.prototype.tail = function () {
            throw new Error("Empty UriPath");
        };
        UriPathEmpty.prototype.setTail = function (tail) {
            throw new Error("Empty UriPath");
        };
        UriPathEmpty.prototype.dealias = function () {
            return this;
        };
        UriPathEmpty.prototype.parent = function () {
            return this;
        };
        UriPathEmpty.prototype.base = function () {
            return this;
        };
        UriPathEmpty.prototype.appended = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            return UriPath.from.apply(void 0, arguments);
        };
        UriPathEmpty.prototype.appendedSlash = function () {
            return UriPath.slash();
        };
        UriPathEmpty.prototype.appendedSegment = function (segment) {
            return UriPath.segment(segment);
        };
        UriPathEmpty.prototype.prepended = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            return UriPath.from.apply(void 0, arguments);
        };
        UriPathEmpty.prototype.prependedSlash = function () {
            return UriPath.slash();
        };
        UriPathEmpty.prototype.prependedSegment = function (segment) {
            return UriPath.segment(segment);
        };
        UriPathEmpty.prototype.merge = function (that) {
            return that;
        };
        UriPathEmpty.prototype.debug = function (output) {
            output = output.write("UriPath").write(46).write("empty")
                .write(40).write(41);
        };
        UriPathEmpty.prototype.display = function (output) {
        };
        UriPathEmpty.prototype.toString = function () {
            return "";
        };
        return UriPathEmpty;
    }(UriPath));
    Uri.PathEmpty = UriPathEmpty;

    var UriPathBuilder = (function () {
        function UriPathBuilder() {
            this._first = Uri.Path.empty();
            this._last = null;
            this._size = 0;
            this._aliased = 0;
        }
        UriPathBuilder.prototype.isEmpty = function () {
            return this._size === 0;
        };
        UriPathBuilder.prototype.push = function () {
            var components = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                components[_i] = arguments[_i];
            }
            for (var i = 0; i < components.length; i += 1) {
                var component = components[i];
                if (component instanceof Uri.Path) {
                    this.addPath(component);
                }
                else if (Array.isArray(component)) {
                    this.push.apply(this, component);
                }
                else if (component === "/") {
                    this.addSlash();
                }
                else {
                    this.addSegment(component);
                }
            }
        };
        UriPathBuilder.prototype.bind = function () {
            this._aliased = 0;
            return this._first;
        };
        UriPathBuilder.prototype.addSlash = function () {
            var tail = Uri.Path.slash().dealias();
            var size = this._size;
            if (size === 0) {
                this._first = tail;
            }
            else {
                this.dealias(size - 1).setTail(tail);
            }
            this._last = tail;
            this._size = size + 1;
            this._aliased += 1;
        };
        UriPathBuilder.prototype.addSegment = function (segment) {
            var tail = Uri.Path.segment(segment, Uri.Path.empty());
            var size = this._size;
            if (size === 0) {
                this._first = tail;
            }
            else {
                this.dealias(size - 1).setTail(tail);
            }
            this._last = tail;
            this._size = size + 1;
            this._aliased += 1;
        };
        UriPathBuilder.prototype.addPath = function (path) {
            if (!path.isEmpty()) {
                var size = this._size;
                if (size === 0) {
                    this._first = path;
                }
                else {
                    this.dealias(size - 1).setTail(path);
                }
                size += 1;
                do {
                    var tail = path.tail();
                    if (!tail.isEmpty()) {
                        path = tail;
                        size += 1;
                    }
                    else {
                        break;
                    }
                } while (true);
                this._last = path;
                this._size = size;
            }
        };
        UriPathBuilder.prototype.pop = function () {
            var size = this._size;
            var aliased = this._aliased;
            if (size === 0) {
                throw new Error("Empty UriPath");
            }
            else if (size === 1) {
                var first = this._first;
                this._first = first.tail();
                if (first.tail().isEmpty()) {
                    this._last = null;
                }
                this._size = size - 1;
                if (aliased > 0) {
                    this._aliased = aliased - 1;
                }
                return first;
            }
            else {
                var last = this.dealias(size - 2);
                last.setTail(Uri.Path.empty());
                this._last = last;
                this._size = size - 1;
                this._aliased = aliased - 1;
                return last.tail();
            }
        };
        UriPathBuilder.prototype.dealias = function (n) {
            var i = 0;
            var xi = null;
            var xs = this._first;
            if (this._aliased <= n) {
                while (i < this._aliased) {
                    xi = xs;
                    xs = xs.tail();
                    i += 1;
                }
                while (i <= n) {
                    var xn = xs.dealias();
                    if (i === 0) {
                        this._first = xn;
                    }
                    else {
                        xi.setTail(xn);
                    }
                    xi = xn;
                    xs = xs.tail();
                    i += 1;
                }
                if (i === this._size) {
                    this._last = xi;
                }
                this._aliased = i;
            }
            else if (n === 0) {
                xi = this._first;
            }
            else if (n === this._size - 1) {
                xi = this._last;
            }
            else {
                while (i <= n) {
                    xi = xs;
                    xs = xs.tail();
                    i += 1;
                }
            }
            return xi;
        };
        return UriPathBuilder;
    }());
    Uri.PathBuilder = UriPathBuilder;

    var UriQuery = (function () {
        function UriQuery() {
        }
        Object.defineProperty(UriQuery.prototype, "length", {
            get: function () {
                var n = 0;
                var query = this;
                while (!query.isEmpty()) {
                    n += 1;
                    query = query.tail();
                }
                return n;
            },
            enumerable: true,
            configurable: true
        });
        UriQuery.prototype.has = function (key) {
            var query = this;
            while (!query.isEmpty()) {
                if (key === query.key()) {
                    return true;
                }
                query = query.tail();
            }
            return false;
        };
        UriQuery.prototype.get = function (key) {
            var query = this;
            while (!query.isEmpty()) {
                if (key === query.key()) {
                    return query.value();
                }
                query = query.tail();
            }
            return void 0;
        };
        UriQuery.prototype.updated = function (key, value) {
            var query = this;
            var builder = new Uri.QueryBuilder();
            var updated = false;
            while (!query.isEmpty()) {
                if (key === query.key()) {
                    builder.addParam(key, value);
                    updated = true;
                }
                else {
                    builder.addParam(query.key(), query.value());
                }
                query = query.tail();
            }
            if (!updated) {
                builder.addParam(key, value);
            }
            return builder.bind();
        };
        UriQuery.prototype.removed = function (key) {
            var query = this;
            var builder = new Uri.QueryBuilder();
            var updated = false;
            while (!query.isEmpty()) {
                if (key === query.key()) {
                    updated = true;
                }
                else {
                    builder.addParam(query.key(), query.value());
                }
                query = query.tail();
            }
            if (updated) {
                return builder.bind();
            }
            else {
                return this;
            }
        };
        UriQuery.prototype.appended = function (key, value) {
            var builder = new Uri.QueryBuilder();
            builder.addQuery(this);
            builder.add(key, value);
            return builder.bind();
        };
        UriQuery.prototype.prepended = function (key, value) {
            var builder = new Uri.QueryBuilder();
            builder.add(key, value);
            builder.addQuery(this);
            return builder.bind();
        };
        UriQuery.prototype.toAny = function (params) {
            if (this.isDefined()) {
                params = params || {};
                var query = this;
                var i = 0;
                while (!query.isEmpty()) {
                    var key = query.key();
                    if (key !== null) {
                        params[key] = query.value();
                    }
                    else {
                        params["$" + i] = query.value();
                    }
                    query = query.tail();
                    i += 1;
                }
            }
            return params;
        };
        UriQuery.prototype.compareTo = function (that) {
            var order = this.toString().localeCompare(that.toString());
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        };
        UriQuery.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UriQuery) {
                return this.toString() === that.toString();
            }
            return false;
        };
        UriQuery.prototype.hashCode = function () {
            if (this._hashCode === void 0) {
                this._hashCode = util.Murmur3.hash(this.toString());
            }
            return this._hashCode;
        };
        UriQuery.prototype.display = function (output) {
            var query = this;
            var first = true;
            while (!query.isEmpty()) {
                if (!first) {
                    output = output.write(38);
                }
                else {
                    first = false;
                }
                var key = query.key();
                if (key !== null) {
                    Uri.writeParam(key, output);
                    output = output.write(61);
                }
                Uri.writeQuery(query.value(), output);
                query = query.tail();
            }
        };
        UriQuery.builder = function () {
            return new Uri.QueryBuilder();
        };
        UriQuery.undefined = function () {
            if (UriQuery._undefined === void 0) {
                UriQuery._undefined = new Uri.QueryUndefined();
            }
            return UriQuery._undefined;
        };
        UriQuery.param = function (key, value, tail) {
            if (tail === void 0) {
                tail = value;
                value = key;
                key = null;
            }
            else if (key !== null) {
                key = this.cacheKey(key);
            }
            if (tail === void 0) {
                tail = UriQuery.undefined();
            }
            return new Uri.QueryParam(key, value, tail);
        };
        UriQuery.from = function (key, value) {
            var builder = new Uri.QueryBuilder();
            builder.add(key, value);
            return builder.bind();
        };
        UriQuery.fromAny = function (query) {
            if (query === null || query === void 0) {
                return UriQuery.undefined();
            }
            else if (query instanceof UriQuery) {
                return query;
            }
            else if (typeof query === "object") {
                var builder = new Uri.QueryBuilder();
                builder.add(query);
                return builder.bind();
            }
            else if (typeof query === "string") {
                return UriQuery.parse(query);
            }
            else {
                throw new TypeError("" + query);
            }
        };
        UriQuery.parse = function (string) {
            return Uri.standardParser().parseQueryString(string);
        };
        UriQuery.keyCache = function () {
            if (UriQuery._keyCache === void 0) {
                var keyCacheSize = 64;
                UriQuery._keyCache = new util.HashGenCacheSet(keyCacheSize);
            }
            return UriQuery._keyCache;
        };
        UriQuery.cacheKey = function (key) {
            if (key.length <= 32) {
                return UriQuery.keyCache().put(key);
            }
            else {
                return key;
            }
        };
        return UriQuery;
    }());
    Uri.Query = UriQuery;

    var UriQueryParam = (function (_super) {
        __extends(UriQueryParam, _super);
        function UriQueryParam(key, value, tail) {
            var _this = _super.call(this) || this;
            _this._key = key;
            _this._value = value;
            _this._tail = tail;
            return _this;
        }
        UriQueryParam.prototype.isDefined = function () {
            return true;
        };
        UriQueryParam.prototype.isEmpty = function () {
            return false;
        };
        UriQueryParam.prototype.head = function () {
            return [this._key, this._value];
        };
        UriQueryParam.prototype.key = function () {
            return this._key;
        };
        UriQueryParam.prototype.value = function () {
            return this._value;
        };
        UriQueryParam.prototype.tail = function () {
            return this._tail;
        };
        UriQueryParam.prototype.setTail = function (tail) {
            this._tail = tail;
        };
        UriQueryParam.prototype.dealias = function () {
            return new UriQueryParam(this._key, this._value, this._tail);
        };
        UriQueryParam.prototype.debug = function (output) {
            output = output.write("UriQuery").write(46).write("parse")
                .write(40).write(34).display(this).write(34).write(41);
        };
        UriQueryParam.prototype.display = function (output) {
            if (this._string !== void 0) {
                output = output.write(this._string);
            }
            else {
                _super.prototype.display.call(this, output);
            }
        };
        UriQueryParam.prototype.toString = function () {
            if (this._string === void 0) {
                this._string = codec.Format.display(this);
            }
            return this._string;
        };
        return UriQueryParam;
    }(UriQuery));
    Uri.QueryParam = UriQueryParam;

    var UriQueryUndefined = (function (_super) {
        __extends(UriQueryUndefined, _super);
        function UriQueryUndefined() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UriQueryUndefined.prototype.isDefined = function () {
            return false;
        };
        UriQueryUndefined.prototype.isEmpty = function () {
            return true;
        };
        UriQueryUndefined.prototype.head = function () {
            throw new Error("Undefined Query");
        };
        UriQueryUndefined.prototype.key = function () {
            throw new Error("Undefined Query");
        };
        UriQueryUndefined.prototype.value = function () {
            throw new Error("Undefined Query");
        };
        UriQueryUndefined.prototype.tail = function () {
            throw new Error("Undefined Query");
        };
        UriQueryUndefined.prototype.setTail = function (tail) {
            throw new Error("Undefined Query");
        };
        UriQueryUndefined.prototype.dealias = function () {
            return this;
        };
        UriQueryUndefined.prototype.updated = function (key, value) {
            return UriQuery.param(key, value, this);
        };
        UriQueryUndefined.prototype.removed = function (key) {
            return this;
        };
        UriQueryUndefined.prototype.appended = function (key, value) {
            return UriQuery.from(key, value);
        };
        UriQueryUndefined.prototype.prepended = function (key, value) {
            return UriQuery.from(key, value);
        };
        UriQueryUndefined.prototype.debug = function (output) {
            output = output.write("UriQuery").write(46).write("undefined")
                .write(40).write(41);
        };
        UriQueryUndefined.prototype.display = function (output) {
        };
        UriQueryUndefined.prototype.toString = function () {
            return "";
        };
        return UriQueryUndefined;
    }(UriQuery));
    Uri.QueryUndefined = UriQueryUndefined;

    var UriQueryBuilder = (function () {
        function UriQueryBuilder() {
            this._first = Uri.Query.undefined();
            this._last = null;
            this._size = 0;
            this._aliased = 0;
        }
        UriQueryBuilder.prototype.isEmpty = function () {
            return this._size === 0;
        };
        UriQueryBuilder.prototype.add = function (key, value) {
            if (value !== void 0) {
                this.addParam(key, value);
            }
            else if (typeof key === "string") {
                this.addParam(null, key);
            }
            else if (key instanceof Uri.Query) {
                this.addQuery(key);
            }
            else {
                var params = key;
                for (var k in params) {
                    var key_1 = k;
                    var value_1 = params[k];
                    if (k.charCodeAt(0) === 36) {
                        key_1 = null;
                    }
                    this.addParam(key_1, value_1);
                }
            }
        };
        UriQueryBuilder.prototype.bind = function () {
            this._aliased = 0;
            return this._first;
        };
        UriQueryBuilder.prototype.addParam = function (key, value) {
            if (value === void 0) {
                value = key;
                key = null;
            }
            var tail = Uri.Query.param(key, value, Uri.Query.undefined());
            var size = this._size;
            if (size === 0) {
                this._first = tail;
            }
            else {
                this.dealias(size - 1).setTail(tail);
            }
            this._last = tail;
            this._size = size + 1;
            this._aliased += 1;
        };
        UriQueryBuilder.prototype.addQuery = function (query) {
            if (!query.isEmpty()) {
                var size = this._size;
                if (size === 0) {
                    this._first = query;
                }
                else {
                    this.dealias(size - 1).setTail(query);
                }
                size += 1;
                do {
                    var tail = query.tail();
                    if (!tail.isEmpty()) {
                        query = tail;
                        size += 1;
                    }
                    else {
                        break;
                    }
                } while (true);
                this._last = query;
                this._size = size;
            }
        };
        UriQueryBuilder.prototype.dealias = function (n) {
            var i = 0;
            var xi = null;
            var xs = this._first;
            if (this._aliased <= n) {
                while (i < this._aliased) {
                    xi = xs;
                    xs = xs.tail();
                    i += 1;
                }
                while (i <= n) {
                    var xn = xs.dealias();
                    if (i === 0) {
                        this._first = xn;
                    }
                    else {
                        xi.setTail(xn);
                    }
                    xi = xn;
                    xs = xs.tail();
                    i += 1;
                }
                if (i === this._size) {
                    this._last = xi;
                }
                this._aliased = i;
            }
            else if (n === 0) {
                xi = this._first;
            }
            else if (n === this._size - 1) {
                xi = this._last;
            }
            else {
                while (i <= n) {
                    xi = xs;
                    xs = xs.tail();
                    i += 1;
                }
            }
            return xi;
        };
        return UriQueryBuilder;
    }());
    Uri.QueryBuilder = UriQueryBuilder;

    var UriFragment = (function () {
        function UriFragment(identifier) {
            this._identifier = identifier;
        }
        UriFragment.prototype.isDefined = function () {
            return this._identifier !== null;
        };
        UriFragment.prototype.identifier = function () {
            return this._identifier;
        };
        UriFragment.prototype.toAny = function () {
            return this._identifier !== null ? this._identifier : void 0;
        };
        UriFragment.prototype.compareTo = function (that) {
            var order = this.toString().localeCompare(that.toString());
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        };
        UriFragment.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UriFragment) {
                return this._identifier === that._identifier;
            }
            return false;
        };
        UriFragment.prototype.hashCode = function () {
            return util.Murmur3.hash(this._identifier);
        };
        UriFragment.prototype.debug = function (output) {
            output = output.write("UriFragment").write(46);
            if (this.isDefined()) {
                output = output.write("parse").write(40).write(34).display(this).write(34).write(41);
            }
            else {
                output = output.write("undefined").write(40).write(41);
            }
        };
        UriFragment.prototype.display = function (output) {
            if (this._string !== void 0) {
                output = output.write(this._string);
            }
            else if (this._identifier !== null) {
                Uri.writeFragment(this._identifier, output);
            }
        };
        UriFragment.prototype.toString = function () {
            if (this._string == null) {
                this._string = codec.Format.display(this);
            }
            return this._string;
        };
        UriFragment.undefined = function () {
            if (UriFragment._undefined === void 0) {
                UriFragment._undefined = new UriFragment(null);
            }
            return UriFragment._undefined;
        };
        UriFragment.from = function (identifier) {
            if (identifier !== null) {
                var cache = UriFragment.cache();
                var fragment = cache.get(identifier);
                if (fragment) {
                    return fragment;
                }
                else {
                    return cache.put(identifier, new UriFragment(identifier));
                }
            }
            else {
                return UriFragment.undefined();
            }
        };
        UriFragment.fromAny = function (fragment) {
            if (fragment === null || fragment === void 0) {
                return UriFragment.undefined();
            }
            else if (fragment instanceof UriFragment) {
                return fragment;
            }
            else if (typeof fragment === "string") {
                return UriFragment.parse(fragment);
            }
            else {
                throw new TypeError("" + fragment);
            }
        };
        UriFragment.parse = function (string) {
            return Uri.standardParser().parseFragmentString(string);
        };
        UriFragment.cache = function () {
            if (UriFragment._cache === void 0) {
                var cacheSize = 32;
                UriFragment._cache = new util.HashGenCacheMap(cacheSize);
            }
            return UriFragment._cache;
        };
        return UriFragment;
    }());
    Uri.Fragment = UriFragment;

    var UriParser = (function () {
        function UriParser() {
        }
        UriParser.prototype.absolute = function (scheme, authority, path, query, fragment) {
            return Uri.from(scheme, authority, path, query, fragment);
        };
        UriParser.prototype.scheme = function (name) {
            return Uri.Scheme.from(name);
        };
        UriParser.prototype.authority = function (user, host, port) {
            return Uri.Authority.from(user, host, port);
        };
        UriParser.prototype.user = function (username, password) {
            return Uri.User.from(username, password);
        };
        UriParser.prototype.hostName = function (address) {
            return Uri.Host.from(address);
        };
        UriParser.prototype.hostIPv4 = function (address) {
            return Uri.Host.ipv4(address);
        };
        UriParser.prototype.hostIPv6 = function (address) {
            return Uri.Host.ipv6(address);
        };
        UriParser.prototype.port = function (number) {
            return Uri.Port.from(number);
        };
        UriParser.prototype.pathEmpty = function () {
            return Uri.Path.empty();
        };
        UriParser.prototype.pathBuilder = function () {
            return new Uri.PathBuilder();
        };
        UriParser.prototype.queryBuilder = function () {
            return new Uri.QueryBuilder();
        };
        UriParser.prototype.fragment = function (identifier) {
            return Uri.Fragment.from(identifier);
        };
        UriParser.prototype.absoluteParser = function () {
            return new UriParser.AbsoluteParser(this);
        };
        UriParser.prototype.parseAbsolute = function (input) {
            return UriParser.AbsoluteParser.parse(input, this);
        };
        UriParser.prototype.parseAbsoluteString = function (string) {
            var input = codec.Unicode.stringInput(string);
            var parser = this.parseAbsolute(input);
            if (input.isCont() && !parser.isError()) {
                parser = codec.Parser.error(codec.Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        UriParser.prototype.schemeParser = function () {
            return new UriParser.SchemeParser(this);
        };
        UriParser.prototype.parseScheme = function (input) {
            return UriParser.SchemeParser.parse(input, this);
        };
        UriParser.prototype.parseSchemeString = function (string) {
            var input = codec.Unicode.stringInput(string);
            var parser = this.parseScheme(input);
            if (input.isCont() && !parser.isError()) {
                parser = codec.Parser.error(codec.Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        UriParser.prototype.authorityParser = function () {
            return new UriParser.AuthorityParser(this);
        };
        UriParser.prototype.parseAuthority = function (input) {
            return UriParser.AuthorityParser.parse(input, this);
        };
        UriParser.prototype.parseAuthorityString = function (string) {
            var input = codec.Unicode.stringInput(string);
            var parser = this.parseAuthority(input);
            if (input.isCont() && !parser.isError()) {
                parser = codec.Parser.error(codec.Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        UriParser.prototype.userParser = function () {
            return new UriParser.UserParser(this);
        };
        UriParser.prototype.parseUser = function (input) {
            return UriParser.UserParser.parse(input, this);
        };
        UriParser.prototype.parseUserString = function (string) {
            var input = codec.Unicode.stringInput(string);
            var parser = this.parseUser(input);
            if (input.isCont() && !parser.isError()) {
                parser = codec.Parser.error(codec.Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        UriParser.prototype.hostParser = function () {
            return new UriParser.HostParser(this);
        };
        UriParser.prototype.parseHost = function (input) {
            return UriParser.HostParser.parse(input, this);
        };
        UriParser.prototype.parseHostString = function (string) {
            var input = codec.Unicode.stringInput(string);
            var parser = this.parseHost(input);
            if (input.isCont() && !parser.isError()) {
                parser = codec.Parser.error(codec.Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        UriParser.prototype.hostAddressParser = function () {
            return new UriParser.HostAddressParser(this);
        };
        UriParser.prototype.parseHostAddress = function (input) {
            return UriParser.HostAddressParser.parse(input, this);
        };
        UriParser.prototype.hostLiteralParser = function () {
            return new UriParser.HostLiteralParser(this);
        };
        UriParser.prototype.parseHostLiteral = function (input) {
            return UriParser.HostLiteralParser.parse(input, this);
        };
        UriParser.prototype.portParser = function () {
            return new UriParser.PortParser(this);
        };
        UriParser.prototype.parsePort = function (input) {
            return UriParser.PortParser.parse(input, this);
        };
        UriParser.prototype.parsePortString = function (string) {
            var input = codec.Unicode.stringInput(string);
            var parser = this.parsePort(input);
            if (input.isCont() && !parser.isError()) {
                parser = codec.Parser.error(codec.Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        UriParser.prototype.pathParser = function (builder) {
            return new UriParser.PathParser(this, builder);
        };
        UriParser.prototype.parsePath = function (input, builder) {
            return UriParser.PathParser.parse(input, this, builder);
        };
        UriParser.prototype.parsePathString = function (string) {
            var input = codec.Unicode.stringInput(string);
            var parser = this.parsePath(input);
            if (input.isCont() && !parser.isError()) {
                parser = codec.Parser.error(codec.Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        UriParser.prototype.queryParser = function (builder) {
            return new UriParser.QueryParser(this, builder);
        };
        UriParser.prototype.parseQuery = function (input, builder) {
            return UriParser.QueryParser.parse(input, this, builder);
        };
        UriParser.prototype.parseQueryString = function (string) {
            var input = codec.Unicode.stringInput(string);
            var parser = this.parseQuery(input);
            if (input.isCont() && !parser.isError()) {
                parser = codec.Parser.error(codec.Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        UriParser.prototype.fragmentParser = function () {
            return new UriParser.FragmentParser(this);
        };
        UriParser.prototype.parseFragment = function (input) {
            return UriParser.FragmentParser.parse(input, this);
        };
        UriParser.prototype.parseFragmentString = function (string) {
            var input = codec.Unicode.stringInput(string);
            var parser = this.parseFragment(input);
            if (input.isCont() && !parser.isError()) {
                parser = codec.Parser.error(codec.Diagnostic.unexpected(input));
            }
            return parser.bind();
        };
        return UriParser;
    }());
    Uri.Parser = UriParser;

    var UriAbsoluteParser = (function (_super) {
        __extends(UriAbsoluteParser, _super);
        function UriAbsoluteParser(uri, schemeParser, authorityParser, pathParser, queryParser, fragmentParser, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.schemeParser = schemeParser;
            _this.authorityParser = authorityParser;
            _this.pathParser = pathParser;
            _this.queryParser = queryParser;
            _this.fragmentParser = fragmentParser;
            _this.step = step;
            return _this;
        }
        UriAbsoluteParser.prototype.feed = function (input) {
            return UriAbsoluteParser.parse(input, this.uri, this.schemeParser, this.authorityParser, this.pathParser, this.queryParser, this.fragmentParser, this.step);
        };
        UriAbsoluteParser.parse = function (input, uri, schemeParser, authorityParser, pathParser, queryParser, fragmentParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont()) {
                    var look = input.clone();
                    while (look.isCont() && (c = look.head(), Uri.isSchemeChar(c))) {
                        look.step();
                    }
                    if (look.isCont() && c === 58) {
                        step = 2;
                    }
                    else {
                        step = 3;
                    }
                }
                else if (input.isDone()) {
                    step = 3;
                }
            }
            if (step === 2) {
                if (!schemeParser) {
                    schemeParser = uri.parseScheme(input);
                }
                else {
                    schemeParser = schemeParser.feed(input);
                }
                if (schemeParser.isDone()) {
                    if (input.isCont() && input.head() === 58) {
                        input = input.step();
                        step = 3;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.error(codec.Diagnostic.expected(58, input));
                    }
                }
                else if (schemeParser.isError()) {
                    return schemeParser.asError();
                }
            }
            if (step === 3) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 47) {
                        input = input.step();
                        step = 4;
                    }
                    else if (c === 63) {
                        input = input.step();
                        step = 7;
                    }
                    else if (c === 35) {
                        input = input.step();
                        step = 8;
                    }
                    else {
                        step = 6;
                    }
                }
                else if (input.isDone()) {
                    return codec.Parser.done(uri.absolute(schemeParser && schemeParser.bind()));
                }
            }
            if (step === 4) {
                if (input.isCont() && input.head() === 47) {
                    input = input.step();
                    step = 5;
                }
                else if (input.isCont()) {
                    var pathBuilder = uri.pathBuilder();
                    pathBuilder.addSlash();
                    pathParser = uri.parsePath(input, pathBuilder);
                    step = 6;
                }
                else if (input.isDone()) {
                    return codec.Parser.done(uri.absolute(schemeParser && schemeParser.bind(), void 0, Uri.Path.slash()));
                }
            }
            if (step === 5) {
                if (!authorityParser) {
                    authorityParser = uri.parseAuthority(input);
                }
                else {
                    authorityParser = authorityParser.feed(input);
                }
                if (authorityParser.isDone()) {
                    if (input.isCont()) {
                        c = input.head();
                        if (c === 63) {
                            input = input.step();
                            step = 7;
                        }
                        else if (c === 35) {
                            input = input.step();
                            step = 8;
                        }
                        else {
                            step = 6;
                        }
                    }
                    else if (input.isDone()) {
                        return codec.Parser.done(uri.absolute(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind()));
                    }
                }
                else if (authorityParser.isError()) {
                    return authorityParser.asError();
                }
            }
            if (step === 6) {
                if (!pathParser) {
                    pathParser = uri.parsePath(input);
                }
                else {
                    pathParser = pathParser.feed(input);
                }
                if (pathParser.isDone()) {
                    if (input.isCont() && input.head() === 63) {
                        input = input.step();
                        step = 7;
                    }
                    else if (input.isCont() && input.head() === 35) {
                        input = input.step();
                        step = 8;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.done(uri.absolute(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind(), pathParser.bind()));
                    }
                }
                else if (pathParser.isError()) {
                    return pathParser.asError();
                }
            }
            if (step === 7) {
                if (!queryParser) {
                    queryParser = uri.parseQuery(input);
                }
                else {
                    queryParser = queryParser.feed(input);
                }
                if (queryParser.isDone()) {
                    if (input.isCont() && input.head() === 35) {
                        input = input.step();
                        step = 8;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.done(uri.absolute(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind(), pathParser && pathParser.bind(), queryParser.bind()));
                    }
                }
                else if (queryParser.isError()) {
                    return queryParser.asError();
                }
            }
            if (step === 8) {
                if (!fragmentParser) {
                    fragmentParser = uri.parseFragment(input);
                }
                else {
                    fragmentParser = fragmentParser.feed(input);
                }
                if (fragmentParser.isDone()) {
                    return codec.Parser.done(uri.absolute(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind(), pathParser && pathParser.bind(), queryParser && queryParser.bind(), fragmentParser.bind()));
                }
                else if (fragmentParser.isError()) {
                    return fragmentParser.asError();
                }
            }
            return new UriAbsoluteParser(uri, schemeParser, authorityParser, pathParser, queryParser, fragmentParser, step);
        };
        return UriAbsoluteParser;
    }(codec.Parser));
    UriParser.AbsoluteParser = UriAbsoluteParser;

    var UriSchemeParser = (function (_super) {
        __extends(UriSchemeParser, _super);
        function UriSchemeParser(uri, output, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.output = output;
            _this.step = step;
            return _this;
        }
        UriSchemeParser.prototype.feed = function (input) {
            return UriSchemeParser.parse(input, this.uri, this.output, this.step);
        };
        UriSchemeParser.parse = function (input, uri, output, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont() && (c = input.head(), Uri.isAlpha(c))) {
                    input = input.step();
                    output = output || codec.Utf8.decodedString();
                    output = output.write(Uri.toLowerCase(c));
                    step = 2;
                }
                else if (!input.isEmpty()) {
                    return codec.Parser.error(codec.Diagnostic.expected("scheme", input));
                }
            }
            if (step === 2) {
                while (input.isCont() && (c = input.head(), Uri.isSchemeChar(c))) {
                    input = input.step();
                    output.write(Uri.toLowerCase(c));
                }
                if (!input.isEmpty()) {
                    return codec.Parser.done(uri.scheme(output.bind()));
                }
            }
            return new UriSchemeParser(uri, output, step);
        };
        return UriSchemeParser;
    }(codec.Parser));
    UriParser.SchemeParser = UriSchemeParser;

    var UriAuthorityParser = (function (_super) {
        __extends(UriAuthorityParser, _super);
        function UriAuthorityParser(uri, userParser, hostParser, portParser, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.userParser = userParser;
            _this.hostParser = hostParser;
            _this.portParser = portParser;
            _this.step = step;
            return _this;
        }
        UriAuthorityParser.prototype.feed = function (input) {
            return UriAuthorityParser.parse(input, this.uri, this.userParser, this.hostParser, this.portParser, this.step);
        };
        UriAuthorityParser.parse = function (input, uri, userParser, hostParser, portParser, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont()) {
                    var look = input.clone();
                    while (look.isCont() && (c = look.head(), c !== 64 && c !== 47)) {
                        look.step();
                    }
                    if (look.isCont() && c === 64) {
                        step = 2;
                    }
                    else {
                        step = 3;
                    }
                }
                else if (input.isDone()) {
                    step = 3;
                }
            }
            if (step === 2) {
                if (!userParser) {
                    userParser = uri.parseUser(input);
                }
                else {
                    userParser = userParser.feed(input);
                }
                if (userParser.isDone()) {
                    if (input.isCont() && input.head() === 64) {
                        input = input.step();
                        step = 3;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.error(codec.Diagnostic.expected(64, input));
                    }
                }
                else if (userParser.isError()) {
                    return userParser.asError();
                }
            }
            if (step === 3) {
                if (!hostParser) {
                    hostParser = uri.parseHost(input);
                }
                else {
                    hostParser = hostParser.feed(input);
                }
                if (hostParser.isDone()) {
                    if (input.isCont() && input.head() === 58) {
                        input = input.step();
                        step = 4;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.done(uri.authority(userParser && userParser.bind(), hostParser.bind()));
                    }
                }
                else if (hostParser.isError()) {
                    return hostParser.asError();
                }
            }
            if (step === 4) {
                if (!portParser) {
                    portParser = uri.parsePort(input);
                }
                else {
                    portParser = portParser.feed(input);
                }
                if (portParser.isDone()) {
                    return codec.Parser.done(uri.authority(userParser && userParser.bind(), hostParser.bind(), portParser.bind()));
                }
                else if (portParser.isError()) {
                    return portParser.asError();
                }
            }
            return new UriAuthorityParser(uri, userParser, hostParser, portParser, step);
        };
        return UriAuthorityParser;
    }(codec.Parser));
    UriParser.AuthorityParser = UriAuthorityParser;

    var UriUserParser = (function (_super) {
        __extends(UriUserParser, _super);
        function UriUserParser(uri, usernameOutput, passwordOutput, c1, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.usernameOutput = usernameOutput;
            _this.passwordOutput = passwordOutput;
            _this.c1 = c1;
            _this.step = step;
            return _this;
        }
        UriUserParser.prototype.feed = function (input) {
            return UriUserParser.parse(input, this.uri, this.usernameOutput, this.passwordOutput, this.c1, this.step);
        };
        UriUserParser.parse = function (input, uri, usernameOutput, passwordOutput, c1, step) {
            if (c1 === void 0) { c1 = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    usernameOutput = usernameOutput || codec.Utf8.decodedString();
                    while (input.isCont() && (c = input.head(), Uri.isUserChar(c))) {
                        input = input.step();
                        usernameOutput.write(c);
                    }
                    if (input.isCont() && c === 58) {
                        input = input.step();
                        step = 4;
                    }
                    else if (input.isCont() && c === 37) {
                        input = input.step();
                        step = 2;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.done(uri.user(usernameOutput.bind()));
                    }
                }
                if (step === 2) {
                    if (input.isCont() && (c = input.head(), codec.Base16.isDigit(c))) {
                        input = input.step();
                        c1 = c;
                        step = 3;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.error(codec.Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 3) {
                    if (input.isCont() && (c = input.head(), codec.Base16.isDigit(c))) {
                        input = input.step();
                        usernameOutput.write((codec.Base16.decodeDigit(c1) << 4) | codec.Base16.decodeDigit(c));
                        c1 = 0;
                        step = 1;
                        continue;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.error(codec.Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 4) {
                    passwordOutput = passwordOutput || codec.Utf8.decodedString();
                    while (input.isCont() && (c = input.head(), Uri.isUserInfoChar(c))) {
                        input = input.step();
                        passwordOutput.write(c);
                    }
                    if (input.isCont() && c === 37) {
                        input = input.step();
                        step = 5;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.done(uri.user(usernameOutput.bind(), passwordOutput.bind()));
                    }
                }
                if (step === 5) {
                    if (input.isCont() && (c = input.head(), codec.Base16.isDigit(c))) {
                        input = input.step();
                        c1 = c;
                        step = 6;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.error(codec.Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 6) {
                    if (input.isCont() && (c = input.head(), codec.Base16.isDigit(c))) {
                        input = input.step();
                        passwordOutput.write((codec.Base16.decodeDigit(c1) << 4) | codec.Base16.decodeDigit(c));
                        c1 = 0;
                        step = 4;
                        continue;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.error(codec.Diagnostic.expected("hex digit", input));
                    }
                }
                break;
            } while (true);
            return new UriUserParser(uri, usernameOutput, passwordOutput, c1, step);
        };
        return UriUserParser;
    }(codec.Parser));
    UriParser.UserParser = UriUserParser;

    var UriHostParser = (function (_super) {
        __extends(UriHostParser, _super);
        function UriHostParser(uri) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            return _this;
        }
        UriHostParser.prototype.feed = function (input) {
            return UriHostParser.parse(input, this.uri);
        };
        UriHostParser.parse = function (input, uri) {
            if (input.isCont()) {
                var c = input.head();
                if (c === 91) {
                    return uri.parseHostLiteral(input);
                }
                else {
                    return uri.parseHostAddress(input);
                }
            }
            else if (input.isDone()) {
                return codec.Parser.done(uri.hostName(""));
            }
            return new UriHostParser(uri);
        };
        return UriHostParser;
    }(codec.Parser));
    UriParser.HostParser = UriHostParser;

    var UriHostAddressParser = (function (_super) {
        __extends(UriHostAddressParser, _super);
        function UriHostAddressParser(uri, output, c1, x, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.output = output;
            _this.c1 = c1;
            _this.x = x;
            _this.step = step;
            return _this;
        }
        UriHostAddressParser.prototype.feed = function (input) {
            return UriHostAddressParser.parse(input, this.uri, this.output, this.c1, this.x, this.step);
        };
        UriHostAddressParser.parse = function (input, uri, output, c1, x, step) {
            if (c1 === void 0) { c1 = 0; }
            if (x === void 0) { x = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            output = output || codec.Utf8.decodedString();
            while (step <= 4) {
                while (input.isCont() && (c = input.head(), codec.Base10.isDigit(c))) {
                    input = input.step();
                    output = output.write(c);
                    x = 10 * x + codec.Base10.decodeDigit(c);
                }
                if (input.isCont()) {
                    if (c === 46 && step < 4 && x <= 255) {
                        input = input.step();
                        output = output.write(c);
                        x = 0;
                        step += 1;
                    }
                    else if (!Uri.isHostChar(c) && c !== 37 && step === 4 && x <= 255) {
                        return codec.Parser.done(uri.hostIPv4(output.bind()));
                    }
                    else {
                        x = 0;
                        step = 5;
                        break;
                    }
                }
                else if (!input.isEmpty()) {
                    if (step === 4 && x <= 255) {
                        return codec.Parser.done(uri.hostIPv4(output.bind()));
                    }
                    else {
                        return codec.Parser.done(uri.hostName(output.bind()));
                    }
                }
                else {
                    break;
                }
            }
            do {
                if (step === 5) {
                    while (input.isCont() && (c = input.head(), Uri.isHostChar(c))) {
                        input = input.step();
                        output.write(Uri.toLowerCase(c));
                    }
                    if (input.isCont() && c === 37) {
                        input = input.step();
                        step = 6;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.done(uri.hostName(output.bind()));
                    }
                }
                if (step === 6) {
                    if (input.isCont() && (c = input.head(), codec.Base16.isDigit(c))) {
                        input = input.step();
                        c1 = c;
                        step = 7;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.error(codec.Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 7) {
                    if (input.isCont() && (c = input.head(), codec.Base16.isDigit(c))) {
                        input = input.step();
                        output.write((codec.Base16.decodeDigit(c1) << 4) | codec.Base16.decodeDigit(c));
                        c1 = 0;
                        step = 5;
                        continue;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.error(codec.Diagnostic.expected("hex digit", input));
                    }
                }
                break;
            } while (true);
            return new UriHostAddressParser(uri, output, c1, x, step);
        };
        return UriHostAddressParser;
    }(codec.Parser));
    UriParser.HostAddressParser = UriHostAddressParser;

    var UriHostLiteralParser = (function (_super) {
        __extends(UriHostLiteralParser, _super);
        function UriHostLiteralParser(uri, output, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.output = output;
            _this.step = step;
            return _this;
        }
        UriHostLiteralParser.prototype.feed = function (input) {
            return UriHostLiteralParser.parse(input, this.uri, this.output, this.step);
        };
        UriHostLiteralParser.parse = function (input, uri, output, step) {
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont() && input.head() === 91) {
                    input = input.step();
                    step = 2;
                }
                else if (!input.isEmpty()) {
                    return codec.Parser.error(codec.Diagnostic.expected(91, input));
                }
            }
            if (step === 2) {
                output = output || codec.Utf8.decodedString();
                while (input.isCont() && (c = input.head(), Uri.isHostChar(c) || c === 58)) {
                    input = input.step();
                    output = output.write(Uri.toLowerCase(c));
                }
                if (input.isCont() && c === 93) {
                    input = input.step();
                    return codec.Parser.done(uri.hostIPv6(output.bind()));
                }
                else if (!input.isEmpty()) {
                    return codec.Parser.error(codec.Diagnostic.expected(93, input));
                }
            }
            return new UriHostLiteralParser(uri, output, step);
        };
        return UriHostLiteralParser;
    }(codec.Parser));
    UriParser.HostLiteralParser = UriHostLiteralParser;

    var UriPortParser = (function (_super) {
        __extends(UriPortParser, _super);
        function UriPortParser(uri, number) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.number = number;
            return _this;
        }
        UriPortParser.prototype.feed = function (input) {
            return UriPortParser.parse(input, this.uri, this.number);
        };
        UriPortParser.parse = function (input, uri, number) {
            if (number === void 0) { number = 0; }
            var c = 0;
            while (input.isCont() && (c = input.head(), codec.Base10.isDigit(c))) {
                input = input.step();
                number = 10 * number + codec.Base10.decodeDigit(c);
            }
            if (!input.isEmpty()) {
                return codec.Parser.done(uri.port(number));
            }
            return new UriPortParser(uri, number);
        };
        return UriPortParser;
    }(codec.Parser));
    UriParser.PortParser = UriPortParser;

    var UriPathParser = (function (_super) {
        __extends(UriPathParser, _super);
        function UriPathParser(uri, builder, output, c1, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.builder = builder;
            _this.output = output;
            _this.c1 = c1;
            _this.step = step;
            return _this;
        }
        UriPathParser.prototype.feed = function (input) {
            return UriPathParser.parse(input, this.uri, this.builder, this.output, this.c1, this.step);
        };
        UriPathParser.parse = function (input, uri, builder, output, c1, step) {
            if (c1 === void 0) { c1 = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    while (input.isCont() && (c = input.head(), Uri.isPathChar(c))) {
                        output = output || codec.Utf8.decodedString();
                        input = input.step();
                        output = output.write(c);
                    }
                    if (input.isCont() && c === 47) {
                        input = input.step();
                        builder = builder || uri.pathBuilder();
                        if (output) {
                            builder.addSegment(output.bind());
                            output = void 0;
                        }
                        builder.addSlash();
                        continue;
                    }
                    else if (input.isCont() && c === 37) {
                        input = input.step();
                        step = 2;
                    }
                    else if (!input.isEmpty()) {
                        if (output) {
                            builder = builder || uri.pathBuilder();
                            builder.addSegment(output.bind());
                        }
                        if (builder) {
                            return codec.Parser.done(builder.bind());
                        }
                        else {
                            return codec.Parser.done(uri.pathEmpty());
                        }
                    }
                }
                if (step === 2) {
                    if (input.isCont() && (c = input.head(), codec.Base16.isDigit(c))) {
                        input = input.step();
                        c1 = c;
                        step = 3;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.error(codec.Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 3) {
                    if (input.isCont() && (c = input.head(), codec.Base16.isDigit(c))) {
                        output = output || codec.Utf8.decodedString();
                        input = input.step();
                        output = output.write((codec.Base16.decodeDigit(c1) << 4) | codec.Base16.decodeDigit(c));
                        c1 = 0;
                        step = 1;
                        continue;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.error(codec.Diagnostic.expected("hex digit", input));
                    }
                }
                break;
            } while (true);
            return new UriPathParser(uri, builder, output, c1, step);
        };
        return UriPathParser;
    }(codec.Parser));
    UriParser.PathParser = UriPathParser;

    var UriQueryParser = (function (_super) {
        __extends(UriQueryParser, _super);
        function UriQueryParser(uri, builder, keyOutput, valueOutput, c1, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.builder = builder;
            _this.keyOutput = keyOutput;
            _this.valueOutput = valueOutput;
            _this.c1 = c1;
            _this.step = step;
            return _this;
        }
        UriQueryParser.prototype.feed = function (input) {
            return UriQueryParser.parse(input, this.uri, this.builder, this.keyOutput, this.valueOutput, this.c1, this.step);
        };
        UriQueryParser.parse = function (input, uri, builder, keyOutput, valueOutput, c1, step) {
            if (c1 === void 0) { c1 = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            do {
                if (step === 1) {
                    keyOutput = keyOutput || codec.Utf8.decodedString();
                    while (input.isCont() && (c = input.head(), Uri.isParamChar(c))) {
                        input = input.step();
                        keyOutput.write(c);
                    }
                    if (input.isCont() && c === 61) {
                        input = input.step();
                        step = 4;
                    }
                    else if (input.isCont() && c === 38) {
                        input = input.step();
                        builder = builder || uri.queryBuilder();
                        builder.addParam(keyOutput.bind());
                        keyOutput = void 0;
                        continue;
                    }
                    else if (input.isCont() && c === 37) {
                        input = input.step();
                        step = 2;
                    }
                    else if (!input.isEmpty()) {
                        builder = builder || uri.queryBuilder();
                        builder.addParam(keyOutput.bind());
                        return codec.Parser.done(builder.bind());
                    }
                }
                if (step === 2) {
                    if (input.isCont() && (c = input.head(), codec.Base16.isDigit(c))) {
                        input = input.step();
                        c1 = c;
                        step = 3;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.error(codec.Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 3) {
                    if (input.isCont() && (c = input.head(), codec.Base16.isDigit(c))) {
                        input = input.step();
                        keyOutput.write((codec.Base16.decodeDigit(c1) << 4) | codec.Base16.decodeDigit(c));
                        c1 = 0;
                        step = 1;
                        continue;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.error(codec.Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 4) {
                    valueOutput = valueOutput || codec.Utf8.decodedString();
                    while (input.isCont() && (c = input.head(), Uri.isParamChar(c) || c === 61)) {
                        input = input.step();
                        valueOutput.write(c);
                    }
                    if (input.isCont() && c === 38) {
                        input = input.step();
                        builder = builder || uri.queryBuilder();
                        builder.addParam(keyOutput.bind(), valueOutput.bind());
                        keyOutput = void 0;
                        valueOutput = void 0;
                        step = 1;
                        continue;
                    }
                    else if (input.isCont() && c === 38) {
                        input = input.step();
                        step = 5;
                    }
                    else if (!input.isEmpty()) {
                        builder = builder || uri.queryBuilder();
                        builder.addParam(keyOutput.bind(), valueOutput.bind());
                        return codec.Parser.done(builder.bind());
                    }
                }
                if (step === 5) {
                    if (input.isCont() && (c = input.head(), codec.Base16.isDigit(c))) {
                        input = input.step();
                        c1 = c;
                        step = 6;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.error(codec.Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 6) {
                    if (input.isCont() && (c = input.head(), codec.Base16.isDigit(c))) {
                        input = input.step();
                        valueOutput.write((codec.Base16.decodeDigit(c1) << 4) | codec.Base16.decodeDigit(c));
                        c1 = 0;
                        step = 4;
                        continue;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.error(codec.Diagnostic.expected("hex digit", input));
                    }
                }
                break;
            } while (true);
            return new UriQueryParser(uri, builder, keyOutput, valueOutput, c1, step);
        };
        return UriQueryParser;
    }(codec.Parser));
    UriParser.QueryParser = UriQueryParser;

    var UriFragmentParser = (function (_super) {
        __extends(UriFragmentParser, _super);
        function UriFragmentParser(uri, output, c1, step) {
            var _this = _super.call(this) || this;
            _this.uri = uri;
            _this.output = output;
            _this.c1 = c1;
            _this.step = step;
            return _this;
        }
        UriFragmentParser.prototype.feed = function (input) {
            return UriFragmentParser.parse(input, this.uri, this.output, this.c1, this.step);
        };
        UriFragmentParser.parse = function (input, uri, output, c1, step) {
            if (c1 === void 0) { c1 = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            output = output || codec.Utf8.decodedString();
            do {
                if (step === 1) {
                    while (input.isCont() && (c = input.head(), Uri.isFragmentChar(c))) {
                        input = input.step();
                        output = output.write(c);
                    }
                    if (input.isCont() && c === 37) {
                        input = input.step();
                        step = 2;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.done(uri.fragment(output.bind()));
                    }
                }
                if (step === 2) {
                    if (input.isCont() && (c = input.head(), codec.Base16.isDigit(c))) {
                        input = input.step();
                        c1 = c;
                        step = 3;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.error(codec.Diagnostic.expected("hex digit", input));
                    }
                }
                if (step === 3) {
                    if (input.isCont() && (c = input.head(), codec.Base16.isDigit(c))) {
                        input = input.step();
                        output = output.write((codec.Base16.decodeDigit(c1) << 4) | codec.Base16.decodeDigit(c));
                        c1 = 0;
                        step = 1;
                        continue;
                    }
                    else if (!input.isEmpty()) {
                        return codec.Parser.error(codec.Diagnostic.expected("hex digit", input));
                    }
                }
                break;
            } while (true);
            return new UriFragmentParser(uri, output, c1, step);
        };
        return UriFragmentParser;
    }(codec.Parser));
    UriParser.FragmentParser = UriFragmentParser;

    var UriForm = (function (_super) {
        __extends(UriForm, _super);
        function UriForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        UriForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new UriForm(unit);
            }
        };
        UriForm.prototype.mold = function (object, item) {
            if (item === void 0) {
                return structure.Text.from(object.toString());
            }
            else {
                return item.concat(structure.Text.from(object.toString()));
            }
        };
        UriForm.prototype.cast = function (item, object) {
            var value = item.target();
            try {
                var string = value.stringValue();
                if (typeof string === "string") {
                    return Uri.parse(string);
                }
            }
            catch (error) {
            }
            return void 0;
        };
        return UriForm;
    }(structure.Form));
    Uri.Form = UriForm;

    var UriCache = (function () {
        function UriCache(base, size) {
            if (size === void 0) { size = 32; }
            this._base = base;
            this._resolveCache = new util.HashGenCacheMap(size);
            this._unresolveCache = new util.HashGenCacheMap(size);
        }
        UriCache.prototype.resolve = function (relative) {
            relative = Uri.fromAny(relative);
            var absolute = this._resolveCache.get(relative);
            if (absolute === undefined) {
                absolute = this._base.resolve(relative);
                this._resolveCache.put(relative, absolute);
            }
            return absolute;
        };
        UriCache.prototype.unresolve = function (absolute) {
            absolute = Uri.fromAny(absolute);
            var relative = this._unresolveCache.get(absolute);
            if (relative === undefined) {
                relative = this._base.unresolve(absolute);
                this._unresolveCache.put(absolute, relative);
            }
            return relative;
        };
        return UriCache;
    }());

    exports.Uri = Uri;
    exports.UriAbsoluteParser = UriAbsoluteParser;
    exports.UriAuthority = UriAuthority;
    exports.UriAuthorityParser = UriAuthorityParser;
    exports.UriCache = UriCache;
    exports.UriException = UriException;
    exports.UriForm = UriForm;
    exports.UriFragment = UriFragment;
    exports.UriFragmentParser = UriFragmentParser;
    exports.UriHost = UriHost;
    exports.UriHostAddressParser = UriHostAddressParser;
    exports.UriHostIPv4 = UriHostIPv4;
    exports.UriHostIPv6 = UriHostIPv6;
    exports.UriHostLiteralParser = UriHostLiteralParser;
    exports.UriHostName = UriHostName;
    exports.UriHostParser = UriHostParser;
    exports.UriHostUndefined = UriHostUndefined;
    exports.UriParser = UriParser;
    exports.UriPath = UriPath;
    exports.UriPathBuilder = UriPathBuilder;
    exports.UriPathEmpty = UriPathEmpty;
    exports.UriPathParser = UriPathParser;
    exports.UriPathSegment = UriPathSegment;
    exports.UriPathSlash = UriPathSlash;
    exports.UriPort = UriPort;
    exports.UriPortParser = UriPortParser;
    exports.UriQuery = UriQuery;
    exports.UriQueryBuilder = UriQueryBuilder;
    exports.UriQueryParam = UriQueryParam;
    exports.UriQueryParser = UriQueryParser;
    exports.UriQueryUndefined = UriQueryUndefined;
    exports.UriScheme = UriScheme;
    exports.UriSchemeParser = UriSchemeParser;
    exports.UriUser = UriUser;
    exports.UriUserParser = UriUserParser;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=swim-uri.js.map