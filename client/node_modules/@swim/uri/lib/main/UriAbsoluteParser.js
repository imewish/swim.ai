import { __extends } from "tslib";
import { Parser, Diagnostic } from "@swim/codec";
import { Uri } from "./Uri";
import { UriParser } from "./UriParser";
var UriAbsoluteParser = (function (_super) {
    __extends(UriAbsoluteParser, _super);
    function UriAbsoluteParser(uri, schemeParser, authorityParser, pathParser, queryParser, fragmentParser, step) {
        var _this = _super.call(this) || this;
        _this.uri = uri;
        _this.schemeParser = schemeParser;
        _this.authorityParser = authorityParser;
        _this.pathParser = pathParser;
        _this.queryParser = queryParser;
        _this.fragmentParser = fragmentParser;
        _this.step = step;
        return _this;
    }
    UriAbsoluteParser.prototype.feed = function (input) {
        return UriAbsoluteParser.parse(input, this.uri, this.schemeParser, this.authorityParser, this.pathParser, this.queryParser, this.fragmentParser, this.step);
    };
    UriAbsoluteParser.parse = function (input, uri, schemeParser, authorityParser, pathParser, queryParser, fragmentParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (input.isCont()) {
                var look = input.clone();
                while (look.isCont() && (c = look.head(), Uri.isSchemeChar(c))) {
                    look.step();
                }
                if (look.isCont() && c === 58) {
                    step = 2;
                }
                else {
                    step = 3;
                }
            }
            else if (input.isDone()) {
                step = 3;
            }
        }
        if (step === 2) {
            if (!schemeParser) {
                schemeParser = uri.parseScheme(input);
            }
            else {
                schemeParser = schemeParser.feed(input);
            }
            if (schemeParser.isDone()) {
                if (input.isCont() && input.head() === 58) {
                    input = input.step();
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected(58, input));
                }
            }
            else if (schemeParser.isError()) {
                return schemeParser.asError();
            }
        }
        if (step === 3) {
            if (input.isCont()) {
                c = input.head();
                if (c === 47) {
                    input = input.step();
                    step = 4;
                }
                else if (c === 63) {
                    input = input.step();
                    step = 7;
                }
                else if (c === 35) {
                    input = input.step();
                    step = 8;
                }
                else {
                    step = 6;
                }
            }
            else if (input.isDone()) {
                return Parser.done(uri.absolute(schemeParser && schemeParser.bind()));
            }
        }
        if (step === 4) {
            if (input.isCont() && input.head() === 47) {
                input = input.step();
                step = 5;
            }
            else if (input.isCont()) {
                var pathBuilder = uri.pathBuilder();
                pathBuilder.addSlash();
                pathParser = uri.parsePath(input, pathBuilder);
                step = 6;
            }
            else if (input.isDone()) {
                return Parser.done(uri.absolute(schemeParser && schemeParser.bind(), void 0, Uri.Path.slash()));
            }
        }
        if (step === 5) {
            if (!authorityParser) {
                authorityParser = uri.parseAuthority(input);
            }
            else {
                authorityParser = authorityParser.feed(input);
            }
            if (authorityParser.isDone()) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 63) {
                        input = input.step();
                        step = 7;
                    }
                    else if (c === 35) {
                        input = input.step();
                        step = 8;
                    }
                    else {
                        step = 6;
                    }
                }
                else if (input.isDone()) {
                    return Parser.done(uri.absolute(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind()));
                }
            }
            else if (authorityParser.isError()) {
                return authorityParser.asError();
            }
        }
        if (step === 6) {
            if (!pathParser) {
                pathParser = uri.parsePath(input);
            }
            else {
                pathParser = pathParser.feed(input);
            }
            if (pathParser.isDone()) {
                if (input.isCont() && input.head() === 63) {
                    input = input.step();
                    step = 7;
                }
                else if (input.isCont() && input.head() === 35) {
                    input = input.step();
                    step = 8;
                }
                else if (!input.isEmpty()) {
                    return Parser.done(uri.absolute(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind(), pathParser.bind()));
                }
            }
            else if (pathParser.isError()) {
                return pathParser.asError();
            }
        }
        if (step === 7) {
            if (!queryParser) {
                queryParser = uri.parseQuery(input);
            }
            else {
                queryParser = queryParser.feed(input);
            }
            if (queryParser.isDone()) {
                if (input.isCont() && input.head() === 35) {
                    input = input.step();
                    step = 8;
                }
                else if (!input.isEmpty()) {
                    return Parser.done(uri.absolute(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind(), pathParser && pathParser.bind(), queryParser.bind()));
                }
            }
            else if (queryParser.isError()) {
                return queryParser.asError();
            }
        }
        if (step === 8) {
            if (!fragmentParser) {
                fragmentParser = uri.parseFragment(input);
            }
            else {
                fragmentParser = fragmentParser.feed(input);
            }
            if (fragmentParser.isDone()) {
                return Parser.done(uri.absolute(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind(), pathParser && pathParser.bind(), queryParser && queryParser.bind(), fragmentParser.bind()));
            }
            else if (fragmentParser.isError()) {
                return fragmentParser.asError();
            }
        }
        return new UriAbsoluteParser(uri, schemeParser, authorityParser, pathParser, queryParser, fragmentParser, step);
    };
    return UriAbsoluteParser;
}(Parser));
export { UriAbsoluteParser };
UriParser.AbsoluteParser = UriAbsoluteParser;
//# sourceMappingURL=UriAbsoluteParser.js.map