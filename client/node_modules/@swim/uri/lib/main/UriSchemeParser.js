import { __extends } from "tslib";
import { Parser, Diagnostic, Utf8 } from "@swim/codec";
import { Uri } from "./Uri";
import { UriParser } from "./UriParser";
var UriSchemeParser = (function (_super) {
    __extends(UriSchemeParser, _super);
    function UriSchemeParser(uri, output, step) {
        var _this = _super.call(this) || this;
        _this.uri = uri;
        _this.output = output;
        _this.step = step;
        return _this;
    }
    UriSchemeParser.prototype.feed = function (input) {
        return UriSchemeParser.parse(input, this.uri, this.output, this.step);
    };
    UriSchemeParser.parse = function (input, uri, output, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (input.isCont() && (c = input.head(), Uri.isAlpha(c))) {
                input = input.step();
                output = output || Utf8.decodedString();
                output = output.write(Uri.toLowerCase(c));
                step = 2;
            }
            else if (!input.isEmpty()) {
                return Parser.error(Diagnostic.expected("scheme", input));
            }
        }
        if (step === 2) {
            while (input.isCont() && (c = input.head(), Uri.isSchemeChar(c))) {
                input = input.step();
                output.write(Uri.toLowerCase(c));
            }
            if (!input.isEmpty()) {
                return Parser.done(uri.scheme(output.bind()));
            }
        }
        return new UriSchemeParser(uri, output, step);
    };
    return UriSchemeParser;
}(Parser));
export { UriSchemeParser };
UriParser.SchemeParser = UriSchemeParser;
//# sourceMappingURL=UriSchemeParser.js.map