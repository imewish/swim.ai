import { Uri } from "./Uri";
var UriPathBuilder = (function () {
    function UriPathBuilder() {
        this._first = Uri.Path.empty();
        this._last = null;
        this._size = 0;
        this._aliased = 0;
    }
    UriPathBuilder.prototype.isEmpty = function () {
        return this._size === 0;
    };
    UriPathBuilder.prototype.push = function () {
        var components = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            components[_i] = arguments[_i];
        }
        for (var i = 0; i < components.length; i += 1) {
            var component = components[i];
            if (component instanceof Uri.Path) {
                this.addPath(component);
            }
            else if (Array.isArray(component)) {
                this.push.apply(this, component);
            }
            else if (component === "/") {
                this.addSlash();
            }
            else {
                this.addSegment(component);
            }
        }
    };
    UriPathBuilder.prototype.bind = function () {
        this._aliased = 0;
        return this._first;
    };
    UriPathBuilder.prototype.addSlash = function () {
        var tail = Uri.Path.slash().dealias();
        var size = this._size;
        if (size === 0) {
            this._first = tail;
        }
        else {
            this.dealias(size - 1).setTail(tail);
        }
        this._last = tail;
        this._size = size + 1;
        this._aliased += 1;
    };
    UriPathBuilder.prototype.addSegment = function (segment) {
        var tail = Uri.Path.segment(segment, Uri.Path.empty());
        var size = this._size;
        if (size === 0) {
            this._first = tail;
        }
        else {
            this.dealias(size - 1).setTail(tail);
        }
        this._last = tail;
        this._size = size + 1;
        this._aliased += 1;
    };
    UriPathBuilder.prototype.addPath = function (path) {
        if (!path.isEmpty()) {
            var size = this._size;
            if (size === 0) {
                this._first = path;
            }
            else {
                this.dealias(size - 1).setTail(path);
            }
            size += 1;
            do {
                var tail = path.tail();
                if (!tail.isEmpty()) {
                    path = tail;
                    size += 1;
                }
                else {
                    break;
                }
            } while (true);
            this._last = path;
            this._size = size;
        }
    };
    UriPathBuilder.prototype.pop = function () {
        var size = this._size;
        var aliased = this._aliased;
        if (size === 0) {
            throw new Error("Empty UriPath");
        }
        else if (size === 1) {
            var first = this._first;
            this._first = first.tail();
            if (first.tail().isEmpty()) {
                this._last = null;
            }
            this._size = size - 1;
            if (aliased > 0) {
                this._aliased = aliased - 1;
            }
            return first;
        }
        else {
            var last = this.dealias(size - 2);
            last.setTail(Uri.Path.empty());
            this._last = last;
            this._size = size - 1;
            this._aliased = aliased - 1;
            return last.tail();
        }
    };
    UriPathBuilder.prototype.dealias = function (n) {
        var i = 0;
        var xi = null;
        var xs = this._first;
        if (this._aliased <= n) {
            while (i < this._aliased) {
                xi = xs;
                xs = xs.tail();
                i += 1;
            }
            while (i <= n) {
                var xn = xs.dealias();
                if (i === 0) {
                    this._first = xn;
                }
                else {
                    xi.setTail(xn);
                }
                xi = xn;
                xs = xs.tail();
                i += 1;
            }
            if (i === this._size) {
                this._last = xi;
            }
            this._aliased = i;
        }
        else if (n === 0) {
            xi = this._first;
        }
        else if (n === this._size - 1) {
            xi = this._last;
        }
        else {
            while (i <= n) {
                xi = xs;
                xs = xs.tail();
                i += 1;
            }
        }
        return xi;
    };
    return UriPathBuilder;
}());
export { UriPathBuilder };
Uri.PathBuilder = UriPathBuilder;
//# sourceMappingURL=UriPathBuilder.js.map