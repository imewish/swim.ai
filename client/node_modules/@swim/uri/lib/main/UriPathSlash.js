import { __extends } from "tslib";
import { Format } from "@swim/codec";
import { Uri } from "./Uri";
import { UriPath } from "./UriPath";
var UriPathSlash = (function (_super) {
    __extends(UriPathSlash, _super);
    function UriPathSlash(tail) {
        var _this = _super.call(this) || this;
        _this._tail = tail;
        return _this;
    }
    UriPathSlash.prototype.isDefined = function () {
        return true;
    };
    UriPathSlash.prototype.isAbsolute = function () {
        return true;
    };
    UriPathSlash.prototype.isRelative = function () {
        return false;
    };
    UriPathSlash.prototype.isEmpty = function () {
        return false;
    };
    UriPathSlash.prototype.head = function () {
        return "/";
    };
    UriPathSlash.prototype.tail = function () {
        return this._tail;
    };
    UriPathSlash.prototype.setTail = function (tail) {
        this._tail = tail;
    };
    UriPathSlash.prototype.dealias = function () {
        return new UriPathSlash(this._tail);
    };
    UriPathSlash.prototype.parent = function () {
        var tail = this._tail;
        if (tail.isEmpty()) {
            return UriPath.empty();
        }
        else {
            var next = tail.tail();
            if (next.isEmpty()) {
                return UriPath.slash();
            }
            else {
                return new UriPathSlash(tail.parent());
            }
        }
    };
    UriPathSlash.prototype.base = function () {
        var tail = this._tail;
        if (tail.isEmpty()) {
            return this;
        }
        else {
            return new UriPathSlash(tail.base());
        }
    };
    UriPathSlash.prototype.prependedSegment = function (segment) {
        return UriPath.segment(segment, this);
    };
    UriPathSlash.prototype.debug = function (output) {
        output = output.write("UriPath").write(46).write("parse")
            .write(40).write(34).display(this).write(34).write(41);
    };
    UriPathSlash.prototype.display = function (output) {
        if (this._string !== void 0) {
            output = output.write(this._string);
        }
        else {
            _super.prototype.display.call(this, output);
        }
    };
    UriPathSlash.prototype.toString = function () {
        if (this._string === void 0) {
            this._string = Format.display(this);
        }
        return this._string;
    };
    return UriPathSlash;
}(UriPath));
export { UriPathSlash };
Uri.PathSlash = UriPathSlash;
//# sourceMappingURL=UriPathSlash.js.map