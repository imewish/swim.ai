import { Murmur3 } from "@swim/util";
import { Format, Base16 } from "@swim/codec";
import { UriException } from "./UriException";
var Uri = (function () {
    function Uri(scheme, authority, path, query, fragment) {
        this._scheme = scheme;
        this._authority = authority;
        this._path = path;
        this._query = query;
        this._fragment = fragment;
    }
    Uri.prototype.isDefined = function () {
        return this._scheme.isDefined() || this._authority.isDefined() || this._path.isDefined()
            || this._query.isDefined() || this._fragment.isDefined();
    };
    Uri.prototype.isEmpty = function () {
        return !this._scheme.isDefined() && !this._authority.isDefined() && this._path.isEmpty()
            && !this._query.isDefined() && !this._fragment.isDefined();
    };
    Uri.prototype.scheme = function (scheme) {
        if (scheme === void 0) {
            return this._scheme;
        }
        else {
            scheme = Uri.Scheme.fromAny(scheme);
            if (scheme !== this._scheme) {
                return this.copy(scheme, this._authority, this._path, this._query, this._fragment);
            }
            else {
                return this;
            }
        }
    };
    Uri.prototype.schemePart = function (scheme) {
        if (scheme === void 0) {
            return this._scheme.toString();
        }
        else {
            return this.scheme(Uri.Scheme.parse(scheme));
        }
    };
    Uri.prototype.schemeName = function (scheme) {
        if (scheme === void 0) {
            return this._scheme.name();
        }
        else {
            return this.scheme(Uri.Scheme.from(scheme));
        }
    };
    Uri.prototype.authority = function (authority) {
        if (authority === void 0) {
            return this._authority;
        }
        else {
            authority = Uri.Authority.fromAny(authority);
            if (authority !== this._authority) {
                return this.copy(this._scheme, authority, this._path, this._query, this._fragment);
            }
            else {
                return this;
            }
        }
    };
    Uri.prototype.authorityPart = function (authority) {
        if (authority === void 0) {
            return this._authority.toString();
        }
        else {
            return this.authority(Uri.Authority.parse(authority));
        }
    };
    Uri.prototype.user = function (user) {
        if (user === void 0) {
            return this._authority.user();
        }
        else {
            return this.authority(this._authority.user(user));
        }
    };
    Uri.prototype.userPart = function (user) {
        if (user === void 0) {
            return this._authority.userPart();
        }
        else {
            return this.authority(this._authority.userPart(user));
        }
    };
    Uri.prototype.username = function (username, password) {
        if (username === void 0) {
            return this._authority.username();
        }
        else {
            return this.authority(this._authority.username(username, password));
        }
    };
    Uri.prototype.password = function (password) {
        if (password === void 0) {
            return this._authority.password();
        }
        else {
            return this.authority(this._authority.password(password));
        }
    };
    Uri.prototype.host = function (host) {
        if (host === void 0) {
            return this._authority.host();
        }
        else {
            return this.authority(this._authority.host(host));
        }
    };
    Uri.prototype.hostPart = function (host) {
        if (host === void 0) {
            return this._authority.hostPart();
        }
        else {
            return this.authority(this._authority.hostPart(host));
        }
    };
    Uri.prototype.hostAddress = function () {
        return this._authority.hostAddress();
    };
    Uri.prototype.hostName = function (address) {
        if (address === void 0) {
            return this._authority.hostName();
        }
        else {
            return this.authority(this._authority.hostName(address));
        }
    };
    Uri.prototype.hostIPv4 = function (address) {
        if (address === void 0) {
            return this._authority.hostIPv4();
        }
        else {
            return this.authority(this._authority.hostIPv4(address));
        }
    };
    Uri.prototype.hostIPv6 = function (address) {
        if (address === void 0) {
            return this._authority.hostIPv6();
        }
        else {
            return this.authority(this._authority.hostIPv6(address));
        }
    };
    Uri.prototype.port = function (port) {
        if (port === void 0) {
            return this._authority.port();
        }
        else {
            return this.authority(this._authority.port(port));
        }
    };
    Uri.prototype.portPart = function (port) {
        if (port === void 0) {
            return this._authority.portPart();
        }
        else {
            return this.authority(this._authority.portPart(port));
        }
    };
    Uri.prototype.portNumber = function (port) {
        if (port === void 0) {
            return this._authority.portNumber();
        }
        else {
            return this.authority(this._authority.portNumber(port));
        }
    };
    Uri.prototype.path = function () {
        var components = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            components[_i] = arguments[_i];
        }
        if (arguments.length === 0) {
            return this._path;
        }
        else {
            var path = Uri.Path.from.apply(void 0, components);
            if (path !== this._path) {
                return this.copy(this._scheme, this._authority, path, this._query, this._fragment);
            }
            else {
                return this;
            }
        }
    };
    Uri.prototype.pathPart = function (path) {
        if (path === void 0) {
            return this._path.toString();
        }
        else {
            return this.path(Uri.Path.parse(path));
        }
    };
    Uri.prototype.pathName = function (name) {
        if (name === void 0) {
            return this._path.name();
        }
        else {
            return this.path(this._path.name(name));
        }
    };
    Uri.prototype.parentPath = function () {
        return this._path.parent();
    };
    Uri.prototype.basePath = function () {
        return this._path.base();
    };
    Uri.prototype.parent = function () {
        return Uri.from(this._scheme, this._authority, this._path.parent());
    };
    Uri.prototype.base = function () {
        return Uri.from(this._scheme, this._authority, this._path.base());
    };
    Uri.prototype.appendedPath = function () {
        var components = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            components[_i] = arguments[_i];
        }
        return this.path(this._path.appended.apply(this._path, arguments));
    };
    Uri.prototype.appendedSlash = function () {
        return this.path(this._path.appendedSlash());
    };
    Uri.prototype.appendedSegment = function (segment) {
        return this.path(this._path.appendedSegment(segment));
    };
    Uri.prototype.prependedPath = function () {
        var components = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            components[_i] = arguments[_i];
        }
        return this.path(this._path.prepended.apply(this._path, arguments));
    };
    Uri.prototype.prependedSlash = function () {
        return this.path(this._path.prependedSlash());
    };
    Uri.prototype.prependedSegment = function (segment) {
        return this.path(this._path.prependedSegment(segment));
    };
    Uri.prototype.query = function (query) {
        if (query === void 0) {
            return this._query;
        }
        else {
            query = Uri.Query.fromAny(query);
            if (query !== this._query) {
                return this.copy(this._scheme, this._authority, this._path, query, this._fragment);
            }
            else {
                return this;
            }
        }
    };
    Uri.prototype.queryPart = function (query) {
        if (query === void 0) {
            return this._query.toString();
        }
        else {
            return this.query(Uri.Query.parse(query));
        }
    };
    Uri.prototype.updatedQuery = function (key, value) {
        return this.query(this._query.updated(key, value));
    };
    Uri.prototype.removedQuery = function (key) {
        return this.query(this._query.removed(key));
    };
    Uri.prototype.appendedQuery = function (key, value) {
        return this.query(this._query.appended(key, value));
    };
    Uri.prototype.prependedQuery = function (key, value) {
        return this.query(this._query.prepended(key, value));
    };
    Uri.prototype.fragment = function (fragment) {
        if (fragment === void 0) {
            return this._fragment;
        }
        else {
            fragment = Uri.Fragment.fromAny(fragment);
            if (fragment !== this._fragment) {
                return Uri.from(this._scheme, this._authority, this._path, this._query, fragment);
            }
            else {
                return this;
            }
        }
    };
    Uri.prototype.fragmentPart = function (fragment) {
        if (fragment === void 0) {
            return this._fragment.toString();
        }
        else {
            return this.fragment(Uri.Fragment.parse(fragment));
        }
    };
    Uri.prototype.fragmentIdentifier = function (identifier) {
        if (identifier === void 0) {
            return this._fragment.identifier();
        }
        else {
            return this.fragment(Uri.Fragment.from(identifier));
        }
    };
    Uri.prototype.endpoint = function () {
        if (this._path.isDefined() || this._query.isDefined() || this._fragment.isDefined()) {
            return Uri.from(this._scheme, this._authority);
        }
        else {
            return this;
        }
    };
    Uri.prototype.resolve = function (relative) {
        relative = Uri.fromAny(relative);
        if (relative._scheme.isDefined()) {
            return this.copy(relative._scheme, relative._authority, relative._path.removeDotSegments(), relative._query, relative._fragment);
        }
        else if (relative._authority.isDefined()) {
            return this.copy(this._scheme, relative._authority, relative._path.removeDotSegments(), relative._query, relative._fragment);
        }
        else if (relative._path.isEmpty()) {
            return this.copy(this._scheme, this._authority, this._path, relative._query.isDefined() ? relative._query : this._query, relative._fragment);
        }
        else if (relative._path.isAbsolute()) {
            return this.copy(this._scheme, this._authority, relative._path.removeDotSegments(), relative._query, relative._fragment);
        }
        else {
            return this.copy(this._scheme, this._authority, this.merge(relative._path).removeDotSegments(), relative._query, relative._fragment);
        }
    };
    Uri.prototype.merge = function (relative) {
        if (this._authority.isDefined() && this._path.isEmpty()) {
            return relative.prependedSlash();
        }
        else if (this._path.isEmpty()) {
            return relative;
        }
        else {
            return this._path.merge(relative);
        }
    };
    Uri.prototype.unresolve = function (absolute) {
        absolute = Uri.fromAny(absolute);
        if (!this._scheme.equals(absolute._scheme) || !this._authority.equals(absolute._authority)) {
            return absolute;
        }
        else {
            return Uri.from(Uri.Scheme.undefined(), Uri.Authority.undefined(), this._path.unmerge(absolute._path), absolute._query, absolute._fragment);
        }
    };
    Uri.prototype.copy = function (scheme, authority, path, query, fragment) {
        return Uri.from(scheme, authority, path, query, fragment);
    };
    Uri.prototype.toAny = function () {
        var uri = {};
        uri.scheme = this._scheme.toAny();
        this._authority.toAny(uri);
        uri.path = this._path.toAny();
        uri.query = this._query.toAny();
        uri.fragment = this._fragment.toAny();
        return uri;
    };
    Uri.prototype.compareTo = function (that) {
        var order = this.toString().localeCompare(that.toString());
        return order < 0 ? -1 : order > 0 ? 1 : 0;
    };
    Uri.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Uri) {
            return this.toString() === that.toString();
        }
        return false;
    };
    Uri.prototype.hashCode = function () {
        if (this._hashCode === void 0) {
            this._hashCode = Murmur3.hash(this.toString());
        }
        return this._hashCode;
    };
    Uri.prototype.debug = function (output) {
        output = output.write("Uri").write(46);
        if (this.isDefined()) {
            output = output.write("parse").write(40).write(34).display(this).write(34).write(41);
        }
        else {
            output = output.write("empty").write(40).write(41);
        }
    };
    Uri.prototype.display = function (output) {
        if (this._string != null) {
            output = output.write(this._string);
        }
        else {
            if (this._scheme.isDefined()) {
                output.display(this._scheme).write(58);
            }
            if (this._authority.isDefined()) {
                output = output.write(47).write(47).display(this._authority);
            }
            output.display(this._path);
            if (this._query.isDefined()) {
                output = output.write(63).display(this._query);
            }
            if (this._fragment.isDefined()) {
                output = output.write(35).display(this._fragment);
            }
        }
    };
    Uri.prototype.toString = function () {
        if (this._string === void 0) {
            this._string = Format.display(this);
        }
        return this._string;
    };
    Uri.empty = function () {
        if (Uri._empty === void 0) {
            Uri._empty = new Uri(Uri.Scheme.undefined(), Uri.Authority.undefined(), Uri.Path.empty(), Uri.Query.undefined(), Uri.Fragment.undefined());
        }
        return Uri._empty;
    };
    Uri.from = function (scheme, authority, path, query, fragment) {
        if (scheme === void 0) { scheme = Uri.Scheme.undefined(); }
        if (authority === void 0) { authority = Uri.Authority.undefined(); }
        if (path === void 0) { path = Uri.Path.empty(); }
        if (query === void 0) { query = Uri.Query.undefined(); }
        if (fragment === void 0) { fragment = Uri.Fragment.undefined(); }
        if (scheme.isDefined() || authority.isDefined() || path.isDefined()
            || query.isDefined() || fragment.isDefined()) {
            return new Uri(scheme, authority, path, query, fragment);
        }
        else {
            return Uri.empty();
        }
    };
    Uri.fromAny = function (uri) {
        if (uri === null || uri === void 0) {
            return Uri.empty();
        }
        else if (uri instanceof Uri) {
            return uri;
        }
        else if (typeof uri === "object") {
            var scheme = Uri.Scheme.fromAny(uri.scheme);
            var authority = Uri.Authority.fromAny(uri.authority || uri);
            var path = Uri.Path.fromAny(uri.path);
            var query = Uri.Query.fromAny(uri.query);
            var fragment = Uri.Fragment.fromAny(uri.fragment);
            if (scheme.isDefined() || authority.isDefined() || path.isDefined()
                || query.isDefined() || fragment.isDefined()) {
                return new Uri(scheme, authority, path, query, fragment);
            }
            else {
                return Uri.empty();
            }
        }
        else if (typeof uri === "string") {
            return Uri.parse(uri);
        }
        else {
            throw new TypeError("" + uri);
        }
    };
    Uri.scheme = function (scheme) {
        scheme = Uri.Scheme.fromAny(scheme);
        return Uri.from(scheme, void 0, void 0, void 0, void 0);
    };
    Uri.schemePart = function (part) {
        var scheme = Uri.Scheme.parse(part);
        return Uri.from(scheme, void 0, void 0, void 0, void 0);
    };
    Uri.schemeName = function (name) {
        var scheme = Uri.Scheme.from(name);
        return Uri.from(scheme, void 0, void 0, void 0, void 0);
    };
    Uri.authority = function (authority) {
        authority = Uri.Authority.fromAny(authority);
        return Uri.from(void 0, authority, void 0, void 0, void 0);
    };
    Uri.authorityPart = function (part) {
        var authority = Uri.Authority.parse(part);
        return Uri.from(void 0, authority, void 0, void 0, void 0);
    };
    Uri.user = function (user) {
        var authority = Uri.Authority.user(user);
        return Uri.from(void 0, authority, void 0, void 0, void 0);
    };
    Uri.userPart = function (part) {
        var authority = Uri.Authority.userPart(part);
        return Uri.from(void 0, authority, void 0, void 0, void 0);
    };
    Uri.username = function (username, password) {
        var authority = Uri.Authority.username(username, password);
        return Uri.from(void 0, authority, void 0, void 0, void 0);
    };
    Uri.password = function (password) {
        var authority = Uri.Authority.password(password);
        return Uri.from(void 0, authority, void 0, void 0, void 0);
    };
    Uri.host = function (host) {
        var authority = Uri.Authority.host(host);
        return Uri.from(void 0, authority, void 0, void 0, void 0);
    };
    Uri.hostPart = function (part) {
        var authority = Uri.Authority.hostPart(part);
        return Uri.from(void 0, authority, void 0, void 0, void 0);
    };
    Uri.hostName = function (address) {
        var authority = Uri.Authority.hostName(address);
        return Uri.from(void 0, authority, void 0, void 0, void 0);
    };
    Uri.hostIPv4 = function (address) {
        var authority = Uri.Authority.hostIPv4(address);
        return Uri.from(void 0, authority, void 0, void 0, void 0);
    };
    Uri.hostIPv6 = function (address) {
        var authority = Uri.Authority.hostIPv6(address);
        return Uri.from(void 0, authority, void 0, void 0, void 0);
    };
    Uri.port = function (port) {
        var authority = Uri.Authority.port(port);
        return Uri.from(void 0, authority, void 0, void 0, void 0);
    };
    Uri.portPart = function (part) {
        var authority = Uri.Authority.portPart(part);
        return Uri.from(void 0, authority, void 0, void 0, void 0);
    };
    Uri.portNumber = function (number) {
        var authority = Uri.Authority.portNumber(number);
        return Uri.from(void 0, authority, void 0, void 0, void 0);
    };
    Uri.path = function () {
        var components = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            components[_i] = arguments[_i];
        }
        var path = Uri.Path.from.apply(void 0, components);
        return Uri.from(void 0, void 0, path, void 0, void 0);
    };
    Uri.pathPart = function (part) {
        var path = Uri.Path.parse(part);
        return Uri.from(void 0, void 0, path, void 0, void 0);
    };
    Uri.query = function (query) {
        query = Uri.Query.fromAny(query);
        return Uri.from(void 0, void 0, void 0, query, void 0);
    };
    Uri.queryPart = function (part) {
        var query = Uri.Query.parse(part);
        return Uri.from(void 0, void 0, void 0, query, void 0);
    };
    Uri.fragment = function (fragment) {
        fragment = Uri.Fragment.fromAny(fragment);
        return Uri.from(void 0, void 0, void 0, void 0, fragment);
    };
    Uri.fragmentPart = function (part) {
        var fragment = Uri.Fragment.parse(part);
        return Uri.from(void 0, void 0, void 0, void 0, fragment);
    };
    Uri.fragmentIdentifier = function (identifier) {
        var fragment = Uri.Fragment.from(identifier);
        return Uri.from(void 0, void 0, void 0, void 0, fragment);
    };
    Uri.standardParser = function () {
        if (!this._standardParser) {
            this._standardParser = new Uri.Parser();
        }
        return this._standardParser;
    };
    Uri.parse = function (string) {
        return Uri.standardParser().parseAbsoluteString(string);
    };
    Uri.isUnreservedChar = function (c) {
        return c >= 65 && c <= 90
            || c >= 97 && c <= 122
            || c >= 48 && c <= 57
            || c === 45 || c === 46
            || c === 95 || c === 126;
    };
    Uri.isSubDelimChar = function (c) {
        return c === 33 || c === 36
            || c === 38 || c === 40
            || c === 41 || c === 42
            || c === 43 || c === 44
            || c === 59 || c === 61
            || c === 39;
    };
    Uri.isSchemeChar = function (c) {
        return c >= 65 && c <= 90
            || c >= 97 && c <= 122
            || c >= 48 && c <= 57
            || c === 43 || c === 45
            || c === 46;
    };
    Uri.isUserInfoChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c)
            || c === 58;
    };
    Uri.isUserChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c);
    };
    Uri.isHostChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c);
    };
    Uri.isPathChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c)
            || c === 58 || c === 64;
    };
    Uri.isQueryChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c)
            || c === 47 || c === 58
            || c === 63 || c === 64;
    };
    Uri.isParamChar = function (c) {
        return Uri.isUnreservedChar(c)
            || c === 33 || c === 36
            || c === 40 || c === 41
            || c === 42 || c === 43
            || c === 44 || c === 47
            || c === 58 || c === 59
            || c === 63 || c === 64
            || c === 39;
    };
    Uri.isFragmentChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c)
            || c === 47 || c === 58
            || c === 63 || c === 64;
    };
    Uri.isAlpha = function (c) {
        return c >= 65 && c <= 90
            || c >= 97 && c <= 122;
    };
    Uri.toLowerCase = function (c) {
        if (c >= 65 && c <= 90) {
            return c + (97 - 65);
        }
        else {
            return c;
        }
    };
    Uri.writeScheme = function (scheme, output) {
        for (var i = 0, n = scheme.length; i < n; i += 1) {
            var c = scheme.charCodeAt(i);
            if (i > 0 && Uri.isSchemeChar(c) || i === 0 && Uri.isAlpha(c)) {
                output = output.write(c);
            }
            else {
                throw new UriException("Invalid scheme: " + scheme);
            }
        }
    };
    Uri.writeUserInfo = function (userInfo, output) {
        for (var i = 0, n = userInfo.length; i < n; i += 1) {
            var c = userInfo.charCodeAt(i);
            if (Uri.isUserInfoChar(c)) {
                output = output.write(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeUser = function (user, output) {
        for (var i = 0, n = user.length; i < n; i += 1) {
            var c = user.charCodeAt(i);
            if (Uri.isUserChar(c)) {
                output = output.write(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeHost = function (address, output) {
        for (var i = 0, n = address.length; i < n; i += 1) {
            var c = address.charCodeAt(i);
            if (Uri.isHostChar(c)) {
                output = output.write(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeHostLiteral = function (address, output) {
        for (var i = 0, n = address.length; i < n; i += 1) {
            var c = address.charCodeAt(i);
            if (Uri.isHostChar(c) || c === 58) {
                output = output.write(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writePathSegment = function (segment, output) {
        for (var i = 0, n = segment.length; i < n; i += 1) {
            var c = segment.charCodeAt(i);
            if (Uri.isPathChar(c)) {
                output = output.write(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeQuery = function (query, output) {
        for (var i = 0, n = query.length; i < n; i += 1) {
            var c = query.charCodeAt(i);
            if (Uri.isQueryChar(c)) {
                output = output.write(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeParam = function (param, output) {
        for (var i = 0, n = param.length; i < n; i += 1) {
            var c = param.charCodeAt(i);
            if (Uri.isParamChar(c)) {
                output = output.write(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeFragment = function (fragment, output) {
        for (var i = 0, n = fragment.length; i < n; i += 1) {
            var c = fragment.charCodeAt(i);
            if (Uri.isFragmentChar(c)) {
                output = output.write(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeEncoded = function (c, output) {
        if (c === 0x00) {
            Uri.writePctEncoded(0xC0, output);
            Uri.writePctEncoded(0x80, output);
        }
        else if (c >= 0x00 && c <= 0x7F) {
            Uri.writePctEncoded(c, output);
        }
        else if (c >= 0x80 && c <= 0x07FF) {
            Uri.writePctEncoded(0xC0 | (c >>> 6), output);
            Uri.writePctEncoded(0x80 | (c & 0x3F), output);
        }
        else if (c >= 0x0800 && c <= 0xFFFF
            || c >= 0xE000 && c <= 0xFFFF) {
            Uri.writePctEncoded(0xE0 | (c >>> 12), output);
            Uri.writePctEncoded(0x80 | (c >>> 6 & 0x3F), output);
            Uri.writePctEncoded(0x80 | (c & 0x3F), output);
        }
        else if (c >= 0x10000 && c <= 0x10FFFF) {
            Uri.writePctEncoded(0xF0 | (c >>> 18), output);
            Uri.writePctEncoded(0x80 | (c >>> 12 & 0x3F), output);
            Uri.writePctEncoded(0x80 | (c >>> 6 & 0x3F), output);
            Uri.writePctEncoded(0x80 | (c & 0x3F), output);
        }
        else {
            Uri.writePctEncoded(0xEF, output);
            Uri.writePctEncoded(0xBF, output);
            Uri.writePctEncoded(0xBD, output);
        }
    };
    Uri.writePctEncoded = function (c, output) {
        output = output.write(37)
            .write(Base16.lowercase().encodeDigit(c >>> 4 & 0xF))
            .write(Base16.lowercase().encodeDigit(c & 0xF));
    };
    Uri.form = function () {
        if (!Uri._form) {
            Uri._form = new Uri.Form(Uri.empty());
        }
        return Uri._form;
    };
    return Uri;
}());
export { Uri };
//# sourceMappingURL=Uri.js.map