import { Murmur3 } from "@swim/util";
import { Format } from "@swim/codec";
import { Uri } from "./Uri";
var UriUser = (function () {
    function UriUser(username, password) {
        this._username = username;
        this._password = password;
    }
    UriUser.prototype.isDefined = function () {
        return this._username !== null;
    };
    UriUser.prototype.username = function (username) {
        if (username === void 0) {
            return this._username || "";
        }
        else {
            if (username !== this._username) {
                return this.copy(username, this._password);
            }
            else {
                return this;
            }
        }
    };
    UriUser.prototype.password = function (password) {
        if (password === void 0) {
            return this._password;
        }
        else {
            if (password !== this._password) {
                return this.copy(this._username, password);
            }
            else {
                return this;
            }
        }
    };
    UriUser.prototype.copy = function (username, password) {
        return UriUser.from(username, password);
    };
    UriUser.prototype.toAny = function (user) {
        if (this._username !== null) {
            user = user || {};
            user.username = this._username;
            if (this._password !== null) {
                user.password = this._password;
            }
        }
        return user;
    };
    UriUser.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriUser) {
            return this._username === that._username && this._password === that._password;
        }
        return false;
    };
    UriUser.prototype.hashCode = function () {
        if (UriUser._hashSeed === void 0) {
            UriUser._hashSeed = Murmur3.seed(UriUser);
        }
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(UriUser._hashSeed, Murmur3.hash(this._username)), Murmur3.hash(this._password)));
    };
    UriUser.prototype.debug = function (output) {
        output = output.write("UriUser").write(46);
        if (this.isDefined()) {
            output = output.write("parse").write(40).write(34).display(this).write(34).write(41);
        }
        else {
            output = output.write("undefined").write(40).write(41);
        }
    };
    UriUser.prototype.display = function (output) {
        if (this._username != null) {
            Uri.writeUser(this._username, output);
            if (this._password != null) {
                output = output.write(58);
                Uri.writeUser(this._password, output);
            }
        }
    };
    UriUser.prototype.toString = function () {
        return Format.display(this);
    };
    UriUser.undefined = function () {
        if (UriUser._undefined === void 0) {
            UriUser._undefined = new UriUser(null, null);
        }
        return UriUser._undefined;
    };
    UriUser.from = function (username, password) {
        if (password === void 0) { password = null; }
        if (username !== null || password !== null) {
            return new UriUser(username || "", password);
        }
        else {
            return UriUser.undefined();
        }
    };
    UriUser.fromAny = function (user) {
        if (user === null || user === void 0) {
            return UriUser.undefined();
        }
        else if (user instanceof UriUser) {
            return user;
        }
        else if (typeof user === "object") {
            var username = typeof user.username === "string" ? user.username : null;
            var password = typeof user.password === "string" ? user.password : null;
            return UriUser.from(username, password);
        }
        else if (typeof user === "string") {
            return UriUser.parse(user);
        }
        else {
            throw new TypeError("" + user);
        }
    };
    UriUser.parse = function (string) {
        return Uri.standardParser().parseUserString(string);
    };
    return UriUser;
}());
export { UriUser };
Uri.User = UriUser;
//# sourceMappingURL=UriUser.js.map