import { Murmur3, HashGenCacheMap } from "@swim/util";
import { Format } from "@swim/codec";
import { Uri } from "./Uri";
var UriPort = (function () {
    function UriPort(num) {
        this._number = num;
    }
    UriPort.prototype.isDefined = function () {
        return this._number !== 0;
    };
    UriPort.prototype.number = function () {
        return this._number;
    };
    UriPort.prototype.valueOf = function () {
        return this._number;
    };
    UriPort.prototype.toAny = function () {
        return this._number;
    };
    UriPort.prototype.compareTo = function (that) {
        return this._number < that._number ? -1 : this._number > that._number ? 1 : 0;
    };
    UriPort.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriPort) {
            return this._number === that._number;
        }
        return false;
    };
    UriPort.prototype.hashCode = function () {
        if (UriPort._hashSeed === void 0) {
            UriPort._hashSeed = Murmur3.seed(UriPort);
        }
        return Murmur3.mash(Murmur3.mix(UriPort._hashSeed, this._number));
    };
    UriPort.prototype.debug = function (output) {
        output = output.write("UriPort").write(46);
        if (this.isDefined()) {
            output = output.write("from").write(40);
            Format.displayNumber(this._number, output);
            output = output.write(41);
        }
        else {
            output = output.write("undefined").write(40).write(41);
        }
    };
    UriPort.prototype.display = function (output) {
        Format.displayNumber(this._number, output);
    };
    UriPort.prototype.toString = function () {
        return "" + this._number;
    };
    UriPort.undefined = function () {
        if (UriPort._undefined === void 0) {
            UriPort._undefined = new UriPort(0);
        }
        return UriPort._undefined;
    };
    UriPort.from = function (number) {
        if (number > 0) {
            var cache = UriPort.cache();
            var port = cache.get(number);
            if (port !== void 0) {
                return port;
            }
            else {
                return cache.put(number, new UriPort(number));
            }
        }
        else if (number === 0) {
            return UriPort.undefined();
        }
        else {
            throw new TypeError("" + number);
        }
    };
    UriPort.fromAny = function (port) {
        if (port === null || port === void 0) {
            return UriPort.undefined();
        }
        else if (port instanceof UriPort) {
            return port;
        }
        else if (typeof port === "number") {
            return UriPort.from(port);
        }
        else if (typeof port === "string") {
            return UriPort.parse(port);
        }
        else {
            throw new TypeError("" + port);
        }
    };
    UriPort.parse = function (string) {
        return Uri.standardParser().parsePortString(string);
    };
    UriPort.cache = function () {
        if (UriPort._cache === void 0) {
            var cacheSize = 4;
            UriPort._cache = new HashGenCacheMap(cacheSize);
        }
        return UriPort._cache;
    };
    return UriPort;
}());
export { UriPort };
Uri.Port = UriPort;
//# sourceMappingURL=UriPort.js.map