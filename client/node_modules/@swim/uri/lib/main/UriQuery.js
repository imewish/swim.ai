import { Murmur3, HashGenCacheSet } from "@swim/util";
import { Uri } from "./Uri";
var UriQuery = (function () {
    function UriQuery() {
    }
    Object.defineProperty(UriQuery.prototype, "length", {
        get: function () {
            var n = 0;
            var query = this;
            while (!query.isEmpty()) {
                n += 1;
                query = query.tail();
            }
            return n;
        },
        enumerable: true,
        configurable: true
    });
    UriQuery.prototype.has = function (key) {
        var query = this;
        while (!query.isEmpty()) {
            if (key === query.key()) {
                return true;
            }
            query = query.tail();
        }
        return false;
    };
    UriQuery.prototype.get = function (key) {
        var query = this;
        while (!query.isEmpty()) {
            if (key === query.key()) {
                return query.value();
            }
            query = query.tail();
        }
        return void 0;
    };
    UriQuery.prototype.updated = function (key, value) {
        var query = this;
        var builder = new Uri.QueryBuilder();
        var updated = false;
        while (!query.isEmpty()) {
            if (key === query.key()) {
                builder.addParam(key, value);
                updated = true;
            }
            else {
                builder.addParam(query.key(), query.value());
            }
            query = query.tail();
        }
        if (!updated) {
            builder.addParam(key, value);
        }
        return builder.bind();
    };
    UriQuery.prototype.removed = function (key) {
        var query = this;
        var builder = new Uri.QueryBuilder();
        var updated = false;
        while (!query.isEmpty()) {
            if (key === query.key()) {
                updated = true;
            }
            else {
                builder.addParam(query.key(), query.value());
            }
            query = query.tail();
        }
        if (updated) {
            return builder.bind();
        }
        else {
            return this;
        }
    };
    UriQuery.prototype.appended = function (key, value) {
        var builder = new Uri.QueryBuilder();
        builder.addQuery(this);
        builder.add(key, value);
        return builder.bind();
    };
    UriQuery.prototype.prepended = function (key, value) {
        var builder = new Uri.QueryBuilder();
        builder.add(key, value);
        builder.addQuery(this);
        return builder.bind();
    };
    UriQuery.prototype.toAny = function (params) {
        if (this.isDefined()) {
            params = params || {};
            var query = this;
            var i = 0;
            while (!query.isEmpty()) {
                var key = query.key();
                if (key !== null) {
                    params[key] = query.value();
                }
                else {
                    params["$" + i] = query.value();
                }
                query = query.tail();
                i += 1;
            }
        }
        return params;
    };
    UriQuery.prototype.compareTo = function (that) {
        var order = this.toString().localeCompare(that.toString());
        return order < 0 ? -1 : order > 0 ? 1 : 0;
    };
    UriQuery.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriQuery) {
            return this.toString() === that.toString();
        }
        return false;
    };
    UriQuery.prototype.hashCode = function () {
        if (this._hashCode === void 0) {
            this._hashCode = Murmur3.hash(this.toString());
        }
        return this._hashCode;
    };
    UriQuery.prototype.display = function (output) {
        var query = this;
        var first = true;
        while (!query.isEmpty()) {
            if (!first) {
                output = output.write(38);
            }
            else {
                first = false;
            }
            var key = query.key();
            if (key !== null) {
                Uri.writeParam(key, output);
                output = output.write(61);
            }
            Uri.writeQuery(query.value(), output);
            query = query.tail();
        }
    };
    UriQuery.builder = function () {
        return new Uri.QueryBuilder();
    };
    UriQuery.undefined = function () {
        if (UriQuery._undefined === void 0) {
            UriQuery._undefined = new Uri.QueryUndefined();
        }
        return UriQuery._undefined;
    };
    UriQuery.param = function (key, value, tail) {
        if (tail === void 0) {
            tail = value;
            value = key;
            key = null;
        }
        else if (key !== null) {
            key = this.cacheKey(key);
        }
        if (tail === void 0) {
            tail = UriQuery.undefined();
        }
        return new Uri.QueryParam(key, value, tail);
    };
    UriQuery.from = function (key, value) {
        var builder = new Uri.QueryBuilder();
        builder.add(key, value);
        return builder.bind();
    };
    UriQuery.fromAny = function (query) {
        if (query === null || query === void 0) {
            return UriQuery.undefined();
        }
        else if (query instanceof UriQuery) {
            return query;
        }
        else if (typeof query === "object") {
            var builder = new Uri.QueryBuilder();
            builder.add(query);
            return builder.bind();
        }
        else if (typeof query === "string") {
            return UriQuery.parse(query);
        }
        else {
            throw new TypeError("" + query);
        }
    };
    UriQuery.parse = function (string) {
        return Uri.standardParser().parseQueryString(string);
    };
    UriQuery.keyCache = function () {
        if (UriQuery._keyCache === void 0) {
            var keyCacheSize = 64;
            UriQuery._keyCache = new HashGenCacheSet(keyCacheSize);
        }
        return UriQuery._keyCache;
    };
    UriQuery.cacheKey = function (key) {
        if (key.length <= 32) {
            return UriQuery.keyCache().put(key);
        }
        else {
            return key;
        }
    };
    return UriQuery;
}());
export { UriQuery };
Uri.Query = UriQuery;
//# sourceMappingURL=UriQuery.js.map