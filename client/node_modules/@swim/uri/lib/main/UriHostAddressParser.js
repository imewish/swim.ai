import { __extends } from "tslib";
import { Parser, Diagnostic, Base10, Base16, Utf8 } from "@swim/codec";
import { Uri } from "./Uri";
import { UriParser } from "./UriParser";
var UriHostAddressParser = (function (_super) {
    __extends(UriHostAddressParser, _super);
    function UriHostAddressParser(uri, output, c1, x, step) {
        var _this = _super.call(this) || this;
        _this.uri = uri;
        _this.output = output;
        _this.c1 = c1;
        _this.x = x;
        _this.step = step;
        return _this;
    }
    UriHostAddressParser.prototype.feed = function (input) {
        return UriHostAddressParser.parse(input, this.uri, this.output, this.c1, this.x, this.step);
    };
    UriHostAddressParser.parse = function (input, uri, output, c1, x, step) {
        if (c1 === void 0) { c1 = 0; }
        if (x === void 0) { x = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        output = output || Utf8.decodedString();
        while (step <= 4) {
            while (input.isCont() && (c = input.head(), Base10.isDigit(c))) {
                input = input.step();
                output = output.write(c);
                x = 10 * x + Base10.decodeDigit(c);
            }
            if (input.isCont()) {
                if (c === 46 && step < 4 && x <= 255) {
                    input = input.step();
                    output = output.write(c);
                    x = 0;
                    step += 1;
                }
                else if (!Uri.isHostChar(c) && c !== 37 && step === 4 && x <= 255) {
                    return Parser.done(uri.hostIPv4(output.bind()));
                }
                else {
                    x = 0;
                    step = 5;
                    break;
                }
            }
            else if (!input.isEmpty()) {
                if (step === 4 && x <= 255) {
                    return Parser.done(uri.hostIPv4(output.bind()));
                }
                else {
                    return Parser.done(uri.hostName(output.bind()));
                }
            }
            else {
                break;
            }
        }
        do {
            if (step === 5) {
                while (input.isCont() && (c = input.head(), Uri.isHostChar(c))) {
                    input = input.step();
                    output.write(Uri.toLowerCase(c));
                }
                if (input.isCont() && c === 37) {
                    input = input.step();
                    step = 6;
                }
                else if (!input.isEmpty()) {
                    return Parser.done(uri.hostName(output.bind()));
                }
            }
            if (step === 6) {
                if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                    input = input.step();
                    c1 = c;
                    step = 7;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("hex digit", input));
                }
            }
            if (step === 7) {
                if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                    input = input.step();
                    output.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));
                    c1 = 0;
                    step = 5;
                    continue;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("hex digit", input));
                }
            }
            break;
        } while (true);
        return new UriHostAddressParser(uri, output, c1, x, step);
    };
    return UriHostAddressParser;
}(Parser));
export { UriHostAddressParser };
UriParser.HostAddressParser = UriHostAddressParser;
//# sourceMappingURL=UriHostAddressParser.js.map