import { __extends } from "tslib";
import { Uri } from "./Uri";
import { UriPath } from "./UriPath";
var UriPathEmpty = (function (_super) {
    __extends(UriPathEmpty, _super);
    function UriPathEmpty() {
        return _super.call(this) || this;
    }
    UriPathEmpty.prototype.isDefined = function () {
        return false;
    };
    UriPathEmpty.prototype.isAbsolute = function () {
        return false;
    };
    UriPathEmpty.prototype.isRelative = function () {
        return true;
    };
    UriPathEmpty.prototype.isEmpty = function () {
        return true;
    };
    UriPathEmpty.prototype.head = function () {
        throw new Error("Empty UriPath");
    };
    UriPathEmpty.prototype.tail = function () {
        throw new Error("Empty UriPath");
    };
    UriPathEmpty.prototype.setTail = function (tail) {
        throw new Error("Empty UriPath");
    };
    UriPathEmpty.prototype.dealias = function () {
        return this;
    };
    UriPathEmpty.prototype.parent = function () {
        return this;
    };
    UriPathEmpty.prototype.base = function () {
        return this;
    };
    UriPathEmpty.prototype.appended = function () {
        var components = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            components[_i] = arguments[_i];
        }
        return UriPath.from.apply(void 0, arguments);
    };
    UriPathEmpty.prototype.appendedSlash = function () {
        return UriPath.slash();
    };
    UriPathEmpty.prototype.appendedSegment = function (segment) {
        return UriPath.segment(segment);
    };
    UriPathEmpty.prototype.prepended = function () {
        var components = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            components[_i] = arguments[_i];
        }
        return UriPath.from.apply(void 0, arguments);
    };
    UriPathEmpty.prototype.prependedSlash = function () {
        return UriPath.slash();
    };
    UriPathEmpty.prototype.prependedSegment = function (segment) {
        return UriPath.segment(segment);
    };
    UriPathEmpty.prototype.merge = function (that) {
        return that;
    };
    UriPathEmpty.prototype.debug = function (output) {
        output = output.write("UriPath").write(46).write("empty")
            .write(40).write(41);
    };
    UriPathEmpty.prototype.display = function (output) {
    };
    UriPathEmpty.prototype.toString = function () {
        return "";
    };
    return UriPathEmpty;
}(UriPath));
export { UriPathEmpty };
Uri.PathEmpty = UriPathEmpty;
//# sourceMappingURL=UriPathEmpty.js.map