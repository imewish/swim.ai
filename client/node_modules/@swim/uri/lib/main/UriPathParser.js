import { __extends } from "tslib";
import { Parser, Diagnostic, Base16, Utf8 } from "@swim/codec";
import { Uri } from "./Uri";
import { UriParser } from "./UriParser";
var UriPathParser = (function (_super) {
    __extends(UriPathParser, _super);
    function UriPathParser(uri, builder, output, c1, step) {
        var _this = _super.call(this) || this;
        _this.uri = uri;
        _this.builder = builder;
        _this.output = output;
        _this.c1 = c1;
        _this.step = step;
        return _this;
    }
    UriPathParser.prototype.feed = function (input) {
        return UriPathParser.parse(input, this.uri, this.builder, this.output, this.c1, this.step);
    };
    UriPathParser.parse = function (input, uri, builder, output, c1, step) {
        if (c1 === void 0) { c1 = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                while (input.isCont() && (c = input.head(), Uri.isPathChar(c))) {
                    output = output || Utf8.decodedString();
                    input = input.step();
                    output = output.write(c);
                }
                if (input.isCont() && c === 47) {
                    input = input.step();
                    builder = builder || uri.pathBuilder();
                    if (output) {
                        builder.addSegment(output.bind());
                        output = void 0;
                    }
                    builder.addSlash();
                    continue;
                }
                else if (input.isCont() && c === 37) {
                    input = input.step();
                    step = 2;
                }
                else if (!input.isEmpty()) {
                    if (output) {
                        builder = builder || uri.pathBuilder();
                        builder.addSegment(output.bind());
                    }
                    if (builder) {
                        return Parser.done(builder.bind());
                    }
                    else {
                        return Parser.done(uri.pathEmpty());
                    }
                }
            }
            if (step === 2) {
                if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                    input = input.step();
                    c1 = c;
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("hex digit", input));
                }
            }
            if (step === 3) {
                if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                    output = output || Utf8.decodedString();
                    input = input.step();
                    output = output.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));
                    c1 = 0;
                    step = 1;
                    continue;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("hex digit", input));
                }
            }
            break;
        } while (true);
        return new UriPathParser(uri, builder, output, c1, step);
    };
    return UriPathParser;
}(Parser));
export { UriPathParser };
UriParser.PathParser = UriPathParser;
//# sourceMappingURL=UriPathParser.js.map