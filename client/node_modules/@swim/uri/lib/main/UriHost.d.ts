import { Comparable, HashCode, HashGenCacheMap } from "@swim/util";
import { Output, Debug, Display } from "@swim/codec";
export declare type AnyUriHost = UriHost | string;
export declare abstract class UriHost implements Comparable<UriHost>, HashCode, Debug, Display {
    _hashCode?: number;
    protected constructor();
    isDefined(): boolean;
    abstract address(): string;
    name(): string | null;
    ipv4(): string | null;
    ipv6(): string | null;
    toAny(): string;
    compareTo(that: UriHost): 0 | 1 | -1;
    equals(that: unknown): boolean;
    hashCode(): number;
    abstract debug(output: Output): void;
    abstract display(output: Output): void;
    abstract toString(): string;
    private static _undefined?;
    private static _cache?;
    static undefined(): UriHost;
    static from(address: string): UriHost;
    static ipv4(address: string): UriHost;
    static ipv6(address: string): UriHost;
    static fromAny(host: AnyUriHost | null | undefined): UriHost;
    static parse(string: string): UriHost;
    static cache(): HashGenCacheMap<string, UriHost>;
}
//# sourceMappingURL=UriHost.d.ts.map