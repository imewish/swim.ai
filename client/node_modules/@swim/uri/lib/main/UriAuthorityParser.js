import { __extends } from "tslib";
import { Diagnostic, Parser } from "@swim/codec";
import { UriParser } from "./UriParser";
var UriAuthorityParser = (function (_super) {
    __extends(UriAuthorityParser, _super);
    function UriAuthorityParser(uri, userParser, hostParser, portParser, step) {
        var _this = _super.call(this) || this;
        _this.uri = uri;
        _this.userParser = userParser;
        _this.hostParser = hostParser;
        _this.portParser = portParser;
        _this.step = step;
        return _this;
    }
    UriAuthorityParser.prototype.feed = function (input) {
        return UriAuthorityParser.parse(input, this.uri, this.userParser, this.hostParser, this.portParser, this.step);
    };
    UriAuthorityParser.parse = function (input, uri, userParser, hostParser, portParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (input.isCont()) {
                var look = input.clone();
                while (look.isCont() && (c = look.head(), c !== 64 && c !== 47)) {
                    look.step();
                }
                if (look.isCont() && c === 64) {
                    step = 2;
                }
                else {
                    step = 3;
                }
            }
            else if (input.isDone()) {
                step = 3;
            }
        }
        if (step === 2) {
            if (!userParser) {
                userParser = uri.parseUser(input);
            }
            else {
                userParser = userParser.feed(input);
            }
            if (userParser.isDone()) {
                if (input.isCont() && input.head() === 64) {
                    input = input.step();
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected(64, input));
                }
            }
            else if (userParser.isError()) {
                return userParser.asError();
            }
        }
        if (step === 3) {
            if (!hostParser) {
                hostParser = uri.parseHost(input);
            }
            else {
                hostParser = hostParser.feed(input);
            }
            if (hostParser.isDone()) {
                if (input.isCont() && input.head() === 58) {
                    input = input.step();
                    step = 4;
                }
                else if (!input.isEmpty()) {
                    return Parser.done(uri.authority(userParser && userParser.bind(), hostParser.bind()));
                }
            }
            else if (hostParser.isError()) {
                return hostParser.asError();
            }
        }
        if (step === 4) {
            if (!portParser) {
                portParser = uri.parsePort(input);
            }
            else {
                portParser = portParser.feed(input);
            }
            if (portParser.isDone()) {
                return Parser.done(uri.authority(userParser && userParser.bind(), hostParser.bind(), portParser.bind()));
            }
            else if (portParser.isError()) {
                return portParser.asError();
            }
        }
        return new UriAuthorityParser(uri, userParser, hostParser, portParser, step);
    };
    return UriAuthorityParser;
}(Parser));
export { UriAuthorityParser };
UriParser.AuthorityParser = UriAuthorityParser;
//# sourceMappingURL=UriAuthorityParser.js.map