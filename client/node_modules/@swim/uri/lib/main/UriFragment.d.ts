import { Comparable, HashCode, HashGenCacheMap } from "@swim/util";
import { Output, Debug, Display } from "@swim/codec";
export declare type AnyUriFragment = UriFragment | string;
export declare class UriFragment implements Comparable<UriFragment>, HashCode, Debug, Display {
    readonly _identifier: string | null;
    _string?: string;
    constructor(identifier: string | null);
    isDefined(): boolean;
    identifier(): string | null;
    toAny(): string | undefined;
    compareTo(that: UriFragment): 0 | 1 | -1;
    equals(that: unknown): boolean;
    hashCode(): number;
    debug(output: Output): void;
    display(output: Output): void;
    toString(): string;
    private static _undefined?;
    private static _cache?;
    static undefined(): UriFragment;
    static from(identifier: string | null): UriFragment;
    static fromAny(fragment: AnyUriFragment | null | undefined): UriFragment;
    static parse(string: string): UriFragment;
    static cache(): HashGenCacheMap<string, UriFragment>;
}
//# sourceMappingURL=UriFragment.d.ts.map