import { __extends } from "tslib";
import { Parser, Diagnostic, Base16, Utf8 } from "@swim/codec";
import { Uri } from "./Uri";
import { UriParser } from "./UriParser";
var UriUserParser = (function (_super) {
    __extends(UriUserParser, _super);
    function UriUserParser(uri, usernameOutput, passwordOutput, c1, step) {
        var _this = _super.call(this) || this;
        _this.uri = uri;
        _this.usernameOutput = usernameOutput;
        _this.passwordOutput = passwordOutput;
        _this.c1 = c1;
        _this.step = step;
        return _this;
    }
    UriUserParser.prototype.feed = function (input) {
        return UriUserParser.parse(input, this.uri, this.usernameOutput, this.passwordOutput, this.c1, this.step);
    };
    UriUserParser.parse = function (input, uri, usernameOutput, passwordOutput, c1, step) {
        if (c1 === void 0) { c1 = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                usernameOutput = usernameOutput || Utf8.decodedString();
                while (input.isCont() && (c = input.head(), Uri.isUserChar(c))) {
                    input = input.step();
                    usernameOutput.write(c);
                }
                if (input.isCont() && c === 58) {
                    input = input.step();
                    step = 4;
                }
                else if (input.isCont() && c === 37) {
                    input = input.step();
                    step = 2;
                }
                else if (!input.isEmpty()) {
                    return Parser.done(uri.user(usernameOutput.bind()));
                }
            }
            if (step === 2) {
                if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                    input = input.step();
                    c1 = c;
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("hex digit", input));
                }
            }
            if (step === 3) {
                if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                    input = input.step();
                    usernameOutput.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));
                    c1 = 0;
                    step = 1;
                    continue;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("hex digit", input));
                }
            }
            if (step === 4) {
                passwordOutput = passwordOutput || Utf8.decodedString();
                while (input.isCont() && (c = input.head(), Uri.isUserInfoChar(c))) {
                    input = input.step();
                    passwordOutput.write(c);
                }
                if (input.isCont() && c === 37) {
                    input = input.step();
                    step = 5;
                }
                else if (!input.isEmpty()) {
                    return Parser.done(uri.user(usernameOutput.bind(), passwordOutput.bind()));
                }
            }
            if (step === 5) {
                if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                    input = input.step();
                    c1 = c;
                    step = 6;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("hex digit", input));
                }
            }
            if (step === 6) {
                if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                    input = input.step();
                    passwordOutput.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));
                    c1 = 0;
                    step = 4;
                    continue;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("hex digit", input));
                }
            }
            break;
        } while (true);
        return new UriUserParser(uri, usernameOutput, passwordOutput, c1, step);
    };
    return UriUserParser;
}(Parser));
export { UriUserParser };
UriParser.UserParser = UriUserParser;
//# sourceMappingURL=UriUserParser.js.map