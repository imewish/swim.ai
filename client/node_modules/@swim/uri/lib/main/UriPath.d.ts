import { Comparable, HashCode, HashGenCacheSet } from "@swim/util";
import { Output, Debug, Display } from "@swim/codec";
import { Form } from "@swim/structure";
import { UriPathBuilder } from "./UriPathBuilder";
export declare type AnyUriPath = UriPath | string[] | string;
export declare abstract class UriPath implements Comparable<UriPath>, HashCode, Debug, Display {
    _hashCode?: number;
    protected constructor();
    abstract isDefined(): boolean;
    abstract isAbsolute(): boolean;
    abstract isRelative(): boolean;
    abstract isEmpty(): boolean;
    get length(): number;
    get(index: number): string | undefined;
    abstract head(): string;
    abstract tail(): UriPath;
    abstract setTail(tail: UriPath): void;
    abstract dealias(): UriPath;
    abstract parent(): UriPath;
    abstract base(): UriPath;
    name(): string;
    name(name: string): UriPath;
    foot(): UriPath;
    isSubpathOf(b: AnyUriPath): boolean;
    appended(...components: AnyUriPath[]): UriPath;
    appendedSlash(): UriPath;
    appendedSegment(segment: string): UriPath;
    prepended(...components: AnyUriPath[]): UriPath;
    prependedSlash(): UriPath;
    prependedSegment(segment: string): UriPath;
    resolve(that: UriPath): UriPath;
    removeDotSegments(): UriPath;
    merge(that: UriPath): UriPath;
    unmerge(relative: UriPath, root?: UriPath): UriPath;
    toAny(): string[];
    compareTo(that: UriPath): 0 | 1 | -1;
    equals(that: unknown): boolean;
    hashCode(): number;
    abstract debug(output: Output): void;
    display(output: Output): void;
    abstract toString(): string;
    private static _empty?;
    private static _slash?;
    private static _segmentCache?;
    static builder(): UriPathBuilder;
    static empty(): UriPath;
    static slash(tail?: UriPath): UriPath;
    static segment(segment: string, tail?: UriPath): UriPath;
    static from(...components: AnyUriPath[]): UriPath;
    static fromAny(path: AnyUriPath | null | undefined): UriPath;
    static parse(string: string): UriPath;
    static segmentCache(): HashGenCacheSet<string>;
    static cacheSegment(segment: string): string;
    private static _pathForm?;
    static pathForm(): Form<UriPath>;
}
//# sourceMappingURL=UriPath.d.ts.map