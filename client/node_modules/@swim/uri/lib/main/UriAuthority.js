import { Murmur3 } from "@swim/util";
import { Format } from "@swim/codec";
import { Uri } from "./Uri";
var UriAuthority = (function () {
    function UriAuthority(user, host, port) {
        this._user = user;
        this._host = host;
        this._port = port;
    }
    UriAuthority.prototype.isDefined = function () {
        return this._user.isDefined() || this._host.isDefined() || this._port.isDefined();
    };
    UriAuthority.prototype.user = function (user) {
        if (user === void 0) {
            return this._user;
        }
        else {
            user = Uri.User.fromAny(user);
            if (user !== this._user) {
                return this.copy(user, this._host, this._port);
            }
            else {
                return this;
            }
        }
    };
    UriAuthority.prototype.userPart = function (user) {
        if (user === void 0) {
            return this._user.toString();
        }
        else {
            return this.user(Uri.User.parse(user));
        }
    };
    UriAuthority.prototype.username = function (username, password) {
        if (username === void 0) {
            return this._user._username || "";
        }
        else if (password === void 0) {
            return this.user(this._user.username(username));
        }
        else {
            return this.user(Uri.User.from(username, password));
        }
    };
    UriAuthority.prototype.password = function (password) {
        if (password === void 0) {
            return this._user.password();
        }
        else {
            return this.user(this._user.password(password));
        }
    };
    UriAuthority.prototype.host = function (host) {
        if (host === void 0) {
            return this._host;
        }
        else {
            host = Uri.Host.fromAny(host);
            if (host !== this._host) {
                return this.copy(this._user, host, this._port);
            }
            else {
                return this;
            }
        }
    };
    UriAuthority.prototype.hostPart = function (host) {
        if (host === void 0) {
            return this._host.toString();
        }
        else {
            return this.host(Uri.Host.parse(host));
        }
    };
    UriAuthority.prototype.hostAddress = function () {
        return this._host.address();
    };
    UriAuthority.prototype.hostName = function (address) {
        if (address === void 0) {
            return this._host.name();
        }
        else {
            return this.host(Uri.Host.from(address));
        }
    };
    UriAuthority.prototype.hostIPv4 = function (address) {
        if (address === void 0) {
            return this._host.ipv4();
        }
        else {
            return this.host(Uri.Host.ipv4(address));
        }
    };
    UriAuthority.prototype.hostIPv6 = function (address) {
        if (address === void 0) {
            return this._host.ipv6();
        }
        else {
            return this.host(Uri.Host.ipv6(address));
        }
    };
    UriAuthority.prototype.port = function (port) {
        if (port === void 0) {
            return this._port;
        }
        else {
            port = Uri.Port.fromAny(port);
            if (port !== this._port) {
                return this.copy(this._user, this._host, port);
            }
            else {
                return this;
            }
        }
    };
    UriAuthority.prototype.portPart = function (port) {
        if (port === void 0) {
            return this._port.toString();
        }
        else {
            return this.port(Uri.Port.parse(port));
        }
    };
    UriAuthority.prototype.portNumber = function (port) {
        if (port === void 0) {
            return this._port.number();
        }
        else {
            return this.port(Uri.Port.from(port));
        }
    };
    UriAuthority.prototype.copy = function (user, host, port) {
        return UriAuthority.from(user, host, port);
    };
    UriAuthority.prototype.toAny = function (authority) {
        if (this.isDefined()) {
            authority = authority || {};
            this._user.toAny(authority);
            if (this._host.isDefined()) {
                authority.host = this._host.toAny();
            }
            if (this._port.isDefined()) {
                authority.port = this._port.toAny();
            }
        }
        return authority;
    };
    UriAuthority.prototype.compareTo = function (that) {
        var order = this.toString().localeCompare(that.toString());
        return order < 0 ? -1 : order > 0 ? 1 : 0;
    };
    UriAuthority.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriAuthority) {
            return this.toString() === that.toString();
        }
        return false;
    };
    UriAuthority.prototype.hashCode = function () {
        if (this._hashCode === void 0) {
            this._hashCode = Murmur3.hash(this.toString());
        }
        return this._hashCode;
    };
    UriAuthority.prototype.debug = function (output) {
        output = output.write("UriAuthority").write(46);
        if (this.isDefined()) {
            output = output.write("parse").write(40).write(34).display(this).write(34).write(41);
        }
        else {
            output = output.write("undefined").write(40).write(41);
        }
    };
    UriAuthority.prototype.display = function (output) {
        if (this._string !== void 0) {
            output = output.write(this._string);
        }
        else {
            if (this._user.isDefined()) {
                output.display(this._user).write(64);
            }
            output.display(this._host);
            if (this._port.isDefined()) {
                output = output.write(58).display(this._port);
            }
        }
    };
    UriAuthority.prototype.toString = function () {
        if (this._string === void 0) {
            this._string = Format.display(this);
        }
        return this._string;
    };
    UriAuthority.undefined = function () {
        if (UriAuthority._undefined === void 0) {
            UriAuthority._undefined = new UriAuthority(Uri.User.undefined(), Uri.Host.undefined(), Uri.Port.undefined());
        }
        return UriAuthority._undefined;
    };
    UriAuthority.from = function (user, host, port) {
        if (user === void 0) { user = Uri.User.undefined(); }
        if (host === void 0) { host = Uri.Host.undefined(); }
        if (port === void 0) { port = Uri.Port.undefined(); }
        if (user.isDefined() || host.isDefined() || port.isDefined()) {
            return new UriAuthority(user, host, port);
        }
        else {
            return UriAuthority.undefined();
        }
    };
    UriAuthority.fromAny = function (authority) {
        if (authority === null || authority === void 0) {
            return UriAuthority.undefined();
        }
        else if (authority instanceof UriAuthority) {
            return authority;
        }
        else if (typeof authority === "object") {
            var user = Uri.User.fromAny(authority.user || authority);
            var host = Uri.Host.fromAny(authority.host);
            var port = Uri.Port.fromAny(authority.port);
            return UriAuthority.from(user, host, port);
        }
        else if (typeof authority === "string") {
            return UriAuthority.parse(authority);
        }
        else {
            throw new TypeError("" + authority);
        }
    };
    UriAuthority.user = function (user) {
        user = Uri.User.fromAny(user);
        return UriAuthority.from(user, void 0, void 0);
    };
    UriAuthority.userPart = function (part) {
        var user = Uri.User.parse(part);
        return UriAuthority.from(user, void 0, void 0);
    };
    UriAuthority.username = function (username, password) {
        var user = Uri.User.from(username, password);
        return UriAuthority.from(user, void 0, void 0);
    };
    UriAuthority.password = function (password) {
        var user = Uri.User.from("", password);
        return UriAuthority.from(user, void 0, void 0);
    };
    UriAuthority.host = function (host) {
        host = Uri.Host.fromAny(host);
        return UriAuthority.from(void 0, host, void 0);
    };
    UriAuthority.hostPart = function (part) {
        var host = Uri.Host.parse(part);
        return UriAuthority.from(void 0, host, void 0);
    };
    UriAuthority.hostName = function (address) {
        var host = Uri.Host.from(address);
        return UriAuthority.from(void 0, host, void 0);
    };
    UriAuthority.hostIPv4 = function (address) {
        var host = Uri.Host.ipv4(address);
        return UriAuthority.from(void 0, host, void 0);
    };
    UriAuthority.hostIPv6 = function (address) {
        var host = Uri.Host.ipv6(address);
        return UriAuthority.from(void 0, host, void 0);
    };
    UriAuthority.port = function (port) {
        port = Uri.Port.fromAny(port);
        return UriAuthority.from(void 0, void 0, port);
    };
    UriAuthority.portPart = function (part) {
        var port = Uri.Port.parse(part);
        return UriAuthority.from(void 0, void 0, port);
    };
    UriAuthority.portNumber = function (number) {
        var port = Uri.Port.from(number);
        return UriAuthority.from(void 0, void 0, port);
    };
    UriAuthority.parse = function (string) {
        return Uri.standardParser().parseAuthorityString(string);
    };
    return UriAuthority;
}());
export { UriAuthority };
Uri.Authority = UriAuthority;
//# sourceMappingURL=UriAuthority.js.map