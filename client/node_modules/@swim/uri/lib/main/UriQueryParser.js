import { __extends } from "tslib";
import { Parser, Diagnostic, Base16, Utf8 } from "@swim/codec";
import { Uri } from "./Uri";
import { UriParser } from "./UriParser";
var UriQueryParser = (function (_super) {
    __extends(UriQueryParser, _super);
    function UriQueryParser(uri, builder, keyOutput, valueOutput, c1, step) {
        var _this = _super.call(this) || this;
        _this.uri = uri;
        _this.builder = builder;
        _this.keyOutput = keyOutput;
        _this.valueOutput = valueOutput;
        _this.c1 = c1;
        _this.step = step;
        return _this;
    }
    UriQueryParser.prototype.feed = function (input) {
        return UriQueryParser.parse(input, this.uri, this.builder, this.keyOutput, this.valueOutput, this.c1, this.step);
    };
    UriQueryParser.parse = function (input, uri, builder, keyOutput, valueOutput, c1, step) {
        if (c1 === void 0) { c1 = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                keyOutput = keyOutput || Utf8.decodedString();
                while (input.isCont() && (c = input.head(), Uri.isParamChar(c))) {
                    input = input.step();
                    keyOutput.write(c);
                }
                if (input.isCont() && c === 61) {
                    input = input.step();
                    step = 4;
                }
                else if (input.isCont() && c === 38) {
                    input = input.step();
                    builder = builder || uri.queryBuilder();
                    builder.addParam(keyOutput.bind());
                    keyOutput = void 0;
                    continue;
                }
                else if (input.isCont() && c === 37) {
                    input = input.step();
                    step = 2;
                }
                else if (!input.isEmpty()) {
                    builder = builder || uri.queryBuilder();
                    builder.addParam(keyOutput.bind());
                    return Parser.done(builder.bind());
                }
            }
            if (step === 2) {
                if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                    input = input.step();
                    c1 = c;
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("hex digit", input));
                }
            }
            if (step === 3) {
                if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                    input = input.step();
                    keyOutput.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));
                    c1 = 0;
                    step = 1;
                    continue;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("hex digit", input));
                }
            }
            if (step === 4) {
                valueOutput = valueOutput || Utf8.decodedString();
                while (input.isCont() && (c = input.head(), Uri.isParamChar(c) || c === 61)) {
                    input = input.step();
                    valueOutput.write(c);
                }
                if (input.isCont() && c === 38) {
                    input = input.step();
                    builder = builder || uri.queryBuilder();
                    builder.addParam(keyOutput.bind(), valueOutput.bind());
                    keyOutput = void 0;
                    valueOutput = void 0;
                    step = 1;
                    continue;
                }
                else if (input.isCont() && c === 38) {
                    input = input.step();
                    step = 5;
                }
                else if (!input.isEmpty()) {
                    builder = builder || uri.queryBuilder();
                    builder.addParam(keyOutput.bind(), valueOutput.bind());
                    return Parser.done(builder.bind());
                }
            }
            if (step === 5) {
                if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                    input = input.step();
                    c1 = c;
                    step = 6;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("hex digit", input));
                }
            }
            if (step === 6) {
                if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                    input = input.step();
                    valueOutput.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));
                    c1 = 0;
                    step = 4;
                    continue;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("hex digit", input));
                }
            }
            break;
        } while (true);
        return new UriQueryParser(uri, builder, keyOutput, valueOutput, c1, step);
    };
    return UriQueryParser;
}(Parser));
export { UriQueryParser };
UriParser.QueryParser = UriQueryParser;
//# sourceMappingURL=UriQueryParser.js.map