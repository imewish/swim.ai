import { __extends } from "tslib";
import { Parser, Diagnostic, Utf8 } from "@swim/codec";
import { Uri } from "./Uri";
import { UriParser } from "./UriParser";
var UriHostLiteralParser = (function (_super) {
    __extends(UriHostLiteralParser, _super);
    function UriHostLiteralParser(uri, output, step) {
        var _this = _super.call(this) || this;
        _this.uri = uri;
        _this.output = output;
        _this.step = step;
        return _this;
    }
    UriHostLiteralParser.prototype.feed = function (input) {
        return UriHostLiteralParser.parse(input, this.uri, this.output, this.step);
    };
    UriHostLiteralParser.parse = function (input, uri, output, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (input.isCont() && input.head() === 91) {
                input = input.step();
                step = 2;
            }
            else if (!input.isEmpty()) {
                return Parser.error(Diagnostic.expected(91, input));
            }
        }
        if (step === 2) {
            output = output || Utf8.decodedString();
            while (input.isCont() && (c = input.head(), Uri.isHostChar(c) || c === 58)) {
                input = input.step();
                output = output.write(Uri.toLowerCase(c));
            }
            if (input.isCont() && c === 93) {
                input = input.step();
                return Parser.done(uri.hostIPv6(output.bind()));
            }
            else if (!input.isEmpty()) {
                return Parser.error(Diagnostic.expected(93, input));
            }
        }
        return new UriHostLiteralParser(uri, output, step);
    };
    return UriHostLiteralParser;
}(Parser));
export { UriHostLiteralParser };
UriParser.HostLiteralParser = UriHostLiteralParser;
//# sourceMappingURL=UriHostLiteralParser.js.map