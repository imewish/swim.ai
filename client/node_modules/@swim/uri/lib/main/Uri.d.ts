import { Comparable, HashCode } from "@swim/util";
import { Output, Debug, Display } from "@swim/codec";
import { Form } from "@swim/structure";
import { AnyUriScheme, UriScheme } from "./UriScheme";
import { AnyUriAuthority, UriAuthorityInit, UriAuthority } from "./UriAuthority";
import { AnyUriUser, UriUser } from "./UriUser";
import { AnyUriHost, UriHost } from "./UriHost";
import { UriHostName } from "./UriHostName";
import { UriHostIPv4 } from "./UriHostIPv4";
import { UriHostIPv6 } from "./UriHostIPv6";
import { UriHostUndefined } from "./UriHostUndefined";
import { AnyUriPort, UriPort } from "./UriPort";
import { AnyUriPath, UriPath } from "./UriPath";
import { UriPathSegment } from "./UriPathSegment";
import { UriPathSlash } from "./UriPathSlash";
import { UriPathEmpty } from "./UriPathEmpty";
import { UriPathBuilder } from "./UriPathBuilder";
import { AnyUriQuery, UriQuery } from "./UriQuery";
import { UriQueryParam } from "./UriQueryParam";
import { UriQueryUndefined } from "./UriQueryUndefined";
import { UriQueryBuilder } from "./UriQueryBuilder";
import { AnyUriFragment, UriFragment } from "./UriFragment";
import { UriParser } from "./UriParser";
import { UriForm } from "./UriForm";
import { UriPathForm } from "./UriPathForm";
export declare type AnyUri = Uri | UriInit | string;
export interface UriInit extends UriAuthorityInit {
    scheme?: AnyUriScheme;
    authority?: AnyUriAuthority;
    path?: AnyUriPath;
    query?: AnyUriQuery;
    fragment?: AnyUriFragment;
}
export declare class Uri implements Comparable<Uri>, HashCode, Debug, Display {
    readonly _scheme: UriScheme;
    readonly _authority: UriAuthority;
    readonly _path: UriPath;
    readonly _query: UriQuery;
    readonly _fragment: UriFragment;
    _string?: string;
    _hashCode?: number;
    constructor(scheme: UriScheme, authority: UriAuthority, path: UriPath, query: UriQuery, fragment: UriFragment);
    isDefined(): boolean;
    isEmpty(): boolean;
    scheme(): UriScheme;
    scheme(scheme: AnyUriScheme): Uri;
    schemePart(): string;
    schemePart(scheme: string): Uri;
    schemeName(): string;
    schemeName(scheme: string): Uri;
    authority(): UriAuthority;
    authority(authority: AnyUriAuthority): Uri;
    authorityPart(): string;
    authorityPart(authority: string): Uri;
    user(): UriUser;
    user(user: AnyUriUser): Uri;
    userPart(): string;
    userPart(user: string): Uri;
    username(): string;
    username(username: string, password?: string | null): Uri;
    password(): string | null;
    password(password: string | null): Uri;
    host(): UriHost;
    host(host: AnyUriHost): Uri;
    hostPart(): string;
    hostPart(host: string): Uri;
    hostAddress(): string;
    hostName(): string | null;
    hostName(address: string): Uri;
    hostIPv4(): string | null;
    hostIPv4(address: string): Uri;
    hostIPv6(): string | null;
    hostIPv6(address: string): Uri;
    port(): UriPort;
    port(port: AnyUriPort): Uri;
    portPart(): string;
    portPart(port: string): Uri;
    portNumber(): number;
    portNumber(port: number): Uri;
    path(): UriPath;
    path(...components: AnyUriPath[]): Uri;
    pathPart(): string;
    pathPart(path: string): Uri;
    pathName(): string;
    pathName(name: string): Uri;
    parentPath(): UriPath;
    basePath(): UriPath;
    parent(): Uri;
    base(): Uri;
    appendedPath(...components: AnyUriPath[]): Uri;
    appendedSlash(): Uri;
    appendedSegment(segment: string): Uri;
    prependedPath(...components: AnyUriPath[]): Uri;
    prependedSlash(): Uri;
    prependedSegment(segment: string): Uri;
    query(): UriQuery;
    query(query: AnyUriQuery): Uri;
    queryPart(): string;
    queryPart(query: string): Uri;
    updatedQuery(key: string, value: string): Uri;
    removedQuery(key: string): Uri;
    appendedQuery(key: string | null, value: string): Uri;
    appendedQuery(params: AnyUriQuery): Uri;
    prependedQuery(key: string | null, value: string): Uri;
    prependedQuery(params: AnyUriQuery): Uri;
    fragment(): UriFragment;
    fragment(fragment: AnyUriFragment): Uri;
    fragmentPart(): string | null;
    fragmentPart(fragment: string): Uri;
    fragmentIdentifier(): string | null;
    fragmentIdentifier(identifier: string | null): Uri;
    endpoint(): Uri;
    resolve(relative: AnyUri): Uri;
    merge(relative: UriPath): UriPath;
    unresolve(absolute: AnyUri): Uri;
    protected copy(scheme: UriScheme, authority: UriAuthority, path: UriPath, query: UriQuery, fragment: UriFragment): Uri;
    toAny(): {
        scheme?: string;
        username?: string;
        password?: string;
        host?: string;
        port?: number;
        path: string[];
        query?: {
            [key: string]: string;
        };
        fragment?: string;
    };
    compareTo(that: Uri): 0 | 1 | -1;
    equals(that: unknown): boolean;
    hashCode(): number;
    debug(output: Output): void;
    display(output: Output): void;
    toString(): string;
    private static _empty?;
    private static _standardParser?;
    static empty(): Uri;
    static from(scheme?: UriScheme, authority?: UriAuthority, path?: UriPath, query?: UriQuery, fragment?: UriFragment): Uri;
    static fromAny(uri: AnyUri | null | undefined): Uri;
    static scheme(scheme: AnyUriScheme): Uri;
    static schemePart(part: string): Uri;
    static schemeName(name: string): Uri;
    static authority(authority: AnyUriAuthority): Uri;
    static authorityPart(part: string): Uri;
    static user(user: AnyUriUser): Uri;
    static userPart(part: string): Uri;
    static username(username: string, password?: string | null): Uri;
    static password(password: string): Uri;
    static host(host: AnyUriHost): Uri;
    static hostPart(part: string): Uri;
    static hostName(address: string): Uri;
    static hostIPv4(address: string): Uri;
    static hostIPv6(address: string): Uri;
    static port(port: AnyUriPort): Uri;
    static portPart(part: string): Uri;
    static portNumber(number: number): Uri;
    static path(...components: AnyUriPath[]): Uri;
    static pathPart(part: string): Uri;
    static query(query: AnyUriQuery): Uri;
    static queryPart(part: string): Uri;
    static fragment(fragment: AnyUriFragment): Uri;
    static fragmentPart(part: string): Uri;
    static fragmentIdentifier(identifier: string): Uri;
    static standardParser(): UriParser;
    static parse(string: string): Uri;
    static isUnreservedChar(c: number): boolean;
    static isSubDelimChar(c: number): boolean;
    static isSchemeChar(c: number): boolean;
    static isUserInfoChar(c: number): boolean;
    static isUserChar(c: number): boolean;
    static isHostChar(c: number): boolean;
    static isPathChar(c: number): boolean;
    static isQueryChar(c: number): boolean;
    static isParamChar(c: number): boolean;
    static isFragmentChar(c: number): boolean;
    static isAlpha(c: number): boolean;
    static toLowerCase(c: number): number;
    static writeScheme(scheme: string, output: Output): void;
    static writeUserInfo(userInfo: string, output: Output): void;
    static writeUser(user: string, output: Output): void;
    static writeHost(address: string, output: Output): void;
    static writeHostLiteral(address: string, output: Output): void;
    static writePathSegment(segment: string, output: Output): void;
    static writeQuery(query: string, output: Output): void;
    static writeParam(param: string, output: Output): void;
    static writeFragment(fragment: string, output: Output): void;
    static writeEncoded(c: number, output: Output): void;
    static writePctEncoded(c: number, output: Output): void;
    static Scheme: typeof UriScheme;
    static Authority: typeof UriAuthority;
    static User: typeof UriUser;
    static Host: typeof UriHost;
    static HostName: typeof UriHostName;
    static HostIPv4: typeof UriHostIPv4;
    static HostIPv6: typeof UriHostIPv6;
    static HostUndefined: typeof UriHostUndefined;
    static Port: typeof UriPort;
    static Path: typeof UriPath;
    static PathSegment: typeof UriPathSegment;
    static PathSlash: typeof UriPathSlash;
    static PathEmpty: typeof UriPathEmpty;
    static PathBuilder: typeof UriPathBuilder;
    static Query: typeof UriQuery;
    static QueryParam: typeof UriQueryParam;
    static QueryUndefined: typeof UriQueryUndefined;
    static QueryBuilder: typeof UriQueryBuilder;
    static Fragment: typeof UriFragment;
    static Parser: typeof UriParser;
    static Form: typeof UriForm;
    static PathForm: typeof UriPathForm;
    private static _form?;
    static form(): Form<Uri>;
}
//# sourceMappingURL=Uri.d.ts.map