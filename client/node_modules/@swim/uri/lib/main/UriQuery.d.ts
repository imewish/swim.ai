import { Comparable, HashCode, HashGenCacheSet } from "@swim/util";
import { Output, Debug, Display } from "@swim/codec";
import { UriQueryBuilder } from "./UriQueryBuilder";
export declare type AnyUriQuery = UriQuery | {
    [key: string]: string;
} | string;
export declare abstract class UriQuery implements Comparable<UriQuery>, HashCode, Debug, Display {
    _hashCode?: number;
    abstract isDefined(): boolean;
    abstract isEmpty(): boolean;
    get length(): number;
    abstract head(): [string | null, string];
    abstract key(): string | null;
    abstract value(): string;
    abstract tail(): UriQuery;
    abstract setTail(tail: UriQuery): void;
    abstract dealias(): UriQuery;
    has(key: string): boolean;
    get(key: string): string | undefined;
    updated(key: string, value: string): UriQuery;
    removed(key: string): UriQuery;
    appended(key: string | null, value: string): UriQuery;
    appended(params: AnyUriQuery): UriQuery;
    prepended(key: string | null, value: string): UriQuery;
    prepended(params: AnyUriQuery): UriQuery;
    toAny(params?: {
        [key: string]: string;
    }): {
        [key: string]: string;
    } | undefined;
    compareTo(that: UriQuery): 0 | 1 | -1;
    equals(that: unknown): boolean;
    hashCode(): number;
    abstract debug(output: Output): void;
    display(output: Output): void;
    abstract toString(): string;
    private static _undefined;
    private static _keyCache;
    static builder(): UriQueryBuilder;
    static undefined(): UriQuery;
    static param(value: string, tail?: UriQuery): UriQuery;
    static param(key: string | null, value: string, tail?: UriQuery): UriQuery;
    static from(key: string | null, value: string): UriQuery;
    static from(params: AnyUriQuery): UriQuery;
    static fromAny(query: AnyUriQuery | null | undefined): UriQuery;
    static parse(string: string): UriQuery;
    static keyCache(): HashGenCacheSet<string>;
    static cacheKey(key: string): string;
}
//# sourceMappingURL=UriQuery.d.ts.map