import { Parser, Diagnostic, Unicode } from "@swim/codec";
import { Uri } from "./Uri";
var UriParser = (function () {
    function UriParser() {
    }
    UriParser.prototype.absolute = function (scheme, authority, path, query, fragment) {
        return Uri.from(scheme, authority, path, query, fragment);
    };
    UriParser.prototype.scheme = function (name) {
        return Uri.Scheme.from(name);
    };
    UriParser.prototype.authority = function (user, host, port) {
        return Uri.Authority.from(user, host, port);
    };
    UriParser.prototype.user = function (username, password) {
        return Uri.User.from(username, password);
    };
    UriParser.prototype.hostName = function (address) {
        return Uri.Host.from(address);
    };
    UriParser.prototype.hostIPv4 = function (address) {
        return Uri.Host.ipv4(address);
    };
    UriParser.prototype.hostIPv6 = function (address) {
        return Uri.Host.ipv6(address);
    };
    UriParser.prototype.port = function (number) {
        return Uri.Port.from(number);
    };
    UriParser.prototype.pathEmpty = function () {
        return Uri.Path.empty();
    };
    UriParser.prototype.pathBuilder = function () {
        return new Uri.PathBuilder();
    };
    UriParser.prototype.queryBuilder = function () {
        return new Uri.QueryBuilder();
    };
    UriParser.prototype.fragment = function (identifier) {
        return Uri.Fragment.from(identifier);
    };
    UriParser.prototype.absoluteParser = function () {
        return new UriParser.AbsoluteParser(this);
    };
    UriParser.prototype.parseAbsolute = function (input) {
        return UriParser.AbsoluteParser.parse(input, this);
    };
    UriParser.prototype.parseAbsoluteString = function (string) {
        var input = Unicode.stringInput(string);
        var parser = this.parseAbsolute(input);
        if (input.isCont() && !parser.isError()) {
            parser = Parser.error(Diagnostic.unexpected(input));
        }
        return parser.bind();
    };
    UriParser.prototype.schemeParser = function () {
        return new UriParser.SchemeParser(this);
    };
    UriParser.prototype.parseScheme = function (input) {
        return UriParser.SchemeParser.parse(input, this);
    };
    UriParser.prototype.parseSchemeString = function (string) {
        var input = Unicode.stringInput(string);
        var parser = this.parseScheme(input);
        if (input.isCont() && !parser.isError()) {
            parser = Parser.error(Diagnostic.unexpected(input));
        }
        return parser.bind();
    };
    UriParser.prototype.authorityParser = function () {
        return new UriParser.AuthorityParser(this);
    };
    UriParser.prototype.parseAuthority = function (input) {
        return UriParser.AuthorityParser.parse(input, this);
    };
    UriParser.prototype.parseAuthorityString = function (string) {
        var input = Unicode.stringInput(string);
        var parser = this.parseAuthority(input);
        if (input.isCont() && !parser.isError()) {
            parser = Parser.error(Diagnostic.unexpected(input));
        }
        return parser.bind();
    };
    UriParser.prototype.userParser = function () {
        return new UriParser.UserParser(this);
    };
    UriParser.prototype.parseUser = function (input) {
        return UriParser.UserParser.parse(input, this);
    };
    UriParser.prototype.parseUserString = function (string) {
        var input = Unicode.stringInput(string);
        var parser = this.parseUser(input);
        if (input.isCont() && !parser.isError()) {
            parser = Parser.error(Diagnostic.unexpected(input));
        }
        return parser.bind();
    };
    UriParser.prototype.hostParser = function () {
        return new UriParser.HostParser(this);
    };
    UriParser.prototype.parseHost = function (input) {
        return UriParser.HostParser.parse(input, this);
    };
    UriParser.prototype.parseHostString = function (string) {
        var input = Unicode.stringInput(string);
        var parser = this.parseHost(input);
        if (input.isCont() && !parser.isError()) {
            parser = Parser.error(Diagnostic.unexpected(input));
        }
        return parser.bind();
    };
    UriParser.prototype.hostAddressParser = function () {
        return new UriParser.HostAddressParser(this);
    };
    UriParser.prototype.parseHostAddress = function (input) {
        return UriParser.HostAddressParser.parse(input, this);
    };
    UriParser.prototype.hostLiteralParser = function () {
        return new UriParser.HostLiteralParser(this);
    };
    UriParser.prototype.parseHostLiteral = function (input) {
        return UriParser.HostLiteralParser.parse(input, this);
    };
    UriParser.prototype.portParser = function () {
        return new UriParser.PortParser(this);
    };
    UriParser.prototype.parsePort = function (input) {
        return UriParser.PortParser.parse(input, this);
    };
    UriParser.prototype.parsePortString = function (string) {
        var input = Unicode.stringInput(string);
        var parser = this.parsePort(input);
        if (input.isCont() && !parser.isError()) {
            parser = Parser.error(Diagnostic.unexpected(input));
        }
        return parser.bind();
    };
    UriParser.prototype.pathParser = function (builder) {
        return new UriParser.PathParser(this, builder);
    };
    UriParser.prototype.parsePath = function (input, builder) {
        return UriParser.PathParser.parse(input, this, builder);
    };
    UriParser.prototype.parsePathString = function (string) {
        var input = Unicode.stringInput(string);
        var parser = this.parsePath(input);
        if (input.isCont() && !parser.isError()) {
            parser = Parser.error(Diagnostic.unexpected(input));
        }
        return parser.bind();
    };
    UriParser.prototype.queryParser = function (builder) {
        return new UriParser.QueryParser(this, builder);
    };
    UriParser.prototype.parseQuery = function (input, builder) {
        return UriParser.QueryParser.parse(input, this, builder);
    };
    UriParser.prototype.parseQueryString = function (string) {
        var input = Unicode.stringInput(string);
        var parser = this.parseQuery(input);
        if (input.isCont() && !parser.isError()) {
            parser = Parser.error(Diagnostic.unexpected(input));
        }
        return parser.bind();
    };
    UriParser.prototype.fragmentParser = function () {
        return new UriParser.FragmentParser(this);
    };
    UriParser.prototype.parseFragment = function (input) {
        return UriParser.FragmentParser.parse(input, this);
    };
    UriParser.prototype.parseFragmentString = function (string) {
        var input = Unicode.stringInput(string);
        var parser = this.parseFragment(input);
        if (input.isCont() && !parser.isError()) {
            parser = Parser.error(Diagnostic.unexpected(input));
        }
        return parser.bind();
    };
    return UriParser;
}());
export { UriParser };
Uri.Parser = UriParser;
//# sourceMappingURL=UriParser.js.map