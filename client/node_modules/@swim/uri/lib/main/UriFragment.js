import { Murmur3, HashGenCacheMap } from "@swim/util";
import { Format } from "@swim/codec";
import { Uri } from "./Uri";
var UriFragment = (function () {
    function UriFragment(identifier) {
        this._identifier = identifier;
    }
    UriFragment.prototype.isDefined = function () {
        return this._identifier !== null;
    };
    UriFragment.prototype.identifier = function () {
        return this._identifier;
    };
    UriFragment.prototype.toAny = function () {
        return this._identifier !== null ? this._identifier : void 0;
    };
    UriFragment.prototype.compareTo = function (that) {
        var order = this.toString().localeCompare(that.toString());
        return order < 0 ? -1 : order > 0 ? 1 : 0;
    };
    UriFragment.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriFragment) {
            return this._identifier === that._identifier;
        }
        return false;
    };
    UriFragment.prototype.hashCode = function () {
        return Murmur3.hash(this._identifier);
    };
    UriFragment.prototype.debug = function (output) {
        output = output.write("UriFragment").write(46);
        if (this.isDefined()) {
            output = output.write("parse").write(40).write(34).display(this).write(34).write(41);
        }
        else {
            output = output.write("undefined").write(40).write(41);
        }
    };
    UriFragment.prototype.display = function (output) {
        if (this._string !== void 0) {
            output = output.write(this._string);
        }
        else if (this._identifier !== null) {
            Uri.writeFragment(this._identifier, output);
        }
    };
    UriFragment.prototype.toString = function () {
        if (this._string == null) {
            this._string = Format.display(this);
        }
        return this._string;
    };
    UriFragment.undefined = function () {
        if (UriFragment._undefined === void 0) {
            UriFragment._undefined = new UriFragment(null);
        }
        return UriFragment._undefined;
    };
    UriFragment.from = function (identifier) {
        if (identifier !== null) {
            var cache = UriFragment.cache();
            var fragment = cache.get(identifier);
            if (fragment) {
                return fragment;
            }
            else {
                return cache.put(identifier, new UriFragment(identifier));
            }
        }
        else {
            return UriFragment.undefined();
        }
    };
    UriFragment.fromAny = function (fragment) {
        if (fragment === null || fragment === void 0) {
            return UriFragment.undefined();
        }
        else if (fragment instanceof UriFragment) {
            return fragment;
        }
        else if (typeof fragment === "string") {
            return UriFragment.parse(fragment);
        }
        else {
            throw new TypeError("" + fragment);
        }
    };
    UriFragment.parse = function (string) {
        return Uri.standardParser().parseFragmentString(string);
    };
    UriFragment.cache = function () {
        if (UriFragment._cache === void 0) {
            var cacheSize = 32;
            UriFragment._cache = new HashGenCacheMap(cacheSize);
        }
        return UriFragment._cache;
    };
    return UriFragment;
}());
export { UriFragment };
Uri.Fragment = UriFragment;
//# sourceMappingURL=UriFragment.js.map