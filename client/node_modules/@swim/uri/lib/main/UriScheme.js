import { Murmur3, HashGenCacheMap } from "@swim/util";
import { Uri } from "./Uri";
var UriScheme = (function () {
    function UriScheme(name) {
        this._name = name;
    }
    UriScheme.prototype.isDefined = function () {
        return this._name.length !== 0;
    };
    UriScheme.prototype.name = function () {
        return this._name;
    };
    UriScheme.prototype.toAny = function () {
        return this._name.length !== 0 ? this._name : void 0;
    };
    UriScheme.prototype.compareTo = function (that) {
        var order = this._name.localeCompare(that._name);
        return order < 0 ? -1 : order > 0 ? 1 : 0;
    };
    UriScheme.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriScheme) {
            return this._name === that._name;
        }
        return false;
    };
    UriScheme.prototype.hashCode = function () {
        return Murmur3.hash(this._name);
    };
    UriScheme.prototype.debug = function (output) {
        output = output.write("UriScheme").write(46);
        if (this.isDefined()) {
            output = output.write("parse").write(40).write(34).display(this).write(34).write(41);
        }
        else {
            output = output.write("undefined").write(40).write(41);
        }
    };
    UriScheme.prototype.display = function (output) {
        Uri.writeScheme(this._name, output);
    };
    UriScheme.prototype.toString = function () {
        return this._name;
    };
    UriScheme.undefined = function () {
        if (UriScheme._undefined === void 0) {
            UriScheme._undefined = new UriScheme("");
        }
        return UriScheme._undefined;
    };
    UriScheme.from = function (name) {
        var cache = UriScheme.cache();
        var scheme = cache.get(name);
        if (scheme) {
            return scheme;
        }
        else {
            return cache.put(name, new UriScheme(name));
        }
    };
    UriScheme.fromAny = function (scheme) {
        if (scheme === null || scheme === void 0) {
            return UriScheme.undefined();
        }
        else if (scheme instanceof UriScheme) {
            return scheme;
        }
        else if (typeof scheme === "string") {
            return UriScheme.parse(scheme);
        }
        else {
            throw new TypeError("" + scheme);
        }
    };
    UriScheme.parse = function (string) {
        return Uri.standardParser().parseSchemeString(string);
    };
    UriScheme.cache = function () {
        if (UriScheme._cache === void 0) {
            var cacheSize = 4;
            UriScheme._cache = new HashGenCacheMap(cacheSize);
        }
        return UriScheme._cache;
    };
    return UriScheme;
}());
export { UriScheme };
Uri.Scheme = UriScheme;
//# sourceMappingURL=UriScheme.js.map