import { Uri } from "./Uri";
var UriQueryBuilder = (function () {
    function UriQueryBuilder() {
        this._first = Uri.Query.undefined();
        this._last = null;
        this._size = 0;
        this._aliased = 0;
    }
    UriQueryBuilder.prototype.isEmpty = function () {
        return this._size === 0;
    };
    UriQueryBuilder.prototype.add = function (key, value) {
        if (value !== void 0) {
            this.addParam(key, value);
        }
        else if (typeof key === "string") {
            this.addParam(null, key);
        }
        else if (key instanceof Uri.Query) {
            this.addQuery(key);
        }
        else {
            var params = key;
            for (var k in params) {
                var key_1 = k;
                var value_1 = params[k];
                if (k.charCodeAt(0) === 36) {
                    key_1 = null;
                }
                this.addParam(key_1, value_1);
            }
        }
    };
    UriQueryBuilder.prototype.bind = function () {
        this._aliased = 0;
        return this._first;
    };
    UriQueryBuilder.prototype.addParam = function (key, value) {
        if (value === void 0) {
            value = key;
            key = null;
        }
        var tail = Uri.Query.param(key, value, Uri.Query.undefined());
        var size = this._size;
        if (size === 0) {
            this._first = tail;
        }
        else {
            this.dealias(size - 1).setTail(tail);
        }
        this._last = tail;
        this._size = size + 1;
        this._aliased += 1;
    };
    UriQueryBuilder.prototype.addQuery = function (query) {
        if (!query.isEmpty()) {
            var size = this._size;
            if (size === 0) {
                this._first = query;
            }
            else {
                this.dealias(size - 1).setTail(query);
            }
            size += 1;
            do {
                var tail = query.tail();
                if (!tail.isEmpty()) {
                    query = tail;
                    size += 1;
                }
                else {
                    break;
                }
            } while (true);
            this._last = query;
            this._size = size;
        }
    };
    UriQueryBuilder.prototype.dealias = function (n) {
        var i = 0;
        var xi = null;
        var xs = this._first;
        if (this._aliased <= n) {
            while (i < this._aliased) {
                xi = xs;
                xs = xs.tail();
                i += 1;
            }
            while (i <= n) {
                var xn = xs.dealias();
                if (i === 0) {
                    this._first = xn;
                }
                else {
                    xi.setTail(xn);
                }
                xi = xn;
                xs = xs.tail();
                i += 1;
            }
            if (i === this._size) {
                this._last = xi;
            }
            this._aliased = i;
        }
        else if (n === 0) {
            xi = this._first;
        }
        else if (n === this._size - 1) {
            xi = this._last;
        }
        else {
            while (i <= n) {
                xi = xs;
                xs = xs.tail();
                i += 1;
            }
        }
        return xi;
    };
    return UriQueryBuilder;
}());
export { UriQueryBuilder };
Uri.QueryBuilder = UriQueryBuilder;
//# sourceMappingURL=UriQueryBuilder.js.map