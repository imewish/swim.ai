import { Input, Parser } from "@swim/codec";
import { Uri } from "./Uri";
import { UriScheme } from "./UriScheme";
import { UriAuthority } from "./UriAuthority";
import { UriUser } from "./UriUser";
import { UriHost } from "./UriHost";
import { UriPort } from "./UriPort";
import { UriPath } from "./UriPath";
import { UriPathBuilder } from "./UriPathBuilder";
import { UriQuery } from "./UriQuery";
import { UriQueryBuilder } from "./UriQueryBuilder";
import { UriFragment } from "./UriFragment";
import { UriAbsoluteParser } from "./UriAbsoluteParser";
import { UriSchemeParser } from "./UriSchemeParser";
import { UriAuthorityParser } from "./UriAuthorityParser";
import { UriUserParser } from "./UriUserParser";
import { UriHostParser } from "./UriHostParser";
import { UriHostAddressParser } from "./UriHostAddressParser";
import { UriHostLiteralParser } from "./UriHostLiteralParser";
import { UriPortParser } from "./UriPortParser";
import { UriPathParser } from "./UriPathParser";
import { UriQueryParser } from "./UriQueryParser";
import { UriFragmentParser } from "./UriFragmentParser";
export declare class UriParser {
    absolute(scheme?: UriScheme, authority?: UriAuthority, path?: UriPath, query?: UriQuery, fragment?: UriFragment): Uri;
    scheme(name: string): UriScheme;
    authority(user?: UriUser, host?: UriHost, port?: UriPort): UriAuthority;
    user(username: string | null, password?: string | null): UriUser;
    hostName(address: string): UriHost;
    hostIPv4(address: string): UriHost;
    hostIPv6(address: string): UriHost;
    port(number: number): UriPort;
    pathEmpty(): UriPath;
    pathBuilder(): UriPathBuilder;
    queryBuilder(): UriQueryBuilder;
    fragment(identifier: string | null): UriFragment;
    absoluteParser(): Parser<Uri>;
    parseAbsolute(input: Input): Parser<Uri>;
    parseAbsoluteString(string: string): Uri;
    schemeParser(): Parser<UriScheme>;
    parseScheme(input: Input): Parser<UriScheme>;
    parseSchemeString(string: string): UriScheme;
    authorityParser(): Parser<UriAuthority>;
    parseAuthority(input: Input): Parser<UriAuthority>;
    parseAuthorityString(string: string): UriAuthority;
    userParser(): Parser<UriUser>;
    parseUser(input: Input): Parser<UriUser>;
    parseUserString(string: string): UriUser;
    hostParser(): Parser<UriHost>;
    parseHost(input: Input): Parser<UriHost>;
    parseHostString(string: string): UriHost;
    hostAddressParser(): Parser<UriHost>;
    parseHostAddress(input: Input): Parser<UriHost>;
    hostLiteralParser(): Parser<UriHost>;
    parseHostLiteral(input: Input): Parser<UriHost>;
    portParser(): Parser<UriPort>;
    parsePort(input: Input): Parser<UriPort>;
    parsePortString(string: string): UriPort;
    pathParser(builder?: UriPathBuilder): Parser<UriPath>;
    parsePath(input: Input, builder?: UriPathBuilder): Parser<UriPath>;
    parsePathString(string: string): UriPath;
    queryParser(builder?: UriQueryBuilder): Parser<UriQuery>;
    parseQuery(input: Input, builder?: UriQueryBuilder): Parser<UriQuery>;
    parseQueryString(string: string): UriQuery;
    fragmentParser(): Parser<UriFragment>;
    parseFragment(input: Input): Parser<UriFragment>;
    parseFragmentString(string: string): UriFragment;
    static AbsoluteParser: typeof UriAbsoluteParser;
    static SchemeParser: typeof UriSchemeParser;
    static AuthorityParser: typeof UriAuthorityParser;
    static UserParser: typeof UriUserParser;
    static HostParser: typeof UriHostParser;
    static HostAddressParser: typeof UriHostAddressParser;
    static HostLiteralParser: typeof UriHostLiteralParser;
    static PortParser: typeof UriPortParser;
    static PathParser: typeof UriPathParser;
    static QueryParser: typeof UriQueryParser;
    static FragmentParser: typeof UriFragmentParser;
}
//# sourceMappingURL=UriParser.d.ts.map