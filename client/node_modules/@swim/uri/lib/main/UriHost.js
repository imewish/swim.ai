import { Murmur3, HashGenCacheMap } from "@swim/util";
import { Uri } from "./Uri";
var UriHost = (function () {
    function UriHost() {
    }
    UriHost.prototype.isDefined = function () {
        return true;
    };
    UriHost.prototype.name = function () {
        return null;
    };
    UriHost.prototype.ipv4 = function () {
        return null;
    };
    UriHost.prototype.ipv6 = function () {
        return null;
    };
    UriHost.prototype.toAny = function () {
        return this.toString();
    };
    UriHost.prototype.compareTo = function (that) {
        var order = this.toString().localeCompare(that.toString());
        return order < 0 ? -1 : order > 0 ? 1 : 0;
    };
    UriHost.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriHost) {
            return this.toString() === that.toString();
        }
        return false;
    };
    UriHost.prototype.hashCode = function () {
        if (this._hashCode === void 0) {
            this._hashCode = Murmur3.hash(this.toString());
        }
        return this._hashCode;
    };
    UriHost.undefined = function () {
        if (UriHost._undefined === void 0) {
            UriHost._undefined = new Uri.HostUndefined();
        }
        return UriHost._undefined;
    };
    UriHost.from = function (address) {
        var cache = UriHost.cache();
        var host = cache.get(address);
        if (host instanceof Uri.HostName) {
            return host;
        }
        else {
            return cache.put(address, new Uri.HostName(address));
        }
    };
    UriHost.ipv4 = function (address) {
        var cache = UriHost.cache();
        var host = cache.get(address);
        if (host instanceof Uri.HostIPv4) {
            return host;
        }
        else {
            return cache.put(address, new Uri.HostIPv4(address));
        }
    };
    UriHost.ipv6 = function (address) {
        var cache = UriHost.cache();
        var host = cache.get(address);
        if (host instanceof Uri.HostIPv6) {
            return host;
        }
        else {
            return cache.put(address, new Uri.HostIPv6(address));
        }
    };
    UriHost.fromAny = function (host) {
        if (host === null || host === void 0) {
            return UriHost.undefined();
        }
        else if (host instanceof UriHost) {
            return host;
        }
        else if (typeof host === "string") {
            return UriHost.parse(host);
        }
        else {
            throw new TypeError("" + host);
        }
    };
    UriHost.parse = function (string) {
        return Uri.standardParser().parseHostString(string);
    };
    UriHost.cache = function () {
        if (UriHost._cache === void 0) {
            var cacheSize = 16;
            UriHost._cache = new HashGenCacheMap(cacheSize);
        }
        return UriHost._cache;
    };
    return UriHost;
}());
export { UriHost };
Uri.Host = UriHost;
//# sourceMappingURL=UriHost.js.map