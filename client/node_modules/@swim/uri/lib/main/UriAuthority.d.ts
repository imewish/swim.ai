import { Comparable, HashCode } from "@swim/util";
import { Output, Debug, Display } from "@swim/codec";
import { AnyUriUser, UriUserInit, UriUser } from "./UriUser";
import { AnyUriHost, UriHost } from "./UriHost";
import { AnyUriPort, UriPort } from "./UriPort";
export declare type AnyUriAuthority = UriAuthority | UriAuthorityInit | string;
export interface UriAuthorityInit extends UriUserInit {
    user?: AnyUriUser;
    host?: AnyUriHost;
    port?: AnyUriPort;
}
export declare class UriAuthority implements Comparable<UriAuthority>, HashCode, Debug, Display {
    readonly _user: UriUser;
    readonly _host: UriHost;
    readonly _port: UriPort;
    _string?: string;
    _hashCode?: number;
    constructor(user: UriUser, host: UriHost, port: UriPort);
    isDefined(): boolean;
    user(): UriUser;
    user(user: AnyUriUser): UriAuthority;
    userPart(): string;
    userPart(user: string): UriAuthority;
    username(): string;
    username(username: string, password?: string | null): UriAuthority;
    password(): string | null;
    password(password: string | null): UriAuthority;
    host(): UriHost;
    host(host: AnyUriHost): UriAuthority;
    hostPart(): string;
    hostPart(host: string): UriAuthority;
    hostAddress(): string;
    hostName(): string | null;
    hostName(address: string): UriAuthority;
    hostIPv4(): string | null;
    hostIPv4(address: string): UriAuthority;
    hostIPv6(): string | null;
    hostIPv6(address: string): UriAuthority;
    port(): UriPort;
    port(port: AnyUriPort): UriAuthority;
    portPart(): string;
    portPart(port: string): UriAuthority;
    portNumber(): number;
    portNumber(port: number): UriAuthority;
    protected copy(user: UriUser, host: UriHost, port: UriPort): UriAuthority;
    toAny(authority?: {
        username?: string;
        password?: string;
        host?: string;
        port?: number;
    }): {
        username?: string;
        password?: string;
        host?: string;
        port?: number;
    } | undefined;
    compareTo(that: UriAuthority): 0 | 1 | -1;
    equals(that: unknown): boolean;
    hashCode(): number;
    debug(output: Output): void;
    display(output: Output): void;
    toString(): string;
    private static _undefined?;
    static undefined(): UriAuthority;
    static from(user?: UriUser, host?: UriHost, port?: UriPort): UriAuthority;
    static fromAny(authority: AnyUriAuthority | null | undefined): UriAuthority;
    static user(user: AnyUriUser): UriAuthority;
    static userPart(part: string): UriAuthority;
    static username(username: string, password?: string | null): UriAuthority;
    static password(password: string): UriAuthority;
    static host(host: AnyUriHost): UriAuthority;
    static hostPart(part: string): UriAuthority;
    static hostName(address: string): UriAuthority;
    static hostIPv4(address: string): UriAuthority;
    static hostIPv6(address: string): UriAuthority;
    static port(port: AnyUriPort): UriAuthority;
    static portPart(part: string): UriAuthority;
    static portNumber(number: number): UriAuthority;
    static parse(string: string): UriAuthority;
}
//# sourceMappingURL=UriAuthority.d.ts.map