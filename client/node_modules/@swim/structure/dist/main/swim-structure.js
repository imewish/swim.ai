(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@swim/util'), require('@swim/codec')) :
    typeof define === 'function' && define.amd ? define(['exports', '@swim/util', '@swim/codec'], factory) :
    (global = global || self, factory(global.swim = global.swim || {}, global.swim, global.swim));
}(this, (function (exports, util, codec) { 'use strict';

    var Item = (function () {
        function Item() {
        }
        Item.prototype.updated = function (key, value) {
            var record = Item.Record.create(2);
            record.push(this);
            record.set(key, value);
            return record;
        };
        Item.prototype.updatedAttr = function (key, value) {
            var record = Item.Record.create(2);
            record.push(this);
            record.setAttr(key, value);
            return record;
        };
        Item.prototype.updatedSlot = function (key, value) {
            var record = Item.Record.create(2);
            record.push(this);
            record.setSlot(key, value);
            return record;
        };
        Item.prototype.appended = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var record = Item.Record.create(1 + arguments.length);
            record.push(this);
            record.push.apply(record, arguments);
            return record;
        };
        Item.prototype.prepended = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var record = Item.Record.create(arguments.length + 1);
            record.push.apply(record, arguments);
            record.push(this);
            return record;
        };
        Item.prototype.concat = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var record = Item.Record.create();
            record.push(this);
            for (var i = 0, n = arguments.length; i < n; i += 1) {
                Item.fromAny(arguments[i]).forEach(function (item) {
                    record.push(item);
                });
            }
            return record;
        };
        Item.prototype.lt = function (that) {
            that = Item.fromAny(that);
            return this.compareTo(that) < 0 ? Item.Bool.from(true) : Item.absent();
        };
        Item.prototype.le = function (that) {
            that = Item.fromAny(that);
            return this.compareTo(that) <= 0 ? Item.Bool.from(true) : Item.absent();
        };
        Item.prototype.eq = function (that) {
            that = Item.fromAny(that);
            return this.equals(that) ? Item.Bool.from(true) : Item.absent();
        };
        Item.prototype.ne = function (that) {
            that = Item.fromAny(that);
            return !this.equals(that) ? Item.Bool.from(true) : Item.absent();
        };
        Item.prototype.ge = function (that) {
            that = Item.fromAny(that);
            return this.compareTo(that) >= 0 ? Item.Bool.from(true) : Item.absent();
        };
        Item.prototype.gt = function (that) {
            that = Item.fromAny(that);
            return this.compareTo(that) > 0 ? Item.Bool.from(true) : Item.absent();
        };
        Item.prototype.invoke = function (args) {
            return Item.absent();
        };
        Item.prototype.filter = function (predicate) {
            var selector = Item.Selector.literal(this);
            return selector.filter.apply(selector, arguments);
        };
        Item.prototype.max = function (that) {
            return this.compareTo(that) >= 0 ? this : that;
        };
        Item.prototype.min = function (that) {
            return this.compareTo(that) <= 0 ? this : that;
        };
        Item.prototype.evaluate = function (interpreter) {
            return this;
        };
        Item.prototype.substitute = function (interpreter) {
            return this;
        };
        Item.prototype.cast = function (form, orElse) {
            var object = form.cast(this);
            if (object === void 0) {
                object = orElse;
            }
            return object;
        };
        Item.prototype.coerce = function (form, orElse) {
            var object = form.cast(this);
            if (object === void 0) {
                object = form.unit();
            }
            if (object === void 0) {
                object = orElse;
            }
            return object;
        };
        Item.prototype.precedence = function () {
            return 11;
        };
        Item.prototype.forEach = function (callback, thisArg) {
            return callback.call(thisArg, this, 0);
        };
        Item.prototype.iterator = function () {
            return util.Cursor.unary(this);
        };
        Item.prototype.display = function (output) {
            this.debug(output);
        };
        Item.prototype.toString = function () {
            return codec.Format.debug(this);
        };
        Item.empty = function () {
            return Item.Record.empty();
        };
        Item.extant = function () {
            return Item.Extant.extant();
        };
        Item.absent = function () {
            return Item.Absent.absent();
        };
        Item.fromAny = function (item) {
            if (item instanceof Item) {
                return item;
            }
            else {
                return Item.Value.fromAny(item);
            }
        };
        Item.globalScope = function () {
            if (!Item._globalScope) {
                Item._globalScope = Item.Record.create(1)
                    .slot("math", Item.MathModule.scope())
                    .commit();
            }
            return Item._globalScope;
        };
        return Item;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    var Field = (function (_super) {
        __extends(Field, _super);
        function Field() {
            return _super.call(this) || this;
        }
        Field.prototype.isDefined = function () {
            return true;
        };
        Field.prototype.isDistinct = function () {
            return true;
        };
        Field.prototype.toValue = function () {
            return this.value;
        };
        Field.prototype.tag = function () {
            return void 0;
        };
        Field.prototype.target = function () {
            return this.value;
        };
        Field.prototype.flattened = function () {
            return Item.Value.absent();
        };
        Field.prototype.unflattened = function () {
            return Item.Record.of(this);
        };
        Field.prototype.header = function (tag) {
            return Item.Value.absent();
        };
        Field.prototype.headers = function (tag) {
            return void 0;
        };
        Field.prototype.head = function () {
            return Item.absent();
        };
        Field.prototype.tail = function () {
            return Item.Record.empty();
        };
        Field.prototype.body = function () {
            return Item.Value.absent();
        };
        Object.defineProperty(Field.prototype, "length", {
            get: function () {
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        Field.prototype.has = function (key) {
            return false;
        };
        Field.prototype.get = function (key) {
            return Item.Value.absent();
        };
        Field.prototype.getAttr = function (key) {
            return Item.Value.absent();
        };
        Field.prototype.getSlot = function (key) {
            return Item.Value.absent();
        };
        Field.prototype.getField = function (key) {
            return void 0;
        };
        Field.prototype.getItem = function (index) {
            return Item.absent();
        };
        Field.prototype.deleted = function (key) {
            return this;
        };
        Field.prototype.conditional = function (thenTerm, elseTerm) {
            thenTerm = Item.fromAny(thenTerm);
            return thenTerm;
        };
        Field.prototype.or = function (that) {
            return this;
        };
        Field.prototype.and = function (that) {
            that = Item.fromAny(that);
            return that;
        };
        Field.prototype.lambda = function (template) {
            return Item.Value.absent();
        };
        Field.prototype.stringValue = function (orElse) {
            return this.value.stringValue(orElse);
        };
        Field.prototype.numberValue = function (orElse) {
            return this.value.numberValue(orElse);
        };
        Field.prototype.booleanValue = function (orElse) {
            return this.value.booleanValue(orElse);
        };
        Field.of = function (key, value) {
            var name;
            if (typeof key === "string") {
                name = key;
            }
            else if (key instanceof Item.Text) {
                name = key.value;
            }
            if (name !== void 0 && name.charCodeAt(0) === 64) {
                arguments[0] = name.slice(1);
                return Item.Attr.of.apply(undefined, arguments);
            }
            else {
                return Item.Slot.of.apply(undefined, arguments);
            }
        };
        Field.fromAny = function (field) {
            if (field instanceof Field) {
                return field;
            }
            else if (field && typeof field === "object") {
                if (field.$key !== void 0) {
                    return Field.of(field.$key, field.$value);
                }
                else {
                    for (var key in field) {
                        return Field.of(key, field[key]);
                    }
                }
            }
            throw new TypeError("" + field);
        };
        Field.IMMUTABLE = 1 << 0;
        return Field;
    }(Item));
    Item.Field = Field;

    var InterpreterException = (function (_super) {
        __extends(InterpreterException, _super);
        function InterpreterException(message) {
            var _this = _super.call(this, message) || this;
            _this.__proto__ = InterpreterException.prototype;
            return _this;
        }
        return InterpreterException;
    }(Error));

    var InterpreterSettings = (function () {
        function InterpreterSettings(maxScopeDepth) {
            this._maxScopeDepth = maxScopeDepth;
        }
        InterpreterSettings.prototype.maxScopeDepth = function (maxScopeDepth) {
            if (maxScopeDepth === void 0) {
                return this._maxScopeDepth;
            }
            else {
                return this.copy(maxScopeDepth);
            }
        };
        InterpreterSettings.prototype.copy = function (maxScopeDepth) {
            return new InterpreterSettings(maxScopeDepth);
        };
        InterpreterSettings.prototype.canEqual = function (that) {
            return that instanceof InterpreterSettings;
        };
        InterpreterSettings.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof InterpreterSettings) {
                return that.canEqual(this) && this._maxScopeDepth === that._maxScopeDepth;
            }
            return false;
        };
        InterpreterSettings.prototype.hashCode = function () {
            if (InterpreterSettings._hashSeed === void 0) {
                InterpreterSettings._hashSeed = util.Murmur3.seed(InterpreterSettings);
            }
            return util.Murmur3.mash(util.Murmur3.mix(InterpreterSettings._hashSeed, this._maxScopeDepth));
        };
        InterpreterSettings.prototype.debug = function (output) {
            output = output.write("new").write(32).write("InterpreterSettings")
                .write(40).debug(this._maxScopeDepth).write(41);
        };
        InterpreterSettings.prototype.toString = function () {
            return codec.Format.debug(this);
        };
        InterpreterSettings.standard = function () {
            if (!InterpreterSettings._standard) {
                var maxScopeDepth = 1024;
                InterpreterSettings._standard = new InterpreterSettings(maxScopeDepth);
            }
            return InterpreterSettings._standard;
        };
        return InterpreterSettings;
    }());

    var Interpreter = (function () {
        function Interpreter(settings, scopeStack, scopeDepth) {
            if (settings === void 0) { settings = InterpreterSettings.standard(); }
            if (scopeStack === void 0) { scopeStack = null; }
            if (scopeDepth === void 0) { scopeDepth = 0; }
            this._settings = settings;
            this._scopeStack = scopeStack;
            this._scopeDepth = scopeDepth;
        }
        Interpreter.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                this._settings = settings;
                return this;
            }
        };
        Interpreter.prototype.scopeDepth = function () {
            return this._scopeDepth;
        };
        Interpreter.prototype.peekScope = function () {
            var scopeDepth = this._scopeDepth;
            if (scopeDepth <= 0) {
                throw new InterpreterException("scope stack empty");
            }
            return this._scopeStack[scopeDepth - 1];
        };
        Interpreter.prototype.getScope = function (index) {
            if (index < 0 || index >= this._scopeDepth) {
                throw new RangeError("" + index);
            }
            return this._scopeStack[index];
        };
        Interpreter.prototype.pushScope = function (scope) {
            var scopeDepth = this._scopeDepth;
            if (scopeDepth >= this._settings._maxScopeDepth) {
                throw new InterpreterException("scope stack overflow");
            }
            var oldScopeStack = this._scopeStack;
            var newScopeStack;
            if (oldScopeStack === null || scopeDepth + 1 > oldScopeStack.length) {
                newScopeStack = new Array(Interpreter.expand(scopeDepth + 1));
                if (oldScopeStack != null) {
                    for (var i = 0; i < scopeDepth; i += 1) {
                        newScopeStack[i] = oldScopeStack[i];
                    }
                }
                this._scopeStack = newScopeStack;
            }
            else {
                newScopeStack = oldScopeStack;
            }
            newScopeStack[scopeDepth] = scope;
            this._scopeDepth = scopeDepth + 1;
        };
        Interpreter.prototype.popScope = function () {
            var scopeDepth = this._scopeDepth;
            if (scopeDepth <= 0) {
                throw new InterpreterException("scope stack empty");
            }
            var scopeStack = this._scopeStack;
            var scope = scopeStack[scopeDepth - 1];
            scopeStack[scopeDepth - 1] = void 0;
            this._scopeDepth = scopeDepth - 1;
            return scope;
        };
        Interpreter.prototype.swapScope = function (newScope) {
            var scopeDepth = this._scopeDepth;
            if (scopeDepth <= 0) {
                throw new InterpreterException("scope stack empty");
            }
            var scopeStack = this._scopeStack;
            var oldScope = scopeStack[scopeDepth - 1];
            scopeStack[scopeDepth - 1] = newScope;
            return oldScope;
        };
        Interpreter.prototype.willOperate = function (operator) {
        };
        Interpreter.prototype.didOperate = function (operator, result) {
        };
        Interpreter.prototype.willSelect = function (selector) {
        };
        Interpreter.prototype.didSelect = function (selector, result) {
        };
        Interpreter.prototype.willTransform = function (selector) {
        };
        Interpreter.prototype.didTransform = function (selector, result) {
        };
        Interpreter.of = function () {
            var objects = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                objects[_i] = arguments[_i];
            }
            var n = arguments.length;
            var scopes = new Array(Interpreter.expand(n));
            for (var i = 0; i < n; i += 1) {
                var scope = Item.fromAny(arguments[i]);
                scopes[i] = scope;
            }
            return new Interpreter(InterpreterSettings.standard(), scopes, n);
        };
        Interpreter.fromAny = function (interpreter, globalScope) {
            if (globalScope === void 0) { globalScope = Item.globalScope(); }
            if (!(interpreter instanceof Interpreter)) {
                var scope = interpreter;
                interpreter = new Interpreter();
                if (globalScope) {
                    interpreter.pushScope(globalScope);
                }
                if (scope !== void 0) {
                    interpreter.pushScope(Item.fromAny(scope));
                }
            }
            return interpreter;
        };
        Interpreter.expand = function (n) {
            n = Math.max(32, n) - 1;
            n |= n >> 1;
            n |= n >> 2;
            n |= n >> 4;
            n |= n >> 8;
            n |= n >> 16;
            return n + 1;
        };
        return Interpreter;
    }());

    var Attr = (function (_super) {
        __extends(Attr, _super);
        function Attr(key, value, flags) {
            if (value === void 0) { value = Item.Value.extant(); }
            if (flags === void 0) { flags = 0; }
            var _this = _super.call(this) || this;
            _this._key = key;
            _this._value = value;
            _this._flags = flags;
            return _this;
        }
        Attr.prototype.isConstant = function () {
            return this._key.isConstant() && this._value.isConstant();
        };
        Object.defineProperty(Attr.prototype, "name", {
            get: function () {
                return this._key.value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attr.prototype, "key", {
            get: function () {
                return this._key;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attr.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Attr.prototype.setValue = function (newValue) {
            if ((this._flags & Field.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            var oldValue = this._value;
            this._value = newValue;
            return oldValue;
        };
        Attr.prototype.updatedValue = function (value) {
            return new Attr(this._key, value);
        };
        Attr.prototype.bitwiseOr = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseOrOperator(this, that);
            }
            var newValue;
            if (that instanceof Attr && this._key.equals(that._key)) {
                newValue = this._value.bitwiseOr(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.bitwiseOr(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.bitwiseXor = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseXorOperator(this, that);
            }
            var newValue;
            if (that instanceof Attr && this._key.equals(that._key)) {
                newValue = this._value.bitwiseXor(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.bitwiseXor(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.bitwiseAnd = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseAndOperator(this, that);
            }
            var newValue;
            if (that instanceof Attr && this._key.equals(that._key)) {
                newValue = this._value.bitwiseAnd(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.bitwiseAnd(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.plus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.PlusOperator(this, that);
            }
            var newValue;
            if (that instanceof Attr && this._key.equals(that._key)) {
                newValue = this._value.plus(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.plus(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.minus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.MinusOperator(this, that);
            }
            var newValue;
            if (that instanceof Attr && this._key.equals(that._key)) {
                newValue = this._value.minus(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.minus(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.times = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.TimesOperator(this, that);
            }
            var newValue;
            if (that instanceof Attr && this._key.equals(that._key)) {
                newValue = this._value.times(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.times(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.divide = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.DivideOperator(this, that);
            }
            var newValue;
            if (that instanceof Attr && this._key.equals(that._key)) {
                newValue = this._value.divide(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.divide(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.modulo = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.ModuloOperator(this, that);
            }
            var newValue;
            if (that instanceof Attr && this._key.equals(that._key)) {
                newValue = this._value.modulo(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.modulo(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.not = function () {
            var newValue = this._value.not();
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.bitwiseNot = function () {
            var newValue = this._value.bitwiseNot();
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.negative = function () {
            var newValue = this._value.negative();
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.positive = function () {
            var newValue = this._value.positive();
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.inverse = function () {
            var newValue = this._value.inverse();
            if (newValue.isDefined()) {
                return new Attr(this._key, newValue);
            }
            return Item.absent();
        };
        Attr.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var key = this._key.evaluate(interpreter).toValue();
            var value = this._value.evaluate(interpreter).toValue();
            if (key === this._key && value === this._value) {
                return this;
            }
            else if (key.isDefined() && value.isDefined()) {
                if (key instanceof Item.Text) {
                    return new Attr(key, value);
                }
                else {
                    return new Item.Slot(key, value);
                }
            }
            return Item.absent();
        };
        Attr.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var key = this._key.substitute(interpreter).toValue();
            var value = this._value.substitute(interpreter).toValue();
            if (key === this._key && value === this._value) {
                return this;
            }
            else if (key.isDefined() && value.isDefined()) {
                if (key instanceof Item.Text) {
                    return new Attr(key, value);
                }
                else {
                    return new Item.Slot(key, value);
                }
            }
            return Item.absent();
        };
        Attr.prototype.toAny = function () {
            var field = {};
            field["@" + this._key.value] = this._value.toAny();
            return field;
        };
        Attr.prototype.isAliased = function () {
            return false;
        };
        Attr.prototype.isMutable = function () {
            return (this._flags & Field.IMMUTABLE) === 0;
        };
        Attr.prototype.alias = function () {
            this._flags |= Field.IMMUTABLE;
        };
        Attr.prototype.branch = function () {
            if ((this._flags & Field.IMMUTABLE) !== 0) {
                return new Attr(this._key, this._value, this._flags & ~Field.IMMUTABLE);
            }
            else {
                return this;
            }
        };
        Attr.prototype.clone = function () {
            return new Attr(this._key.clone(), this._value.clone());
        };
        Attr.prototype.commit = function () {
            if ((this._flags & Field.IMMUTABLE) === 0) {
                this._flags |= Field.IMMUTABLE;
                this._value.commit();
            }
            return this;
        };
        Attr.prototype.typeOrder = function () {
            return 1;
        };
        Attr.prototype.compareTo = function (that) {
            if (that instanceof Attr) {
                var order = this._key.compareTo(that._key);
                if (order === 0) {
                    order = this._value.compareTo(that._value);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Attr.prototype.keyEquals = function (key) {
            if (typeof key === "string") {
                return this._key.value === key;
            }
            else if (key instanceof Field) {
                return this._key.equals(key.key);
            }
            else {
                return this._key.equals(key);
            }
        };
        Attr.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Attr) {
                return this._key.equals(that._key) && this._value.equals(that._value);
            }
            return false;
        };
        Attr.prototype.hashCode = function () {
            if (Attr._hashSeed === void 0) {
                Attr._hashSeed = util.Murmur3.seed(Attr);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(Attr._hashSeed, this._key.hashCode()), this._value.hashCode()));
        };
        Attr.prototype.debug = function (output) {
            output = output.write("Attr").write(46).write("of").write(40).display(this.key);
            if (!(this.value instanceof Item.Extant)) {
                output = output.write(44).write(32).display(this.value);
            }
            output = output.write(41);
        };
        Attr.prototype.display = function (output) {
            this.debug(output);
        };
        Attr.of = function (key, value) {
            key = Item.Text.fromAny(key);
            value = (arguments.length >= 2 ? Item.Value.fromAny(value) : Item.Value.extant());
            return new Attr(key, value);
        };
        return Attr;
    }(Field));
    Item.Attr = Attr;

    var Slot = (function (_super) {
        __extends(Slot, _super);
        function Slot(key, value, flags) {
            if (value === void 0) { value = Item.Value.extant(); }
            if (flags === void 0) { flags = 0; }
            var _this = _super.call(this) || this;
            _this._key = key.commit();
            _this._value = value;
            _this._flags = flags;
            return _this;
        }
        Object.defineProperty(Slot.prototype, "key", {
            get: function () {
                return this._key;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Slot.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Slot.prototype.isConstant = function () {
            return this._key.isConstant() && this._value.isConstant();
        };
        Slot.prototype.setValue = function (newValue) {
            if ((this._flags & Field.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            var oldValue = this._value;
            this._value = newValue;
            return oldValue;
        };
        Slot.prototype.updatedValue = function (value) {
            return new Slot(this._key, value);
        };
        Slot.prototype.bitwiseOr = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseOrOperator(this, that);
            }
            var newValue;
            if (that instanceof Slot && this._key.equals(that._key)) {
                newValue = this._value.bitwiseOr(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.bitwiseOr(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.bitwiseXor = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseXorOperator(this, that);
            }
            var newValue;
            if (that instanceof Slot && this._key.equals(that._key)) {
                newValue = this._value.bitwiseXor(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.bitwiseXor(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.bitwiseAnd = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseAndOperator(this, that);
            }
            var newValue;
            if (that instanceof Slot && this._key.equals(that._key)) {
                newValue = this._value.bitwiseAnd(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.bitwiseAnd(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.plus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.PlusOperator(this, that);
            }
            var newValue;
            if (that instanceof Slot && this._key.equals(that._key)) {
                newValue = this._value.plus(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.plus(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.minus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.MinusOperator(this, that);
            }
            var newValue;
            if (that instanceof Slot && this._key.equals(that._key)) {
                newValue = this._value.minus(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.minus(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.times = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.TimesOperator(this, that);
            }
            var newValue;
            if (that instanceof Slot && this._key.equals(that._key)) {
                newValue = this._value.times(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.times(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.divide = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.DivideOperator(this, that);
            }
            var newValue;
            if (that instanceof Slot && this._key.equals(that._key)) {
                newValue = this._value.divide(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.divide(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.modulo = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.ModuloOperator(this, that);
            }
            var newValue;
            if (that instanceof Slot && this._key.equals(that._key)) {
                newValue = this._value.modulo(that._value);
            }
            else if (that instanceof Item.Value) {
                newValue = this._value.modulo(that);
            }
            else {
                newValue = Item.Value.absent();
            }
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.not = function () {
            var newValue = this._value.not();
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.bitwiseNot = function () {
            var newValue = this._value.bitwiseNot();
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.negative = function () {
            var newValue = this._value.negative();
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.positive = function () {
            var newValue = this._value.positive();
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.inverse = function () {
            var newValue = this._value.inverse();
            if (newValue.isDefined()) {
                return new Slot(this._key, newValue);
            }
            return Item.absent();
        };
        Slot.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var key = this._key.evaluate(interpreter).toValue();
            var value = this._value.evaluate(interpreter).toValue();
            if (key === this._key && value === this._value) {
                return this;
            }
            else if (key.isDefined() && value.isDefined()) {
                return new Slot(key, value);
            }
            return Item.absent();
        };
        Slot.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var key = this._key.substitute(interpreter).toValue();
            var value = this._value.substitute(interpreter).toValue();
            if (key === this._key && value === this._value) {
                return this;
            }
            else if (key.isDefined() && value.isDefined()) {
                return new Slot(key, value);
            }
            return Item.absent();
        };
        Slot.prototype.toAny = function () {
            var field = {};
            if (this._key instanceof Item.Text) {
                field[this._key.value] = this._value.toAny();
            }
            else {
                field.$key = this._key.toAny();
                field.$value = this._value.toAny();
            }
            return field;
        };
        Slot.prototype.isAliased = function () {
            return false;
        };
        Slot.prototype.isMutable = function () {
            return (this._flags & Field.IMMUTABLE) === 0;
        };
        Slot.prototype.alias = function () {
            this._flags |= Field.IMMUTABLE;
        };
        Slot.prototype.branch = function () {
            if ((this._flags & Field.IMMUTABLE) !== 0) {
                return new Slot(this._key, this._value, this._flags & ~Field.IMMUTABLE);
            }
            else {
                return this;
            }
        };
        Slot.prototype.clone = function () {
            return new Slot(this._key.clone(), this._value.clone());
        };
        Slot.prototype.commit = function () {
            if ((this._flags & Field.IMMUTABLE) === 0) {
                this._flags |= Field.IMMUTABLE;
                this._value.commit();
            }
            return this;
        };
        Slot.prototype.typeOrder = function () {
            return 2;
        };
        Slot.prototype.compareTo = function (that) {
            if (that instanceof Slot) {
                var order = this._key.compareTo(that._key);
                if (order === 0) {
                    order = this._value.compareTo(that._value);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Slot.prototype.keyEquals = function (key) {
            if (typeof key === "string" && this._key instanceof Item.Text) {
                return this._key.value === key;
            }
            else if (key instanceof Field) {
                return this._key.equals(key.key);
            }
            else {
                return this._key.equals(key);
            }
        };
        Slot.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Slot) {
                return this._key.equals(that._key) && this._value.equals(that._value);
            }
            return false;
        };
        Slot.prototype.hashCode = function () {
            if (Slot._hashSeed === void 0) {
                Slot._hashSeed = util.Murmur3.seed(Slot);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(Slot._hashSeed, this._key.hashCode()), this._value.hashCode()));
        };
        Slot.prototype.debug = function (output) {
            output = output.write("Slot").write(46).write("of").write(40).display(this.key);
            if (!(this.value instanceof Item.Extant)) {
                output = output.write(44).write(32).display(this.value);
            }
            output = output.write(41);
        };
        Slot.prototype.display = function (output) {
            this.debug(output);
        };
        Slot.of = function (key, value) {
            key = Item.Value.fromAny(key);
            value = arguments.length >= 2 ? Item.Value.fromAny(value) : Item.Value.extant();
            return new Slot(key, value);
        };
        return Slot;
    }(Field));
    Item.Slot = Slot;

    var ValueBuilder = (function () {
        function ValueBuilder() {
            this._record = null;
            this._value = null;
        }
        ValueBuilder.prototype.push = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            for (var i = 0, n = arguments.length; i < n; i += 1) {
                var item = arguments[i];
                if (item instanceof Field) {
                    return this.pushField(item);
                }
                else if (item instanceof Value) {
                    return this.pushValue(item);
                }
                else {
                    throw new TypeError("" + item);
                }
            }
        };
        ValueBuilder.prototype.pushField = function (item) {
            if (this._record === null) {
                this._record = Item.Record.create();
                if (this._value !== null) {
                    this._record.push(this._value);
                    this._value = null;
                }
            }
            this._record.push(item);
        };
        ValueBuilder.prototype.pushValue = function (item) {
            if (this._record != null) {
                this._record.push(item);
            }
            else if (this._value == null) {
                this._value = item;
            }
            else {
                this._record = Item.Record.create();
                this._record.push(this._value);
                this._value = null;
                this._record.push(item);
            }
        };
        ValueBuilder.prototype.bind = function () {
            if (this._record !== null) {
                return this._record;
            }
            else if (this._value !== null) {
                return this._value;
            }
            else {
                return Value.absent();
            }
        };
        return ValueBuilder;
    }());

    var Value = (function (_super) {
        __extends(Value, _super);
        function Value() {
            return _super.call(this) || this;
        }
        Value.prototype.isDefined = function () {
            return true;
        };
        Value.prototype.isDistinct = function () {
            return true;
        };
        Object.defineProperty(Value.prototype, "key", {
            get: function () {
                return Value.absent();
            },
            enumerable: true,
            configurable: true
        });
        Value.prototype.toValue = function () {
            return this;
        };
        Value.prototype.tag = function () {
            return void 0;
        };
        Value.prototype.target = function () {
            return this;
        };
        Value.prototype.flattened = function () {
            return this;
        };
        Value.prototype.unflattened = function () {
            return Value.Record.of(this);
        };
        Value.prototype.header = function (tag) {
            return Value.absent();
        };
        Value.prototype.headers = function (tag) {
            return void 0;
        };
        Value.prototype.head = function () {
            return Item.absent();
        };
        Value.prototype.tail = function () {
            return Value.Record.empty();
        };
        Value.prototype.body = function () {
            return Value.extant();
        };
        Object.defineProperty(Value.prototype, "length", {
            get: function () {
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        Value.prototype.has = function (key) {
            return false;
        };
        Value.prototype.get = function (key) {
            return Value.absent();
        };
        Value.prototype.getAttr = function (key) {
            return Value.absent();
        };
        Value.prototype.getSlot = function (key) {
            return Value.absent();
        };
        Value.prototype.getField = function (key) {
            return void 0;
        };
        Value.prototype.getItem = function (index) {
            return Item.absent();
        };
        Value.prototype.deleted = function (key) {
            return this;
        };
        Value.prototype.conditional = function (thenTerm, elseTerm) {
            thenTerm = Item.fromAny(thenTerm);
            return thenTerm;
        };
        Value.prototype.or = function (that) {
            return this;
        };
        Value.prototype.and = function (that) {
            that = Item.fromAny(that);
            return that;
        };
        Value.prototype.bitwiseOr = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseOrOperator(this, that);
            }
            else if (that instanceof Item.Attr) {
                var newValue = this.bitwiseOr(that.value);
                if (newValue.isDefined()) {
                    return new Item.Attr(that.key, newValue);
                }
            }
            else if (that instanceof Item.Slot) {
                var newValue = this.bitwiseOr(that.value);
                if (newValue.isDefined()) {
                    return new Item.Slot(that.key, newValue);
                }
            }
            return Item.absent();
        };
        Value.prototype.bitwiseXor = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseXorOperator(this, that);
            }
            else if (that instanceof Item.Attr) {
                var newValue = this.bitwiseXor(that.value);
                if (newValue.isDefined()) {
                    return new Item.Attr(that.key, newValue);
                }
            }
            else if (that instanceof Item.Slot) {
                var newValue = this.bitwiseXor(that.value);
                if (newValue.isDefined()) {
                    return new Item.Slot(that.key, newValue);
                }
            }
            return Item.absent();
        };
        Value.prototype.bitwiseAnd = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.BitwiseAndOperator(this, that);
            }
            else if (that instanceof Item.Attr) {
                var newValue = this.bitwiseAnd(that.value);
                if (newValue.isDefined()) {
                    return new Item.Attr(that.key, newValue);
                }
            }
            else if (that instanceof Item.Slot) {
                var newValue = this.bitwiseAnd(that.value);
                if (newValue.isDefined()) {
                    return new Item.Slot(that.key, newValue);
                }
            }
            return Item.absent();
        };
        Value.prototype.lt = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.LtOperator(this, that);
            }
            return _super.prototype.lt.call(this, that);
        };
        Value.prototype.le = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.LeOperator(this, that);
            }
            return _super.prototype.le.call(this, that);
        };
        Value.prototype.eq = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.EqOperator(this, that);
            }
            return _super.prototype.eq.call(this, that);
        };
        Value.prototype.ne = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.NeOperator(this, that);
            }
            return _super.prototype.ne.call(this, that);
        };
        Value.prototype.ge = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.GeOperator(this, that);
            }
            return _super.prototype.ge.call(this, that);
        };
        Value.prototype.gt = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.GtOperator(this, that);
            }
            return _super.prototype.gt.call(this, that);
        };
        Value.prototype.plus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.PlusOperator(this, that);
            }
            else if (that instanceof Item.Attr) {
                var newValue = this.plus(that.value);
                if (newValue.isDefined()) {
                    return new Item.Attr(that.key, newValue);
                }
            }
            else if (that instanceof Item.Slot) {
                var newValue = this.plus(that.value);
                if (newValue.isDefined()) {
                    return new Item.Slot(that.key, newValue);
                }
            }
            return Item.absent();
        };
        Value.prototype.minus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.MinusOperator(this, that);
            }
            else if (that instanceof Item.Attr) {
                var newValue = this.minus(that.value);
                if (newValue.isDefined()) {
                    return new Item.Attr(that.key, newValue);
                }
            }
            else if (that instanceof Item.Slot) {
                var newValue = this.minus(that.value);
                if (newValue.isDefined()) {
                    return new Item.Slot(that.key, newValue);
                }
            }
            return Item.absent();
        };
        Value.prototype.times = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.TimesOperator(this, that);
            }
            else if (that instanceof Item.Attr) {
                var newValue = this.times(that.value);
                if (newValue.isDefined()) {
                    return new Item.Attr(that.key, newValue);
                }
            }
            else if (that instanceof Item.Slot) {
                var newValue = this.times(that.value);
                if (newValue.isDefined()) {
                    return new Item.Slot(that.key, newValue);
                }
            }
            return Item.absent();
        };
        Value.prototype.divide = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.DivideOperator(this, that);
            }
            else if (that instanceof Item.Attr) {
                var newValue = this.divide(that.value);
                if (newValue.isDefined()) {
                    return new Item.Attr(that.key, newValue);
                }
            }
            else if (that instanceof Item.Slot) {
                var newValue = this.divide(that.value);
                if (newValue.isDefined()) {
                    return new Item.Slot(that.key, newValue);
                }
            }
            return Item.absent();
        };
        Value.prototype.modulo = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Item.Expression) {
                return new Item.ModuloOperator(this, that);
            }
            else if (that instanceof Item.Attr) {
                var newValue = this.modulo(that.value);
                if (newValue.isDefined()) {
                    return new Item.Attr(that.key, newValue);
                }
            }
            else if (that instanceof Item.Slot) {
                var newValue = this.modulo(that.value);
                if (newValue.isDefined()) {
                    return new Item.Slot(that.key, newValue);
                }
            }
            return Item.absent();
        };
        Value.prototype.not = function () {
            return Value.absent();
        };
        Value.prototype.bitwiseNot = function () {
            return Value.absent();
        };
        Value.prototype.negative = function () {
            return Value.absent();
        };
        Value.prototype.positive = function () {
            return Value.absent();
        };
        Value.prototype.inverse = function () {
            return Value.absent();
        };
        Value.prototype.lambda = function (template) {
            return new Item.LambdaFunc(this, template);
        };
        Value.prototype.stringValue = function (orElse) {
            return orElse;
        };
        Value.prototype.numberValue = function (orElse) {
            return orElse;
        };
        Value.prototype.booleanValue = function (orElse) {
            return orElse;
        };
        Value.prototype.isAliased = function () {
            return false;
        };
        Value.prototype.isMutable = function () {
            return false;
        };
        Value.prototype.alias = function () {
        };
        Value.prototype.branch = function () {
            return this;
        };
        Value.prototype.clone = function () {
            return this;
        };
        Value.prototype.commit = function () {
            return this;
        };
        Value.prototype.keyEquals = function (key) {
            return false;
        };
        Value.builder = function () {
            return new ValueBuilder();
        };
        Value.empty = function () {
            return Value.Record.empty();
        };
        Value.extant = function () {
            return Value.Extant.extant();
        };
        Value.absent = function () {
            return Value.Absent.absent();
        };
        Value.fromAny = function (value) {
            if (value instanceof Value) {
                return value;
            }
            else if (value === void 0) {
                return Value.Absent.absent();
            }
            else if (value === null) {
                return Value.Extant.extant();
            }
            else if (typeof value === "boolean") {
                return Value.Bool.from(value);
            }
            else if (typeof value === "number") {
                return Value.Num.from(value);
            }
            else if (typeof value === "string") {
                return Value.Text.from(value);
            }
            else if (value instanceof Uint8Array) {
                return Value.Data.wrap(value);
            }
            else if (Array.isArray(value)) {
                return Value.Record.fromArray(value);
            }
            else if (typeof value === "object") {
                return Value.Record.fromObject(value);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        return Value;
    }(Item));
    Item.Value = Value;

    var RecordCursor = (function (_super) {
        __extends(RecordCursor, _super);
        function RecordCursor(record, lower, upper, index) {
            if (lower === void 0) { lower = 0; }
            if (upper === void 0) { upper = record.length; }
            if (index === void 0) { index = lower; }
            var _this = _super.call(this) || this;
            _this._record = record;
            _this._lower = lower;
            _this._upper = upper;
            _this._index = index;
            _this._direction = 0;
            return _this;
        }
        RecordCursor.prototype.isEmpty = function () {
            return this._index >= this._upper;
        };
        RecordCursor.prototype.head = function () {
            this._direction = 0;
            if (this._index < this._upper) {
                return this._record.getItem(this._index);
            }
            else {
                throw new Error("empty");
            }
        };
        RecordCursor.prototype.step = function () {
            this._direction = 0;
            if (this._index < this._upper) {
                this._index += 1;
            }
            else {
                throw new Error("empty");
            }
        };
        RecordCursor.prototype.skip = function (count) {
            this._index = Math.min(Math.max(this._lower, this._index + count, this._upper));
        };
        RecordCursor.prototype.hasNext = function () {
            return this._index < this._upper;
        };
        RecordCursor.prototype.nextIndex = function () {
            return this._index - this._lower;
        };
        RecordCursor.prototype.next = function () {
            this._direction = 1;
            var index = this._index;
            if (index < this._upper) {
                this._index = index + 1;
                return { value: this._record.getItem(index), done: this._index === this._upper };
            }
            else {
                this._index = this._upper;
                return { done: true };
            }
        };
        RecordCursor.prototype.hasPrevious = function () {
            return this._index > this._lower;
        };
        RecordCursor.prototype.previousIndex = function () {
            return this._index - this._lower - 1;
        };
        RecordCursor.prototype.previous = function () {
            this._direction = -1;
            var index = this._index - 1;
            if (index >= this._lower) {
                this._index = index;
                return { value: this._record.getItem(index), done: index === this._lower };
            }
            else {
                this._index = 0;
                return { done: true };
            }
        };
        RecordCursor.prototype.set = function (newItem) {
            if (this._direction > 0) {
                this._record.setItem(this._index - 1, newItem);
            }
            else {
                this._record.setItem(this._index, newItem);
            }
        };
        RecordCursor.prototype.delete = function () {
            if (this._direction > 0) {
                this._index -= 1;
            }
            this._record.splice(this._index, 1);
            this._direction = 0;
        };
        return RecordCursor;
    }(util.Cursor));

    var Record = (function (_super) {
        __extends(Record, _super);
        function Record() {
            return _super.call(this) || this;
        }
        Record.prototype.isArray = function () {
            return this.fieldCount() === 0;
        };
        Record.prototype.isObject = function () {
            return this.valueCount() === 0;
        };
        Record.prototype.fieldCount = function () {
            var count = 0;
            this.forEach(function (member) {
                if (member instanceof Item.Field) {
                    count += 1;
                }
            }, this);
            return count;
        };
        Record.prototype.valueCount = function () {
            var count = 0;
            this.forEach(function (member) {
                if (member instanceof Value) {
                    count += 1;
                }
            }, this);
            return count;
        };
        Record.prototype.isConstant = function () {
            return this.forEach(function (member) {
                return member.isConstant() ? void 0 : false;
            }, this) === void 0;
        };
        Record.prototype.tag = function () {
            var item = this.head();
            if (item instanceof Item.Attr) {
                return item.key.value;
            }
            return void 0;
        };
        Record.prototype.target = function () {
            var value;
            var record;
            var modified = false;
            this.forEach(function (item) {
                if (item instanceof Item.Attr) {
                    modified = true;
                }
                else if (value === void 0 && item instanceof Value) {
                    value = item;
                }
                else {
                    if (record === void 0) {
                        record = Record.create();
                        if (value !== void 0) {
                            record.push(value);
                        }
                    }
                    record.push(item);
                }
            }, this);
            if (value === void 0) {
                return Value.extant();
            }
            else if (record === void 0) {
                return value;
            }
            else if (modified) {
                return record;
            }
            else {
                return this;
            }
        };
        Record.prototype.flattened = function () {
            if (this.isEmpty()) {
                return Value.extant();
            }
            else {
                var items = this.iterator();
                var head = items.head();
                items.step();
                if (items.isEmpty() && head instanceof Value) {
                    return head;
                }
                else {
                    return this.branch();
                }
            }
        };
        Record.prototype.unflattened = function () {
            return this;
        };
        Record.prototype.header = function (tag) {
            var head = this.head();
            if (head instanceof Item.Attr && head.key.value === tag) {
                return head.value;
            }
            else {
                return Value.absent();
            }
        };
        Record.prototype.headers = function (tag) {
            var head = this.head();
            if (head instanceof Item.Attr && head.key.value === tag) {
                var header = head.value;
                if (header instanceof Record) {
                    return header;
                }
                else {
                    return Record.of(header);
                }
            }
            return void 0;
        };
        Record.prototype.head = function () {
            return this.forEach(function (item) {
                return item;
            }, this) || Item.absent();
        };
        Record.prototype.tail = function () {
            var tail = Record.create();
            this.forEach(function (item, index) {
                if (index > 0) {
                    tail.push(item);
                }
            }, this);
            return tail;
        };
        Record.prototype.body = function () {
            var tail = this.tail();
            if (!tail.isEmpty()) {
                return tail.flattened();
            }
            else {
                return Value.absent();
            }
        };
        Record.prototype.has = function (key) {
            key = Value.fromAny(key);
            return this.forEach(function (item) {
                return item instanceof Item.Field && item.key.equals(key) ? true : void 0;
            }, this) || false;
        };
        Record.prototype.indexOf = function (item, index) {
            if (index === void 0) { index = 0; }
            item = Item.fromAny(item);
            if (index < 0) {
                index = Math.max(0, this.length + index);
            }
            var i = this.forEach(function (member, i) {
                return i >= index && item.equals(member) ? i : void 0;
            }, this);
            return i !== void 0 ? i : -1;
        };
        Record.prototype.lastIndexOf = function (item, index) {
            item = Item.fromAny(item);
            var n = this.length;
            if (index === void 0) {
                index = n - 1;
            }
            else if (index < 0) {
                index = n + index;
            }
            index = Math.min(index, n - 1);
            while (index >= 0) {
                if (item.equals(this.getItem(index))) {
                    return index;
                }
                index -= 1;
            }
            return -1;
        };
        Record.prototype.get = function (key) {
            key = Value.fromAny(key);
            return this.forEach(function (item) {
                return item instanceof Item.Field && item.key.equals(key) ? item.value : void 0;
            }, this) || Value.absent();
        };
        Record.prototype.getAttr = function (key) {
            key = Value.Text.fromAny(key);
            return this.forEach(function (item) {
                return item instanceof Item.Attr && item.key.equals(key) ? item.value : void 0;
            }, this) || Value.absent();
        };
        Record.prototype.getSlot = function (key) {
            key = Value.fromAny(key);
            return this.forEach(function (item) {
                return item instanceof Item.Slot && item.key.equals(key) ? item.value : void 0;
            }, this) || Value.absent();
        };
        Record.prototype.getField = function (key) {
            key = Value.fromAny(key);
            return this.forEach(function (item) {
                return item instanceof Item.Field && item.key.equals(key) ? item : void 0;
            }, this);
        };
        Record.prototype.set = function (key, newValue) {
            key = Value.fromAny(key);
            newValue = Value.fromAny(newValue);
            var items = this.iterator();
            while (!items.isEmpty()) {
                var item = items.head();
                if (item instanceof Item.Field && item.key.equals(key)) {
                    if (item.isMutable()) {
                        item.setValue(newValue);
                    }
                    else {
                        items.set(item.updatedValue(newValue));
                    }
                    return this;
                }
                items.step();
            }
            this.push(new Item.Slot(key, newValue));
            return this;
        };
        Record.prototype.setAttr = function (key, newValue) {
            key = Value.Text.fromAny(key);
            newValue = Value.fromAny(newValue);
            var items = this.iterator();
            while (!items.isEmpty()) {
                var item = items.head();
                if (item instanceof Item.Field && item.key.equals(key)) {
                    if (item instanceof Item.Attr && item.isMutable()) {
                        item.setValue(newValue);
                    }
                    else {
                        items.set(new Item.Attr(key, newValue));
                    }
                    return this;
                }
                items.step();
            }
            this.push(new Item.Attr(key, newValue));
            return this;
        };
        Record.prototype.setSlot = function (key, newValue) {
            key = Value.fromAny(key);
            newValue = Value.fromAny(newValue);
            var items = this.iterator();
            while (!items.isEmpty()) {
                var item = items.head();
                if (item instanceof Item.Field && item.key.equals(key)) {
                    if (item instanceof Item.Slot && item.isMutable()) {
                        item.setValue(newValue);
                    }
                    else {
                        items.set(new Item.Slot(key, newValue));
                    }
                    return this;
                }
                items.step();
            }
            this.push(new Item.Slot(key, newValue));
            return this;
        };
        Record.prototype.updated = function (key, value) {
            key = Value.fromAny(key);
            value = Value.fromAny(value);
            var record = this.isMutable() ? this : this.branch();
            var items = record.iterator();
            while (!items.isEmpty()) {
                var item = items.head();
                if (item.key.equals(key)) {
                    if (item instanceof Item.Field && item.isMutable()) {
                        item.setValue(value);
                    }
                    else {
                        items.set(new Item.Slot(key, value));
                    }
                    return record;
                }
                items.step();
            }
            record.push(new Item.Slot(key, value));
            return record;
        };
        Record.prototype.updatedAttr = function (key, value) {
            key = Value.Text.fromAny(key);
            value = Value.fromAny(value);
            var record = this.isMutable() ? this : this.branch();
            var items = record.iterator();
            while (!items.isEmpty()) {
                var item = items.head();
                if (item.key.equals(key)) {
                    if (item instanceof Item.Attr && item.isMutable()) {
                        item.setValue(value);
                    }
                    else {
                        items.set(new Item.Attr(key, value));
                    }
                    return record;
                }
                items.step();
            }
            record.push(new Item.Attr(key, value));
            return record;
        };
        Record.prototype.updatedSlot = function (key, value) {
            key = Value.fromAny(key);
            value = Value.fromAny(value);
            var record = this.isMutable() ? this : this.branch();
            var items = record.iterator();
            while (!items.isEmpty()) {
                var item = items.head();
                if (item.key.equals(key)) {
                    if (item instanceof Item.Slot && item.isMutable()) {
                        item.setValue(value);
                    }
                    else {
                        items.set(new Item.Slot(key, value));
                    }
                    return record;
                }
                items.step();
            }
            record.push(new Item.Slot(key, value));
            return record;
        };
        Record.prototype.appended = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var record = this.isMutable() ? this : this.branch();
            record.push.apply(record, arguments);
            return record;
        };
        Record.prototype.prepended = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var record = this.isMutable() ? this : this.branch();
            record.splice.apply(record, Array.prototype.concat.apply([0, 0], arguments));
            return record;
        };
        Record.prototype.deleted = function (key) {
            var record = this.isMutable() ? this : this.branch();
            record.delete(key);
            return record;
        };
        Record.prototype.concat = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var record = this.isMutable() ? this : this.branch();
            for (var i = 0, n = arguments.length; i < n; i += 1) {
                Item.fromAny(arguments[i]).forEach(function (item) {
                    record.push(item);
                });
            }
            return record;
        };
        Record.prototype.slice = function (lower, upper) {
            return this.subRecord.apply(this, arguments).branch();
        };
        Record.prototype.attr = function (key, value) {
            this.push(Item.Attr.of.apply(void 0, arguments));
            return this;
        };
        Record.prototype.slot = function (key, value) {
            this.push(Item.Slot.of.apply(void 0, arguments));
            return this;
        };
        Record.prototype.item = function (item) {
            this.push(item);
            return this;
        };
        Record.prototype.items = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            this.push.apply(this, arguments);
            return this;
        };
        Record.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var scope = Record.create();
            interpreter.pushScope(scope);
            var changed = false;
            this.forEach(function (oldItem) {
                var newItem = oldItem.evaluate(interpreter);
                if (newItem.isDefined()) {
                    scope.push(newItem);
                }
                if (oldItem !== newItem) {
                    changed = true;
                }
            }, this);
            interpreter.popScope();
            return changed ? scope : this;
        };
        Record.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var scope = Record.create();
            interpreter.pushScope(scope);
            var changed = false;
            this.forEach(function (oldItem) {
                var newItem = oldItem.substitute(interpreter);
                if (newItem.isDefined()) {
                    scope.push(newItem);
                }
                if (oldItem !== newItem) {
                    changed = true;
                }
            }, this);
            interpreter.popScope();
            return changed ? scope : this;
        };
        Record.prototype.stringValue = function (orElse) {
            var recordString = "";
            var defined = this.forEach(function (item) {
                if (item instanceof Value) {
                    var itemString = item.stringValue();
                    if (itemString !== void 0) {
                        recordString += itemString;
                        return;
                    }
                }
                return null;
            }, this) === void 0;
            return defined ? recordString : void 0;
        };
        Record.prototype.toAny = function () {
            if (!this.isEmpty() && this.isArray()) {
                return this.toArray();
            }
            else {
                return this.toObject();
            }
        };
        Record.prototype.toArray = function () {
            var array = new Array(this.length);
            this.forEach(function (item, index) {
                if (item instanceof Value) {
                    array[index] = item.toAny();
                }
                else if (item instanceof Item.Field) {
                    array[index] = {
                        $key: item.key.toAny(),
                        $value: item.value.toAny(),
                    };
                }
            }, this);
            return array;
        };
        Record.prototype.toObject = function () {
            var object = {};
            this.forEach(function (item, index) {
                if (item instanceof Item.Attr) {
                    object["@" + item.key.value] = item.value.toAny();
                }
                else if (item instanceof Item.Slot) {
                    if (item.key instanceof Value.Text) {
                        object[item.key.value] = item.value.toAny();
                    }
                    else {
                        object["$" + index] = {
                            $key: item.key.toAny(),
                            $value: item.value.toAny(),
                        };
                    }
                }
                else if (item instanceof Value) {
                    object["$" + index] = item.toAny();
                }
            }, this);
            return object;
        };
        Record.prototype.isAliased = function () {
            return false;
        };
        Record.prototype.isMutable = function () {
            return true;
        };
        Record.prototype.alias = function () {
        };
        Record.prototype.branch = function () {
            var branch = Record.create();
            this.forEach(function (item) {
                branch.push(item);
            }, this);
            return branch;
        };
        Record.prototype.clone = function () {
            var clone = Record.create();
            this.forEach(function (item) {
                clone.push(item.clone());
            }, this);
            return clone;
        };
        Record.prototype.commit = function () {
            return this;
        };
        Record.prototype.bind = function () {
            return this;
        };
        Record.prototype.subRecord = function (lower, upper) {
            var n = this.length;
            if (lower === void 0) {
                lower = 0;
            }
            else if (lower < 0) {
                lower = n + lower;
            }
            lower = Math.min(Math.max(0, lower), n);
            if (upper === void 0) {
                upper = n;
            }
            else if (upper < 0) {
                upper = n + upper;
            }
            var record = Value.Record.create();
            this.forEach(function (item, index) {
                if (index < lower) {
                    return;
                }
                else if (index < upper) {
                    record.push(item);
                    return;
                }
                else {
                    return null;
                }
            }, this);
            return record;
        };
        Record.prototype.iterator = function () {
            return new RecordCursor(this);
        };
        Record.prototype.typeOrder = function () {
            return 3;
        };
        Record.prototype.compareTo = function (that) {
            if (that instanceof Record) {
                var xs = this.iterator();
                var ys = that.iterator();
                var order = 0;
                do {
                    if (!xs.isEmpty() && !ys.isEmpty()) {
                        order = xs.head().compareTo(ys.head());
                        xs.step();
                        ys.step();
                    }
                    else {
                        break;
                    }
                } while (order === 0);
                if (order !== 0) {
                    return order;
                }
                else if (xs.isEmpty() && !ys.isEmpty()) {
                    return -1;
                }
                else if (!xs.isEmpty() && ys.isEmpty()) {
                    return 1;
                }
                else {
                    return 0;
                }
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Record.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Record) {
                var xs = this.iterator();
                var ys = that.iterator();
                while (!xs.isEmpty() && !ys.isEmpty()) {
                    if (!xs.head().equals(ys.head())) {
                        return false;
                    }
                    xs.step();
                    ys.step();
                }
                return xs.isEmpty() && ys.isEmpty();
            }
            return false;
        };
        Record.prototype.hashCode = function () {
            if (this._hashCode === void 0) {
                if (Record._hashSeed === void 0) {
                    Record._hashSeed = util.Murmur3.seed(Record);
                }
                var code_1 = Record._hashSeed;
                this.forEach(function (item) {
                    code_1 = util.Murmur3.mix(code_1, item.hashCode());
                }, this);
                this._hashCode = util.Murmur3.mash(code_1);
            }
            return this._hashCode;
        };
        Record.prototype.debug = function (output) {
            output = output.write("Record").write(46);
            if (this.isEmpty()) {
                output = output.write("empty").write(40).write(41);
            }
            else {
                output = output.write("of").write(40);
                this.forEach(function (item, index) {
                    if (index !== 0) {
                        output = output.write(44).write(32);
                    }
                    output.display(item);
                }, this);
                output = output.write(41);
            }
        };
        Record.prototype.display = function (output) {
            this.debug(output);
        };
        Record.empty = function () {
            return Record.RecordMap.empty();
        };
        Record.create = function (initialCapacity) {
            return Record.RecordMap.create(initialCapacity);
        };
        Record.of = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            return Record.RecordMap.of.apply(void 0, arguments);
        };
        Record.fromAny = function (value) {
            if (value instanceof Record) {
                return value;
            }
            else if (Array.isArray(value)) {
                return Record.fromArray(value);
            }
            else if (value && typeof value === "object") {
                return Record.fromObject(value);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Record.fromArray = function (array) {
            var n = array.length || 0;
            var record = Record.create(n);
            for (var i = 0; i < n; i += 1) {
                record.push(Item.fromAny(array[i]));
            }
            return record;
        };
        Record.fromObject = function (object) {
            var record = Record.create();
            for (var key in object) {
                var value = object[key];
                if (key.charCodeAt(0) === 36) {
                    if (!value || typeof value !== "object" || !value.hasOwnProperty("$key")) {
                        record.push(Value.fromAny(value));
                    }
                    else {
                        record.push(Item.Field.of(value.$key, value.$value));
                    }
                }
                else {
                    record.push(Item.Field.of(key, value));
                }
            }
            return record;
        };
        Record.expand = function (n) {
            n = Math.max(8, n) - 1;
            n |= n >> 1;
            n |= n >> 2;
            n |= n >> 4;
            n |= n >> 8;
            n |= n >> 16;
            return n + 1;
        };
        Record.ALIASED = 1;
        Record.IMMUTABLE = 2;
        return Record;
    }(Value));
    Item.Record = Record;

    var RecordMap = (function (_super) {
        __extends(RecordMap, _super);
        function RecordMap(array, table, itemCount, fieldCount, flags) {
            var _this = _super.call(this) || this;
            _this._array = array;
            _this._table = table;
            _this._itemCount = itemCount;
            _this._fieldCount = fieldCount;
            _this._flags = flags;
            return _this;
        }
        RecordMap.prototype.isEmpty = function () {
            return this._itemCount === 0;
        };
        Object.defineProperty(RecordMap.prototype, "length", {
            get: function () {
                return this._itemCount;
            },
            enumerable: true,
            configurable: true
        });
        RecordMap.prototype.fieldCount = function () {
            return this._fieldCount;
        };
        RecordMap.prototype.valueCount = function () {
            return this._itemCount - this._fieldCount;
        };
        RecordMap.prototype.isConstant = function () {
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                if (!array[i].isConstant()) {
                    return false;
                }
            }
            return true;
        };
        RecordMap.prototype.tag = function () {
            if (this._fieldCount > 0) {
                var head = this._array[0];
                if (head instanceof Item.Attr) {
                    return head.key.value;
                }
            }
            return void 0;
        };
        RecordMap.prototype.target = function () {
            var value;
            var record;
            var modified = false;
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                var item = array[i];
                if (item instanceof Item.Attr) {
                    modified = true;
                }
                else if (value === void 0 && item instanceof Value) {
                    value = item;
                }
                else {
                    if (record === void 0) {
                        record = Record.create();
                        if (value !== void 0) {
                            record.push(value);
                        }
                    }
                    record.push(item);
                }
            }
            if (value === void 0) {
                return Value.extant();
            }
            else if (record === void 0) {
                return value;
            }
            else if (modified) {
                return record;
            }
            else {
                return this;
            }
        };
        RecordMap.prototype.head = function () {
            if (this._itemCount > 0) {
                return this._array[0];
            }
            return Item.absent();
        };
        RecordMap.prototype.tail = function () {
            var n = this._itemCount;
            if (n > 0) {
                return new Record.RecordMapView(this, 1, n);
            }
            else {
                return Record.empty();
            }
        };
        RecordMap.prototype.body = function () {
            var n = this._itemCount;
            if (n > 2) {
                return new Record.RecordMapView(this, 1, n).branch();
            }
            else if (n === 2) {
                var item = this._array[1];
                if (item instanceof Value) {
                    return item;
                }
                else {
                    return Record.of(item);
                }
            }
            return Value.absent();
        };
        RecordMap.prototype.has = function (key) {
            if (this._fieldCount !== 0) {
                key = Value.fromAny(key);
                var table = this.hashTable();
                var n = table.length;
                var x = Math.abs(key.hashCode() % n);
                var i = x;
                do {
                    var field = table[i];
                    if (field !== void 0) {
                        if (field.key.equals(key)) {
                            return true;
                        }
                    }
                    else {
                        break;
                    }
                    i = (i + 1) % n;
                } while (i !== x);
            }
            return false;
        };
        RecordMap.prototype.indexOf = function (item, index) {
            if (index === void 0) { index = 0; }
            item = Item.fromAny(item);
            var array = this._array;
            var n = this._itemCount;
            if (index < 0) {
                index = Math.max(0, n + index);
            }
            while (index < n) {
                if (item.equals(array[index])) {
                    return index;
                }
                index += 1;
            }
            return -1;
        };
        RecordMap.prototype.lastIndexOf = function (item, index) {
            item = Item.fromAny(item);
            var array = this._array;
            var n = this._itemCount;
            if (index === void 0) {
                index = n - 1;
            }
            else if (index < 0) {
                index = n + index;
            }
            index = Math.min(index, n - 1);
            while (index >= 0) {
                if (item.equals(array[index])) {
                    return index;
                }
                index -= 1;
            }
            return -1;
        };
        RecordMap.prototype.get = function (key) {
            if (this._fieldCount > 0) {
                key = Value.fromAny(key);
                var table = this.hashTable();
                var n = table.length;
                var x = Math.abs(key.hashCode() % n);
                var i = x;
                do {
                    var field = table[i];
                    if (field !== void 0) {
                        if (field.key.equals(key)) {
                            return field.value;
                        }
                    }
                    else {
                        break;
                    }
                    i = (i + 1) % n;
                } while (i !== x);
            }
            return Value.absent();
        };
        RecordMap.prototype.getAttr = function (key) {
            if (this._fieldCount > 0) {
                key = Value.Text.fromAny(key);
                var table = this.hashTable();
                var n = table.length;
                var x = Math.abs(key.hashCode() % n);
                var i = x;
                do {
                    var field = table[i];
                    if (field !== void 0) {
                        if (field instanceof Item.Attr && field.key.equals(key)) {
                            return field.value;
                        }
                    }
                    else {
                        break;
                    }
                    i = (i + 1) % n;
                } while (i !== x);
            }
            return Value.absent();
        };
        RecordMap.prototype.getSlot = function (key) {
            if (this._fieldCount > 0) {
                key = Value.fromAny(key);
                var table = this.hashTable();
                var n = table.length;
                var x = Math.abs(key.hashCode() % n);
                var i = x;
                do {
                    var field = table[i];
                    if (field !== void 0) {
                        if (field instanceof Item.Slot && field.key.equals(key)) {
                            return field.value;
                        }
                    }
                    else {
                        break;
                    }
                    i = (i + 1) % n;
                } while (i !== x);
            }
            return Value.absent();
        };
        RecordMap.prototype.getField = function (key) {
            if (this._fieldCount > 0) {
                key = Value.fromAny(key);
                var table = this.hashTable();
                var n = table.length;
                var x = Math.abs(key.hashCode() % n);
                var i = x;
                do {
                    var field = table[i];
                    if (field !== void 0) {
                        if (field.key.equals(key)) {
                            return field;
                        }
                    }
                    else {
                        break;
                    }
                    i = (i + 1) % n;
                } while (i !== x);
            }
            return void 0;
        };
        RecordMap.prototype.getItem = function (index) {
            if (index instanceof Item.Num) {
                index = index.value;
            }
            var n = this._itemCount;
            if (index < 0) {
                index = n + index;
            }
            if (index >= 0 && index < n) {
                return this._array[index];
            }
            else {
                return Item.absent();
            }
        };
        RecordMap.prototype.set = function (key, newValue) {
            if ((this._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            key = Value.fromAny(key);
            newValue = Value.fromAny(newValue);
            if ((this._flags & Record.ALIASED) !== 0) {
                if (this._fieldCount > 0) {
                    this.setAliased(key, newValue);
                }
                else {
                    this.pushAliased(new Item.Slot(key, newValue));
                }
            }
            else {
                if (this._fieldCount > 0) {
                    if (this._table !== null) {
                        this.setMutable(key, newValue);
                    }
                    else {
                        this.updateMutable(key, newValue);
                    }
                }
                else {
                    this.pushMutable(new Item.Slot(key, newValue));
                }
            }
            return this;
        };
        RecordMap.prototype.setAliased = function (key, newValue) {
            var n = this._itemCount;
            var oldArray = this._array;
            var newArray = new Array(Record.expand(n + 1));
            for (var i = 0; i < n; i += 1) {
                var item = oldArray[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    newArray[i] = item.updatedValue(newValue);
                    i += 1;
                    while (i < n) {
                        newArray[i] = oldArray[i];
                        i += 1;
                    }
                    this._array = newArray;
                    this._table = null;
                    this._flags &= ~Record.ALIASED;
                    return;
                }
                newArray[i] = item;
            }
            newArray[n] = new Item.Slot(key, newValue);
            this._array = newArray;
            this._table = null;
            this._itemCount = n + 1;
            this._fieldCount += 1;
            this._flags &= ~Record.ALIASED;
        };
        RecordMap.prototype.setMutable = function (key, newValue) {
            var table = this._table;
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field_1 = table[i];
                if (field_1 !== void 0) {
                    if (field_1.key.equals(key)) {
                        if (field_1.isMutable()) {
                            field_1.setValue(newValue);
                            return;
                        }
                        else {
                            this.updateMutable(key, newValue);
                            return;
                        }
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
            var field = new Item.Slot(key, newValue);
            this.pushMutable(field);
            RecordMap.put(table, field);
        };
        RecordMap.prototype.updateMutable = function (key, newValue) {
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                var item = array[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    array[i] = item.updatedValue(newValue);
                    this._table = null;
                    return;
                }
            }
            var field = new Item.Slot(key, newValue);
            this.pushMutable(field);
            RecordMap.put(this._table, field);
        };
        RecordMap.prototype.setAttr = function (key, newValue) {
            if ((this._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            key = Value.Text.fromAny(key);
            newValue = Value.fromAny(newValue);
            if ((this._flags & Record.ALIASED) !== 0) {
                if (this._fieldCount > 0) {
                    this.setAttrAliased(key, newValue);
                }
                else {
                    this.pushAliased(new Item.Attr(key, newValue));
                }
            }
            else {
                if (this._fieldCount > 0) {
                    if (this._table !== null) {
                        this.setAttrMutable(key, newValue);
                    }
                    else {
                        this.updateAttrMutable(key, newValue);
                    }
                }
                else {
                    this.pushMutable(new Item.Attr(key, newValue));
                }
            }
            return this;
        };
        RecordMap.prototype.setAttrAliased = function (key, newValue) {
            var n = this._itemCount;
            var oldArray = this._array;
            var newArray = new Array(Record.expand(n + 1));
            for (var i = 0; i < n; i += 1) {
                var item = oldArray[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    newArray[i] = new Item.Attr(key, newValue);
                    i += 1;
                    while (i < n) {
                        newArray[i] = oldArray[i];
                        i += 1;
                    }
                    this._array = newArray;
                    this._table = null;
                    this._flags &= ~Record.ALIASED;
                    return;
                }
                newArray[i] = item;
            }
            newArray[n] = new Item.Attr(key, newValue);
            this._array = newArray;
            this._table = null;
            this._itemCount = n + 1;
            this._fieldCount += 1;
            this._flags &= ~Record.ALIASED;
        };
        RecordMap.prototype.setAttrMutable = function (key, newValue) {
            var table = this._table;
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field_2 = table[i];
                if (field_2 !== void 0) {
                    if (field_2.key.equals(key)) {
                        if (field_2 instanceof Item.Attr && field_2.isMutable()) {
                            field_2.setValue(newValue);
                        }
                        else {
                            this.updateAttrMutable(key, newValue);
                        }
                        return;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
            var field = new Item.Attr(key, newValue);
            this.push(field);
            RecordMap.put(table, field);
        };
        RecordMap.prototype.updateAttrMutable = function (key, newValue) {
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                var item = array[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    array[i] = new Item.Attr(key, newValue);
                    this._table = null;
                    return;
                }
            }
            var field = new Item.Attr(key, newValue);
            this.push(field);
            RecordMap.put(this._table, field);
        };
        RecordMap.prototype.setSlot = function (key, newValue) {
            if ((this._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            key = Value.fromAny(key);
            newValue = Value.fromAny(newValue);
            if ((this._flags & Record.ALIASED) !== 0) {
                if (this._fieldCount > 0) {
                    this.setSlotAliased(key, newValue);
                }
                else {
                    this.pushAliased(new Item.Slot(key, newValue));
                }
            }
            else {
                if (this._fieldCount > 0) {
                    if (this._table !== null) {
                        this.setSlotMutable(key, newValue);
                    }
                    else {
                        this.updateSlotMutable(key, newValue);
                    }
                }
                else {
                    this.pushMutable(new Item.Slot(key, newValue));
                }
            }
            return this;
        };
        RecordMap.prototype.setSlotAliased = function (key, newValue) {
            var n = this._itemCount;
            var oldArray = this._array;
            var newArray = new Array(Record.expand(n + 1));
            for (var i = 0; i < n; i += 1) {
                var item = oldArray[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    newArray[i] = new Item.Slot(key, newValue);
                    i += 1;
                    while (i < n) {
                        newArray[i] = oldArray[i];
                        i += 1;
                    }
                    this._array = newArray;
                    this._table = null;
                    this._flags &= ~Record.ALIASED;
                    return;
                }
                newArray[i] = item;
            }
            newArray[n] = new Item.Slot(key, newValue);
            this._array = newArray;
            this._table = null;
            this._itemCount = n + 1;
            this._fieldCount += 1;
            this._flags &= ~Record.ALIASED;
        };
        RecordMap.prototype.setSlotMutable = function (key, newValue) {
            var table = this._table;
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field_3 = table[i];
                if (field_3 !== void 0) {
                    if (field_3.key.equals(key)) {
                        if (field_3 instanceof Item.Slot && field_3.isMutable()) {
                            field_3.setValue(newValue);
                        }
                        else {
                            this.updateSlotMutable(key, newValue);
                        }
                        return;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
            var field = new Item.Slot(key, newValue);
            this.push(field);
            RecordMap.put(table, field);
        };
        RecordMap.prototype.updateSlotMutable = function (key, newValue) {
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                var item = array[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    array[i] = new Item.Slot(key, newValue);
                    this._table = null;
                    return;
                }
            }
            var field = new Item.Slot(key, newValue);
            this.push(field);
            RecordMap.put(this._table, field);
        };
        RecordMap.prototype.setItem = function (index, newItem) {
            if ((this._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            newItem = Item.fromAny(newItem);
            var n = this._itemCount;
            if (index < 0) {
                index = n + index;
            }
            if (index < 0 || index > n) {
                throw new RangeError("" + index);
            }
            if ((this._flags & Record.ALIASED) !== 0) {
                this.setItemAliased(index, newItem);
            }
            else {
                this.setItemMutable(index, newItem);
            }
            return this;
        };
        RecordMap.prototype.setItemAliased = function (index, newItem) {
            var n = this._itemCount;
            var oldArray = this._array;
            var newArray = new Array(Record.expand(n));
            for (var i = 0; i < n; i += 1) {
                newArray[i] = oldArray[i];
            }
            var oldItem = oldArray[index];
            newArray[index] = newItem;
            this._array = newArray;
            this._table = null;
            if (newItem instanceof Item.Field) {
                if (!(oldItem instanceof Item.Field)) {
                    this._fieldCount += 1;
                }
            }
            else if (oldItem instanceof Item.Field) {
                this._fieldCount -= 1;
            }
            this._flags &= ~Record.ALIASED;
        };
        RecordMap.prototype.setItemMutable = function (index, newItem) {
            var array = this._array;
            var oldItem = array[index];
            array[index] = newItem;
            if (newItem instanceof Item.Field) {
                this._table = null;
                if (!(oldItem instanceof Item.Field)) {
                    this._fieldCount += 1;
                }
            }
            else if (oldItem instanceof Item.Field) {
                this._table = null;
                this._fieldCount -= 1;
            }
        };
        RecordMap.prototype.updated = function (key, newValue) {
            key = Value.fromAny(key);
            newValue = Value.fromAny(newValue);
            var record = (this._flags & Record.IMMUTABLE) === 0 ? this : this.branch();
            if ((record._flags & Record.ALIASED) !== 0) {
                if (record._fieldCount > 0) {
                    record.setAliased(key, newValue);
                }
                else {
                    record.pushAliased(new Item.Slot(key, newValue));
                }
            }
            else {
                if (record._fieldCount > 0) {
                    if (record._table !== null) {
                        record.setMutable(key, newValue);
                    }
                    else {
                        record.updateMutable(key, newValue);
                    }
                }
                else {
                    record.pushMutable(new Item.Slot(key, newValue));
                }
            }
            return record;
        };
        RecordMap.prototype.updatedAttr = function (key, newValue) {
            key = Value.Text.fromAny(key);
            newValue = Value.fromAny(newValue);
            var record = (this._flags & Record.IMMUTABLE) === 0 ? this : this.branch();
            if ((record._flags & Record.ALIASED) !== 0) {
                if (record._fieldCount > 0) {
                    record.setAttrAliased(key, newValue);
                }
                else {
                    record.pushAliased(new Item.Attr(key, newValue));
                }
            }
            else {
                if (record._fieldCount > 0) {
                    if (record._table !== null) {
                        record.setAttrMutable(key, newValue);
                    }
                    else {
                        record.updateAttrMutable(key, newValue);
                    }
                }
                else {
                    record.pushMutable(new Item.Attr(key, newValue));
                }
            }
            return record;
        };
        RecordMap.prototype.updatedSlot = function (key, newValue) {
            key = Value.fromAny(key);
            newValue = Value.fromAny(newValue);
            var record = (this._flags & Record.IMMUTABLE) === 0 ? this : this.branch();
            if ((record._flags & Record.ALIASED) !== 0) {
                if (record._fieldCount > 0) {
                    record.setSlotAliased(key, newValue);
                }
                else {
                    record.pushAliased(new Item.Slot(key, newValue));
                }
            }
            else {
                if (record._fieldCount > 0) {
                    if (record._table !== null) {
                        record.setSlotMutable(key, newValue);
                    }
                    else {
                        record.updateSlotMutable(key, newValue);
                    }
                }
                else {
                    record.pushMutable(new Item.Slot(key, newValue));
                }
            }
            return record;
        };
        RecordMap.prototype.push = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            if ((this._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            if ((this._flags & Record.ALIASED) !== 0) {
                this.pushAliased.apply(this, arguments);
            }
            else {
                this.pushMutable.apply(this, arguments);
            }
            return this._itemCount;
        };
        RecordMap.prototype.pushAliased = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            var k = arguments.length;
            var m = this._itemCount;
            var n = this._fieldCount;
            var oldArray = this._array;
            var newArray = new Array(Record.expand(m + k));
            if (oldArray !== null) {
                for (var i = 0; i < m; i += 1) {
                    newArray[i] = oldArray[i];
                }
            }
            for (var i = 0; i < k; i += 1) {
                var newItem = Item.fromAny(arguments[i]);
                newArray[m] = newItem;
                m += 1;
                if (newItem instanceof Item.Field) {
                    n += 1;
                }
            }
            this._array = newArray;
            this._table = null;
            this._itemCount = m;
            this._fieldCount = n;
            this._flags &= ~Record.ALIASED;
        };
        RecordMap.prototype.pushMutable = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            var k = arguments.length;
            var m = this._itemCount;
            var n = this._fieldCount;
            var oldArray = this._array;
            var newArray;
            if (oldArray === null || m + k > oldArray.length) {
                newArray = new Array(Record.expand(m + k));
                if (oldArray !== null) {
                    for (var i = 0; i < m; i += 1) {
                        newArray[i] = oldArray[i];
                    }
                }
            }
            else {
                newArray = oldArray;
            }
            for (var i = 0; i < k; i += 1) {
                var newItem = Item.fromAny(arguments[i]);
                newArray[m] = newItem;
                m += 1;
                if (newItem instanceof Item.Field) {
                    n += 1;
                    this._table = null;
                }
            }
            this._array = newArray;
            this._itemCount = m;
            this._fieldCount = n;
        };
        RecordMap.prototype.splice = function (start, deleteCount) {
            if (deleteCount === void 0) { deleteCount = 0; }
            var newItems = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }
            if ((this._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            var n = this._itemCount;
            if (start < 0) {
                start = n + start;
            }
            start = Math.min(Math.max(0, start), n);
            deleteCount = Math.min(Math.max(0, deleteCount), n - start);
            if ((this._flags & Record.ALIASED) !== 0) {
                return this.spliceAliased.apply(this, arguments);
            }
            else {
                return this.spliceMutable.apply(this, arguments);
            }
        };
        RecordMap.prototype.spliceAliased = function (start, deleteCount) {
            var newItems = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }
            var k = newItems.length;
            var m = this._itemCount;
            var n = this._fieldCount;
            var oldArray = this._array;
            var newArray = new Array(Record.expand(m - deleteCount + k));
            for (var i = 0; i < start; i += 1) {
                newArray[i] = oldArray[i];
            }
            var oldItems = [];
            for (var i = start; i < start + deleteCount; i += 1) {
                var oldItem = oldArray[i];
                oldItems.push(oldItem);
                m -= 1;
                if (oldItem instanceof Item.Field) {
                    n -= 1;
                }
            }
            for (var i = start; i < m; i += 1) {
                newArray[i + k] = oldArray[i + deleteCount];
            }
            for (var i = 0; i < k; i += 1) {
                var newItem = Item.fromAny(newItems[i]);
                newArray[i + start] = newItem;
                m += 1;
                if (newItem instanceof Item.Field) {
                    n += 1;
                }
            }
            this._array = newArray;
            this._table = null;
            this._itemCount = m;
            this._fieldCount = n;
            this._flags &= ~Record.ALIASED;
            return oldItems;
        };
        RecordMap.prototype.spliceMutable = function (start, deleteCount) {
            var newItems = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }
            var k = newItems.length;
            var m = this._itemCount;
            var n = this._fieldCount;
            var oldArray = this._array;
            var newArray;
            if (oldArray === null || m - deleteCount + k > oldArray.length) {
                newArray = new Array(Record.expand(m - deleteCount + k));
                if (oldArray !== null) {
                    for (var i = 0; i < start; i += 1) {
                        newArray[i] = oldArray[i];
                    }
                }
            }
            else {
                newArray = oldArray;
            }
            var oldItems = [];
            for (var i = start; i < start + deleteCount; i += 1) {
                var oldItem = oldArray[i];
                oldItems.push(oldItem);
                m -= 1;
                if (oldItem instanceof Item.Field) {
                    n -= 1;
                }
            }
            if (k > deleteCount) {
                for (var i = m - 1; i >= start; i -= 1) {
                    newArray[i + k] = oldArray[i + deleteCount];
                }
            }
            else {
                for (var i = start; i < m; i += 1) {
                    newArray[i + k] = oldArray[i + deleteCount];
                }
            }
            for (var i = 0; i < k; i += 1) {
                var newItem = Item.fromAny(newItems[i]);
                newArray[i + start] = newItem;
                m += 1;
                if (newItem instanceof Item.Field) {
                    n += 1;
                }
            }
            this._array = newArray;
            this._itemCount = m;
            this._fieldCount = n;
            return oldItems;
        };
        RecordMap.prototype.delete = function (key) {
            if ((this._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            key = Value.fromAny(key);
            if ((this._flags & Record.ALIASED) !== 0) {
                return this.deleteAliased(key);
            }
            else {
                return this.deleteMutable(key);
            }
        };
        RecordMap.prototype.deleteAliased = function (key) {
            var n = this._itemCount;
            var oldArray = this._array;
            var newArray = new Array(Record.expand(n));
            for (var i = 0; i < n; i += 1) {
                var item = oldArray[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    for (var j = i + 1; j < n; j += 1, i += 1) {
                        newArray[i] = oldArray[j];
                    }
                    this._array = newArray;
                    this._table = null;
                    this._itemCount = n - 1;
                    this._fieldCount -= 1;
                    this._flags &= ~Record.ALIASED;
                    return item;
                }
                newArray[i] = item;
            }
            return Item.absent();
        };
        RecordMap.prototype.deleteMutable = function (key) {
            var n = this._itemCount;
            var array = this._array;
            for (var i = 0; i < n; i += 1) {
                var item = array[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    for (var j = i + 1; j < n; j += 1, i += 1) {
                        array[i] = array[j];
                    }
                    array[n - 1] = void 0;
                    this._table = null;
                    this._itemCount = n - 1;
                    this._fieldCount -= 1;
                    return item;
                }
            }
            return Item.absent();
        };
        RecordMap.prototype.clear = function () {
            if ((this._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            this._array = null;
            this._table = null;
            this._itemCount = 0;
            this._fieldCount = 0;
            this._flags = 0;
        };
        RecordMap.prototype.isAliased = function () {
            return (this._flags & Record.ALIASED) !== 0;
        };
        RecordMap.prototype.isMutable = function () {
            return (this._flags & Record.IMMUTABLE) === 0;
        };
        RecordMap.prototype.alias = function () {
            this._flags |= Record.ALIASED;
        };
        RecordMap.prototype.branch = function () {
            if ((this._flags & (Record.ALIASED | Record.IMMUTABLE)) === 0) {
                var array = this._array;
                for (var i = 0, n = this._itemCount; i < n; i += 1) {
                    array[i].alias();
                }
            }
            this._flags |= Record.ALIASED;
            return new RecordMap(this._array, this._table, this._itemCount, this._fieldCount, Record.ALIASED);
        };
        RecordMap.prototype.clone = function () {
            var itemCount = this._itemCount;
            var oldArray = this._array;
            var newArray = new Array(itemCount);
            for (var i = 0; i < itemCount; i += 1) {
                newArray[i] = oldArray[i].clone();
            }
            return new RecordMap(newArray, null, itemCount, this._fieldCount, 0);
        };
        RecordMap.prototype.commit = function () {
            if ((this._flags & Record.IMMUTABLE) === 0) {
                this._flags |= Record.IMMUTABLE;
                var array = this._array;
                for (var i = 0, n = this._itemCount; i < n; i += 1) {
                    array[i].commit();
                }
            }
            return this;
        };
        RecordMap.prototype.hashTable = function () {
            var n = this._fieldCount;
            var table = this._table;
            if (n !== 0 && this._table === null) {
                table = new Array(Record.expand(Math.max(n, n * 10 / 7)));
                var array = this._array;
                for (var i = 0, m = this._itemCount; i < m; i += 1) {
                    var item = array[i];
                    if (item instanceof Item.Field) {
                        RecordMap.put(table, item);
                    }
                }
                this._table = table;
            }
            return table;
        };
        RecordMap.put = function (table, field) {
            if (table !== null) {
                var n = table.length;
                var x = Math.abs(field.key.hashCode() % n);
                var i = x;
                do {
                    var item = table[i];
                    if (item !== void 0) {
                        if (field.key.equals(item.key)) {
                            table[i] = field;
                            return;
                        }
                    }
                    else {
                        table[i] = field;
                        return;
                    }
                    i = (i + 1) % n;
                } while (i !== x);
                throw new Error();
            }
        };
        RecordMap.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var array = this._array;
            var n = this._itemCount;
            var scope = Record.create(n);
            interpreter.pushScope(scope);
            var changed = false;
            for (var i = 0; i < n; i += 1) {
                var oldItem = array[i];
                var newItem = oldItem.evaluate(interpreter);
                if (newItem.isDefined()) {
                    scope.push(newItem);
                }
                if (oldItem !== newItem) {
                    changed = true;
                }
            }
            interpreter.popScope();
            return changed ? scope : this;
        };
        RecordMap.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var array = this._array;
            var n = this._itemCount;
            var scope = Record.create(n);
            interpreter.pushScope(scope);
            var changed = false;
            for (var i = 0; i < n; i += 1) {
                var oldItem = array[i];
                var newItem = oldItem.substitute(interpreter);
                if (newItem.isDefined()) {
                    scope.push(newItem);
                }
                if (oldItem !== newItem) {
                    changed = true;
                }
            }
            interpreter.popScope();
            return changed ? scope : this;
        };
        RecordMap.prototype.subRecord = function (lower, upper) {
            var n = this._itemCount;
            if (lower === void 0) {
                lower = 0;
            }
            else if (lower < 0) {
                lower = n + lower;
            }
            if (upper === void 0) {
                upper = n;
            }
            else if (upper < 0) {
                upper = n + upper;
            }
            if (lower < 0 || upper > n || lower > upper) {
                throw new RangeError(lower + ", " + upper);
            }
            return new Record.RecordMapView(this, lower, upper);
        };
        RecordMap.prototype.forEach = function (callback, thisArg) {
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                var result = callback.call(thisArg, array[i], i);
                if (result !== void 0) {
                    return result;
                }
            }
            return;
        };
        RecordMap.empty = function () {
            if (!RecordMap._empty) {
                RecordMap._empty = new RecordMap(null, null, 0, 0, Record.ALIASED | Record.IMMUTABLE);
            }
            return RecordMap._empty;
        };
        RecordMap.create = function (initialCapacity) {
            if (initialCapacity === void 0) {
                return new RecordMap(null, null, 0, 0, Record.ALIASED);
            }
            else {
                return new RecordMap(new Array(initialCapacity), null, 0, 0, 0);
            }
        };
        RecordMap.of = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var n = arguments.length;
            if (n === 0) {
                return new RecordMap(null, null, 0, 0, Record.ALIASED);
            }
            else {
                var array = new Array(n);
                var itemCount = 0;
                var fieldCount = 0;
                for (var i = 0; i < n; i += 1) {
                    var item = Item.fromAny(arguments[i]);
                    array[i] = item;
                    itemCount += 1;
                    if (item instanceof Item.Field) {
                        fieldCount += 1;
                    }
                }
                return new RecordMap(array, null, itemCount, fieldCount, 0);
            }
        };
        return RecordMap;
    }(Record));
    Item.RecordMap = RecordMap;

    var RecordMapView = (function (_super) {
        __extends(RecordMapView, _super);
        function RecordMapView(record, lower, upper) {
            var _this = _super.call(this) || this;
            _this._record = record;
            _this._lower = lower;
            _this._upper = upper;
            return _this;
        }
        RecordMapView.prototype.isEmpty = function () {
            return this._lower === this._upper;
        };
        RecordMapView.prototype.isArray = function () {
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                if (array[i] instanceof Item.Field) {
                    return false;
                }
            }
            return true;
        };
        RecordMapView.prototype.isObject = function () {
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                if (array[i] instanceof Value) {
                    return false;
                }
            }
            return true;
        };
        Object.defineProperty(RecordMapView.prototype, "length", {
            get: function () {
                return this._upper - this._lower;
            },
            enumerable: true,
            configurable: true
        });
        RecordMapView.prototype.fieldCount = function () {
            var array = this._record._array;
            var k = 0;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                if (array[i] instanceof Item.Field) {
                    k += 1;
                }
            }
            return k;
        };
        RecordMapView.prototype.valueCount = function () {
            var k = 0;
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                if (array[i] instanceof Value) {
                    k += 1;
                }
            }
            return k;
        };
        RecordMapView.prototype.isConstant = function () {
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                if (!array[i].isConstant()) {
                    return false;
                }
            }
            return true;
        };
        RecordMapView.prototype.tag = function () {
            if (this.length > 0) {
                var item = this._record._array[this._lower];
                if (item instanceof Item.Attr) {
                    return item.key.value;
                }
            }
            return void 0;
        };
        RecordMapView.prototype.target = function () {
            var value;
            var record;
            var modified = false;
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                var item = array[i];
                if (item instanceof Item.Attr) {
                    modified = true;
                }
                else if (value === void 0 && item instanceof Value) {
                    value = item;
                }
                else {
                    if (record === void 0) {
                        record = Record.create();
                        if (value !== void 0) {
                            record.push(value);
                        }
                    }
                    record.push(item);
                }
            }
            if (value === void 0) {
                return Value.extant();
            }
            else if (record === void 0) {
                return value;
            }
            else if (modified) {
                return record;
            }
            else {
                return this;
            }
        };
        RecordMapView.prototype.head = function () {
            if (this.length > 0) {
                return this._record._array[this._lower];
            }
            else {
                return Item.absent();
            }
        };
        RecordMapView.prototype.tail = function () {
            if (this.length > 0) {
                return new RecordMapView(this._record, this._lower + 1, this._upper);
            }
            else {
                return Record.empty();
            }
        };
        RecordMapView.prototype.body = function () {
            var n = this.length;
            if (n > 2) {
                return new RecordMapView(this._record, this._lower + 1, this._upper).branch();
            }
            else if (n === 2) {
                var item = this._record._array[this._lower + 1];
                if (item instanceof Value) {
                    return item;
                }
                else {
                    return Record.of(item);
                }
            }
            else {
                return Value.absent();
            }
        };
        RecordMapView.prototype.indexOf = function (item, index) {
            if (index === void 0) { index = 0; }
            item = Item.fromAny(item);
            var array = this._record._array;
            var n = this.length;
            if (index < 0) {
                index = Math.max(0, n + index);
            }
            index = this._lower + index;
            while (index < this._upper) {
                if (item.equals(array[index])) {
                    return index - this._lower;
                }
                index += 1;
            }
            return -1;
        };
        RecordMapView.prototype.lastIndexOf = function (item, index) {
            item = Item.fromAny(item);
            var array = this._record._array;
            var n = this.length;
            if (index === void 0) {
                index = n - 1;
            }
            else if (index < 0) {
                index = n + index;
            }
            index = this._lower + Math.min(index, n - 1);
            while (index >= this._lower) {
                if (item.equals(array[index])) {
                    return index - this._lower;
                }
                index -= 1;
            }
            return -1;
        };
        RecordMapView.prototype.getItem = function (index) {
            if (index instanceof Item.Num) {
                index = index.value;
            }
            var n = this.length;
            if (index < 0) {
                index = n + index;
            }
            if (index >= 0 && index < n) {
                return this._record._array[this._lower + index];
            }
            else {
                return Item.absent();
            }
        };
        RecordMapView.prototype.setItem = function (index, newItem) {
            if ((this._record._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            newItem = Item.fromAny(newItem);
            var n = this.length;
            if (index < 0) {
                index = n + index;
            }
            if (index < 0 || index > n) {
                throw new RangeError("" + index);
            }
            if ((this._record._flags & Record.ALIASED) !== 0) {
                this.setItemAliased(index, newItem);
            }
            else {
                this.setItemMutable(index, newItem);
            }
            return this;
        };
        RecordMapView.prototype.setItemAliased = function (index, newItem) {
            var n = this._record._itemCount;
            var oldArray = this._record._array;
            var newArray = new Array(Record.expand(n));
            for (var i = 0; i < n; i += 1) {
                newArray[i] = oldArray[i];
            }
            var oldItem = oldArray[this._lower + index];
            newArray[this._lower + index] = newItem;
            this._record._array = newArray;
            this._record._table = null;
            if (newItem instanceof Item.Field) {
                if (!(oldItem instanceof Item.Field)) {
                    this._record._fieldCount += 1;
                }
            }
            else if (oldItem instanceof Item.Field) {
                this._record._fieldCount -= 1;
            }
            this._record._flags &= ~Record.ALIASED;
        };
        RecordMapView.prototype.setItemMutable = function (index, newItem) {
            var array = this._record._array;
            var oldItem = array[this._lower + index];
            array[this._lower + index] = newItem;
            if (newItem instanceof Item.Field) {
                this._record._table = null;
                if (!(oldItem instanceof Item.Field)) {
                    this._record._fieldCount += 1;
                }
            }
            else if (oldItem instanceof Item.Field) {
                this._record._table = null;
                this._record._fieldCount -= 1;
            }
        };
        RecordMapView.prototype.push = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            if ((this._record._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            if ((this._record._flags & Record.ALIASED) !== 0) {
                this.pushAliased.apply(this, arguments);
            }
            else {
                this.pushMutable.apply(this, arguments);
            }
            return this.length;
        };
        RecordMapView.prototype.pushAliased = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            var k = newItems.length;
            var m = this._record._itemCount;
            var n = this._record._fieldCount;
            var oldArray = this._record._array;
            var newArray = new Array(Record.expand(m + k));
            if (oldArray !== null) {
                for (var i = 0; i < this._upper; i += 1) {
                    newArray[i] = oldArray[i];
                }
                for (var i = this._upper; i < m; i += 1) {
                    newArray[i + k] = oldArray[i];
                }
            }
            for (var i = 0; i < k; i += 1) {
                var newItem = Item.fromAny(newItems[i]);
                newArray[i + this._upper] = newItem;
                m += 1;
                if (newItem instanceof Item.Field) {
                    n += 1;
                }
            }
            this._record._array = newArray;
            this._record._table = null;
            this._record._itemCount = m;
            this._record._fieldCount = n;
            this._record._flags &= ~Record.ALIASED;
            this._upper += k;
        };
        RecordMapView.prototype.pushMutable = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            var k = newItems.length;
            var m = this._record._itemCount;
            var n = this._record._fieldCount;
            var oldArray = this._record._array;
            var newArray;
            if (oldArray === null || m + k > oldArray.length) {
                newArray = new Array(Record.expand(m + k));
                if (oldArray !== null) {
                    for (var i = 0; i < this._upper; i += 1) {
                        newArray[i] = oldArray[i];
                    }
                }
            }
            else {
                newArray = oldArray;
            }
            for (var i = m - 1; i >= this._upper; i -= 1) {
                newArray[i + k] = oldArray[i];
            }
            for (var i = 0; i < k; i += 1) {
                var newItem = Item.fromAny(newItems[i]);
                newArray[i + this._upper] = newItem;
                m += 1;
                if (newItem instanceof Item.Field) {
                    n += 1;
                    this._record._table = null;
                }
            }
            this._record._array = newArray;
            this._record._itemCount = m;
            this._record._fieldCount = n;
            this._upper += k;
        };
        RecordMapView.prototype.splice = function (start, deleteCount) {
            var _a, _b;
            if (deleteCount === void 0) { deleteCount = 0; }
            var newItems = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }
            if ((this._record._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            var n = this.length;
            if (start < 0) {
                start = n + start;
            }
            start = Math.min(Math.max(0, start), n);
            deleteCount = Math.min(Math.max(0, deleteCount), n - start);
            var deleted;
            if ((this._record._flags & Record.ALIASED) !== 0) {
                deleted = (_a = this._record).spliceAliased.apply(_a, __spreadArrays([this._lower + start, deleteCount], newItems));
            }
            else {
                deleted = (_b = this._record).spliceMutable.apply(_b, __spreadArrays([this._lower + start, deleteCount], newItems));
            }
            this._upper += newItems.length - deleted.length;
            return deleted;
        };
        RecordMapView.prototype.delete = function (key) {
            if ((this._record._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            key = Value.fromAny(key);
            if ((this._record._flags & Record.ALIASED) !== 0) {
                return this.deleteAliased(key);
            }
            else {
                return this.deleteMutable(key);
            }
        };
        RecordMapView.prototype.deleteAliased = function (key) {
            var n = this._record._itemCount;
            var oldArray = this._record._array;
            var newArray = new Array(Record.expand(n));
            for (var i = this._lower; i < this._upper; i += 1) {
                var item = oldArray[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    for (var j = i + 1; j < n; j += 1, i += 1) {
                        newArray[i] = oldArray[j];
                    }
                    this._record._array = newArray;
                    this._record._table = null;
                    this._record._itemCount = n - 1;
                    this._record._fieldCount -= 1;
                    this._record._flags &= ~Record.ALIASED;
                    this._upper -= 1;
                    return item;
                }
                newArray[i] = item;
            }
            return Item.absent();
        };
        RecordMapView.prototype.deleteMutable = function (key) {
            var n = this._record._itemCount;
            var array = this._record._array;
            for (var i = this._lower; i < this._upper; i += 1) {
                var item = array[i];
                if (item instanceof Item.Field && item.key.equals(key)) {
                    for (var j = i + 1; j < n; j += 1, i += 1) {
                        array[i] = array[j];
                    }
                    array[n - 1] = void 0;
                    this._record._table = null;
                    this._record._itemCount -= 1;
                    this._record._fieldCount -= 1;
                    this._upper -= 1;
                    return item;
                }
            }
            return Item.absent();
        };
        RecordMapView.prototype.clear = function () {
            if ((this._record._flags & Record.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            if ((this._record._flags & Record.ALIASED) !== 0) {
                this.clearAliased();
            }
            else {
                this.clearMutable();
            }
        };
        RecordMapView.prototype.clearAliased = function () {
            var m = this._record._itemCount;
            var n = this._record._fieldCount;
            var l = m - this.length;
            var oldArray = this._record._array;
            var newArray = new Array(Record.expand(l));
            var i = 0;
            while (i < this._lower) {
                newArray[i] = oldArray[i];
                i += 1;
            }
            while (i < this._upper) {
                if (oldArray[i] instanceof Item.Field) {
                    n -= 1;
                }
                i += 1;
            }
            i = this._lower;
            var j = this._upper;
            while (j < m) {
                newArray[i] = oldArray[j];
                i += 1;
                j += 1;
            }
            this._record._array = newArray;
            this._record._table = null;
            this._record._itemCount = l;
            this._record._fieldCount = n;
            this._record._flags &= ~Record.ALIASED;
            this._upper = this._lower;
        };
        RecordMapView.prototype.clearMutable = function () {
            var m = this._record._itemCount;
            var n = this._record._fieldCount;
            var array = this._record._array;
            var i = this._lower;
            while (i < this._upper) {
                if (array[i] instanceof Item.Field) {
                    n -= 1;
                }
                i += 1;
            }
            i = this._lower;
            var j = this._upper;
            while (j < m) {
                var item = array[j];
                if (item instanceof Item.Field) {
                    this._record._table = null;
                }
                array[i] = item;
                i += 1;
                j += 1;
            }
            this._record._itemCount = i;
            this._record._fieldCount = n;
            while (i < m) {
                array[i] = void 0;
                i += 1;
            }
            this._upper = this._lower;
        };
        RecordMapView.prototype.isAliased = function () {
            return (this._record._flags & Record.ALIASED) !== 0;
        };
        RecordMapView.prototype.isMutable = function () {
            return (this._record._flags & Record.IMMUTABLE) === 0;
        };
        RecordMapView.prototype.alias = function () {
            this._record._flags |= Record.ALIASED;
        };
        RecordMapView.prototype.branch = function () {
            var m = this.length;
            var n = 0;
            var oldArray = this._record._array;
            var newArray = new Array(Record.expand(m));
            var i = this._lower;
            var j = 0;
            while (j < m) {
                var item = oldArray[i];
                newArray[j] = item;
                if (item instanceof Item.Field) {
                    n += 1;
                }
                i += 1;
                j += 1;
            }
            return new RecordMap(newArray, null, m, n, 0);
        };
        RecordMapView.prototype.clone = function () {
            var m = this.length;
            var n = 0;
            var oldArray = this._record._array;
            var newArray = new Array(Record.expand(m));
            var i = this._lower;
            var j = 0;
            while (j < m) {
                var item = oldArray[i];
                newArray[j] = item.clone();
                if (item instanceof Item.Field) {
                    n += 1;
                }
                i += 1;
                j += 1;
            }
            return new RecordMap(newArray, null, m, n, 0);
        };
        RecordMapView.prototype.commit = function () {
            this._record.commit();
            return this;
        };
        RecordMapView.prototype.subRecord = function (lower, upper) {
            var n = this.length;
            if (lower === void 0) {
                lower = 0;
            }
            else if (lower < 0) {
                lower = n + lower;
            }
            if (upper === void 0) {
                upper = n;
            }
            else if (upper < 0) {
                upper = n + upper;
            }
            if (lower < 0 || upper > n || lower > upper) {
                throw new RangeError(lower + ", " + upper);
            }
            return new RecordMapView(this._record, this._lower + lower, this._upper + upper);
        };
        RecordMapView.prototype.forEach = function (callback, thisArg) {
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                var result = callback.call(thisArg, array[i], i);
                if (result !== void 0) {
                    return result;
                }
            }
            return;
        };
        return RecordMapView;
    }(Record));
    Item.RecordMapView = RecordMapView;

    var DataOutput = (function (_super) {
        __extends(DataOutput, _super);
        function DataOutput(data, settings) {
            var _this = _super.call(this) || this;
            _this._data = data;
            _this._settings = settings;
            return _this;
        }
        DataOutput.prototype.isCont = function () {
            return true;
        };
        DataOutput.prototype.isFull = function () {
            return false;
        };
        DataOutput.prototype.isDone = function () {
            return false;
        };
        DataOutput.prototype.isError = function () {
            return false;
        };
        DataOutput.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        DataOutput.prototype.write = function (b) {
            if (typeof b === "number") {
                this._data.addByte(b);
                return this;
            }
            else {
                throw new TypeError("" + b);
            }
        };
        DataOutput.prototype.writeln = function (string) {
            throw new TypeError("" + string);
        };
        DataOutput.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                this._settings = codec.OutputSettings.fromAny(settings);
                return this;
            }
        };
        DataOutput.prototype.bind = function () {
            return this._data;
        };
        DataOutput.prototype.clone = function () {
            return new DataOutput(this._data.branch(), this._settings);
        };
        return DataOutput;
    }(codec.Output));

    var Data = (function (_super) {
        __extends(Data, _super);
        function Data(array, size, flags) {
            var _this = _super.call(this) || this;
            _this._array = array;
            _this._size = size;
            _this._flags = flags;
            return _this;
        }
        Data.prototype.isConstant = function () {
            return true;
        };
        Object.defineProperty(Data.prototype, "size", {
            get: function () {
                return this._size;
            },
            enumerable: true,
            configurable: true
        });
        Data.prototype.getByte = function (index) {
            if (index < 0 || index >= this.size) {
                throw new RangeError("" + index);
            }
            return this._array[index];
        };
        Data.prototype.setByte = function (index, value) {
            var flags = this._flags;
            if ((flags & Data.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            else if (index < 0 || index >= this._size) {
                throw new RangeError("" + index);
            }
            if ((flags & Data.ALIASED) !== 0) {
                return this.setByteAliased(index, value);
            }
            else {
                return this.setByteMutable(index, value);
            }
        };
        Data.prototype.setByteAliased = function (index, value) {
            var n = this.size;
            var oldArray = this._array;
            var newArray = new Uint8Array(Data.expand(n));
            newArray.set(oldArray, 0);
            newArray[index] = value;
            this._array = newArray;
            this._flags &= ~Data.ALIASED;
            return this;
        };
        Data.prototype.setByteMutable = function (index, value) {
            this._array[index] = value;
            return this;
        };
        Data.prototype.addByte = function (value) {
            var flags = this._flags;
            if ((flags & Data.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            if ((flags & Data.ALIASED) !== 0) {
                return this.addByteAliased(value);
            }
            else {
                return this.addByteMutable(value);
            }
        };
        Data.prototype.addByteAliased = function (value) {
            var n = this.size;
            var oldArray = this._array;
            var newArray = new Uint8Array(Data.expand(n + 1));
            if (oldArray != null) {
                newArray.set(oldArray, 0);
            }
            newArray[n] = value;
            this._array = newArray;
            this._size = n + 1;
            this._flags &= ~Data.ALIASED;
            return this;
        };
        Data.prototype.addByteMutable = function (value) {
            var n = this.size;
            var oldArray = this._array;
            var newArray;
            if (oldArray === null || n + 1 > oldArray.length) {
                newArray = new Uint8Array(Data.expand(n + 1));
                if (oldArray !== null) {
                    newArray.set(oldArray, 0);
                }
                this._array = newArray;
            }
            else {
                newArray = oldArray;
            }
            newArray[n] = value;
            this._size = n + 1;
            return this;
        };
        Data.prototype.addData = function (data) {
            var array = data._array;
            if (array !== null) {
                var size = data._size;
                if (array.length > size) {
                    array = array.slice(0, size);
                }
                return this.addUint8Array(array);
            }
            else {
                return this;
            }
        };
        Data.prototype.addUint8Array = function (array) {
            var flags = this._flags;
            if ((flags & Data.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            if ((flags & Data.ALIASED) !== 0) {
                return this.addUint8ArrayAliased(array);
            }
            else {
                return this.addUint8ArrayMutable(array);
            }
        };
        Data.prototype.addUint8ArrayAliased = function (array) {
            var size = array.length;
            if (size === 0) {
                return this;
            }
            var n = this.size;
            var oldArray = this._array;
            var newArray = new Uint8Array(Data.expand(n + size));
            if (oldArray !== null) {
                newArray.set(oldArray, 0);
            }
            newArray.set(array, n);
            this._array = newArray;
            this._size = n + size;
            this._flags &= ~Data.ALIASED;
            return this;
        };
        Data.prototype.addUint8ArrayMutable = function (array) {
            var size = array.length;
            if (size === 0) {
                return this;
            }
            var n = this.size;
            var oldArray = this._array;
            var newArray;
            if (oldArray === null || n + size > oldArray.length) {
                newArray = new Uint8Array(Data.expand(n + size));
                if (oldArray !== null) {
                    newArray.set(oldArray, 0);
                }
                this._array = newArray;
            }
            else {
                newArray = oldArray;
            }
            newArray.set(array, n);
            this._size = n + size;
            return this;
        };
        Data.prototype.clear = function () {
            if ((this._flags & Data.IMMUTABLE) !== 0) {
                throw new Error("immutable");
            }
            this._array = null;
            this._size = 0;
            this._flags = Data.ALIASED;
        };
        Data.prototype.toUint8Array = function () {
            var oldArray = this._array;
            var flags = this._flags;
            if ((flags & Data.IMMUTABLE) !== 0) {
                return oldArray !== null ? oldArray.slice(0) : new Uint8Array(0);
            }
            else if ((flags & Data.ALIASED) !== 0 || this._size !== oldArray.length) {
                var newArray = oldArray !== null ? oldArray.slice(0) : new Uint8Array(0);
                this._array = newArray;
                this._flags &= ~Data.ALIASED;
                return newArray;
            }
            else {
                return oldArray;
            }
        };
        Data.prototype.asUint8Array = function () {
            var array;
            if (this._array && this._size > 0) {
                array = this._array;
                if (array.length !== this._size) {
                    array = new Uint8Array(array.buffer, array.byteOffset, this._size);
                }
            }
            else {
                array = void 0;
            }
            return array;
        };
        Data.prototype.toAny = function () {
            return this.toUint8Array();
        };
        Data.prototype.isAliased = function () {
            return (this._flags & Data.ALIASED) !== 0;
        };
        Data.prototype.isMutable = function () {
            return (this._flags & Data.IMMUTABLE) === 0;
        };
        Data.prototype.branch = function () {
            this._flags |= Data.ALIASED;
            return new Data(this._array, this._size, Data.ALIASED);
        };
        Data.prototype.clone = function () {
            return this.branch();
        };
        Data.prototype.commit = function () {
            this._flags |= Data.IMMUTABLE;
            return this;
        };
        Data.prototype.writeBase16 = function (output, base16) {
            if (base16 === void 0) { base16 = codec.Base16.uppercase(); }
            var array = this._array;
            var size = this._size;
            if (array !== null && size !== 0) {
                if (array.length !== size) {
                    array = array.slice(0, size);
                }
                return base16.writeUint8Array(array, output);
            }
            else {
                return codec.Writer.done();
            }
        };
        Data.prototype.toBase16 = function (base16) {
            if (base16 === void 0) { base16 = codec.Base16.uppercase(); }
            var output = codec.Unicode.stringOutput();
            this.writeBase16(output, base16);
            return output.bind();
        };
        Data.prototype.writeBase64 = function (output, base64) {
            if (base64 === void 0) { base64 = codec.Base64.standard(); }
            var array = this._array;
            var size = this._size;
            if (array !== null && size !== 0) {
                if (array.length !== size) {
                    array = array.slice(0, size);
                }
                return base64.writeUint8Array(array, output);
            }
            else {
                return codec.Writer.done();
            }
        };
        Data.prototype.toBase64 = function (base64) {
            if (base64 === void 0) { base64 = codec.Base64.standard(); }
            var output = codec.Unicode.stringOutput();
            this.writeBase64(output, base64);
            return output.bind();
        };
        Data.prototype.typeOrder = function () {
            return 4;
        };
        Data.prototype.compareTo = function (that) {
            if (that instanceof Data) {
                var xs = this._array;
                var ys = that._array;
                var xn = this._size;
                var yn = that._size;
                var order = 0;
                var i = 0;
                do {
                    if (i < xn && i < yn) {
                        order = xs[i] - ys[i];
                        i += 1;
                    }
                    else {
                        break;
                    }
                } while (order === 0);
                if (order > 0) {
                    return 1;
                }
                else if (order < 0) {
                    return -1;
                }
                else if (xn > yn) {
                    return 1;
                }
                else if (xn < yn) {
                    return -1;
                }
                else {
                    return 0;
                }
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Data.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Data) {
                var xs = this._array;
                var ys = that._array;
                var xn = this._size;
                if (xn !== that._size) {
                    return false;
                }
                for (var i = 0; i < xn; i += 1) {
                    if (xs[i] !== ys[i]) {
                        return false;
                    }
                }
                return true;
            }
            return false;
        };
        Data.prototype.hashCode = function () {
            if (Data._hashSeed === void 0) {
                Data._hashSeed = util.Murmur3.seed(Data);
            }
            return util.Murmur3.mash(util.Murmur3.mix(Data._hashSeed, this._array || new Uint8Array(0)));
        };
        Data.prototype.debug = function (output) {
            output = output.write("Data").write(46);
            if (this._size === 0) {
                output = output.write("empty").write(40).write(41);
            }
            else {
                output = output.write("base16").write(40).write(34);
                this.writeBase16(output);
                output = output.write(34).write(41);
            }
        };
        Data.prototype.display = function (output) {
            this.debug(output);
        };
        Data.output = function (data) {
            if (!(data instanceof Data)) {
                data = Data.create(data);
            }
            return new DataOutput(data, codec.OutputSettings.standard());
        };
        Data.empty = function () {
            if (Data._empty == null) {
                Data._empty = new Data(null, 0, Data.ALIASED | Data.IMMUTABLE);
            }
            return Data._empty;
        };
        Data.create = function (initialCapacity) {
            if (initialCapacity === void 0) {
                return new Data(null, 0, Data.ALIASED);
            }
            else {
                return new Data(new Uint8Array(initialCapacity), 0, 0);
            }
        };
        Data.wrap = function (value) {
            return new Data(value, value.length, Data.ALIASED);
        };
        Data.fromBase16 = function (input) {
            if (typeof input === "string") {
                input = codec.Unicode.stringInput(input);
            }
            return codec.Base16.parse(input, Data.output()).bind();
        };
        Data.fromBase64 = function (input, base64) {
            if (base64 === void 0) { base64 = codec.Base64.standard(); }
            if (typeof input === "string") {
                input = codec.Unicode.stringInput(input);
            }
            return base64.parse(input, Data.output()).bind();
        };
        Data.fromAny = function (value) {
            if (value instanceof Data) {
                return value;
            }
            else if (value instanceof Uint8Array) {
                return Data.wrap(value);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Data.random = function (size) {
            var array = new Uint8Array(size);
            util.Random.fillBytes(array);
            return Data.wrap(array);
        };
        Data.expand = function (n) {
            n = Math.max(32, n) - 1;
            n |= n >> 1;
            n |= n >> 2;
            n |= n >> 4;
            n |= n >> 8;
            n |= n >> 16;
            return n + 1;
        };
        Data.ALIASED = 1 << 0;
        Data.IMMUTABLE = 1 << 1;
        return Data;
    }(Value));
    Item.Data = Data;

    var TextOutput = (function (_super) {
        __extends(TextOutput, _super);
        function TextOutput(string, settings) {
            var _this = _super.call(this) || this;
            _this._string = string;
            _this._settings = settings;
            return _this;
        }
        TextOutput.prototype.isCont = function () {
            return true;
        };
        TextOutput.prototype.isFull = function () {
            return false;
        };
        TextOutput.prototype.isDone = function () {
            return false;
        };
        TextOutput.prototype.isError = function () {
            return false;
        };
        TextOutput.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        TextOutput.prototype.write = function (token) {
            if (typeof token === "number") {
                if ((token >= 0x0000 && token <= 0xd7ff)
                    || (token >= 0xe000 && token <= 0xffff)) {
                    token = String.fromCharCode(token);
                }
                else if (token >= 0x10000 && token <= 0x10ffff) {
                    var u = token - 0x10000;
                    token = String.fromCharCode(0xd800 | (u >>> 10), 0xdc00 | (u & 0x3ff));
                }
                else {
                    token = "\ufffd";
                }
            }
            this._string += token;
            return this;
        };
        TextOutput.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                this._settings = codec.OutputSettings.fromAny(settings);
                return this;
            }
        };
        TextOutput.prototype.bind = function () {
            return Text.from(this._string);
        };
        TextOutput.prototype.clone = function () {
            return new TextOutput(this._string, this._settings);
        };
        TextOutput.prototype.toString = function () {
            return this._string;
        };
        return TextOutput;
    }(codec.Output));

    var Text = (function (_super) {
        __extends(Text, _super);
        function Text(value) {
            var _this = _super.call(this) || this;
            _this._value = value;
            return _this;
        }
        Text.prototype.isConstant = function () {
            return true;
        };
        Object.defineProperty(Text.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "size", {
            get: function () {
                return this._value.length;
            },
            enumerable: true,
            configurable: true
        });
        Text.prototype.stringValue = function (orElse) {
            return this._value;
        };
        Text.prototype.numberValue = function (orElse) {
            try {
                return Item.Num.from(this._value).numberValue();
            }
            catch (error) {
                return orElse;
            }
        };
        Text.prototype.booleanValue = function (orElse) {
            if (this._value === "true") {
                return true;
            }
            else if (this._value === "false") {
                return false;
            }
            else {
                return orElse;
            }
        };
        Text.prototype.toAny = function () {
            return this._value;
        };
        Text.prototype.valueOf = function () {
            return this._value;
        };
        Text.prototype.plus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Text) {
                return Text.from(this._value + that._value);
            }
            return _super.prototype.plus.call(this, that);
        };
        Text.prototype.branch = function () {
            return this;
        };
        Text.prototype.clone = function () {
            return this;
        };
        Text.prototype.commit = function () {
            return this;
        };
        Text.prototype.typeOrder = function () {
            return 5;
        };
        Text.prototype.compareTo = function (that) {
            if (that instanceof Text) {
                var order = this._value.localeCompare(that._value);
                return order < 0 ? -1 : order > 0 ? 1 : 0;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Text.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Text) {
                return this._value === that._value;
            }
            return false;
        };
        Text.prototype.hashCode = function () {
            if (this._hashCode === void 0) {
                this._hashCode = util.Murmur3.hash(this._value);
            }
            return this._hashCode;
        };
        Text.prototype.debug = function (output) {
            output = output.write("Text").write(46);
            if (this._value.length === 0) {
                output = output.write("empty").write(40).write(41);
            }
            else {
                output = output.write("from").write(40).debug(this._value).write(41);
            }
        };
        Text.prototype.display = function (output) {
            codec.Format.debug(this._value, output);
        };
        Text.prototype.toString = function () {
            return this._value;
        };
        Text.output = function (settings) {
            if (settings === void 0) { settings = codec.OutputSettings.standard(); }
            return new TextOutput("", settings);
        };
        Text.empty = function () {
            if (!Text._empty) {
                Text._empty = new Text("");
            }
            return Text._empty;
        };
        Text.from = function (value) {
            var n = value.length;
            if (n === 0) {
                return Text.empty();
            }
            else {
                var text = new Text(value);
                if (n <= 64) {
                    text = Text.cache().put(text);
                }
                return text;
            }
        };
        Text.fromAny = function (value) {
            if (value instanceof Text) {
                return value;
            }
            else if (typeof value === "string") {
                return Text.from(value);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Text.cache = function () {
            if (Text._cache == null) {
                var cacheSize = 128;
                Text._cache = new util.HashGenCacheSet(cacheSize);
            }
            return Text._cache;
        };
        return Text;
    }(Value));
    Item.Text = Text;

    var Num = (function (_super) {
        __extends(Num, _super);
        function Num(value, flags) {
            if (flags === void 0) { flags = 0; }
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._flags = flags;
            return _this;
        }
        Num.prototype.isConstant = function () {
            return true;
        };
        Object.defineProperty(Num.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Num.prototype.isNaN = function () {
            return isNaN(this._value);
        };
        Num.prototype.isInfinite = function () {
            return !isNaN(this._value) && !isFinite(this._value);
        };
        Num.prototype.isUint32 = function () {
            return (this._flags & Num.UINT32) !== 0;
        };
        Num.prototype.isUint64 = function () {
            return (this._flags & Num.UINT64) !== 0;
        };
        Num.prototype.stringValue = function (orElse) {
            return "" + this._value;
        };
        Num.prototype.numberValue = function (orElse) {
            return this._value;
        };
        Num.prototype.booleanValue = function (orElse) {
            return !!this._value;
        };
        Num.prototype.toAny = function () {
            return this._value;
        };
        Num.prototype.valueOf = function () {
            return this._value;
        };
        Num.prototype.bitwiseOr = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Num) {
                return Num.from((this._value | that._value) >>> 0);
            }
            return _super.prototype.bitwiseOr.call(this, that);
        };
        Num.prototype.bitwiseXor = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Num) {
                return Num.from((this._value ^ that._value) >>> 0);
            }
            return _super.prototype.bitwiseXor.call(this, that);
        };
        Num.prototype.bitwiseAnd = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Num) {
                return Num.from((this._value & that._value) >>> 0);
            }
            return _super.prototype.bitwiseAnd.call(this, that);
        };
        Num.prototype.plus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Num) {
                return Num.from(this._value + that._value);
            }
            return _super.prototype.plus.call(this, that);
        };
        Num.prototype.minus = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Num) {
                return Num.from(this._value - that._value);
            }
            return _super.prototype.minus.call(this, that);
        };
        Num.prototype.times = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Num) {
                return Num.from(this._value * that._value);
            }
            return _super.prototype.times.call(this, that);
        };
        Num.prototype.divide = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Num) {
                return Num.from(this._value / that._value);
            }
            return _super.prototype.divide.call(this, that);
        };
        Num.prototype.modulo = function (that) {
            that = Item.fromAny(that);
            if (that instanceof Num) {
                return Num.from(this._value % that._value);
            }
            return _super.prototype.modulo.call(this, that);
        };
        Num.prototype.bitwiseNot = function () {
            return Num.from(~this._value >>> 0);
        };
        Num.prototype.negative = function () {
            return Num.from(-this._value);
        };
        Num.prototype.positive = function () {
            return this;
        };
        Num.prototype.inverse = function () {
            return Num.from(1 / this._value);
        };
        Num.prototype.abs = function () {
            return Num.from(Math.abs(this._value));
        };
        Num.prototype.ceil = function () {
            return Num.from(Math.ceil(this._value));
        };
        Num.prototype.floor = function () {
            return Num.from(Math.floor(this._value));
        };
        Num.prototype.round = function () {
            return Num.from(Math.round(this._value));
        };
        Num.prototype.sqrt = function () {
            return Num.from(Math.sqrt(this._value));
        };
        Num.prototype.pow = function (that) {
            that = Num.fromAny(that);
            return Num.from(Math.pow(this._value, that._value));
        };
        Num.prototype.max = function (that) {
            return this.compareTo(that) >= 0 ? this : that;
        };
        Num.prototype.min = function (that) {
            return this.compareTo(that) <= 0 ? this : that;
        };
        Num.prototype.typeOrder = function () {
            return 6;
        };
        Num.prototype.compareTo = function (that) {
            if (that instanceof Num) {
                var x = this._value;
                var y = that._value;
                return x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Num.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Num) {
                var x = this._value;
                var y = that._value;
                return x === y || isNaN(x) && isNaN(y);
            }
            return false;
        };
        Num.prototype.hashCode = function () {
            return util.Murmur3.hash(this._value);
        };
        Num.prototype.debug = function (output) {
            output = output.write("Num").write(46).write("from")
                .write(40).display(this).write(41);
        };
        Num.prototype.display = function (output) {
            codec.Format.displayNumber(this._value, output);
        };
        Num.positiveZero = function () {
            if (Num._positiveZero === void 0) {
                Num._positiveZero = new Num(0);
            }
            return Num._positiveZero;
        };
        Num.negativeZero = function () {
            if (Num._negativeZero === void 0) {
                Num._negativeZero = new Num(-0);
            }
            return Num._negativeZero;
        };
        Num.positiveOne = function () {
            if (Num._positiveOne === void 0) {
                Num._positiveOne = new Num(1);
            }
            return Num._positiveOne;
        };
        Num.negativeOne = function () {
            if (Num._negativeOne === void 0) {
                Num._negativeOne = new Num(-1);
            }
            return Num._negativeOne;
        };
        Num.nan = function () {
            if (Num._nan === void 0) {
                Num._nan = new Num(NaN);
            }
            return Num._nan;
        };
        Num.uint32 = function (value) {
            return new Num(value, Num.UINT32);
        };
        Num.uint64 = function (value) {
            return new Num(value, Num.UINT64);
        };
        Num.from = function (value) {
            if (typeof value === "number") {
                if (value === 0) {
                    if (1 / value === -Infinity) {
                        return Num.negativeZero();
                    }
                    else {
                        return Num.positiveZero();
                    }
                }
                else if (value === 1) {
                    return Num.positiveOne();
                }
                else if (value === -1) {
                    return Num.negativeOne();
                }
                else if (isNaN(value)) {
                    return Num.nan();
                }
                else {
                    return Num.cache().put(new Num(value));
                }
            }
            else if (typeof value === "string") {
                if (value === "NaN") {
                    return Num.nan();
                }
                else {
                    var num = +value;
                    if (isFinite(num)) {
                        return Num.from(num);
                    }
                }
                throw new Error(value);
            }
            throw new TypeError("" + value);
        };
        Num.fromAny = function (value) {
            if (value instanceof Num) {
                return value;
            }
            else if (typeof value === "number") {
                return Num.from(value);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Num.cache = function () {
            if (Num._cache == null) {
                var cacheSize = 16;
                Num._cache = new util.HashGenCacheSet(cacheSize);
            }
            return Num._cache;
        };
        Num.TYPE_MASK = 0x3;
        Num.UINT32 = 1;
        Num.UINT64 = 2;
        return Num;
    }(Value));
    Item.Num = Num;

    var Bool = (function (_super) {
        __extends(Bool, _super);
        function Bool(value) {
            var _this = _super.call(this) || this;
            _this._value = value;
            return _this;
        }
        Bool.prototype.isConstant = function () {
            return true;
        };
        Object.defineProperty(Bool.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Bool.prototype.stringValue = function (orElse) {
            return this._value ? "true" : "false";
        };
        Bool.prototype.booleanValue = function (orElse) {
            return this._value;
        };
        Bool.prototype.toAny = function () {
            return this._value;
        };
        Bool.prototype.valueOf = function () {
            return this._value;
        };
        Bool.prototype.conditional = function (thenTerm, elseTerm) {
            return this._value ? Item.fromAny(thenTerm) : Item.fromAny(elseTerm);
        };
        Bool.prototype.or = function (that) {
            return this._value ? this : Item.fromAny(that);
        };
        Bool.prototype.and = function (that) {
            return this._value ? Item.fromAny(that) : this;
        };
        Bool.prototype.not = function () {
            return Bool.from(!this._value);
        };
        Bool.prototype.typeOrder = function () {
            return 7;
        };
        Bool.prototype.compareTo = function (that) {
            if (that instanceof Bool) {
                if (this._value && !that._value) {
                    return -1;
                }
                else if (!this._value && that._value) {
                    return 1;
                }
                else {
                    return 0;
                }
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Bool.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Bool) {
                return this._value === that._value;
            }
            return false;
        };
        Bool.prototype.hashCode = function () {
            if (this._hashCode === void 0) {
                this._hashCode = util.Murmur3.hash(this._value ? "true" : "false");
            }
            return this._hashCode;
        };
        Bool.prototype.debug = function (output) {
            output = output.write("Bool").write(46).write("from")
                .write(40).write(this._value ? "true" : "false").write(41);
        };
        Bool.prototype.display = function (output) {
            output = output.write(this._value ? "true" : "false");
        };
        Bool.from = function (value) {
            return value ? Bool.True : Bool.False;
        };
        Bool.fromAny = function (value) {
            if (value instanceof Bool) {
                return value;
            }
            else if (typeof value === "boolean") {
                return Bool.from(value);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Bool.True = new Bool(true);
        Bool.False = new Bool(false);
        return Bool;
    }(Value));
    Item.Bool = Bool;

    var Expression = (function (_super) {
        __extends(Expression, _super);
        function Expression() {
            return _super.call(this) || this;
        }
        Expression.prototype.conditional = function (thenTerm, elseTerm) {
            thenTerm = Item.fromAny(thenTerm);
            elseTerm = Item.fromAny(elseTerm);
            return new Item.ConditionalOperator(this, thenTerm, elseTerm);
        };
        Expression.prototype.or = function (that) {
            that = Item.fromAny(that);
            return new Item.OrOperator(this, that);
        };
        Expression.prototype.and = function (that) {
            that = Item.fromAny(that);
            return new Item.AndOperator(this, that);
        };
        Expression.prototype.bitwiseOr = function (that) {
            that = Item.fromAny(that);
            return new Item.BitwiseOrOperator(this, that);
        };
        Expression.prototype.bitwiseXor = function (that) {
            that = Item.fromAny(that);
            return new Item.BitwiseXorOperator(this, that);
        };
        Expression.prototype.bitwiseAnd = function (that) {
            that = Item.fromAny(that);
            return new Item.BitwiseAndOperator(this, that);
        };
        Expression.prototype.lt = function (that) {
            that = Item.fromAny(that);
            return new Item.LtOperator(this, that);
        };
        Expression.prototype.le = function (that) {
            that = Item.fromAny(that);
            return new Item.LeOperator(this, that);
        };
        Expression.prototype.eq = function (that) {
            that = Item.fromAny(that);
            return new Item.EqOperator(this, that);
        };
        Expression.prototype.ne = function (that) {
            that = Item.fromAny(that);
            return new Item.NeOperator(this, that);
        };
        Expression.prototype.ge = function (that) {
            that = Item.fromAny(that);
            return new Item.GeOperator(this, that);
        };
        Expression.prototype.gt = function (that) {
            that = Item.fromAny(that);
            return new Item.GtOperator(this, that);
        };
        Expression.prototype.plus = function (that) {
            that = Item.fromAny(that);
            return new Item.PlusOperator(this, that);
        };
        Expression.prototype.minus = function (that) {
            that = Item.fromAny(that);
            return new Item.MinusOperator(this, that);
        };
        Expression.prototype.times = function (that) {
            that = Item.fromAny(that);
            return new Item.TimesOperator(this, that);
        };
        Expression.prototype.divide = function (that) {
            that = Item.fromAny(that);
            return new Item.DivideOperator(this, that);
        };
        Expression.prototype.modulo = function (that) {
            that = Item.fromAny(that);
            return new Item.ModuloOperator(this, that);
        };
        Expression.prototype.not = function () {
            return new Item.NotOperator(this);
        };
        Expression.prototype.bitwiseNot = function () {
            return new Item.BitwiseNotOperator(this);
        };
        Expression.prototype.negative = function () {
            return new Item.NegativeOperator(this);
        };
        Expression.prototype.positive = function () {
            return new Item.PositiveOperator(this);
        };
        Expression.prototype.inverse = function () {
            return new Item.DivideOperator(Item.Num.positiveOne(), this);
        };
        Expression.prototype.toAny = function () {
            return this;
        };
        return Expression;
    }(Value));
    Item.Expression = Expression;

    var Operator = (function (_super) {
        __extends(Operator, _super);
        function Operator() {
            return _super.call(this) || this;
        }
        return Operator;
    }(Expression));
    Item.Operator = Operator;

    var Selector = (function (_super) {
        __extends(Selector, _super);
        function Selector() {
            return _super.call(this) || this;
        }
        Selector.prototype.isConstant = function () {
            return false;
        };
        Selector.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var selected = Item.Record.create();
            this.forSelected(interpreter, function (interpreter) {
                var scope = interpreter.peekScope();
                if (scope) {
                    selected.push(scope);
                }
            }, this);
            return selected.isEmpty() ? Item.absent() : selected.flattened();
        };
        Selector.prototype.get = function (key) {
            key = Value.fromAny(key);
            return this.andThen(new Item.GetSelector(key, Selector.identity()));
        };
        Selector.prototype.getAttr = function (key) {
            key = Item.Text.fromAny(key);
            return this.andThen(new Item.GetAttrSelector(key, Selector.identity()));
        };
        Selector.prototype.getItem = function (index) {
            index = Item.Num.fromAny(index);
            return this.andThen(new Item.GetItemSelector(index, Selector.identity()));
        };
        Selector.prototype.keys = function () {
            return this.andThen(Selector.keys());
        };
        Selector.prototype.values = function () {
            return this.andThen(Selector.values());
        };
        Selector.prototype.children = function () {
            return this.andThen(Selector.children());
        };
        Selector.prototype.descendants = function () {
            return this.andThen(Selector.descendants());
        };
        Selector.prototype.filter = function (predicate) {
            if (arguments.length === 0) {
                return new Item.FilterSelector(this, Selector.identity());
            }
            else {
                predicate = Item.fromAny(predicate);
                return this.andThen(predicate.filter());
            }
        };
        Selector.prototype.invoke = function (args) {
            return new Item.InvokeOperator(this, args);
        };
        Selector.prototype.precedence = function () {
            return 11;
        };
        Selector.prototype.debug = function (output) {
            output = output.write("Selector").write(46).write("identity").write(40).write(41);
            this.debugThen(output);
        };
        Selector.identity = function () {
            return Selector._identity;
        };
        Selector.get = function (key) {
            key = Value.fromAny(key);
            return new Item.GetSelector(key, Selector.identity());
        };
        Selector.getAttr = function (key) {
            key = Item.Text.fromAny(key);
            return new Item.GetAttrSelector(key, Selector.identity());
        };
        Selector.getItem = function (index) {
            index = Item.Num.fromAny(index);
            return new Item.GetItemSelector(index, Selector.identity());
        };
        Selector.keys = function () {
            if (!Selector._keys) {
                Selector._keys = new Item.KeysSelector(Selector.identity());
            }
            return Selector._keys;
        };
        Selector.values = function () {
            if (!Selector._values) {
                Selector._values = new Item.ValuesSelector(Selector.identity());
            }
            return Selector._values;
        };
        Selector.children = function () {
            if (!Selector._children) {
                Selector._children = new Item.ChildrenSelector(Selector.identity());
            }
            return Selector._children;
        };
        Selector.descendants = function () {
            if (!Selector._descendants) {
                Selector._descendants = new Item.DescendantsSelector(Selector.identity());
            }
            return Selector._descendants;
        };
        Selector.literal = function (item) {
            item = Item.fromAny(item);
            if (!(item instanceof Selector)) {
                item = new Item.LiteralSelector(item, Selector.identity());
            }
            return item;
        };
        return Selector;
    }(Expression));
    Item.Selector = Selector;

    var Func = (function (_super) {
        __extends(Func, _super);
        function Func() {
            return _super.call(this) || this;
        }
        Func.prototype.expand = function (args, interpreter, operator) {
            return void 0;
        };
        Func.prototype.isConstant = function () {
            return false;
        };
        return Func;
    }(Expression));
    Item.Func = Func;

    var Extant = (function (_super) {
        __extends(Extant, _super);
        function Extant() {
            return _super.call(this) || this;
        }
        Extant.prototype.isDefined = function () {
            return true;
        };
        Extant.prototype.isDistinct = function () {
            return false;
        };
        Extant.prototype.isConstant = function () {
            return true;
        };
        Extant.prototype.unflattened = function () {
            return Value.Record.empty();
        };
        Extant.prototype.not = function () {
            return Value.absent();
        };
        Extant.prototype.stringValue = function (orElse) {
            return "";
        };
        Extant.prototype.booleanValue = function (orElse) {
            return true;
        };
        Extant.prototype.toAny = function () {
            return null;
        };
        Extant.prototype.typeOrder = function () {
            return 98;
        };
        Extant.prototype.compareTo = function (that) {
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Extant.prototype.equals = function (that) {
            return this === that;
        };
        Extant.prototype.hashCode = function () {
            if (Extant._hashSeed === void 0) {
                Extant._hashSeed = util.Murmur3.seed(Extant);
            }
            return Extant._hashSeed;
        };
        Extant.prototype.debug = function (output) {
            output = output.write("Value").write(46).write("extant").write(40).write(41);
        };
        Extant.prototype.display = function (output) {
            output = output.write("null");
        };
        Extant.extant = function () {
            return Extant._extant;
        };
        Extant.fromAny = function (value) {
            if (value instanceof Extant) {
                return value;
            }
            else if (value === null) {
                return Extant.extant();
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Extant._extant = new Extant();
        return Extant;
    }(Value));
    Item.Extant = Extant;

    var Absent = (function (_super) {
        __extends(Absent, _super);
        function Absent() {
            return _super.call(this) || this;
        }
        Absent.prototype.isDefined = function () {
            return false;
        };
        Absent.prototype.isDistinct = function () {
            return false;
        };
        Absent.prototype.isConstant = function () {
            return true;
        };
        Absent.prototype.unflattened = function () {
            return Value.Record.empty();
        };
        Absent.prototype.updated = function (key, value) {
            return Value.Record.of(Item.Slot.of(key, value));
        };
        Absent.prototype.updatedAttr = function (key, value) {
            return Value.Record.of(Item.Attr.of(key, value));
        };
        Absent.prototype.updatedSlot = function (key, value) {
            return Value.Record.of(Item.Slot.of(key, value));
        };
        Absent.prototype.appended = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            return Value.Record.of(items);
        };
        Absent.prototype.prepended = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            return Value.Record.of(items);
        };
        Absent.prototype.concat = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var record = Value.Record.create();
            for (var i = 0, n = arguments.length; i < n; i += 1) {
                Item.fromAny(arguments[i]).forEach(function (item) {
                    record.push(item);
                });
            }
            return record;
        };
        Absent.prototype.cond = function (thenTerm, elseTerm) {
            return Item.fromAny(elseTerm);
        };
        Absent.prototype.or = function (that) {
            return Item.fromAny(that);
        };
        Absent.prototype.and = function (that) {
            return this;
        };
        Absent.prototype.not = function () {
            return Value.extant();
        };
        Absent.prototype.booleanValue = function (orElse) {
            return false;
        };
        Absent.prototype.toAny = function () {
            return void 0;
        };
        Absent.prototype.forEach = function (callback, thisArg) {
            return void 0;
        };
        Absent.prototype.iterator = function () {
            return util.Cursor.empty();
        };
        Absent.prototype.typeOrder = function () {
            return 99;
        };
        Absent.prototype.compareTo = function (that) {
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        Absent.prototype.equals = function (that) {
            return this === that;
        };
        Absent.prototype.hashCode = function () {
            if (Absent._hashSeed === void 0) {
                Absent._hashSeed = util.Murmur3.seed(Absent);
            }
            return Absent._hashSeed;
        };
        Absent.prototype.debug = function (output) {
            output = output.write("Value").write(46).write("absent").write(40).write(41);
        };
        Absent.prototype.display = function (output) {
            output = output.write("undefined");
        };
        Absent.absent = function () {
            return Absent._absent;
        };
        Absent.fromAny = function (value) {
            if (value instanceof Absent) {
                return value;
            }
            else if (value === void 0) {
                return Absent.absent();
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Absent._absent = new Absent();
        return Absent;
    }(Value));
    Item.Absent = Absent;

    var FormException = (function (_super) {
        __extends(FormException, _super);
        function FormException(message) {
            var _this = _super.call(this, message) || this;
            _this.__proto__ = FormException.prototype;
            return _this;
        }
        return FormException;
    }(Error));

    var Form = (function () {
        function Form() {
        }
        Form.prototype.tag = function (tag) {
            if (arguments.length === 0) {
                return void 0;
            }
            else if (tag !== void 0) {
                return new Form.TagForm(tag, this);
            }
            else {
                return this;
            }
        };
        Form.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return void 0;
            }
            else if (unit !== void 0) {
                return new Form.UnitForm(unit, this);
            }
            else {
                return this;
            }
        };
        Form.forString = function () {
            if (!Form._stringForm) {
                Form._stringForm = new Form.StringForm("");
            }
            return Form._stringForm;
        };
        Form.forNumber = function () {
            if (!Form._numberForm) {
                Form._numberForm = new Form.NumberForm(0);
            }
            return Form._numberForm;
        };
        Form.forBoolean = function () {
            if (!Form._booleanForm) {
                Form._booleanForm = new Form.BooleanForm(false);
            }
            return Form._booleanForm;
        };
        Form.forAny = function () {
            if (!Form._anyForm) {
                Form._anyForm = new Form.AnyForm(void 0);
            }
            return Form._anyForm;
        };
        Form.forItem = function () {
            if (!Form._itemForm) {
                Form._itemForm = new Form.ItemForm(Item.absent());
            }
            return Form._itemForm;
        };
        Form.forValue = function () {
            if (!Form._valueForm) {
                Form._valueForm = new Form.ValueForm(Value.absent());
            }
            return Form._valueForm;
        };
        return Form;
    }());

    var BinaryOperator = (function (_super) {
        __extends(BinaryOperator, _super);
        function BinaryOperator(operand1, operand2) {
            var _this = _super.call(this) || this;
            _this._operand1 = operand1;
            _this._operand2 = operand2;
            return _this;
        }
        BinaryOperator.prototype.operand1 = function () {
            return this._operand1;
        };
        BinaryOperator.prototype.operand2 = function () {
            return this._operand2;
        };
        BinaryOperator.prototype.isConstant = function () {
            return this._operand1.isConstant() && this._operand2.isConstant();
        };
        return BinaryOperator;
    }(Operator));
    Item.BinaryOperator = BinaryOperator;

    var UnaryOperator = (function (_super) {
        __extends(UnaryOperator, _super);
        function UnaryOperator(operand) {
            var _this = _super.call(this) || this;
            _this._operand = operand;
            return _this;
        }
        UnaryOperator.prototype.operand = function () {
            return this._operand;
        };
        UnaryOperator.prototype.isConstant = function () {
            return this._operand.isConstant();
        };
        return UnaryOperator;
    }(Operator));
    Item.UnaryOperator = UnaryOperator;

    var ConditionalOperator = (function (_super) {
        __extends(ConditionalOperator, _super);
        function ConditionalOperator(ifTerm, thenTerm, elseTerm) {
            var _this = _super.call(this) || this;
            _this._ifTerm = ifTerm.commit();
            _this._thenTerm = thenTerm.commit();
            _this._elseTerm = elseTerm.commit();
            return _this;
        }
        ConditionalOperator.prototype.ifTerm = function () {
            return this._ifTerm;
        };
        ConditionalOperator.prototype.thenTerm = function () {
            return this._thenTerm;
        };
        ConditionalOperator.prototype.elseTerm = function () {
            return this._elseTerm;
        };
        ConditionalOperator.prototype.isConstant = function () {
            return this._ifTerm.isConstant() && this._thenTerm.isConstant()
                && this._elseTerm.isConstant();
        };
        ConditionalOperator.prototype.precedence = function () {
            return 2;
        };
        ConditionalOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var result;
            var ifTerm = this._ifTerm.evaluate(interpreter);
            if (ifTerm.booleanValue(false)) {
                var theTerm = this._thenTerm.evaluate(interpreter);
                result = theTerm;
            }
            else {
                var elseTerm = this._elseTerm.evaluate(interpreter);
                result = elseTerm;
            }
            interpreter.didOperate(this, result);
            return result;
        };
        ConditionalOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var ifTerm = this._ifTerm.substitute(interpreter);
            var thenTerm = this._thenTerm.substitute(interpreter);
            var elseTerm = this._elseTerm.substitute(interpreter);
            return new ConditionalOperator(ifTerm, thenTerm, elseTerm);
        };
        ConditionalOperator.prototype.typeOrder = function () {
            return 20;
        };
        ConditionalOperator.prototype.compareTo = function (that) {
            if (that instanceof ConditionalOperator) {
                var order = this._ifTerm.compareTo(that._ifTerm);
                if (order === 0) {
                    order = this._thenTerm.compareTo(that._thenTerm);
                    if (order === 0) {
                        order = this._elseTerm.compareTo(that._elseTerm);
                    }
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        ConditionalOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof ConditionalOperator) {
                return this._ifTerm.equals(that._ifTerm) && this._thenTerm.equals(that._thenTerm)
                    && this._elseTerm.equals(that._elseTerm);
            }
            return false;
        };
        ConditionalOperator.prototype.hashCode = function () {
            if (ConditionalOperator._hashSeed === void 0) {
                ConditionalOperator._hashSeed = util.Murmur3.seed(ConditionalOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(util.Murmur3.mix(ConditionalOperator._hashSeed, this._ifTerm.hashCode()), this._thenTerm.hashCode()), this._elseTerm.hashCode()));
        };
        ConditionalOperator.prototype.debug = function (output) {
            output.debug(this._ifTerm).write(46).write("conditional").write(40)
                .debug(this._thenTerm).write(44).write(32)
                .debug(this._elseTerm).write(41);
        };
        ConditionalOperator.prototype.clone = function () {
            return new ConditionalOperator(this._ifTerm.clone(), this._thenTerm.clone(), this._elseTerm.clone());
        };
        return ConditionalOperator;
    }(Operator));
    Item.ConditionalOperator = ConditionalOperator;

    var OrOperator = (function (_super) {
        __extends(OrOperator, _super);
        function OrOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        OrOperator.prototype.operator = function () {
            return "||";
        };
        OrOperator.prototype.precedence = function () {
            return 3;
        };
        OrOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var result;
            var argument1 = this._operand1.evaluate(interpreter);
            if (argument1.booleanValue(false)) {
                result = argument1;
            }
            else {
                var argument2 = this._operand2.evaluate(interpreter);
                result = argument2;
            }
            interpreter.didOperate(this, result);
            return result;
        };
        OrOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.or(argument2);
        };
        OrOperator.prototype.typeOrder = function () {
            return 21;
        };
        OrOperator.prototype.compareTo = function (that) {
            if (that instanceof OrOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        OrOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof OrOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        OrOperator.prototype.hashCode = function () {
            if (OrOperator._hashSeed === void 0) {
                OrOperator._hashSeed = util.Murmur3.seed(OrOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(OrOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        OrOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("or").write(40)
                .debug(this._operand2).write(41);
        };
        OrOperator.prototype.clone = function () {
            return new OrOperator(this._operand1.clone(), this._operand2.clone());
        };
        return OrOperator;
    }(BinaryOperator));
    Item.OrOperator = OrOperator;

    var AndOperator = (function (_super) {
        __extends(AndOperator, _super);
        function AndOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        AndOperator.prototype.operator = function () {
            return "&&";
        };
        AndOperator.prototype.precedence = function () {
            return 4;
        };
        AndOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var result;
            var argument1 = this._operand1.evaluate(interpreter);
            if (argument1.booleanValue(false)) {
                var argument2 = this._operand2.evaluate(interpreter);
                result = argument2;
            }
            else {
                result = argument1;
            }
            interpreter.didOperate(this, result);
            return result;
        };
        AndOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.and(argument2);
        };
        AndOperator.prototype.typeOrder = function () {
            return 22;
        };
        AndOperator.prototype.compareTo = function (that) {
            if (that instanceof AndOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        AndOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof AndOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        AndOperator.prototype.hashCode = function () {
            if (AndOperator._hashSeed === void 0) {
                AndOperator._hashSeed = util.Murmur3.seed(AndOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(AndOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        AndOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("and").write(40)
                .debug(this._operand2).write(41);
        };
        AndOperator.prototype.clone = function () {
            return new AndOperator(this._operand1.clone(), this._operand2.clone());
        };
        return AndOperator;
    }(BinaryOperator));
    Item.AndOperator = AndOperator;

    var BitwiseOrOperator = (function (_super) {
        __extends(BitwiseOrOperator, _super);
        function BitwiseOrOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        BitwiseOrOperator.prototype.operator = function () {
            return "|";
        };
        BitwiseOrOperator.prototype.precedence = function () {
            return 5;
        };
        BitwiseOrOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.bitwiseOr(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        BitwiseOrOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.bitwiseOr(argument2);
        };
        BitwiseOrOperator.prototype.typeOrder = function () {
            return 23;
        };
        BitwiseOrOperator.prototype.compareTo = function (that) {
            if (that instanceof BitwiseOrOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        BitwiseOrOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof BitwiseOrOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        BitwiseOrOperator.prototype.hashCode = function () {
            if (BitwiseOrOperator._hashSeed === void 0) {
                BitwiseOrOperator._hashSeed = util.Murmur3.seed(BitwiseOrOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(BitwiseOrOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        BitwiseOrOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("bitwiseOr").write(40)
                .debug(this._operand2).write(41);
        };
        BitwiseOrOperator.prototype.clone = function () {
            return new BitwiseOrOperator(this._operand1.clone(), this._operand2.clone());
        };
        return BitwiseOrOperator;
    }(BinaryOperator));
    Item.BitwiseOrOperator = BitwiseOrOperator;

    var BitwiseXorOperator = (function (_super) {
        __extends(BitwiseXorOperator, _super);
        function BitwiseXorOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        BitwiseXorOperator.prototype.operator = function () {
            return "^";
        };
        BitwiseXorOperator.prototype.precedence = function () {
            return 6;
        };
        BitwiseXorOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.bitwiseXor(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        BitwiseXorOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.bitwiseXor(argument2);
        };
        BitwiseXorOperator.prototype.typeOrder = function () {
            return 24;
        };
        BitwiseXorOperator.prototype.compareTo = function (that) {
            if (that instanceof BitwiseXorOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        BitwiseXorOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof BitwiseXorOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        BitwiseXorOperator.prototype.hashCode = function () {
            if (BitwiseXorOperator._hashSeed === void 0) {
                BitwiseXorOperator._hashSeed = util.Murmur3.seed(BitwiseXorOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(BitwiseXorOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        BitwiseXorOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("bitwiseXor").write(40)
                .debug(this._operand2).write(41);
        };
        BitwiseXorOperator.prototype.clone = function () {
            return new BitwiseXorOperator(this._operand1.clone(), this._operand2.clone());
        };
        return BitwiseXorOperator;
    }(BinaryOperator));
    Item.BitwiseXorOperator = BitwiseXorOperator;

    var BitwiseAndOperator = (function (_super) {
        __extends(BitwiseAndOperator, _super);
        function BitwiseAndOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        BitwiseAndOperator.prototype.operator = function () {
            return "&";
        };
        BitwiseAndOperator.prototype.precedence = function () {
            return 7;
        };
        BitwiseAndOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.bitwiseAnd(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        BitwiseAndOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.bitwiseAnd(argument2);
        };
        BitwiseAndOperator.prototype.typeOrder = function () {
            return 25;
        };
        BitwiseAndOperator.prototype.compareTo = function (that) {
            if (that instanceof BitwiseAndOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        BitwiseAndOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof BitwiseAndOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        BitwiseAndOperator.prototype.hashCode = function () {
            if (BitwiseAndOperator._hashSeed === void 0) {
                BitwiseAndOperator._hashSeed = util.Murmur3.seed(BitwiseAndOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(BitwiseAndOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        BitwiseAndOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("bitwiseAnd").write(40)
                .debug(this._operand2).write(41);
        };
        BitwiseAndOperator.prototype.clone = function () {
            return new BitwiseAndOperator(this._operand1.clone(), this._operand2.clone());
        };
        return BitwiseAndOperator;
    }(BinaryOperator));
    Item.BitwiseAndOperator = BitwiseAndOperator;

    var LtOperator = (function (_super) {
        __extends(LtOperator, _super);
        function LtOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        LtOperator.prototype.operator = function () {
            return "<";
        };
        LtOperator.prototype.precedence = function () {
            return 0;
        };
        LtOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.lt(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        LtOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.lt(argument2);
        };
        LtOperator.prototype.typeOrder = function () {
            return 26;
        };
        LtOperator.prototype.compareTo = function (that) {
            if (that instanceof LtOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        LtOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LtOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        LtOperator.prototype.hashCode = function () {
            if (LtOperator._hashSeed === void 0) {
                LtOperator._hashSeed = util.Murmur3.seed(LtOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(LtOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        LtOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("lt").write(40)
                .debug(this._operand2).write(41);
        };
        LtOperator.prototype.clone = function () {
            return new LtOperator(this._operand1.clone(), this._operand2.clone());
        };
        return LtOperator;
    }(BinaryOperator));
    Item.LtOperator = LtOperator;

    var LeOperator = (function (_super) {
        __extends(LeOperator, _super);
        function LeOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        LeOperator.prototype.operator = function () {
            return "<=";
        };
        LeOperator.prototype.precedence = function () {
            return 0;
        };
        LeOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.le(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        LeOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.le(argument2);
        };
        LeOperator.prototype.typeOrder = function () {
            return 27;
        };
        LeOperator.prototype.compareTo = function (that) {
            if (that instanceof LeOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        LeOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LeOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        LeOperator.prototype.hashCode = function () {
            if (LeOperator._hashSeed === void 0) {
                LeOperator._hashSeed = util.Murmur3.seed(LeOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(LeOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        LeOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("le").write(40)
                .debug(this._operand2).write(41);
        };
        LeOperator.prototype.clone = function () {
            return new LeOperator(this._operand1.clone(), this._operand2.clone());
        };
        return LeOperator;
    }(BinaryOperator));
    Item.LeOperator = LeOperator;

    var EqOperator = (function (_super) {
        __extends(EqOperator, _super);
        function EqOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        EqOperator.prototype.operator = function () {
            return "==";
        };
        EqOperator.prototype.precedence = function () {
            return 0;
        };
        EqOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.eq(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        EqOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.eq(argument2);
        };
        EqOperator.prototype.typeOrder = function () {
            return 28;
        };
        EqOperator.prototype.compareTo = function (that) {
            if (that instanceof EqOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        EqOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof EqOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        EqOperator.prototype.hashCode = function () {
            if (EqOperator._hashSeed === void 0) {
                EqOperator._hashSeed = util.Murmur3.seed(EqOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(EqOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        EqOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("eq").write(40)
                .debug(this._operand2).write(41);
        };
        EqOperator.prototype.clone = function () {
            return new EqOperator(this._operand1.clone(), this._operand2.clone());
        };
        return EqOperator;
    }(BinaryOperator));
    Item.EqOperator = EqOperator;

    var NeOperator = (function (_super) {
        __extends(NeOperator, _super);
        function NeOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        NeOperator.prototype.operator = function () {
            return "!=";
        };
        NeOperator.prototype.precedence = function () {
            return 0;
        };
        NeOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.ne(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        NeOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.ne(argument2);
        };
        NeOperator.prototype.typeOrder = function () {
            return 29;
        };
        NeOperator.prototype.compareTo = function (that) {
            if (that instanceof NeOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        NeOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof NeOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        NeOperator.prototype.hashCode = function () {
            if (NeOperator._hashSeed === void 0) {
                NeOperator._hashSeed = util.Murmur3.seed(NeOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(NeOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        NeOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("ne").write(40)
                .debug(this._operand2).write(41);
        };
        NeOperator.prototype.clone = function () {
            return new NeOperator(this._operand1.clone(), this._operand2.clone());
        };
        return NeOperator;
    }(BinaryOperator));
    Item.NeOperator = NeOperator;

    var GeOperator = (function (_super) {
        __extends(GeOperator, _super);
        function GeOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        GeOperator.prototype.operator = function () {
            return ">=";
        };
        GeOperator.prototype.precedence = function () {
            return 0;
        };
        GeOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.ge(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        GeOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.ge(argument2);
        };
        GeOperator.prototype.typeOrder = function () {
            return 30;
        };
        GeOperator.prototype.compareTo = function (that) {
            if (that instanceof GeOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        GeOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof GeOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        GeOperator.prototype.hashCode = function () {
            if (GeOperator._hashSeed === void 0) {
                GeOperator._hashSeed = util.Murmur3.seed(GeOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(GeOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        GeOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("ge").write(40)
                .debug(this._operand2).write(41);
        };
        GeOperator.prototype.clone = function () {
            return new GeOperator(this._operand1.clone(), this._operand2.clone());
        };
        return GeOperator;
    }(BinaryOperator));
    Item.GeOperator = GeOperator;

    var GtOperator = (function (_super) {
        __extends(GtOperator, _super);
        function GtOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        GtOperator.prototype.operator = function () {
            return ">";
        };
        GtOperator.prototype.precedence = function () {
            return 0;
        };
        GtOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.gt(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        GtOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.gt(argument2);
        };
        GtOperator.prototype.typeOrder = function () {
            return 31;
        };
        GtOperator.prototype.compareTo = function (that) {
            if (that instanceof GtOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        GtOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof GtOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        GtOperator.prototype.hashCode = function () {
            if (GtOperator._hashSeed === void 0) {
                GtOperator._hashSeed = util.Murmur3.seed(GtOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(GtOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        GtOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("gt").write(40)
                .debug(this._operand2).write(41);
        };
        GtOperator.prototype.clone = function () {
            return new GtOperator(this._operand1.clone(), this._operand2.clone());
        };
        return GtOperator;
    }(BinaryOperator));
    Item.GtOperator = GtOperator;

    var PlusOperator = (function (_super) {
        __extends(PlusOperator, _super);
        function PlusOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        PlusOperator.prototype.operator = function () {
            return "+";
        };
        PlusOperator.prototype.precedence = function () {
            return 8;
        };
        PlusOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.plus(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        PlusOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.plus(argument2);
        };
        PlusOperator.prototype.typeOrder = function () {
            return 32;
        };
        PlusOperator.prototype.compareTo = function (that) {
            if (that instanceof PlusOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        PlusOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof PlusOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        PlusOperator.prototype.hashCode = function () {
            if (PlusOperator._hashSeed === void 0) {
                PlusOperator._hashSeed = util.Murmur3.seed(PlusOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(PlusOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        PlusOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("plus").write(40)
                .debug(this._operand2).write(41);
        };
        PlusOperator.prototype.clone = function () {
            return new PlusOperator(this._operand1.clone(), this._operand2.clone());
        };
        return PlusOperator;
    }(BinaryOperator));
    Item.PlusOperator = PlusOperator;

    var MinusOperator = (function (_super) {
        __extends(MinusOperator, _super);
        function MinusOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        MinusOperator.prototype.operator = function () {
            return "-";
        };
        MinusOperator.prototype.precedence = function () {
            return 8;
        };
        MinusOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.minus(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        MinusOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.minus(argument2);
        };
        MinusOperator.prototype.typeOrder = function () {
            return 33;
        };
        MinusOperator.prototype.compareTo = function (that) {
            if (that instanceof MinusOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        MinusOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof MinusOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        MinusOperator.prototype.hashCode = function () {
            if (MinusOperator._hashSeed === void 0) {
                MinusOperator._hashSeed = util.Murmur3.seed(MinusOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(MinusOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        MinusOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("minus").write(40)
                .debug(this._operand2).write(41);
        };
        MinusOperator.prototype.clone = function () {
            return new MinusOperator(this._operand1.clone(), this._operand2.clone());
        };
        return MinusOperator;
    }(BinaryOperator));
    Item.MinusOperator = MinusOperator;

    var TimesOperator = (function (_super) {
        __extends(TimesOperator, _super);
        function TimesOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        TimesOperator.prototype.operator = function () {
            return "*";
        };
        TimesOperator.prototype.precedence = function () {
            return 9;
        };
        TimesOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.times(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        TimesOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.times(argument2);
        };
        TimesOperator.prototype.typeOrder = function () {
            return 34;
        };
        TimesOperator.prototype.compareTo = function (that) {
            if (that instanceof TimesOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        TimesOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof TimesOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        TimesOperator.prototype.hashCode = function () {
            if (TimesOperator._hashSeed === void 0) {
                TimesOperator._hashSeed = util.Murmur3.seed(TimesOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(TimesOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        TimesOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("times").write(40)
                .debug(this._operand2).write(41);
        };
        TimesOperator.prototype.clone = function () {
            return new TimesOperator(this._operand1.clone(), this._operand2.clone());
        };
        return TimesOperator;
    }(BinaryOperator));
    Item.TimesOperator = TimesOperator;

    var DivideOperator = (function (_super) {
        __extends(DivideOperator, _super);
        function DivideOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        DivideOperator.prototype.operator = function () {
            return "/";
        };
        DivideOperator.prototype.precedence = function () {
            return 9;
        };
        DivideOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.divide(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        DivideOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.divide(argument2);
        };
        DivideOperator.prototype.typeOrder = function () {
            return 35;
        };
        DivideOperator.prototype.compareTo = function (that) {
            if (that instanceof DivideOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        DivideOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof DivideOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        DivideOperator.prototype.hashCode = function () {
            if (DivideOperator._hashSeed === void 0) {
                DivideOperator._hashSeed = util.Murmur3.seed(DivideOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(DivideOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        DivideOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("divide").write(40)
                .debug(this._operand2).write(41);
        };
        DivideOperator.prototype.clone = function () {
            return new DivideOperator(this._operand1.clone(), this._operand2.clone());
        };
        return DivideOperator;
    }(BinaryOperator));
    Item.DivideOperator = DivideOperator;

    var ModuloOperator = (function (_super) {
        __extends(ModuloOperator, _super);
        function ModuloOperator(operand1, operand2) {
            return _super.call(this, operand1, operand2) || this;
        }
        ModuloOperator.prototype.operator = function () {
            return "%";
        };
        ModuloOperator.prototype.precedence = function () {
            return 9;
        };
        ModuloOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            interpreter.willOperate(this);
            var argument1 = this._operand1.evaluate(interpreter);
            var argument2 = this._operand2.evaluate(interpreter);
            var result = argument1.modulo(argument2);
            interpreter.didOperate(this, result);
            return result;
        };
        ModuloOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument1 = this._operand1.substitute(interpreter);
            var argument2 = this._operand2.substitute(interpreter);
            return argument1.modulo(argument2);
        };
        ModuloOperator.prototype.typeOrder = function () {
            return 36;
        };
        ModuloOperator.prototype.compareTo = function (that) {
            if (that instanceof ModuloOperator) {
                var order = this._operand1.compareTo(that._operand1);
                if (order === 0) {
                    order = this._operand2.compareTo(that._operand2);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        ModuloOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof ModuloOperator) {
                return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
            }
            return false;
        };
        ModuloOperator.prototype.hashCode = function () {
            if (ModuloOperator._hashSeed === void 0) {
                ModuloOperator._hashSeed = util.Murmur3.seed(ModuloOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(ModuloOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
        };
        ModuloOperator.prototype.debug = function (output) {
            output.debug(this._operand1).write(46).write("modulo").write(40)
                .debug(this._operand2).write(41);
        };
        ModuloOperator.prototype.clone = function () {
            return new ModuloOperator(this._operand1.clone(), this._operand2.clone());
        };
        return ModuloOperator;
    }(BinaryOperator));
    Item.ModuloOperator = ModuloOperator;

    var NotOperator = (function (_super) {
        __extends(NotOperator, _super);
        function NotOperator(operand) {
            return _super.call(this, operand) || this;
        }
        NotOperator.prototype.operator = function () {
            return "!";
        };
        NotOperator.prototype.precedence = function () {
            return 10;
        };
        NotOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument = this._operand.evaluate(interpreter);
            return argument.not();
        };
        NotOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument = this._operand.substitute(interpreter);
            return argument.not();
        };
        NotOperator.prototype.typeOrder = function () {
            return 37;
        };
        NotOperator.prototype.compareTo = function (that) {
            if (that instanceof NotOperator) {
                return this._operand.compareTo(that._operand);
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        NotOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof NotOperator) {
                return this._operand.equals(that._operand);
            }
            return false;
        };
        NotOperator.prototype.hashCode = function () {
            if (NotOperator._hashSeed === void 0) {
                NotOperator._hashSeed = util.Murmur3.seed(NotOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(NotOperator._hashSeed, this._operand.hashCode()));
        };
        NotOperator.prototype.debug = function (output) {
            output.debug(this._operand).write(46).write("not").write(40).write(41);
        };
        NotOperator.prototype.clone = function () {
            return new NotOperator(this._operand.clone());
        };
        return NotOperator;
    }(UnaryOperator));
    Item.NotOperator = NotOperator;

    var BitwiseNotOperator = (function (_super) {
        __extends(BitwiseNotOperator, _super);
        function BitwiseNotOperator(operand) {
            return _super.call(this, operand) || this;
        }
        BitwiseNotOperator.prototype.operator = function () {
            return "~";
        };
        BitwiseNotOperator.prototype.precedence = function () {
            return 10;
        };
        BitwiseNotOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument = this._operand.evaluate(interpreter);
            return argument.bitwiseNot();
        };
        BitwiseNotOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument = this._operand.substitute(interpreter);
            return argument.bitwiseNot();
        };
        BitwiseNotOperator.prototype.typeOrder = function () {
            return 38;
        };
        BitwiseNotOperator.prototype.compareTo = function (that) {
            if (that instanceof BitwiseNotOperator) {
                return this._operand.compareTo(that._operand);
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        BitwiseNotOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof BitwiseNotOperator) {
                return this._operand.equals(that._operand);
            }
            return false;
        };
        BitwiseNotOperator.prototype.hashCode = function () {
            if (BitwiseNotOperator._hashSeed === void 0) {
                BitwiseNotOperator._hashSeed = util.Murmur3.seed(BitwiseNotOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(BitwiseNotOperator._hashSeed, this._operand.hashCode()));
        };
        BitwiseNotOperator.prototype.debug = function (output) {
            output.debug(this._operand).write(46).write("bitwiseNot").write(40).write(41);
        };
        BitwiseNotOperator.prototype.clone = function () {
            return new BitwiseNotOperator(this._operand.clone());
        };
        return BitwiseNotOperator;
    }(UnaryOperator));
    Item.BitwiseNotOperator = BitwiseNotOperator;

    var NegativeOperator = (function (_super) {
        __extends(NegativeOperator, _super);
        function NegativeOperator(operand) {
            return _super.call(this, operand) || this;
        }
        NegativeOperator.prototype.operator = function () {
            return "-";
        };
        NegativeOperator.prototype.precedence = function () {
            return 10;
        };
        NegativeOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument = this._operand.evaluate(interpreter);
            return argument.negative();
        };
        NegativeOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument = this._operand.substitute(interpreter);
            return argument.negative();
        };
        NegativeOperator.prototype.typeOrder = function () {
            return 39;
        };
        NegativeOperator.prototype.compareTo = function (that) {
            if (that instanceof NegativeOperator) {
                return this._operand.compareTo(that._operand);
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        NegativeOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof NegativeOperator) {
                return this._operand.equals(that._operand);
            }
            return false;
        };
        NegativeOperator.prototype.hashCode = function () {
            if (NegativeOperator._hashSeed === void 0) {
                NegativeOperator._hashSeed = util.Murmur3.seed(NegativeOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(NegativeOperator._hashSeed, this._operand.hashCode()));
        };
        NegativeOperator.prototype.debug = function (output) {
            output.debug(this._operand).write(46).write("negative").write(40).write(41);
        };
        NegativeOperator.prototype.clone = function () {
            return new NegativeOperator(this._operand.clone());
        };
        return NegativeOperator;
    }(UnaryOperator));
    Item.NegativeOperator = NegativeOperator;

    var PositiveOperator = (function (_super) {
        __extends(PositiveOperator, _super);
        function PositiveOperator(operand) {
            return _super.call(this, operand) || this;
        }
        PositiveOperator.prototype.operator = function () {
            return "+";
        };
        PositiveOperator.prototype.precedence = function () {
            return 10;
        };
        PositiveOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument = this._operand.evaluate(interpreter);
            return argument.positive();
        };
        PositiveOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var argument = this._operand.substitute(interpreter);
            return argument.positive();
        };
        PositiveOperator.prototype.typeOrder = function () {
            return 40;
        };
        PositiveOperator.prototype.compareTo = function (that) {
            if (that instanceof PositiveOperator) {
                return this._operand.compareTo(that._operand);
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        PositiveOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof PositiveOperator) {
                return this._operand.equals(that._operand);
            }
            return false;
        };
        PositiveOperator.prototype.hashCode = function () {
            if (PositiveOperator._hashSeed === void 0) {
                PositiveOperator._hashSeed = util.Murmur3.seed(PositiveOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(PositiveOperator._hashSeed, this._operand.hashCode()));
        };
        PositiveOperator.prototype.debug = function (output) {
            output.debug(this._operand).write(46).write("positive").write(40).write(41);
        };
        PositiveOperator.prototype.clone = function () {
            return new PositiveOperator(this._operand.clone());
        };
        return PositiveOperator;
    }(UnaryOperator));
    Item.PositiveOperator = PositiveOperator;

    var InvokeOperator = (function (_super) {
        __extends(InvokeOperator, _super);
        function InvokeOperator(func, args) {
            var _this = _super.call(this) || this;
            _this._func = func;
            _this._args = args.commit();
            return _this;
        }
        InvokeOperator.prototype.func = function () {
            return this._func;
        };
        InvokeOperator.prototype.args = function () {
            return this._args;
        };
        InvokeOperator.prototype.state = function () {
            return this._state;
        };
        InvokeOperator.prototype.setState = function (state) {
            this._state = state;
        };
        InvokeOperator.prototype.isConstant = function () {
            return this._func.isConstant() && this._args.isConstant();
        };
        InvokeOperator.prototype.precedence = function () {
            return 11;
        };
        InvokeOperator.prototype.evaluate = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var func = this._func.evaluate(interpreter);
            if (func instanceof Item.Func) {
                return func.invoke(this._args, interpreter, this);
            }
            return Item.absent();
        };
        InvokeOperator.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var func = this._func.evaluate(interpreter);
            if (func instanceof Item.Func) {
                var result = func.expand(this._args, interpreter, this);
                if (result) {
                    return result;
                }
            }
            var args = this._args.substitute(interpreter).toValue();
            return new InvokeOperator(this._func, args);
        };
        InvokeOperator.prototype.typeOrder = function () {
            return 41;
        };
        InvokeOperator.prototype.compareTo = function (that) {
            if (that instanceof InvokeOperator) {
                var order = this._func.compareTo(that._func);
                if (order === 0) {
                    order = this._args.compareTo(that._args);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        InvokeOperator.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof InvokeOperator) {
                return this._func.equals(that._func) && this._args.equals(that._args);
            }
            return false;
        };
        InvokeOperator.prototype.hashCode = function () {
            if (InvokeOperator._hashSeed === void 0) {
                InvokeOperator._hashSeed = util.Murmur3.seed(InvokeOperator);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(InvokeOperator._hashSeed, this._func.hashCode()), this._args.hashCode()));
        };
        InvokeOperator.prototype.debug = function (output) {
            output.debug(this._func).write(46).write("invoke").write(40)
                .debug(this._args).write(41);
        };
        InvokeOperator.prototype.clone = function () {
            return new InvokeOperator(this._func.clone(), this._args.clone());
        };
        return InvokeOperator;
    }(Operator));
    Item.InvokeOperator = InvokeOperator;

    var IdentitySelector = (function (_super) {
        __extends(IdentitySelector, _super);
        function IdentitySelector() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IdentitySelector.prototype.then = function () {
            return this;
        };
        IdentitySelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            var selected;
            interpreter.willSelect(this);
            if (interpreter.scopeDepth() !== 0) {
                var oldScope = interpreter.popScope();
                var newScope = oldScope.evaluate(interpreter);
                interpreter.pushScope(newScope);
                selected = callback.call(thisArg, interpreter);
                interpreter.swapScope(oldScope);
            }
            interpreter.didSelect(this, selected);
            return selected;
        };
        IdentitySelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            return transform.call(thisArg, interpreter);
        };
        IdentitySelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            return interpreter.peekScope().substitute(interpreter);
        };
        IdentitySelector.prototype.get = function (key) {
            key = Value.fromAny(key);
            return new Item.GetSelector(key, this);
        };
        IdentitySelector.prototype.getAttr = function (key) {
            key = Item.Text.fromAny(key);
            return new Item.GetAttrSelector(key, this);
        };
        IdentitySelector.prototype.getItem = function (index) {
            index = Item.Num.fromAny(index);
            return new Item.GetItemSelector(index, this);
        };
        IdentitySelector.prototype.andThen = function (then) {
            return then;
        };
        IdentitySelector.prototype.keys = function () {
            return Selector.keys();
        };
        IdentitySelector.prototype.values = function () {
            return Selector.values();
        };
        IdentitySelector.prototype.children = function () {
            return Selector.children();
        };
        IdentitySelector.prototype.descendants = function () {
            return Selector.descendants();
        };
        IdentitySelector.prototype.filter = function (predicate) {
            if (arguments.length === 0) {
                return new Item.FilterSelector(this, this);
            }
            else {
                predicate = Item.fromAny(predicate);
                return predicate.filter();
            }
        };
        IdentitySelector.prototype.typeOrder = function () {
            return 10;
        };
        IdentitySelector.prototype.compareTo = function (that) {
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        IdentitySelector.prototype.equals = function (that) {
            return this === that;
        };
        IdentitySelector.prototype.hashCode = function () {
            if (IdentitySelector._hashSeed === void 0) {
                IdentitySelector._hashSeed = util.Murmur3.seed(IdentitySelector);
            }
            return IdentitySelector._hashSeed;
        };
        IdentitySelector.prototype.debugThen = function (output) {
        };
        IdentitySelector.prototype.clone = function () {
            return this;
        };
        return IdentitySelector;
    }(Selector));
    Item.IdentitySelector = IdentitySelector;
    Selector._identity = new IdentitySelector();

    var GetSelector = (function (_super) {
        __extends(GetSelector, _super);
        function GetSelector(key, then) {
            var _this = _super.call(this) || this;
            _this._key = key.commit();
            _this._then = then;
            return _this;
        }
        GetSelector.prototype.accessor = function () {
            return this._key;
        };
        GetSelector.prototype.then = function () {
            return this._then;
        };
        GetSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            interpreter.willSelect(this);
            var key = this._key.evaluate(interpreter).toValue();
            var selected = GetSelector.forSelected(key, this._then, interpreter, callback, thisArg);
            interpreter.didSelect(this, selected);
            return selected;
        };
        GetSelector.forSelected = function (key, then, interpreter, callback, thisArg) {
            var selected;
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                var field = void 0;
                if (scope instanceof Item.Record) {
                    field = scope.getField(key);
                    if (field) {
                        interpreter.pushScope(field.toValue());
                        selected = then.forSelected(interpreter, callback, thisArg);
                        interpreter.popScope();
                    }
                }
                if (field === void 0 && selected === void 0) {
                    GetSelector.forSelected(key, then, interpreter, callback, thisArg);
                }
                interpreter.pushScope(scope);
            }
            return selected;
        };
        GetSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            var key = this._key.evaluate(interpreter).toValue();
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                if (scope instanceof Item.Record) {
                    var oldField = scope.getField(key);
                    if (oldField) {
                        interpreter.pushScope(oldField.toValue());
                        var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                        interpreter.popScope();
                        if (newItem instanceof Item.Field) {
                            if (key.equals(newItem.key)) {
                                scope.set(key, newItem.toValue());
                            }
                            else {
                                scope.delete(key);
                                scope.push(newItem);
                            }
                        }
                        else if (newItem.isDefined()) {
                            scope.set(key, newItem.toValue());
                        }
                        else {
                            scope.delete(key);
                        }
                    }
                }
                interpreter.pushScope(scope);
                result = scope;
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        GetSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var key = this._key.evaluate(interpreter).toValue();
            var value = GetSelector.substitute(key, this._then, interpreter);
            if (value) {
                return value;
            }
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new GetSelector(this._key, then);
        };
        GetSelector.substitute = function (key, then, interpreter) {
            var selected;
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                var field = void 0;
                if (scope instanceof Item.Record) {
                    field = scope.getField(key);
                    if (field) {
                        selected = field.toValue().substitute(interpreter);
                    }
                }
                if (field === void 0 && selected === void 0) {
                    GetSelector.substitute(key, then, interpreter);
                }
                interpreter.pushScope(scope);
            }
            return selected;
        };
        GetSelector.prototype.andThen = function (then) {
            return new GetSelector(this._key, this._then.andThen(then));
        };
        GetSelector.prototype.typeOrder = function () {
            return 12;
        };
        GetSelector.prototype.compareTo = function (that) {
            if (that instanceof GetSelector) {
                var order = this._key.compareTo(that._key);
                if (order === 0) {
                    order = this._then.compareTo(that._then);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        GetSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof GetSelector) {
                return this._key.equals(that._key) && this._then.equals(that._then);
            }
            return false;
        };
        GetSelector.prototype.hashCode = function () {
            if (GetSelector._hashSeed === void 0) {
                GetSelector._hashSeed = util.Murmur3.seed(GetSelector);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(GetSelector._hashSeed, this._key.hashCode()), this._then.hashCode()));
        };
        GetSelector.prototype.debugThen = function (output) {
            output = output.write(46).write("get").write(40).debug(this._key).write(41);
            this._then.debugThen(output);
        };
        GetSelector.prototype.clone = function () {
            return new GetSelector(this._key.clone(), this._then.clone());
        };
        return GetSelector;
    }(Selector));
    Item.GetSelector = GetSelector;

    var GetAttrSelector = (function (_super) {
        __extends(GetAttrSelector, _super);
        function GetAttrSelector(key, then) {
            var _this = _super.call(this) || this;
            _this._key = key;
            _this._then = then;
            return _this;
        }
        GetAttrSelector.prototype.accessor = function () {
            return this._key;
        };
        GetAttrSelector.prototype.then = function () {
            return this._then;
        };
        GetAttrSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            interpreter.willSelect(this);
            var key = this._key;
            var selected = GetAttrSelector.forSelected(key, this._then, interpreter, callback);
            interpreter.didSelect(this, selected);
            return selected;
        };
        GetAttrSelector.forSelected = function (key, then, interpreter, callback, thisArg) {
            var selected;
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                var field = void 0;
                if (scope instanceof Item.Record) {
                    field = scope.getField(key);
                    if (field instanceof Attr) {
                        interpreter.pushScope(field.toValue());
                        selected = then.forSelected(interpreter, callback, thisArg);
                        interpreter.popScope();
                    }
                }
                if (field === void 0 && selected === void 0) {
                    GetAttrSelector.forSelected(key, then, interpreter, callback, thisArg);
                }
                interpreter.pushScope(scope);
            }
            return selected;
        };
        GetAttrSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            var key = this._key;
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                if (scope instanceof Item.Record) {
                    var oldField = scope.getField(key);
                    if (oldField instanceof Item.Attr) {
                        interpreter.pushScope(oldField.toValue());
                        var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                        interpreter.popScope();
                        if (newItem instanceof Item.Field) {
                            if (key.equals(newItem.key)) {
                                scope.setAttr(key, newItem.toValue());
                            }
                            else {
                                scope.delete(key);
                                scope.push(newItem);
                            }
                        }
                        else if (newItem.isDefined()) {
                            scope.setAttr(key, newItem.toValue());
                        }
                        else {
                            scope.delete(key);
                        }
                    }
                }
                interpreter.pushScope(scope);
                result = scope;
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        GetAttrSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var key = this._key;
            var value = GetAttrSelector.substitute(key, this._then, interpreter);
            if (value) {
                return value;
            }
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new GetAttrSelector(this._key, then);
        };
        GetAttrSelector.substitute = function (key, then, interpreter) {
            var selected;
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                var field = void 0;
                if (scope instanceof Item.Record) {
                    field = scope.getField(key);
                    if (field instanceof Item.Attr) {
                        selected = field.toValue().substitute(interpreter);
                    }
                }
                if (field === void 0 && selected === void 0) {
                    GetAttrSelector.substitute(key, then, interpreter);
                }
                interpreter.pushScope(scope);
            }
            return selected;
        };
        GetAttrSelector.prototype.andThen = function (then) {
            return new GetAttrSelector(this._key, this._then.andThen(then));
        };
        GetAttrSelector.prototype.typeOrder = function () {
            return 13;
        };
        GetAttrSelector.prototype.compareTo = function (that) {
            if (that instanceof GetAttrSelector) {
                var order = this._key.compareTo(that._key);
                if (order === 0) {
                    order = this._then.compareTo(that._then);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        GetAttrSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof GetAttrSelector) {
                return this._key.equals(that._key) && this._then.equals(that._then);
            }
            return false;
        };
        GetAttrSelector.prototype.hashCode = function () {
            if (GetAttrSelector._hashSeed === void 0) {
                GetAttrSelector._hashSeed = util.Murmur3.seed(GetAttrSelector);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(GetAttrSelector._hashSeed, this._key.hashCode()), this._then.hashCode()));
        };
        GetAttrSelector.prototype.debugThen = function (output) {
            output = output.write(46).write("getAttr").write(40).debug(this._key).write(41);
            this._then.debugThen(output);
        };
        GetAttrSelector.prototype.clone = function () {
            return new GetAttrSelector(this._key.clone(), this._then.clone());
        };
        return GetAttrSelector;
    }(Selector));
    Item.GetAttrSelector = GetAttrSelector;

    var GetItemSelector = (function (_super) {
        __extends(GetItemSelector, _super);
        function GetItemSelector(index, then) {
            var _this = _super.call(this) || this;
            _this._index = index;
            _this._then = then;
            return _this;
        }
        GetItemSelector.prototype.accessor = function () {
            return this._index;
        };
        GetItemSelector.prototype.then = function () {
            return this._then;
        };
        GetItemSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            var selected;
            interpreter.willSelect(this);
            var index = this._index.numberValue();
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                if (scope instanceof Item.Record && index < scope.length) {
                    var item = scope.getItem(index);
                    interpreter.pushScope(item);
                    selected = this._then.forSelected(interpreter, callback, thisArg);
                    interpreter.popScope();
                }
                interpreter.pushScope(scope);
            }
            interpreter.didSelect(this, selected);
            return selected;
        };
        GetItemSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                var index = this._index.numberValue();
                if (scope instanceof Item.Record && index < scope.length) {
                    var oldItem = scope.getItem(index);
                    interpreter.pushScope(oldItem);
                    var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                    interpreter.popScope();
                    if (newItem.isDefined()) {
                        scope.setItem(index, newItem);
                    }
                    else {
                        scope.splice(index, 1);
                    }
                }
                interpreter.pushScope(scope);
                result = scope;
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        GetItemSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var index = this._index.numberValue();
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                var selected = void 0;
                if (scope instanceof Item.Record && index < scope.length) {
                    var item = scope.getItem(index);
                    selected = item.substitute(interpreter);
                }
                interpreter.pushScope(scope);
                if (selected) {
                    return selected;
                }
            }
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new GetItemSelector(this._index, then);
        };
        GetItemSelector.prototype.andThen = function (then) {
            return new GetItemSelector(this._index, this._then.andThen(then));
        };
        GetItemSelector.prototype.typeOrder = function () {
            return 14;
        };
        GetItemSelector.prototype.compareTo = function (that) {
            if (that instanceof GetItemSelector) {
                var order = this._index.compareTo(that._index);
                if (order === 0) {
                    order = this._then.compareTo(that._then);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        GetItemSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof GetItemSelector) {
                return this._index.equals(that._index) && this._then.equals(that._then);
            }
            return false;
        };
        GetItemSelector.prototype.hashCode = function () {
            if (GetItemSelector._hashSeed === void 0) {
                GetItemSelector._hashSeed = util.Murmur3.seed(GetItemSelector);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(GetItemSelector._hashSeed, this._index.hashCode()), this._then.hashCode()));
        };
        GetItemSelector.prototype.debugThen = function (output) {
            output = output.write(46).write("getItem").write(40).debug(this._index).write(41);
            this._then.debugThen(output);
        };
        GetItemSelector.prototype.clone = function () {
            return new GetItemSelector(this._index, this._then.clone());
        };
        return GetItemSelector;
    }(Selector));
    Item.GetItemSelector = GetItemSelector;

    var KeysSelector = (function (_super) {
        __extends(KeysSelector, _super);
        function KeysSelector(then) {
            var _this = _super.call(this) || this;
            _this._then = then;
            return _this;
        }
        KeysSelector.prototype.then = function () {
            return this._then;
        };
        KeysSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            var selected;
            interpreter.willSelect(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope();
                if (scope instanceof Item.Record) {
                    var children = scope.iterator();
                    while (selected === void 0 && children.hasNext()) {
                        var child = children.next().value;
                        if (child instanceof Item.Field) {
                            interpreter.pushScope(child.key);
                            selected = this._then.forSelected(interpreter, callback, thisArg);
                            interpreter.popScope();
                        }
                    }
                }
                else if (scope instanceof Item.Field) {
                    interpreter.pushScope(scope.key);
                    selected = this._then.forSelected(interpreter, callback, thisArg);
                    interpreter.popScope();
                }
                interpreter.pushScope(scope);
            }
            interpreter.didSelect(this, selected);
            return selected;
        };
        KeysSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope();
                if (scope instanceof Item.Record) {
                    var children = scope.iterator();
                    while (children.hasNext()) {
                        var child = children.next().value;
                        if (child instanceof Item.Field) {
                            var oldKey = child.key;
                            interpreter.pushScope(oldKey);
                            var newKey = this._then.mapSelected(interpreter, transform, thisArg).toValue();
                            interpreter.popScope();
                            if (newKey.isDefined()) {
                                if (oldKey !== newKey) {
                                    if (scope instanceof Item.Attr && newKey instanceof Item.Text) {
                                        children.set(Item.Attr.of(newKey, scope.toValue()));
                                    }
                                    else {
                                        children.set(Item.Slot.of(newKey, scope.toValue()));
                                    }
                                }
                            }
                            else {
                                children.delete();
                            }
                        }
                    }
                }
                else if (scope instanceof Item.Field) {
                    var oldKey = scope.key;
                    interpreter.pushScope(oldKey);
                    var newKey = this._then.mapSelected(interpreter, transform, thisArg).toValue();
                    interpreter.popScope();
                    if (newKey.isDefined()) {
                        if (oldKey !== newKey) {
                            if (scope instanceof Item.Attr && newKey instanceof Item.Text) {
                                scope = Item.Attr.of(newKey, scope.toValue());
                            }
                            else {
                                scope = Item.Slot.of(newKey, scope.toValue());
                            }
                        }
                    }
                    else {
                        scope = Item.absent();
                    }
                }
                interpreter.pushScope(scope);
                result = scope;
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        KeysSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new KeysSelector(then);
        };
        KeysSelector.prototype.andThen = function (then) {
            return new KeysSelector(this._then.andThen(then));
        };
        KeysSelector.prototype.typeOrder = function () {
            return 15;
        };
        KeysSelector.prototype.compareTo = function (that) {
            if (that instanceof KeysSelector) {
                return this._then.compareTo(that._then);
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        KeysSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof KeysSelector) {
                return this._then.equals(that._then);
            }
            return false;
        };
        KeysSelector.prototype.hashCode = function () {
            if (KeysSelector._hashSeed === void 0) {
                KeysSelector._hashSeed = util.Murmur3.seed(KeysSelector);
            }
            return util.Murmur3.mash(util.Murmur3.mix(KeysSelector._hashSeed, this._then.hashCode()));
        };
        KeysSelector.prototype.debugThen = function (output) {
            output = output.write(46).write("keys").write(40).write(41);
            this._then.debugThen(output);
        };
        KeysSelector.prototype.clone = function () {
            return new KeysSelector(this._then.clone());
        };
        return KeysSelector;
    }(Selector));
    Item.KeysSelector = KeysSelector;

    var ValuesSelector = (function (_super) {
        __extends(ValuesSelector, _super);
        function ValuesSelector(then) {
            var _this = _super.call(this) || this;
            _this._then = then;
            return _this;
        }
        ValuesSelector.prototype.then = function () {
            return this._then;
        };
        ValuesSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            var selected;
            interpreter.willSelect(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope();
                if (scope instanceof Item.Record) {
                    var children = scope.iterator();
                    while (selected === void 0 && children.hasNext()) {
                        var child = children.next().value;
                        interpreter.pushScope(child.toValue());
                        selected = this._then.forSelected(interpreter, callback, thisArg);
                        interpreter.popScope();
                    }
                }
                else {
                    interpreter.pushScope(scope.toValue());
                    selected = this._then.forSelected(interpreter, callback, thisArg);
                    interpreter.popScope();
                }
                interpreter.pushScope(scope);
            }
            interpreter.didSelect(this, selected);
            return selected;
        };
        ValuesSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope();
                if (scope instanceof Item.Record) {
                    var children = scope.iterator();
                    while (children.hasNext()) {
                        var child = children.next().value;
                        if (child instanceof Item.Field) {
                            var oldValue = child.toValue();
                            interpreter.pushScope(oldValue);
                            var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                            interpreter.popScope();
                            if (newItem.isDefined()) {
                                if (newItem instanceof Item.Field) {
                                    children.set(newItem);
                                }
                                else if (newItem !== oldValue) {
                                    children.set(child.updatedValue(newItem.toValue()));
                                }
                            }
                            else {
                                children.delete();
                            }
                        }
                        else {
                            interpreter.pushScope(child.toValue());
                            var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                            interpreter.popScope();
                            if (newItem.isDefined()) {
                                if (child !== newItem) {
                                    children.set(newItem);
                                }
                            }
                            else {
                                children.delete();
                            }
                        }
                    }
                }
                else if (scope instanceof Item.Field) {
                    var oldValue = scope.toValue();
                    interpreter.pushScope(oldValue);
                    var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                    interpreter.popScope();
                    if (newItem.isDefined()) {
                        if (newItem instanceof Item.Field) {
                            scope = newItem;
                        }
                        else if (newItem !== oldValue) {
                            scope = scope.updatedValue(newItem.toValue());
                        }
                    }
                    else {
                        scope = Item.absent();
                    }
                }
                else {
                    interpreter.pushScope(scope);
                    scope = this._then.mapSelected(interpreter, transform, thisArg);
                    interpreter.popScope();
                }
                interpreter.pushScope(scope);
                result = scope;
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        ValuesSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new ValuesSelector(then);
        };
        ValuesSelector.prototype.andThen = function (then) {
            return new ValuesSelector(this._then.andThen(then));
        };
        ValuesSelector.prototype.typeOrder = function () {
            return 16;
        };
        ValuesSelector.prototype.compareTo = function (that) {
            if (that instanceof ValuesSelector) {
                return this._then.compareTo(that._then);
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        ValuesSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof ValuesSelector) {
                return this._then.equals(that._then);
            }
            return false;
        };
        ValuesSelector.prototype.hashCode = function () {
            if (ValuesSelector._hashSeed === void 0) {
                ValuesSelector._hashSeed = util.Murmur3.seed(ValuesSelector);
            }
            return util.Murmur3.mash(util.Murmur3.mix(ValuesSelector._hashSeed, this._then.hashCode()));
        };
        ValuesSelector.prototype.debugThen = function (output) {
            output = output.write(46).write("values").write(40).write(41);
            this._then.debugThen(output);
        };
        ValuesSelector.prototype.clone = function () {
            return new ValuesSelector(this._then.clone());
        };
        return ValuesSelector;
    }(Selector));
    Item.ValuesSelector = ValuesSelector;

    var ChildrenSelector = (function (_super) {
        __extends(ChildrenSelector, _super);
        function ChildrenSelector(then) {
            var _this = _super.call(this) || this;
            _this._then = then;
            return _this;
        }
        ChildrenSelector.prototype.then = function () {
            return this._then;
        };
        ChildrenSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            var selected;
            interpreter.willSelect(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                if (scope instanceof Item.Record) {
                    var children = scope.iterator();
                    while (selected === void 0 && children.hasNext()) {
                        var child = children.next().value;
                        interpreter.pushScope(child);
                        selected = this._then.forSelected(interpreter, callback, thisArg);
                        interpreter.popScope();
                    }
                }
                interpreter.pushScope(scope);
            }
            interpreter.didSelect(this, selected);
            return selected;
        };
        ChildrenSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                if (scope instanceof Item.Record) {
                    var children = scope.iterator();
                    while (children.hasNext()) {
                        var oldChild = children.next().value;
                        interpreter.pushScope(oldChild);
                        var newChild = this._then.mapSelected(interpreter, transform);
                        interpreter.popScope();
                        if (newChild.isDefined()) {
                            if (newChild !== oldChild) {
                                children.set(newChild);
                            }
                        }
                        else {
                            children.delete();
                        }
                    }
                }
                interpreter.pushScope(scope);
                result = scope;
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        ChildrenSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new ChildrenSelector(then);
        };
        ChildrenSelector.prototype.andThen = function (then) {
            return new ChildrenSelector(this._then.andThen(then));
        };
        ChildrenSelector.prototype.typeOrder = function () {
            return 17;
        };
        ChildrenSelector.prototype.compareTo = function (that) {
            if (that instanceof ChildrenSelector) {
                return this._then.compareTo(that._then);
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        ChildrenSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof ChildrenSelector) {
                return this._then.equals(that._then);
            }
            return false;
        };
        ChildrenSelector.prototype.hashCode = function () {
            if (ChildrenSelector._hashSeed === void 0) {
                ChildrenSelector._hashSeed = util.Murmur3.seed(ChildrenSelector);
            }
            return util.Murmur3.mash(util.Murmur3.mix(ChildrenSelector._hashSeed, this._then.hashCode()));
        };
        ChildrenSelector.prototype.debugThen = function (output) {
            output = output.write(46).write("children").write(40).write(41);
            this._then.debugThen(output);
        };
        ChildrenSelector.prototype.clone = function () {
            return new ChildrenSelector(this._then.clone());
        };
        return ChildrenSelector;
    }(Selector));
    Item.ChildrenSelector = ChildrenSelector;

    var DescendantsSelector = (function (_super) {
        __extends(DescendantsSelector, _super);
        function DescendantsSelector(then) {
            var _this = _super.call(this) || this;
            _this._then = then;
            return _this;
        }
        DescendantsSelector.prototype.then = function () {
            return this._then;
        };
        DescendantsSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            var selected;
            interpreter.willSelect(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                if (scope instanceof Item.Record) {
                    var children = scope.iterator();
                    while (selected === void 0 && children.hasNext()) {
                        var child = children.next().value;
                        interpreter.pushScope(child);
                        selected = this._then.forSelected(interpreter, callback, thisArg);
                        if (selected === void 0) {
                            this.forSelected(interpreter, callback, thisArg);
                        }
                        interpreter.popScope();
                    }
                }
                interpreter.pushScope(scope);
            }
            interpreter.didSelect(this, selected);
            return selected;
        };
        DescendantsSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            if (interpreter.scopeDepth() !== 0) {
                var scope = interpreter.popScope().toValue();
                if (scope instanceof Item.Record) {
                    var children = scope.iterator();
                    while (children.hasNext()) {
                        var oldChild = children.next().value;
                        interpreter.pushScope(oldChild);
                        var newChild = this._then.mapSelected(interpreter, transform, thisArg);
                        if (newChild.isDefined()) {
                            newChild = this.mapSelected(interpreter, transform, thisArg);
                        }
                        interpreter.popScope();
                        if (newChild.isDefined()) {
                            if (newChild !== oldChild) {
                                children.set(newChild);
                            }
                        }
                        else {
                            children.delete();
                        }
                    }
                }
                interpreter.pushScope(scope);
                result = scope;
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        DescendantsSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new DescendantsSelector(then);
        };
        DescendantsSelector.prototype.andThen = function (then) {
            return new DescendantsSelector(this._then.andThen(then));
        };
        DescendantsSelector.prototype.typeOrder = function () {
            return 18;
        };
        DescendantsSelector.prototype.compareTo = function (that) {
            if (that instanceof DescendantsSelector) {
                return this._then.compareTo(that._then);
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        DescendantsSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof DescendantsSelector) {
                return this._then.equals(that._then);
            }
            return false;
        };
        DescendantsSelector.prototype.hashCode = function () {
            if (DescendantsSelector._hashSeed === void 0) {
                DescendantsSelector._hashSeed = util.Murmur3.seed(DescendantsSelector);
            }
            return util.Murmur3.mash(util.Murmur3.mix(DescendantsSelector._hashSeed, this._then.hashCode()));
        };
        DescendantsSelector.prototype.debugThen = function (output) {
            output = output.write(46).write("descendants").write(40).write(41);
            this._then.debugThen(output);
        };
        DescendantsSelector.prototype.clone = function () {
            return new DescendantsSelector(this._then.clone());
        };
        return DescendantsSelector;
    }(Selector));
    Item.DescendantsSelector = DescendantsSelector;

    var FilterSelector = (function (_super) {
        __extends(FilterSelector, _super);
        function FilterSelector(predicate, then) {
            var _this = _super.call(this) || this;
            _this._predicate = predicate;
            _this._then = then;
            return _this;
        }
        FilterSelector.prototype.predicate = function () {
            return this._predicate;
        };
        FilterSelector.prototype.then = function () {
            return this._then;
        };
        FilterSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            var selected;
            interpreter.willSelect(this);
            if (interpreter.scopeDepth() !== 0) {
                if (this.filterSelected(interpreter)) {
                    selected = this._then.forSelected(interpreter, callback, thisArg);
                }
            }
            interpreter.didSelect(this, selected);
            return selected;
        };
        FilterSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            if (interpreter.scopeDepth() !== 0) {
                if (this.filterSelected(interpreter)) {
                    result = this._then.mapSelected(interpreter, transform, thisArg);
                }
                else {
                    result = interpreter.peekScope().toValue();
                }
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        FilterSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var predicate = this._predicate.substitute(interpreter);
            if (!(predicate instanceof Selector)) {
                predicate = this._predicate;
            }
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new FilterSelector(predicate, then);
        };
        FilterSelector.prototype.filterSelected = function (interpreter) {
            return this._predicate.forSelected(interpreter, this.selected, this) !== void 0;
        };
        FilterSelector.prototype.selected = function (interpreter) {
            return null;
        };
        FilterSelector.prototype.andThen = function (then) {
            return new FilterSelector(this._predicate, this._then.andThen(then));
        };
        FilterSelector.prototype.filter = function (predicate) {
            if (arguments.length === 0) {
                return this;
            }
            else {
                predicate = Item.fromAny(predicate);
                return this.andThen(predicate.filter());
            }
        };
        FilterSelector.prototype.typeOrder = function () {
            return 19;
        };
        FilterSelector.prototype.compareTo = function (that) {
            if (that instanceof FilterSelector) {
                var order = this._predicate.compareTo(that._predicate);
                if (order === 0) {
                    order = this._then.compareTo(that._then);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        FilterSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof FilterSelector) {
                return this._predicate.equals(that._predicate) && this._then.equals(that._then);
            }
            return false;
        };
        FilterSelector.prototype.hashCode = function () {
            if (FilterSelector._hashSeed === void 0) {
                FilterSelector._hashSeed = util.Murmur3.seed(FilterSelector);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(FilterSelector._hashSeed, this._predicate.hashCode()), this._then.hashCode()));
        };
        FilterSelector.prototype.debugThen = function (output) {
            output = output.write(46).write("filter").write(40).debug(this._predicate).write(41);
            this._then.debugThen(output);
        };
        FilterSelector.prototype.clone = function () {
            return new FilterSelector(this._predicate.clone(), this._then.clone());
        };
        return FilterSelector;
    }(Selector));
    Item.FilterSelector = FilterSelector;

    var LiteralSelector = (function (_super) {
        __extends(LiteralSelector, _super);
        function LiteralSelector(item, then) {
            var _this = _super.call(this) || this;
            _this._item = item.commit();
            _this._then = then;
            return _this;
        }
        LiteralSelector.prototype.item = function () {
            return this._item;
        };
        LiteralSelector.prototype.then = function () {
            return this._then;
        };
        LiteralSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
            var selected;
            interpreter.willSelect(this);
            if (interpreter.scopeDepth() !== 0) {
                var literal = this._item.evaluate(interpreter);
                if (literal.isDefined()) {
                    interpreter.pushScope(literal);
                    selected = this._then.forSelected(interpreter, callback, thisArg);
                    interpreter.popScope();
                }
            }
            interpreter.didSelect(this, selected);
            return selected;
        };
        LiteralSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
            var result;
            interpreter.willTransform(this);
            if (interpreter.scopeDepth() !== 0) {
                var literal = this._item.evaluate(interpreter);
                if (literal.isDefined()) {
                    interpreter.pushScope(literal);
                    literal = this._then.mapSelected(interpreter, transform, thisArg);
                    interpreter.popScope();
                }
                result = literal;
            }
            else {
                result = Item.absent();
            }
            interpreter.didTransform(this, result);
            return result;
        };
        LiteralSelector.prototype.substitute = function (interpreter) {
            interpreter = Interpreter.fromAny(interpreter);
            var item = this._item.substitute(interpreter);
            var then = this._then.substitute(interpreter);
            if (!(then instanceof Selector)) {
                then = this._then;
            }
            return new LiteralSelector(item, then);
        };
        LiteralSelector.prototype.andThen = function (then) {
            return new LiteralSelector(this._item, this._then.andThen(then));
        };
        LiteralSelector.prototype.precedence = function () {
            return this._item.precedence();
        };
        LiteralSelector.prototype.typeOrder = function () {
            return 11;
        };
        LiteralSelector.prototype.compareTo = function (that) {
            if (that instanceof LiteralSelector) {
                var order = this._item.compareTo(that._item);
                if (order === 0) {
                    order = this._then.compareTo(that._then);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        LiteralSelector.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LiteralSelector) {
                return this._item.equals(that._item) && this._then.equals(that._then);
            }
            return false;
        };
        LiteralSelector.prototype.hashCode = function () {
            if (LiteralSelector._hashSeed === void 0) {
                LiteralSelector._hashSeed = util.Murmur3.seed(LiteralSelector);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(LiteralSelector._hashSeed, this._item.hashCode()), this._then.hashCode()));
        };
        LiteralSelector.prototype.debug = function (output) {
            output = output.write("Selector").write(46).write("literal").write(40)
                .debug(this._item).write(41);
            this._then.debugThen(output);
        };
        LiteralSelector.prototype.debugThen = function (output) {
        };
        LiteralSelector.prototype.clone = function () {
            return new LiteralSelector(this._item.clone(), this._then.clone());
        };
        return LiteralSelector;
    }(Selector));
    Item.LiteralSelector = LiteralSelector;

    var LambdaFunc = (function (_super) {
        __extends(LambdaFunc, _super);
        function LambdaFunc(bindings, template) {
            var _this = _super.call(this) || this;
            _this._bindings = bindings;
            _this._template = template;
            return _this;
        }
        LambdaFunc.prototype.bindings = function () {
            return this._bindings;
        };
        LambdaFunc.prototype.template = function () {
            return this._template;
        };
        LambdaFunc.prototype.precedence = function () {
            return 1;
        };
        LambdaFunc.prototype.invoke = function (args, interpreter, operator) {
            interpreter = Interpreter.fromAny(interpreter);
            var bindings = this._bindings;
            var arity = Math.max(1, bindings.length);
            var params = Item.Record.create(arity);
            var i = 0;
            var j = 0;
            while (i < arity) {
                var binding = bindings instanceof Item.Record ? bindings.getItem(i) : i === 0 ? bindings : Item.absent();
                var arg = args instanceof Item.Record ? args.getItem(j).toValue() : j === 0 ? args : Item.Value.absent();
                if (binding instanceof Item.Text && arg.isDistinct()) {
                    params.push(Item.Slot.of(binding, arg));
                    j += 1;
                }
                else if (binding instanceof Item.Slot) {
                    if (arg.isDistinct()) {
                        params.push(binding.updatedValue(arg));
                    }
                    else {
                        params.push(binding);
                    }
                    j += 1;
                }
                i += 1;
            }
            interpreter.pushScope(params);
            var result = this._template.evaluate(interpreter);
            interpreter.popScope();
            return result;
        };
        LambdaFunc.prototype.typeOrder = function () {
            return 50;
        };
        LambdaFunc.prototype.compareTo = function (that) {
            if (that instanceof LambdaFunc) {
                var order = this._bindings.compareTo(that._bindings);
                if (order === 0) {
                    order = this._template.compareTo(that._template);
                }
                return order;
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        LambdaFunc.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LambdaFunc) {
                return this._bindings.equals(that._bindings) && this._template.equals(that._template);
            }
            return false;
        };
        LambdaFunc.prototype.hashCode = function () {
            if (LambdaFunc._hashSeed === void 0) {
                LambdaFunc._hashSeed = util.Murmur3.seed(LambdaFunc);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(LambdaFunc._hashSeed, this._bindings.hashCode()), this._template.hashCode()));
        };
        LambdaFunc.prototype.debug = function (output) {
            output.debug(this.bindings).write(46).write("lambda").write(40)
                .debug(this.template).write(41);
        };
        return LambdaFunc;
    }(Func));
    Item.LambdaFunc = LambdaFunc;

    var BridgeFunc = (function (_super) {
        __extends(BridgeFunc, _super);
        function BridgeFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BridgeFunc.prototype.typeOrder = function () {
            return 51;
        };
        BridgeFunc.prototype.compareTo = function (that) {
            if (that instanceof BridgeFunc) {
                return util.Objects.compare(this.__proto__.constructor.name, that.__proto__.constructor.name);
            }
            return util.Objects.compare(this.typeOrder(), that.typeOrder());
        };
        BridgeFunc.prototype.equals = function (that) {
            return this === that;
        };
        BridgeFunc.prototype.hashCode = function () {
            return util.Murmur3.seed(this.__proto__.constructor);
        };
        BridgeFunc.prototype.debug = function (output) {
            output = output.write(this.__proto__.constructor.name);
        };
        return BridgeFunc;
    }(Func));
    Item.BridgeFunc = BridgeFunc;

    var MathModule = (function () {
        function MathModule() {
        }
        MathModule.max = function () {
            if (!MathModule._max) {
                MathModule._max = new MaxFunc();
            }
            return MathModule._max;
        };
        MathModule.min = function () {
            if (!MathModule._min) {
                MathModule._min = new MinFunc();
            }
            return MathModule._min;
        };
        MathModule.abs = function () {
            if (!MathModule._abs) {
                MathModule._abs = new AbsFunc();
            }
            return MathModule._abs;
        };
        MathModule.ceil = function () {
            if (!MathModule._ceil) {
                MathModule._ceil = new CeilFunc();
            }
            return MathModule._ceil;
        };
        MathModule.floor = function () {
            if (!MathModule._floor) {
                MathModule._floor = new FloorFunc();
            }
            return MathModule._floor;
        };
        MathModule.round = function () {
            if (!MathModule._round) {
                MathModule._round = new RoundFunc();
            }
            return MathModule._round;
        };
        MathModule.sqrt = function () {
            if (!MathModule._sqrt) {
                MathModule._sqrt = new SqrtFunc();
            }
            return MathModule._sqrt;
        };
        MathModule.pow = function () {
            if (!MathModule._pow) {
                MathModule._pow = new PowFunc();
            }
            return MathModule._pow;
        };
        MathModule.rate = function () {
            if (!MathModule._rate) {
                MathModule._rate = new RateFunc();
            }
            return MathModule._rate;
        };
        MathModule.random = function () {
            if (!MathModule._random) {
                MathModule._random = new RandomFunc();
            }
            return MathModule._random;
        };
        MathModule.scope = function () {
            if (!MathModule._scope) {
                MathModule._scope = Item.Record.create(10)
                    .slot("max", MathModule.max())
                    .slot("min", MathModule.min())
                    .slot("abs", MathModule.abs())
                    .slot("ceil", MathModule.ceil())
                    .slot("floor", MathModule.floor())
                    .slot("round", MathModule.round())
                    .slot("pow", MathModule.pow())
                    .slot("sqrt", MathModule.sqrt())
                    .slot("rate", MathModule.rate())
                    .slot("random", MathModule.random())
                    .commit();
            }
            return MathModule._scope;
        };
        return MathModule;
    }());
    Item.MathModule = MathModule;
    var MaxFunc = (function (_super) {
        __extends(MaxFunc, _super);
        function MaxFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MaxFunc.prototype.invoke = function (args, interpreter, operator) {
            interpreter = Interpreter.fromAny(interpreter);
            var x;
            var y;
            if (args.length >= 2) {
                x = args.getItem(0).evaluate(interpreter);
                y = args.getItem(1).evaluate(interpreter);
            }
            else {
                x = args.evaluate(interpreter);
            }
            if (y !== void 0) {
                return x.max(y);
            }
            else if (operator) {
                y = operator.state();
                var max = y !== void 0 ? x.max(y) : x;
                operator.setState(max);
                return max;
            }
            return Item.absent();
        };
        MaxFunc.prototype.expand = function (args, interpreter, operator) {
            if (args.length === 1) {
                args = args.evaluate(interpreter).toValue();
                return this.invoke(args, interpreter, operator);
            }
            return void 0;
        };
        return MaxFunc;
    }(BridgeFunc));
    var MinFunc = (function (_super) {
        __extends(MinFunc, _super);
        function MinFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MinFunc.prototype.invoke = function (args, interpreter, operator) {
            interpreter = Interpreter.fromAny(interpreter);
            var x;
            var y;
            if (args.length >= 2) {
                x = args.getItem(0).evaluate(interpreter);
                y = args.getItem(1).evaluate(interpreter);
            }
            else {
                x = args.evaluate(interpreter);
            }
            if (y !== void 0) {
                return x.min(y);
            }
            else if (operator) {
                y = operator.state();
                var min = y !== void 0 ? x.min(y) : x;
                operator.setState(min);
                return min;
            }
            return Item.absent();
        };
        MinFunc.prototype.expand = function (args, interpreter, operator) {
            if (args.length === 1) {
                args = args.evaluate(interpreter).toValue();
                return this.invoke(args, interpreter, operator);
            }
            return void 0;
        };
        return MinFunc;
    }(BridgeFunc));
    var AbsFunc = (function (_super) {
        __extends(AbsFunc, _super);
        function AbsFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AbsFunc.prototype.invoke = function (args, interpreter, operator) {
            args = args.evaluate(interpreter).toValue();
            if (args instanceof Item.Num) {
                return args.abs();
            }
            return Item.absent();
        };
        return AbsFunc;
    }(BridgeFunc));
    var CeilFunc = (function (_super) {
        __extends(CeilFunc, _super);
        function CeilFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CeilFunc.prototype.invoke = function (args, interpreter, operator) {
            args = args.evaluate(interpreter).toValue();
            if (args instanceof Item.Num) {
                return args.ceil();
            }
            return Item.absent();
        };
        return CeilFunc;
    }(BridgeFunc));
    var FloorFunc = (function (_super) {
        __extends(FloorFunc, _super);
        function FloorFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FloorFunc.prototype.invoke = function (args, interpreter, operator) {
            args = args.evaluate(interpreter).toValue();
            if (args instanceof Item.Num) {
                return args.floor();
            }
            return Item.absent();
        };
        return FloorFunc;
    }(BridgeFunc));
    var RoundFunc = (function (_super) {
        __extends(RoundFunc, _super);
        function RoundFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RoundFunc.prototype.invoke = function (args, interpreter, operator) {
            args = args.evaluate(interpreter).toValue();
            if (args instanceof Item.Num) {
                return args.round();
            }
            return Item.absent();
        };
        return RoundFunc;
    }(BridgeFunc));
    var SqrtFunc = (function (_super) {
        __extends(SqrtFunc, _super);
        function SqrtFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SqrtFunc.prototype.invoke = function (args, interpreter, operator) {
            args = args.evaluate(interpreter).toValue();
            if (args instanceof Item.Num) {
                return args.sqrt();
            }
            return Item.absent();
        };
        return SqrtFunc;
    }(BridgeFunc));
    var PowFunc = (function (_super) {
        __extends(PowFunc, _super);
        function PowFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PowFunc.prototype.invoke = function (args, interpreter, operator) {
            interpreter = Interpreter.fromAny(interpreter);
            var x = args.getItem(0).evaluate(interpreter);
            var y = args.getItem(1).evaluate(interpreter);
            if (x instanceof Item.Num && y instanceof Item.Num) {
                return x.pow(y);
            }
            return Item.absent();
        };
        return PowFunc;
    }(BridgeFunc));
    var RateFunc = (function (_super) {
        __extends(RateFunc, _super);
        function RateFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RateFunc.prototype.invoke = function (args, interpreter, operator) {
            interpreter = Interpreter.fromAny(interpreter);
            var value;
            var period;
            if (args.length >= 2) {
                value = args.getItem(0).evaluate(interpreter).numberValue(NaN);
                period = args.getItem(1).evaluate(interpreter).numberValue(1000);
            }
            else {
                value = args.evaluate(interpreter).numberValue(NaN);
                period = 1000;
            }
            if (isFinite(value) && operator) {
                var state = operator.state();
                if (state === void 0) {
                    state = { v0: value, t0: Date.now(), dv: 0, dt: 0 };
                    operator.setState(state);
                }
                else {
                    var t1 = Date.now();
                    var dt = t1 - state.t0;
                    if (dt > period && t1 > state.t0 || dt > 2 * period) {
                        var dv = value - state.v0;
                        state.v0 = value;
                        state.t0 = t1;
                        state.dv = dv;
                        state.dt = dt;
                    }
                    operator.setState(state);
                    if (state.dt !== 0) {
                        var rate = period * state.dv / state.dt;
                        return Item.Num.from(rate);
                    }
                }
            }
            return Item.absent();
        };
        RateFunc.prototype.expand = function (args, interpreter, operator) {
            args = args.evaluate(interpreter).toValue();
            return this.invoke(args, interpreter, operator);
        };
        return RateFunc;
    }(BridgeFunc));
    var RandomFunc = (function (_super) {
        __extends(RandomFunc, _super);
        function RandomFunc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RandomFunc.prototype.invoke = function (args, interpreter, operator) {
            args = args.evaluate(interpreter).toValue();
            var lower = args.length >= 1 ? args.getItem(0).numberValue(0.0) : 0.0;
            var upper = args.length >= 2 ? args.getItem(1).numberValue(lower + 1.0) : lower + 1.0;
            var value = lower + Math.random() * (upper - lower);
            return Item.Num.from(value);
        };
        return RandomFunc;
    }(BridgeFunc));

    var TagForm = (function (_super) {
        __extends(TagForm, _super);
        function TagForm(tag, form) {
            var _this = _super.call(this) || this;
            _this._tag = tag;
            _this._form = form;
            return _this;
        }
        TagForm.prototype.tag = function (tag) {
            if (arguments.length === 0) {
                return this._tag;
            }
            else if (tag !== void 0) {
                return new TagForm(tag, this._form);
            }
            else {
                return this._form;
            }
        };
        TagForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._form.unit();
            }
            else {
                return new TagForm(this._tag, this._form.unit(unit));
            }
        };
        TagForm.prototype.mold = function (object, item) {
            item = this._form.mold(object, item);
            if (!item.header(this._tag).isDefined()) {
                item = item.prepended(Attr.of(this._tag));
            }
            return item;
        };
        TagForm.prototype.cast = function (item, object) {
            if (item.header(this._tag).isDefined()) {
                return this._form.cast(item, object);
            }
            else if (item.keyEquals(this._tag)) {
                return this._form.cast(item.toValue(), object);
            }
            return void 0;
        };
        return TagForm;
    }(Form));
    Form.TagForm = TagForm;

    var UnitForm = (function (_super) {
        __extends(UnitForm, _super);
        function UnitForm(unit, form) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            _this._form = form;
            return _this;
        }
        UnitForm.prototype.tag = function (tag) {
            if (arguments.length === 0) {
                return this._form.tag();
            }
            else {
                return new UnitForm(this._unit, this._form.tag(tag));
            }
        };
        UnitForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._form.unit();
            }
            else if (unit !== void 0) {
                return new UnitForm(unit, this._form);
            }
            else {
                return this._form;
            }
        };
        UnitForm.prototype.mold = function (object, item) {
            return this._form.mold.apply(this._form, arguments);
        };
        UnitForm.prototype.cast = function (item, object) {
            return this._form.cast.apply(this._form, arguments);
        };
        return UnitForm;
    }(Form));
    Form.UnitForm = UnitForm;

    var StringForm = (function (_super) {
        __extends(StringForm, _super);
        function StringForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        StringForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new StringForm(unit);
            }
        };
        StringForm.prototype.mold = function (object, item) {
            if (item === void 0) {
                return Text.from(object);
            }
            else {
                return item.concat(Text.from(object));
            }
        };
        StringForm.prototype.cast = function (item, object) {
            var value = item.target();
            try {
                return value.stringValue();
            }
            catch (error) {
                return void 0;
            }
        };
        return StringForm;
    }(Form));
    Form.StringForm = StringForm;

    var NumberForm = (function (_super) {
        __extends(NumberForm, _super);
        function NumberForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        NumberForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new NumberForm(unit);
            }
        };
        NumberForm.prototype.mold = function (object, item) {
            if (item === void 0) {
                return Num.from(object);
            }
            else {
                return item.concat(Num.from(object));
            }
        };
        NumberForm.prototype.cast = function (item, object) {
            var value = item.target();
            try {
                return value.numberValue();
            }
            catch (error) {
                return void 0;
            }
        };
        return NumberForm;
    }(Form));
    Form.NumberForm = NumberForm;

    var BooleanForm = (function (_super) {
        __extends(BooleanForm, _super);
        function BooleanForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        BooleanForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new BooleanForm(unit);
            }
        };
        BooleanForm.prototype.mold = function (object, item) {
            if (item === void 0) {
                return Bool.from(object);
            }
            else {
                return item.concat(Bool.from(object));
            }
        };
        BooleanForm.prototype.cast = function (item, object) {
            var value = item.target();
            try {
                return value.booleanValue();
            }
            catch (error) {
                return void 0;
            }
        };
        return BooleanForm;
    }(Form));
    Form.BooleanForm = BooleanForm;

    var AnyForm = (function (_super) {
        __extends(AnyForm, _super);
        function AnyForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit;
            return _this;
        }
        AnyForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new AnyForm(unit);
            }
        };
        AnyForm.prototype.mold = function (object, item) {
            object = Item.fromAny(object);
            if (item !== void 0) {
                object = item.concat(object);
            }
            return object;
        };
        AnyForm.prototype.cast = function (item, object) {
            return item.toAny();
        };
        return AnyForm;
    }(Form));
    Form.AnyForm = AnyForm;

    var ItemForm = (function (_super) {
        __extends(ItemForm, _super);
        function ItemForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit ? unit.commit() : unit;
            return _this;
        }
        ItemForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new ItemForm(unit);
            }
        };
        ItemForm.prototype.mold = function (object, item) {
            object = Item.fromAny(object);
            if (item !== void 0) {
                object = item.concat(object);
            }
            return object;
        };
        ItemForm.prototype.cast = function (item, object) {
            return item;
        };
        return ItemForm;
    }(Form));
    Form.ItemForm = ItemForm;

    var ValueForm = (function (_super) {
        __extends(ValueForm, _super);
        function ValueForm(unit) {
            var _this = _super.call(this) || this;
            _this._unit = unit ? unit.commit() : unit;
            return _this;
        }
        ValueForm.prototype.unit = function (unit) {
            if (arguments.length === 0) {
                return this._unit;
            }
            else {
                return new ValueForm(unit);
            }
        };
        ValueForm.prototype.mold = function (object, item) {
            object = Value.fromAny(object);
            if (item !== void 0) {
                object = item.concat(object);
            }
            return object;
        };
        ValueForm.prototype.cast = function (item, object) {
            return item.toValue();
        };
        return ValueForm;
    }(Form));
    Form.ValueForm = ValueForm;

    var ValueCursor = (function (_super) {
        __extends(ValueCursor, _super);
        function ValueCursor(cursor, form) {
            var _this = _super.call(this) || this;
            _this._cursor = cursor;
            _this._form = form;
            return _this;
        }
        ValueCursor.prototype.isEmpty = function () {
            return this._cursor.isEmpty();
        };
        ValueCursor.prototype.head = function () {
            var value = this._cursor.head();
            return value.coerce(this._form);
        };
        ValueCursor.prototype.step = function () {
            this._cursor.step();
        };
        ValueCursor.prototype.skip = function (count) {
            this._cursor.skip(count);
        };
        ValueCursor.prototype.hasNext = function () {
            return this._cursor.hasNext();
        };
        ValueCursor.prototype.nextIndex = function () {
            return this._cursor.nextIndex();
        };
        ValueCursor.prototype.next = function () {
            var _a = this._cursor.next(), value = _a.value, done = _a.done;
            return { value: value && value.coerce(this._form), done: done };
        };
        ValueCursor.prototype.hasPrevious = function () {
            return this._cursor.hasPrevious();
        };
        ValueCursor.prototype.previousIndex = function () {
            return this._cursor.previousIndex();
        };
        ValueCursor.prototype.previous = function () {
            var _a = this._cursor.next(), value = _a.value, done = _a.done;
            return { value: value && value.coerce(this._form), done: done };
        };
        ValueCursor.prototype.delete = function () {
            this._cursor.delete();
        };
        return ValueCursor;
    }(util.Cursor));

    var ValueEntryCursor = (function (_super) {
        __extends(ValueEntryCursor, _super);
        function ValueEntryCursor(cursor, keyForm, valueForm) {
            var _this = _super.call(this) || this;
            _this._cursor = cursor;
            _this._keyForm = keyForm;
            _this._valueForm = valueForm;
            return _this;
        }
        ValueEntryCursor.prototype.isEmpty = function () {
            return this._cursor.isEmpty();
        };
        ValueEntryCursor.prototype.head = function () {
            var pair = this._cursor.head();
            return [pair[0].coerce(this._keyForm), pair[1].coerce(this._valueForm)];
        };
        ValueEntryCursor.prototype.step = function () {
            this._cursor.step();
        };
        ValueEntryCursor.prototype.skip = function (count) {
            this._cursor.skip(count);
        };
        ValueEntryCursor.prototype.hasNext = function () {
            return this._cursor.hasNext();
        };
        ValueEntryCursor.prototype.nextIndex = function () {
            return this._cursor.nextIndex();
        };
        ValueEntryCursor.prototype.next = function () {
            var _a = this._cursor.next(), value = _a.value, done = _a.done;
            return { value: value && [value[0].coerce(this._keyForm), value[1].coerce(this._valueForm)], done: done };
        };
        ValueEntryCursor.prototype.hasPrevious = function () {
            return this._cursor.hasPrevious();
        };
        ValueEntryCursor.prototype.previousIndex = function () {
            return this._cursor.previousIndex();
        };
        ValueEntryCursor.prototype.previous = function () {
            var _a = this._cursor.next(), value = _a.value, done = _a.done;
            return { value: value && [value[0].coerce(this._keyForm), value[1].coerce(this._valueForm)], done: done };
        };
        ValueEntryCursor.prototype.delete = function () {
            this._cursor.delete();
        };
        return ValueEntryCursor;
    }(util.Cursor));

    exports.Absent = Absent;
    exports.AndOperator = AndOperator;
    exports.AnyForm = AnyForm;
    exports.Attr = Attr;
    exports.BinaryOperator = BinaryOperator;
    exports.BitwiseAndOperator = BitwiseAndOperator;
    exports.BitwiseNotOperator = BitwiseNotOperator;
    exports.BitwiseOrOperator = BitwiseOrOperator;
    exports.BitwiseXorOperator = BitwiseXorOperator;
    exports.Bool = Bool;
    exports.BooleanForm = BooleanForm;
    exports.BridgeFunc = BridgeFunc;
    exports.ChildrenSelector = ChildrenSelector;
    exports.ConditionalOperator = ConditionalOperator;
    exports.Data = Data;
    exports.DescendantsSelector = DescendantsSelector;
    exports.DivideOperator = DivideOperator;
    exports.EqOperator = EqOperator;
    exports.Expression = Expression;
    exports.Extant = Extant;
    exports.Field = Field;
    exports.FilterSelector = FilterSelector;
    exports.Form = Form;
    exports.FormException = FormException;
    exports.Func = Func;
    exports.GeOperator = GeOperator;
    exports.GetAttrSelector = GetAttrSelector;
    exports.GetItemSelector = GetItemSelector;
    exports.GetSelector = GetSelector;
    exports.GtOperator = GtOperator;
    exports.IdentitySelector = IdentitySelector;
    exports.Interpreter = Interpreter;
    exports.InterpreterException = InterpreterException;
    exports.InterpreterSettings = InterpreterSettings;
    exports.InvokeOperator = InvokeOperator;
    exports.Item = Item;
    exports.ItemForm = ItemForm;
    exports.KeysSelector = KeysSelector;
    exports.LambdaFunc = LambdaFunc;
    exports.LeOperator = LeOperator;
    exports.LiteralSelector = LiteralSelector;
    exports.LtOperator = LtOperator;
    exports.MathModule = MathModule;
    exports.MinusOperator = MinusOperator;
    exports.ModuloOperator = ModuloOperator;
    exports.NeOperator = NeOperator;
    exports.NegativeOperator = NegativeOperator;
    exports.NotOperator = NotOperator;
    exports.Num = Num;
    exports.NumberForm = NumberForm;
    exports.Operator = Operator;
    exports.OrOperator = OrOperator;
    exports.PlusOperator = PlusOperator;
    exports.PositiveOperator = PositiveOperator;
    exports.Record = Record;
    exports.RecordMap = RecordMap;
    exports.RecordMapView = RecordMapView;
    exports.Selector = Selector;
    exports.Slot = Slot;
    exports.StringForm = StringForm;
    exports.TagForm = TagForm;
    exports.Text = Text;
    exports.TimesOperator = TimesOperator;
    exports.UnaryOperator = UnaryOperator;
    exports.UnitForm = UnitForm;
    exports.Value = Value;
    exports.ValueBuilder = ValueBuilder;
    exports.ValueCursor = ValueCursor;
    exports.ValueEntryCursor = ValueEntryCursor;
    exports.ValueForm = ValueForm;
    exports.ValuesSelector = ValuesSelector;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=swim-structure.js.map