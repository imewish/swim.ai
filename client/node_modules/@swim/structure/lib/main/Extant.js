import { __extends } from "tslib";
import { Murmur3, Objects } from "@swim/util";
import { Item } from "./Item";
import { Value } from "./Value";
var Extant = (function (_super) {
    __extends(Extant, _super);
    function Extant() {
        return _super.call(this) || this;
    }
    Extant.prototype.isDefined = function () {
        return true;
    };
    Extant.prototype.isDistinct = function () {
        return false;
    };
    Extant.prototype.isConstant = function () {
        return true;
    };
    Extant.prototype.unflattened = function () {
        return Value.Record.empty();
    };
    Extant.prototype.not = function () {
        return Value.absent();
    };
    Extant.prototype.stringValue = function (orElse) {
        return "";
    };
    Extant.prototype.booleanValue = function (orElse) {
        return true;
    };
    Extant.prototype.toAny = function () {
        return null;
    };
    Extant.prototype.typeOrder = function () {
        return 98;
    };
    Extant.prototype.compareTo = function (that) {
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    Extant.prototype.equals = function (that) {
        return this === that;
    };
    Extant.prototype.hashCode = function () {
        if (Extant._hashSeed === void 0) {
            Extant._hashSeed = Murmur3.seed(Extant);
        }
        return Extant._hashSeed;
    };
    Extant.prototype.debug = function (output) {
        output = output.write("Value").write(46).write("extant").write(40).write(41);
    };
    Extant.prototype.display = function (output) {
        output = output.write("null");
    };
    Extant.extant = function () {
        return Extant._extant;
    };
    Extant.fromAny = function (value) {
        if (value instanceof Extant) {
            return value;
        }
        else if (value === null) {
            return Extant.extant();
        }
        else {
            throw new TypeError("" + value);
        }
    };
    Extant._extant = new Extant();
    return Extant;
}(Value));
export { Extant };
Item.Extant = Extant;
//# sourceMappingURL=Extant.js.map