import { __extends } from "tslib";
import { Murmur3, Objects } from "@swim/util";
import { Item } from "./Item";
import { Value } from "./Value";
var Bool = (function (_super) {
    __extends(Bool, _super);
    function Bool(value) {
        var _this = _super.call(this) || this;
        _this._value = value;
        return _this;
    }
    Bool.prototype.isConstant = function () {
        return true;
    };
    Object.defineProperty(Bool.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Bool.prototype.stringValue = function (orElse) {
        return this._value ? "true" : "false";
    };
    Bool.prototype.booleanValue = function (orElse) {
        return this._value;
    };
    Bool.prototype.toAny = function () {
        return this._value;
    };
    Bool.prototype.valueOf = function () {
        return this._value;
    };
    Bool.prototype.conditional = function (thenTerm, elseTerm) {
        return this._value ? Item.fromAny(thenTerm) : Item.fromAny(elseTerm);
    };
    Bool.prototype.or = function (that) {
        return this._value ? this : Item.fromAny(that);
    };
    Bool.prototype.and = function (that) {
        return this._value ? Item.fromAny(that) : this;
    };
    Bool.prototype.not = function () {
        return Bool.from(!this._value);
    };
    Bool.prototype.typeOrder = function () {
        return 7;
    };
    Bool.prototype.compareTo = function (that) {
        if (that instanceof Bool) {
            if (this._value && !that._value) {
                return -1;
            }
            else if (!this._value && that._value) {
                return 1;
            }
            else {
                return 0;
            }
        }
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    Bool.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Bool) {
            return this._value === that._value;
        }
        return false;
    };
    Bool.prototype.hashCode = function () {
        if (this._hashCode === void 0) {
            this._hashCode = Murmur3.hash(this._value ? "true" : "false");
        }
        return this._hashCode;
    };
    Bool.prototype.debug = function (output) {
        output = output.write("Bool").write(46).write("from")
            .write(40).write(this._value ? "true" : "false").write(41);
    };
    Bool.prototype.display = function (output) {
        output = output.write(this._value ? "true" : "false");
    };
    Bool.from = function (value) {
        return value ? Bool.True : Bool.False;
    };
    Bool.fromAny = function (value) {
        if (value instanceof Bool) {
            return value;
        }
        else if (typeof value === "boolean") {
            return Bool.from(value);
        }
        else {
            throw new TypeError("" + value);
        }
    };
    Bool.True = new Bool(true);
    Bool.False = new Bool(false);
    return Bool;
}(Value));
export { Bool };
Item.Bool = Bool;
//# sourceMappingURL=Bool.js.map