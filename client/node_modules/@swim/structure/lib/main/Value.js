import { __extends } from "tslib";
import { Item } from "./Item";
import { ValueBuilder } from "./ValueBuilder";
var Value = (function (_super) {
    __extends(Value, _super);
    function Value() {
        return _super.call(this) || this;
    }
    Value.prototype.isDefined = function () {
        return true;
    };
    Value.prototype.isDistinct = function () {
        return true;
    };
    Object.defineProperty(Value.prototype, "key", {
        get: function () {
            return Value.absent();
        },
        enumerable: true,
        configurable: true
    });
    Value.prototype.toValue = function () {
        return this;
    };
    Value.prototype.tag = function () {
        return void 0;
    };
    Value.prototype.target = function () {
        return this;
    };
    Value.prototype.flattened = function () {
        return this;
    };
    Value.prototype.unflattened = function () {
        return Value.Record.of(this);
    };
    Value.prototype.header = function (tag) {
        return Value.absent();
    };
    Value.prototype.headers = function (tag) {
        return void 0;
    };
    Value.prototype.head = function () {
        return Item.absent();
    };
    Value.prototype.tail = function () {
        return Value.Record.empty();
    };
    Value.prototype.body = function () {
        return Value.extant();
    };
    Object.defineProperty(Value.prototype, "length", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Value.prototype.has = function (key) {
        return false;
    };
    Value.prototype.get = function (key) {
        return Value.absent();
    };
    Value.prototype.getAttr = function (key) {
        return Value.absent();
    };
    Value.prototype.getSlot = function (key) {
        return Value.absent();
    };
    Value.prototype.getField = function (key) {
        return void 0;
    };
    Value.prototype.getItem = function (index) {
        return Item.absent();
    };
    Value.prototype.deleted = function (key) {
        return this;
    };
    Value.prototype.conditional = function (thenTerm, elseTerm) {
        thenTerm = Item.fromAny(thenTerm);
        return thenTerm;
    };
    Value.prototype.or = function (that) {
        return this;
    };
    Value.prototype.and = function (that) {
        that = Item.fromAny(that);
        return that;
    };
    Value.prototype.bitwiseOr = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Item.Expression) {
            return new Item.BitwiseOrOperator(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.bitwiseOr(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.bitwiseOr(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Item.absent();
    };
    Value.prototype.bitwiseXor = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Item.Expression) {
            return new Item.BitwiseXorOperator(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.bitwiseXor(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.bitwiseXor(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Item.absent();
    };
    Value.prototype.bitwiseAnd = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Item.Expression) {
            return new Item.BitwiseAndOperator(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.bitwiseAnd(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.bitwiseAnd(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Item.absent();
    };
    Value.prototype.lt = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Item.Expression) {
            return new Item.LtOperator(this, that);
        }
        return _super.prototype.lt.call(this, that);
    };
    Value.prototype.le = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Item.Expression) {
            return new Item.LeOperator(this, that);
        }
        return _super.prototype.le.call(this, that);
    };
    Value.prototype.eq = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Item.Expression) {
            return new Item.EqOperator(this, that);
        }
        return _super.prototype.eq.call(this, that);
    };
    Value.prototype.ne = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Item.Expression) {
            return new Item.NeOperator(this, that);
        }
        return _super.prototype.ne.call(this, that);
    };
    Value.prototype.ge = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Item.Expression) {
            return new Item.GeOperator(this, that);
        }
        return _super.prototype.ge.call(this, that);
    };
    Value.prototype.gt = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Item.Expression) {
            return new Item.GtOperator(this, that);
        }
        return _super.prototype.gt.call(this, that);
    };
    Value.prototype.plus = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Item.Expression) {
            return new Item.PlusOperator(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.plus(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.plus(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Item.absent();
    };
    Value.prototype.minus = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Item.Expression) {
            return new Item.MinusOperator(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.minus(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.minus(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Item.absent();
    };
    Value.prototype.times = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Item.Expression) {
            return new Item.TimesOperator(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.times(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.times(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Item.absent();
    };
    Value.prototype.divide = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Item.Expression) {
            return new Item.DivideOperator(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.divide(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.divide(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Item.absent();
    };
    Value.prototype.modulo = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Item.Expression) {
            return new Item.ModuloOperator(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.modulo(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.modulo(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Item.absent();
    };
    Value.prototype.not = function () {
        return Value.absent();
    };
    Value.prototype.bitwiseNot = function () {
        return Value.absent();
    };
    Value.prototype.negative = function () {
        return Value.absent();
    };
    Value.prototype.positive = function () {
        return Value.absent();
    };
    Value.prototype.inverse = function () {
        return Value.absent();
    };
    Value.prototype.lambda = function (template) {
        return new Item.LambdaFunc(this, template);
    };
    Value.prototype.stringValue = function (orElse) {
        return orElse;
    };
    Value.prototype.numberValue = function (orElse) {
        return orElse;
    };
    Value.prototype.booleanValue = function (orElse) {
        return orElse;
    };
    Value.prototype.isAliased = function () {
        return false;
    };
    Value.prototype.isMutable = function () {
        return false;
    };
    Value.prototype.alias = function () {
    };
    Value.prototype.branch = function () {
        return this;
    };
    Value.prototype.clone = function () {
        return this;
    };
    Value.prototype.commit = function () {
        return this;
    };
    Value.prototype.keyEquals = function (key) {
        return false;
    };
    Value.builder = function () {
        return new ValueBuilder();
    };
    Value.empty = function () {
        return Value.Record.empty();
    };
    Value.extant = function () {
        return Value.Extant.extant();
    };
    Value.absent = function () {
        return Value.Absent.absent();
    };
    Value.fromAny = function (value) {
        if (value instanceof Value) {
            return value;
        }
        else if (value === void 0) {
            return Value.Absent.absent();
        }
        else if (value === null) {
            return Value.Extant.extant();
        }
        else if (typeof value === "boolean") {
            return Value.Bool.from(value);
        }
        else if (typeof value === "number") {
            return Value.Num.from(value);
        }
        else if (typeof value === "string") {
            return Value.Text.from(value);
        }
        else if (value instanceof Uint8Array) {
            return Value.Data.wrap(value);
        }
        else if (Array.isArray(value)) {
            return Value.Record.fromArray(value);
        }
        else if (typeof value === "object") {
            return Value.Record.fromObject(value);
        }
        else {
            throw new TypeError("" + value);
        }
    };
    return Value;
}(Item));
export { Value };
Item.Value = Value;
//# sourceMappingURL=Value.js.map