import { InterpreterSettings } from "./InterpreterSettings";
import { AnyItem, Item } from "./Item";
import { Selector } from "./Selector";
import { Operator } from "./Operator";
export declare type AnyInterpreter = Interpreter | AnyItem;
export declare class Interpreter {
    _settings: InterpreterSettings;
    _scopeStack: Item[] | null;
    _scopeDepth: number;
    constructor(settings?: InterpreterSettings, scopeStack?: Item[] | null, scopeDepth?: number);
    settings(): InterpreterSettings;
    settings(settings: InterpreterSettings): this;
    scopeDepth(): number;
    peekScope(): Item;
    getScope(index: number): Item;
    pushScope(scope: Item): void;
    popScope(): Item;
    swapScope(newScope: Item): Item;
    willOperate(operator: Operator): void;
    didOperate(operator: Operator, result: Item): void;
    willSelect(selector: Selector): void;
    didSelect(selector: Selector, result: unknown): void;
    willTransform(selector: Selector): void;
    didTransform(selector: Selector, result: Item): void;
    static of(...objects: AnyItem[]): Interpreter;
    static fromAny(interpreter: AnyInterpreter, globalScope?: Item): Interpreter;
    private static expand;
}
//# sourceMappingURL=Interpreter.d.ts.map