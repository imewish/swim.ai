import { __extends } from "tslib";
import { Attr } from "../Attr";
import { Form } from "../Form";
var TagForm = (function (_super) {
    __extends(TagForm, _super);
    function TagForm(tag, form) {
        var _this = _super.call(this) || this;
        _this._tag = tag;
        _this._form = form;
        return _this;
    }
    TagForm.prototype.tag = function (tag) {
        if (arguments.length === 0) {
            return this._tag;
        }
        else if (tag !== void 0) {
            return new TagForm(tag, this._form);
        }
        else {
            return this._form;
        }
    };
    TagForm.prototype.unit = function (unit) {
        if (arguments.length === 0) {
            return this._form.unit();
        }
        else {
            return new TagForm(this._tag, this._form.unit(unit));
        }
    };
    TagForm.prototype.mold = function (object, item) {
        item = this._form.mold(object, item);
        if (!item.header(this._tag).isDefined()) {
            item = item.prepended(Attr.of(this._tag));
        }
        return item;
    };
    TagForm.prototype.cast = function (item, object) {
        if (item.header(this._tag).isDefined()) {
            return this._form.cast(item, object);
        }
        else if (item.keyEquals(this._tag)) {
            return this._form.cast(item.toValue(), object);
        }
        return void 0;
    };
    return TagForm;
}(Form));
export { TagForm };
Form.TagForm = TagForm;
//# sourceMappingURL=TagForm.js.map