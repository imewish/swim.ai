import { __extends } from "tslib";
import { Value } from "../Value";
import { Form } from "../Form";
var ValueForm = (function (_super) {
    __extends(ValueForm, _super);
    function ValueForm(unit) {
        var _this = _super.call(this) || this;
        _this._unit = unit ? unit.commit() : unit;
        return _this;
    }
    ValueForm.prototype.unit = function (unit) {
        if (arguments.length === 0) {
            return this._unit;
        }
        else {
            return new ValueForm(unit);
        }
    };
    ValueForm.prototype.mold = function (object, item) {
        object = Value.fromAny(object);
        if (item !== void 0) {
            object = item.concat(object);
        }
        return object;
    };
    ValueForm.prototype.cast = function (item, object) {
        return item.toValue();
    };
    return ValueForm;
}(Form));
export { ValueForm };
Form.ValueForm = ValueForm;
//# sourceMappingURL=ValueForm.js.map