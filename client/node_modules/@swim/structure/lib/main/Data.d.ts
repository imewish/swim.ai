import { Input, Output, Writer, Base16, Base64 } from "@swim/codec";
import { Item } from "./Item";
import { Value } from "./Value";
export declare type AnyData = Data | Uint8Array;
export declare class Data extends Value {
    _array: Uint8Array | null;
    _size: number;
    _flags: number;
    constructor(array: Uint8Array | null, size: number, flags: number);
    isConstant(): boolean;
    get size(): number;
    getByte(index: number): number;
    setByte(index: number, value: number): Data;
    private setByteAliased;
    private setByteMutable;
    addByte(value: number): Data;
    private addByteAliased;
    private addByteMutable;
    addData(data: Data): Data;
    addUint8Array(array: Uint8Array): Data;
    private addUint8ArrayAliased;
    private addUint8ArrayMutable;
    clear(): void;
    toUint8Array(): Uint8Array;
    asUint8Array(): Uint8Array | undefined;
    toAny(): AnyData;
    isAliased(): boolean;
    isMutable(): boolean;
    branch(): Data;
    clone(): Data;
    commit(): this;
    writeBase16(output: Output, base16?: Base16): Writer<unknown, unknown>;
    toBase16(base16?: Base16): string;
    writeBase64(output: Output, base64?: Base64): Writer<unknown, unknown>;
    toBase64(base64?: Base64): string;
    typeOrder(): number;
    compareTo(that: Item): 0 | 1 | -1;
    equals(that: unknown): boolean;
    hashCode(): number;
    debug(output: Output): void;
    display(output: Output): void;
    static readonly ALIASED: number;
    static readonly IMMUTABLE: number;
    private static _hashSeed?;
    private static _empty?;
    static output(): Output<Data>;
    static output(initialCapacity: number): Output<Data>;
    static output(data: Data): Output<Data>;
    static empty(): Data;
    static create(initialCapacity?: number): Data;
    static wrap(value: Uint8Array): Data;
    static fromBase16(input: Input | string): Data;
    static fromBase64(input: Input | string, base64?: Base64): Data;
    static fromAny(value: AnyData): Data;
    static random(size: number): Data;
    static expand(n: number): number;
}
//# sourceMappingURL=Data.d.ts.map