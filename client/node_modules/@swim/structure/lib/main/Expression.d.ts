import { AnyItem, Item } from "./Item";
import { AnyValue, Value } from "./Value";
import { Operator } from "./Operator";
export declare abstract class Expression extends Value {
    constructor();
    conditional(thenTerm: Value, elseTerm: Value): Value;
    conditional(thenTerm: AnyItem, elseTerm: AnyItem): Item;
    or(that: AnyItem): Operator;
    and(that: AnyItem): Operator;
    bitwiseOr(that: AnyItem): Operator;
    bitwiseXor(that: AnyItem): Operator;
    bitwiseAnd(that: AnyItem): Operator;
    lt(that: AnyItem): Operator;
    le(that: AnyItem): Operator;
    eq(that: AnyItem): Operator;
    ne(that: AnyItem): Operator;
    ge(that: AnyItem): Operator;
    gt(that: AnyItem): Operator;
    plus(that: AnyItem): Operator;
    minus(that: AnyItem): Operator;
    times(that: AnyItem): Operator;
    divide(that: AnyItem): Operator;
    modulo(that: AnyItem): Operator;
    not(): Operator;
    bitwiseNot(): Operator;
    negative(): Operator;
    positive(): Operator;
    inverse(): Operator;
    toAny(): AnyValue;
}
//# sourceMappingURL=Expression.d.ts.map