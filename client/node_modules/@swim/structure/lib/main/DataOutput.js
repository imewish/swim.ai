import { __extends } from "tslib";
import { OutputSettings, Output } from "@swim/codec";
var DataOutput = (function (_super) {
    __extends(DataOutput, _super);
    function DataOutput(data, settings) {
        var _this = _super.call(this) || this;
        _this._data = data;
        _this._settings = settings;
        return _this;
    }
    DataOutput.prototype.isCont = function () {
        return true;
    };
    DataOutput.prototype.isFull = function () {
        return false;
    };
    DataOutput.prototype.isDone = function () {
        return false;
    };
    DataOutput.prototype.isError = function () {
        return false;
    };
    DataOutput.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return false;
        }
        else {
            return this;
        }
    };
    DataOutput.prototype.write = function (b) {
        if (typeof b === "number") {
            this._data.addByte(b);
            return this;
        }
        else {
            throw new TypeError("" + b);
        }
    };
    DataOutput.prototype.writeln = function (string) {
        throw new TypeError("" + string);
    };
    DataOutput.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            this._settings = OutputSettings.fromAny(settings);
            return this;
        }
    };
    DataOutput.prototype.bind = function () {
        return this._data;
    };
    DataOutput.prototype.clone = function () {
        return new DataOutput(this._data.branch(), this._settings);
    };
    return DataOutput;
}(Output));
export { DataOutput };
//# sourceMappingURL=DataOutput.js.map