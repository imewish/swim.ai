import { __extends } from "tslib";
import { Murmur3, Objects } from "@swim/util";
import { Item } from "./Item";
import { Value } from "./Value";
import { RecordCursor } from "./RecordCursor";
import { Interpreter } from "./Interpreter";
var Record = (function (_super) {
    __extends(Record, _super);
    function Record() {
        return _super.call(this) || this;
    }
    Record.prototype.isArray = function () {
        return this.fieldCount() === 0;
    };
    Record.prototype.isObject = function () {
        return this.valueCount() === 0;
    };
    Record.prototype.fieldCount = function () {
        var count = 0;
        this.forEach(function (member) {
            if (member instanceof Item.Field) {
                count += 1;
            }
        }, this);
        return count;
    };
    Record.prototype.valueCount = function () {
        var count = 0;
        this.forEach(function (member) {
            if (member instanceof Value) {
                count += 1;
            }
        }, this);
        return count;
    };
    Record.prototype.isConstant = function () {
        return this.forEach(function (member) {
            return member.isConstant() ? void 0 : false;
        }, this) === void 0;
    };
    Record.prototype.tag = function () {
        var item = this.head();
        if (item instanceof Item.Attr) {
            return item.key.value;
        }
        return void 0;
    };
    Record.prototype.target = function () {
        var value;
        var record;
        var modified = false;
        this.forEach(function (item) {
            if (item instanceof Item.Attr) {
                modified = true;
            }
            else if (value === void 0 && item instanceof Value) {
                value = item;
            }
            else {
                if (record === void 0) {
                    record = Record.create();
                    if (value !== void 0) {
                        record.push(value);
                    }
                }
                record.push(item);
            }
        }, this);
        if (value === void 0) {
            return Value.extant();
        }
        else if (record === void 0) {
            return value;
        }
        else if (modified) {
            return record;
        }
        else {
            return this;
        }
    };
    Record.prototype.flattened = function () {
        if (this.isEmpty()) {
            return Value.extant();
        }
        else {
            var items = this.iterator();
            var head = items.head();
            items.step();
            if (items.isEmpty() && head instanceof Value) {
                return head;
            }
            else {
                return this.branch();
            }
        }
    };
    Record.prototype.unflattened = function () {
        return this;
    };
    Record.prototype.header = function (tag) {
        var head = this.head();
        if (head instanceof Item.Attr && head.key.value === tag) {
            return head.value;
        }
        else {
            return Value.absent();
        }
    };
    Record.prototype.headers = function (tag) {
        var head = this.head();
        if (head instanceof Item.Attr && head.key.value === tag) {
            var header = head.value;
            if (header instanceof Record) {
                return header;
            }
            else {
                return Record.of(header);
            }
        }
        return void 0;
    };
    Record.prototype.head = function () {
        return this.forEach(function (item) {
            return item;
        }, this) || Item.absent();
    };
    Record.prototype.tail = function () {
        var tail = Record.create();
        this.forEach(function (item, index) {
            if (index > 0) {
                tail.push(item);
            }
        }, this);
        return tail;
    };
    Record.prototype.body = function () {
        var tail = this.tail();
        if (!tail.isEmpty()) {
            return tail.flattened();
        }
        else {
            return Value.absent();
        }
    };
    Record.prototype.has = function (key) {
        key = Value.fromAny(key);
        return this.forEach(function (item) {
            return item instanceof Item.Field && item.key.equals(key) ? true : void 0;
        }, this) || false;
    };
    Record.prototype.indexOf = function (item, index) {
        if (index === void 0) { index = 0; }
        item = Item.fromAny(item);
        if (index < 0) {
            index = Math.max(0, this.length + index);
        }
        var i = this.forEach(function (member, i) {
            return i >= index && item.equals(member) ? i : void 0;
        }, this);
        return i !== void 0 ? i : -1;
    };
    Record.prototype.lastIndexOf = function (item, index) {
        item = Item.fromAny(item);
        var n = this.length;
        if (index === void 0) {
            index = n - 1;
        }
        else if (index < 0) {
            index = n + index;
        }
        index = Math.min(index, n - 1);
        while (index >= 0) {
            if (item.equals(this.getItem(index))) {
                return index;
            }
            index -= 1;
        }
        return -1;
    };
    Record.prototype.get = function (key) {
        key = Value.fromAny(key);
        return this.forEach(function (item) {
            return item instanceof Item.Field && item.key.equals(key) ? item.value : void 0;
        }, this) || Value.absent();
    };
    Record.prototype.getAttr = function (key) {
        key = Value.Text.fromAny(key);
        return this.forEach(function (item) {
            return item instanceof Item.Attr && item.key.equals(key) ? item.value : void 0;
        }, this) || Value.absent();
    };
    Record.prototype.getSlot = function (key) {
        key = Value.fromAny(key);
        return this.forEach(function (item) {
            return item instanceof Item.Slot && item.key.equals(key) ? item.value : void 0;
        }, this) || Value.absent();
    };
    Record.prototype.getField = function (key) {
        key = Value.fromAny(key);
        return this.forEach(function (item) {
            return item instanceof Item.Field && item.key.equals(key) ? item : void 0;
        }, this);
    };
    Record.prototype.set = function (key, newValue) {
        key = Value.fromAny(key);
        newValue = Value.fromAny(newValue);
        var items = this.iterator();
        while (!items.isEmpty()) {
            var item = items.head();
            if (item instanceof Item.Field && item.key.equals(key)) {
                if (item.isMutable()) {
                    item.setValue(newValue);
                }
                else {
                    items.set(item.updatedValue(newValue));
                }
                return this;
            }
            items.step();
        }
        this.push(new Item.Slot(key, newValue));
        return this;
    };
    Record.prototype.setAttr = function (key, newValue) {
        key = Value.Text.fromAny(key);
        newValue = Value.fromAny(newValue);
        var items = this.iterator();
        while (!items.isEmpty()) {
            var item = items.head();
            if (item instanceof Item.Field && item.key.equals(key)) {
                if (item instanceof Item.Attr && item.isMutable()) {
                    item.setValue(newValue);
                }
                else {
                    items.set(new Item.Attr(key, newValue));
                }
                return this;
            }
            items.step();
        }
        this.push(new Item.Attr(key, newValue));
        return this;
    };
    Record.prototype.setSlot = function (key, newValue) {
        key = Value.fromAny(key);
        newValue = Value.fromAny(newValue);
        var items = this.iterator();
        while (!items.isEmpty()) {
            var item = items.head();
            if (item instanceof Item.Field && item.key.equals(key)) {
                if (item instanceof Item.Slot && item.isMutable()) {
                    item.setValue(newValue);
                }
                else {
                    items.set(new Item.Slot(key, newValue));
                }
                return this;
            }
            items.step();
        }
        this.push(new Item.Slot(key, newValue));
        return this;
    };
    Record.prototype.updated = function (key, value) {
        key = Value.fromAny(key);
        value = Value.fromAny(value);
        var record = this.isMutable() ? this : this.branch();
        var items = record.iterator();
        while (!items.isEmpty()) {
            var item = items.head();
            if (item.key.equals(key)) {
                if (item instanceof Item.Field && item.isMutable()) {
                    item.setValue(value);
                }
                else {
                    items.set(new Item.Slot(key, value));
                }
                return record;
            }
            items.step();
        }
        record.push(new Item.Slot(key, value));
        return record;
    };
    Record.prototype.updatedAttr = function (key, value) {
        key = Value.Text.fromAny(key);
        value = Value.fromAny(value);
        var record = this.isMutable() ? this : this.branch();
        var items = record.iterator();
        while (!items.isEmpty()) {
            var item = items.head();
            if (item.key.equals(key)) {
                if (item instanceof Item.Attr && item.isMutable()) {
                    item.setValue(value);
                }
                else {
                    items.set(new Item.Attr(key, value));
                }
                return record;
            }
            items.step();
        }
        record.push(new Item.Attr(key, value));
        return record;
    };
    Record.prototype.updatedSlot = function (key, value) {
        key = Value.fromAny(key);
        value = Value.fromAny(value);
        var record = this.isMutable() ? this : this.branch();
        var items = record.iterator();
        while (!items.isEmpty()) {
            var item = items.head();
            if (item.key.equals(key)) {
                if (item instanceof Item.Slot && item.isMutable()) {
                    item.setValue(value);
                }
                else {
                    items.set(new Item.Slot(key, value));
                }
                return record;
            }
            items.step();
        }
        record.push(new Item.Slot(key, value));
        return record;
    };
    Record.prototype.appended = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var record = this.isMutable() ? this : this.branch();
        record.push.apply(record, arguments);
        return record;
    };
    Record.prototype.prepended = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var record = this.isMutable() ? this : this.branch();
        record.splice.apply(record, Array.prototype.concat.apply([0, 0], arguments));
        return record;
    };
    Record.prototype.deleted = function (key) {
        var record = this.isMutable() ? this : this.branch();
        record.delete(key);
        return record;
    };
    Record.prototype.concat = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var record = this.isMutable() ? this : this.branch();
        for (var i = 0, n = arguments.length; i < n; i += 1) {
            Item.fromAny(arguments[i]).forEach(function (item) {
                record.push(item);
            });
        }
        return record;
    };
    Record.prototype.slice = function (lower, upper) {
        return this.subRecord.apply(this, arguments).branch();
    };
    Record.prototype.attr = function (key, value) {
        this.push(Item.Attr.of.apply(void 0, arguments));
        return this;
    };
    Record.prototype.slot = function (key, value) {
        this.push(Item.Slot.of.apply(void 0, arguments));
        return this;
    };
    Record.prototype.item = function (item) {
        this.push(item);
        return this;
    };
    Record.prototype.items = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        this.push.apply(this, arguments);
        return this;
    };
    Record.prototype.evaluate = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var scope = Record.create();
        interpreter.pushScope(scope);
        var changed = false;
        this.forEach(function (oldItem) {
            var newItem = oldItem.evaluate(interpreter);
            if (newItem.isDefined()) {
                scope.push(newItem);
            }
            if (oldItem !== newItem) {
                changed = true;
            }
        }, this);
        interpreter.popScope();
        return changed ? scope : this;
    };
    Record.prototype.substitute = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var scope = Record.create();
        interpreter.pushScope(scope);
        var changed = false;
        this.forEach(function (oldItem) {
            var newItem = oldItem.substitute(interpreter);
            if (newItem.isDefined()) {
                scope.push(newItem);
            }
            if (oldItem !== newItem) {
                changed = true;
            }
        }, this);
        interpreter.popScope();
        return changed ? scope : this;
    };
    Record.prototype.stringValue = function (orElse) {
        var recordString = "";
        var defined = this.forEach(function (item) {
            if (item instanceof Value) {
                var itemString = item.stringValue();
                if (itemString !== void 0) {
                    recordString += itemString;
                    return;
                }
            }
            return null;
        }, this) === void 0;
        return defined ? recordString : void 0;
    };
    Record.prototype.toAny = function () {
        if (!this.isEmpty() && this.isArray()) {
            return this.toArray();
        }
        else {
            return this.toObject();
        }
    };
    Record.prototype.toArray = function () {
        var array = new Array(this.length);
        this.forEach(function (item, index) {
            if (item instanceof Value) {
                array[index] = item.toAny();
            }
            else if (item instanceof Item.Field) {
                array[index] = {
                    $key: item.key.toAny(),
                    $value: item.value.toAny(),
                };
            }
        }, this);
        return array;
    };
    Record.prototype.toObject = function () {
        var object = {};
        this.forEach(function (item, index) {
            if (item instanceof Item.Attr) {
                object["@" + item.key.value] = item.value.toAny();
            }
            else if (item instanceof Item.Slot) {
                if (item.key instanceof Value.Text) {
                    object[item.key.value] = item.value.toAny();
                }
                else {
                    object["$" + index] = {
                        $key: item.key.toAny(),
                        $value: item.value.toAny(),
                    };
                }
            }
            else if (item instanceof Value) {
                object["$" + index] = item.toAny();
            }
        }, this);
        return object;
    };
    Record.prototype.isAliased = function () {
        return false;
    };
    Record.prototype.isMutable = function () {
        return true;
    };
    Record.prototype.alias = function () {
    };
    Record.prototype.branch = function () {
        var branch = Record.create();
        this.forEach(function (item) {
            branch.push(item);
        }, this);
        return branch;
    };
    Record.prototype.clone = function () {
        var clone = Record.create();
        this.forEach(function (item) {
            clone.push(item.clone());
        }, this);
        return clone;
    };
    Record.prototype.commit = function () {
        return this;
    };
    Record.prototype.bind = function () {
        return this;
    };
    Record.prototype.subRecord = function (lower, upper) {
        var n = this.length;
        if (lower === void 0) {
            lower = 0;
        }
        else if (lower < 0) {
            lower = n + lower;
        }
        lower = Math.min(Math.max(0, lower), n);
        if (upper === void 0) {
            upper = n;
        }
        else if (upper < 0) {
            upper = n + upper;
        }
        var record = Value.Record.create();
        this.forEach(function (item, index) {
            if (index < lower) {
                return;
            }
            else if (index < upper) {
                record.push(item);
                return;
            }
            else {
                return null;
            }
        }, this);
        return record;
    };
    Record.prototype.iterator = function () {
        return new RecordCursor(this);
    };
    Record.prototype.typeOrder = function () {
        return 3;
    };
    Record.prototype.compareTo = function (that) {
        if (that instanceof Record) {
            var xs = this.iterator();
            var ys = that.iterator();
            var order = 0;
            do {
                if (!xs.isEmpty() && !ys.isEmpty()) {
                    order = xs.head().compareTo(ys.head());
                    xs.step();
                    ys.step();
                }
                else {
                    break;
                }
            } while (order === 0);
            if (order !== 0) {
                return order;
            }
            else if (xs.isEmpty() && !ys.isEmpty()) {
                return -1;
            }
            else if (!xs.isEmpty() && ys.isEmpty()) {
                return 1;
            }
            else {
                return 0;
            }
        }
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    Record.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Record) {
            var xs = this.iterator();
            var ys = that.iterator();
            while (!xs.isEmpty() && !ys.isEmpty()) {
                if (!xs.head().equals(ys.head())) {
                    return false;
                }
                xs.step();
                ys.step();
            }
            return xs.isEmpty() && ys.isEmpty();
        }
        return false;
    };
    Record.prototype.hashCode = function () {
        if (this._hashCode === void 0) {
            if (Record._hashSeed === void 0) {
                Record._hashSeed = Murmur3.seed(Record);
            }
            var code_1 = Record._hashSeed;
            this.forEach(function (item) {
                code_1 = Murmur3.mix(code_1, item.hashCode());
            }, this);
            this._hashCode = Murmur3.mash(code_1);
        }
        return this._hashCode;
    };
    Record.prototype.debug = function (output) {
        output = output.write("Record").write(46);
        if (this.isEmpty()) {
            output = output.write("empty").write(40).write(41);
        }
        else {
            output = output.write("of").write(40);
            this.forEach(function (item, index) {
                if (index !== 0) {
                    output = output.write(44).write(32);
                }
                output.display(item);
            }, this);
            output = output.write(41);
        }
    };
    Record.prototype.display = function (output) {
        this.debug(output);
    };
    Record.empty = function () {
        return Record.RecordMap.empty();
    };
    Record.create = function (initialCapacity) {
        return Record.RecordMap.create(initialCapacity);
    };
    Record.of = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        return Record.RecordMap.of.apply(void 0, arguments);
    };
    Record.fromAny = function (value) {
        if (value instanceof Record) {
            return value;
        }
        else if (Array.isArray(value)) {
            return Record.fromArray(value);
        }
        else if (value && typeof value === "object") {
            return Record.fromObject(value);
        }
        else {
            throw new TypeError("" + value);
        }
    };
    Record.fromArray = function (array) {
        var n = array.length || 0;
        var record = Record.create(n);
        for (var i = 0; i < n; i += 1) {
            record.push(Item.fromAny(array[i]));
        }
        return record;
    };
    Record.fromObject = function (object) {
        var record = Record.create();
        for (var key in object) {
            var value = object[key];
            if (key.charCodeAt(0) === 36) {
                if (!value || typeof value !== "object" || !value.hasOwnProperty("$key")) {
                    record.push(Value.fromAny(value));
                }
                else {
                    record.push(Item.Field.of(value.$key, value.$value));
                }
            }
            else {
                record.push(Item.Field.of(key, value));
            }
        }
        return record;
    };
    Record.expand = function (n) {
        n = Math.max(8, n) - 1;
        n |= n >> 1;
        n |= n >> 2;
        n |= n >> 4;
        n |= n >> 8;
        n |= n >> 16;
        return n + 1;
    };
    Record.ALIASED = 1;
    Record.IMMUTABLE = 2;
    return Record;
}(Value));
export { Record };
Item.Record = Record;
//# sourceMappingURL=Record.js.map