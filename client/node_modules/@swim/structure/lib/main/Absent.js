import { __extends } from "tslib";
import { Murmur3, Objects, Cursor } from "@swim/util";
import { Item } from "./Item";
import { Value } from "./Value";
var Absent = (function (_super) {
    __extends(Absent, _super);
    function Absent() {
        return _super.call(this) || this;
    }
    Absent.prototype.isDefined = function () {
        return false;
    };
    Absent.prototype.isDistinct = function () {
        return false;
    };
    Absent.prototype.isConstant = function () {
        return true;
    };
    Absent.prototype.unflattened = function () {
        return Value.Record.empty();
    };
    Absent.prototype.updated = function (key, value) {
        return Value.Record.of(Item.Slot.of(key, value));
    };
    Absent.prototype.updatedAttr = function (key, value) {
        return Value.Record.of(Item.Attr.of(key, value));
    };
    Absent.prototype.updatedSlot = function (key, value) {
        return Value.Record.of(Item.Slot.of(key, value));
    };
    Absent.prototype.appended = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        return Value.Record.of(items);
    };
    Absent.prototype.prepended = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        return Value.Record.of(items);
    };
    Absent.prototype.concat = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var record = Value.Record.create();
        for (var i = 0, n = arguments.length; i < n; i += 1) {
            Item.fromAny(arguments[i]).forEach(function (item) {
                record.push(item);
            });
        }
        return record;
    };
    Absent.prototype.cond = function (thenTerm, elseTerm) {
        return Item.fromAny(elseTerm);
    };
    Absent.prototype.or = function (that) {
        return Item.fromAny(that);
    };
    Absent.prototype.and = function (that) {
        return this;
    };
    Absent.prototype.not = function () {
        return Value.extant();
    };
    Absent.prototype.booleanValue = function (orElse) {
        return false;
    };
    Absent.prototype.toAny = function () {
        return void 0;
    };
    Absent.prototype.forEach = function (callback, thisArg) {
        return void 0;
    };
    Absent.prototype.iterator = function () {
        return Cursor.empty();
    };
    Absent.prototype.typeOrder = function () {
        return 99;
    };
    Absent.prototype.compareTo = function (that) {
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    Absent.prototype.equals = function (that) {
        return this === that;
    };
    Absent.prototype.hashCode = function () {
        if (Absent._hashSeed === void 0) {
            Absent._hashSeed = Murmur3.seed(Absent);
        }
        return Absent._hashSeed;
    };
    Absent.prototype.debug = function (output) {
        output = output.write("Value").write(46).write("absent").write(40).write(41);
    };
    Absent.prototype.display = function (output) {
        output = output.write("undefined");
    };
    Absent.absent = function () {
        return Absent._absent;
    };
    Absent.fromAny = function (value) {
        if (value instanceof Absent) {
            return value;
        }
        else if (value === void 0) {
            return Absent.absent();
        }
        else {
            throw new TypeError("" + value);
        }
    };
    Absent._absent = new Absent();
    return Absent;
}(Value));
export { Absent };
Item.Absent = Absent;
//# sourceMappingURL=Absent.js.map