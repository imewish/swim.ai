import { Output } from "@swim/codec";
import { Item } from "./Item";
import { Value } from "./Value";
import { Record } from "./Record";
export declare type AnyExtant = Extant | null;
export declare class Extant extends Value {
    private constructor();
    isDefined(): boolean;
    isDistinct(): boolean;
    isConstant(): boolean;
    unflattened(): Record;
    not(): Value;
    stringValue(): string;
    stringValue<T>(orElse: T): string;
    booleanValue(): boolean;
    booleanValue<T>(orElse: T): boolean;
    toAny(): AnyExtant;
    typeOrder(): number;
    compareTo(that: Item): 0 | 1 | -1;
    equals(that: unknown): boolean;
    hashCode(): number;
    debug(output: Output): void;
    display(output: Output): void;
    private static readonly _extant;
    private static _hashSeed?;
    static extant(): Extant;
    static fromAny(value: AnyExtant): Extant;
}
//# sourceMappingURL=Extant.d.ts.map