import { Cursor } from "@swim/util";
import { Format } from "@swim/codec";
var Item = (function () {
    function Item() {
    }
    Item.prototype.updated = function (key, value) {
        var record = Item.Record.create(2);
        record.push(this);
        record.set(key, value);
        return record;
    };
    Item.prototype.updatedAttr = function (key, value) {
        var record = Item.Record.create(2);
        record.push(this);
        record.setAttr(key, value);
        return record;
    };
    Item.prototype.updatedSlot = function (key, value) {
        var record = Item.Record.create(2);
        record.push(this);
        record.setSlot(key, value);
        return record;
    };
    Item.prototype.appended = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var record = Item.Record.create(1 + arguments.length);
        record.push(this);
        record.push.apply(record, arguments);
        return record;
    };
    Item.prototype.prepended = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var record = Item.Record.create(arguments.length + 1);
        record.push.apply(record, arguments);
        record.push(this);
        return record;
    };
    Item.prototype.concat = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var record = Item.Record.create();
        record.push(this);
        for (var i = 0, n = arguments.length; i < n; i += 1) {
            Item.fromAny(arguments[i]).forEach(function (item) {
                record.push(item);
            });
        }
        return record;
    };
    Item.prototype.lt = function (that) {
        that = Item.fromAny(that);
        return this.compareTo(that) < 0 ? Item.Bool.from(true) : Item.absent();
    };
    Item.prototype.le = function (that) {
        that = Item.fromAny(that);
        return this.compareTo(that) <= 0 ? Item.Bool.from(true) : Item.absent();
    };
    Item.prototype.eq = function (that) {
        that = Item.fromAny(that);
        return this.equals(that) ? Item.Bool.from(true) : Item.absent();
    };
    Item.prototype.ne = function (that) {
        that = Item.fromAny(that);
        return !this.equals(that) ? Item.Bool.from(true) : Item.absent();
    };
    Item.prototype.ge = function (that) {
        that = Item.fromAny(that);
        return this.compareTo(that) >= 0 ? Item.Bool.from(true) : Item.absent();
    };
    Item.prototype.gt = function (that) {
        that = Item.fromAny(that);
        return this.compareTo(that) > 0 ? Item.Bool.from(true) : Item.absent();
    };
    Item.prototype.invoke = function (args) {
        return Item.absent();
    };
    Item.prototype.filter = function (predicate) {
        var selector = Item.Selector.literal(this);
        return selector.filter.apply(selector, arguments);
    };
    Item.prototype.max = function (that) {
        return this.compareTo(that) >= 0 ? this : that;
    };
    Item.prototype.min = function (that) {
        return this.compareTo(that) <= 0 ? this : that;
    };
    Item.prototype.evaluate = function (interpreter) {
        return this;
    };
    Item.prototype.substitute = function (interpreter) {
        return this;
    };
    Item.prototype.cast = function (form, orElse) {
        var object = form.cast(this);
        if (object === void 0) {
            object = orElse;
        }
        return object;
    };
    Item.prototype.coerce = function (form, orElse) {
        var object = form.cast(this);
        if (object === void 0) {
            object = form.unit();
        }
        if (object === void 0) {
            object = orElse;
        }
        return object;
    };
    Item.prototype.precedence = function () {
        return 11;
    };
    Item.prototype.forEach = function (callback, thisArg) {
        return callback.call(thisArg, this, 0);
    };
    Item.prototype.iterator = function () {
        return Cursor.unary(this);
    };
    Item.prototype.display = function (output) {
        this.debug(output);
    };
    Item.prototype.toString = function () {
        return Format.debug(this);
    };
    Item.empty = function () {
        return Item.Record.empty();
    };
    Item.extant = function () {
        return Item.Extant.extant();
    };
    Item.absent = function () {
        return Item.Absent.absent();
    };
    Item.fromAny = function (item) {
        if (item instanceof Item) {
            return item;
        }
        else {
            return Item.Value.fromAny(item);
        }
    };
    Item.globalScope = function () {
        if (!Item._globalScope) {
            Item._globalScope = Item.Record.create(1)
                .slot("math", Item.MathModule.scope())
                .commit();
        }
        return Item._globalScope;
    };
    return Item;
}());
export { Item };
//# sourceMappingURL=Item.js.map