import { __extends, __spreadArrays } from "tslib";
import { Item } from "./Item";
import { Value } from "./Value";
import { Record } from "./Record";
import { RecordMap } from "./RecordMap";
var RecordMapView = (function (_super) {
    __extends(RecordMapView, _super);
    function RecordMapView(record, lower, upper) {
        var _this = _super.call(this) || this;
        _this._record = record;
        _this._lower = lower;
        _this._upper = upper;
        return _this;
    }
    RecordMapView.prototype.isEmpty = function () {
        return this._lower === this._upper;
    };
    RecordMapView.prototype.isArray = function () {
        var array = this._record._array;
        for (var i = this._lower, n = this._upper; i < n; i += 1) {
            if (array[i] instanceof Item.Field) {
                return false;
            }
        }
        return true;
    };
    RecordMapView.prototype.isObject = function () {
        var array = this._record._array;
        for (var i = this._lower, n = this._upper; i < n; i += 1) {
            if (array[i] instanceof Value) {
                return false;
            }
        }
        return true;
    };
    Object.defineProperty(RecordMapView.prototype, "length", {
        get: function () {
            return this._upper - this._lower;
        },
        enumerable: true,
        configurable: true
    });
    RecordMapView.prototype.fieldCount = function () {
        var array = this._record._array;
        var k = 0;
        for (var i = this._lower, n = this._upper; i < n; i += 1) {
            if (array[i] instanceof Item.Field) {
                k += 1;
            }
        }
        return k;
    };
    RecordMapView.prototype.valueCount = function () {
        var k = 0;
        var array = this._record._array;
        for (var i = this._lower, n = this._upper; i < n; i += 1) {
            if (array[i] instanceof Value) {
                k += 1;
            }
        }
        return k;
    };
    RecordMapView.prototype.isConstant = function () {
        var array = this._record._array;
        for (var i = this._lower, n = this._upper; i < n; i += 1) {
            if (!array[i].isConstant()) {
                return false;
            }
        }
        return true;
    };
    RecordMapView.prototype.tag = function () {
        if (this.length > 0) {
            var item = this._record._array[this._lower];
            if (item instanceof Item.Attr) {
                return item.key.value;
            }
        }
        return void 0;
    };
    RecordMapView.prototype.target = function () {
        var value;
        var record;
        var modified = false;
        var array = this._record._array;
        for (var i = this._lower, n = this._upper; i < n; i += 1) {
            var item = array[i];
            if (item instanceof Item.Attr) {
                modified = true;
            }
            else if (value === void 0 && item instanceof Value) {
                value = item;
            }
            else {
                if (record === void 0) {
                    record = Record.create();
                    if (value !== void 0) {
                        record.push(value);
                    }
                }
                record.push(item);
            }
        }
        if (value === void 0) {
            return Value.extant();
        }
        else if (record === void 0) {
            return value;
        }
        else if (modified) {
            return record;
        }
        else {
            return this;
        }
    };
    RecordMapView.prototype.head = function () {
        if (this.length > 0) {
            return this._record._array[this._lower];
        }
        else {
            return Item.absent();
        }
    };
    RecordMapView.prototype.tail = function () {
        if (this.length > 0) {
            return new RecordMapView(this._record, this._lower + 1, this._upper);
        }
        else {
            return Record.empty();
        }
    };
    RecordMapView.prototype.body = function () {
        var n = this.length;
        if (n > 2) {
            return new RecordMapView(this._record, this._lower + 1, this._upper).branch();
        }
        else if (n === 2) {
            var item = this._record._array[this._lower + 1];
            if (item instanceof Value) {
                return item;
            }
            else {
                return Record.of(item);
            }
        }
        else {
            return Value.absent();
        }
    };
    RecordMapView.prototype.indexOf = function (item, index) {
        if (index === void 0) { index = 0; }
        item = Item.fromAny(item);
        var array = this._record._array;
        var n = this.length;
        if (index < 0) {
            index = Math.max(0, n + index);
        }
        index = this._lower + index;
        while (index < this._upper) {
            if (item.equals(array[index])) {
                return index - this._lower;
            }
            index += 1;
        }
        return -1;
    };
    RecordMapView.prototype.lastIndexOf = function (item, index) {
        item = Item.fromAny(item);
        var array = this._record._array;
        var n = this.length;
        if (index === void 0) {
            index = n - 1;
        }
        else if (index < 0) {
            index = n + index;
        }
        index = this._lower + Math.min(index, n - 1);
        while (index >= this._lower) {
            if (item.equals(array[index])) {
                return index - this._lower;
            }
            index -= 1;
        }
        return -1;
    };
    RecordMapView.prototype.getItem = function (index) {
        if (index instanceof Item.Num) {
            index = index.value;
        }
        var n = this.length;
        if (index < 0) {
            index = n + index;
        }
        if (index >= 0 && index < n) {
            return this._record._array[this._lower + index];
        }
        else {
            return Item.absent();
        }
    };
    RecordMapView.prototype.setItem = function (index, newItem) {
        if ((this._record._flags & Record.IMMUTABLE) !== 0) {
            throw new Error("immutable");
        }
        newItem = Item.fromAny(newItem);
        var n = this.length;
        if (index < 0) {
            index = n + index;
        }
        if (index < 0 || index > n) {
            throw new RangeError("" + index);
        }
        if ((this._record._flags & Record.ALIASED) !== 0) {
            this.setItemAliased(index, newItem);
        }
        else {
            this.setItemMutable(index, newItem);
        }
        return this;
    };
    RecordMapView.prototype.setItemAliased = function (index, newItem) {
        var n = this._record._itemCount;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(n));
        for (var i = 0; i < n; i += 1) {
            newArray[i] = oldArray[i];
        }
        var oldItem = oldArray[this._lower + index];
        newArray[this._lower + index] = newItem;
        this._record._array = newArray;
        this._record._table = null;
        if (newItem instanceof Item.Field) {
            if (!(oldItem instanceof Item.Field)) {
                this._record._fieldCount += 1;
            }
        }
        else if (oldItem instanceof Item.Field) {
            this._record._fieldCount -= 1;
        }
        this._record._flags &= ~Record.ALIASED;
    };
    RecordMapView.prototype.setItemMutable = function (index, newItem) {
        var array = this._record._array;
        var oldItem = array[this._lower + index];
        array[this._lower + index] = newItem;
        if (newItem instanceof Item.Field) {
            this._record._table = null;
            if (!(oldItem instanceof Item.Field)) {
                this._record._fieldCount += 1;
            }
        }
        else if (oldItem instanceof Item.Field) {
            this._record._table = null;
            this._record._fieldCount -= 1;
        }
    };
    RecordMapView.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        if ((this._record._flags & Record.IMMUTABLE) !== 0) {
            throw new Error("immutable");
        }
        if ((this._record._flags & Record.ALIASED) !== 0) {
            this.pushAliased.apply(this, arguments);
        }
        else {
            this.pushMutable.apply(this, arguments);
        }
        return this.length;
    };
    RecordMapView.prototype.pushAliased = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var k = newItems.length;
        var m = this._record._itemCount;
        var n = this._record._fieldCount;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(m + k));
        if (oldArray !== null) {
            for (var i = 0; i < this._upper; i += 1) {
                newArray[i] = oldArray[i];
            }
            for (var i = this._upper; i < m; i += 1) {
                newArray[i + k] = oldArray[i];
            }
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.fromAny(newItems[i]);
            newArray[i + this._upper] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
            }
        }
        this._record._array = newArray;
        this._record._table = null;
        this._record._itemCount = m;
        this._record._fieldCount = n;
        this._record._flags &= ~Record.ALIASED;
        this._upper += k;
    };
    RecordMapView.prototype.pushMutable = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var k = newItems.length;
        var m = this._record._itemCount;
        var n = this._record._fieldCount;
        var oldArray = this._record._array;
        var newArray;
        if (oldArray === null || m + k > oldArray.length) {
            newArray = new Array(Record.expand(m + k));
            if (oldArray !== null) {
                for (var i = 0; i < this._upper; i += 1) {
                    newArray[i] = oldArray[i];
                }
            }
        }
        else {
            newArray = oldArray;
        }
        for (var i = m - 1; i >= this._upper; i -= 1) {
            newArray[i + k] = oldArray[i];
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.fromAny(newItems[i]);
            newArray[i + this._upper] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
                this._record._table = null;
            }
        }
        this._record._array = newArray;
        this._record._itemCount = m;
        this._record._fieldCount = n;
        this._upper += k;
    };
    RecordMapView.prototype.splice = function (start, deleteCount) {
        var _a, _b;
        if (deleteCount === void 0) { deleteCount = 0; }
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        if ((this._record._flags & Record.IMMUTABLE) !== 0) {
            throw new Error("immutable");
        }
        var n = this.length;
        if (start < 0) {
            start = n + start;
        }
        start = Math.min(Math.max(0, start), n);
        deleteCount = Math.min(Math.max(0, deleteCount), n - start);
        var deleted;
        if ((this._record._flags & Record.ALIASED) !== 0) {
            deleted = (_a = this._record).spliceAliased.apply(_a, __spreadArrays([this._lower + start, deleteCount], newItems));
        }
        else {
            deleted = (_b = this._record).spliceMutable.apply(_b, __spreadArrays([this._lower + start, deleteCount], newItems));
        }
        this._upper += newItems.length - deleted.length;
        return deleted;
    };
    RecordMapView.prototype.delete = function (key) {
        if ((this._record._flags & Record.IMMUTABLE) !== 0) {
            throw new Error("immutable");
        }
        key = Value.fromAny(key);
        if ((this._record._flags & Record.ALIASED) !== 0) {
            return this.deleteAliased(key);
        }
        else {
            return this.deleteMutable(key);
        }
    };
    RecordMapView.prototype.deleteAliased = function (key) {
        var n = this._record._itemCount;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(n));
        for (var i = this._lower; i < this._upper; i += 1) {
            var item = oldArray[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                for (var j = i + 1; j < n; j += 1, i += 1) {
                    newArray[i] = oldArray[j];
                }
                this._record._array = newArray;
                this._record._table = null;
                this._record._itemCount = n - 1;
                this._record._fieldCount -= 1;
                this._record._flags &= ~Record.ALIASED;
                this._upper -= 1;
                return item;
            }
            newArray[i] = item;
        }
        return Item.absent();
    };
    RecordMapView.prototype.deleteMutable = function (key) {
        var n = this._record._itemCount;
        var array = this._record._array;
        for (var i = this._lower; i < this._upper; i += 1) {
            var item = array[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                for (var j = i + 1; j < n; j += 1, i += 1) {
                    array[i] = array[j];
                }
                array[n - 1] = void 0;
                this._record._table = null;
                this._record._itemCount -= 1;
                this._record._fieldCount -= 1;
                this._upper -= 1;
                return item;
            }
        }
        return Item.absent();
    };
    RecordMapView.prototype.clear = function () {
        if ((this._record._flags & Record.IMMUTABLE) !== 0) {
            throw new Error("immutable");
        }
        if ((this._record._flags & Record.ALIASED) !== 0) {
            this.clearAliased();
        }
        else {
            this.clearMutable();
        }
    };
    RecordMapView.prototype.clearAliased = function () {
        var m = this._record._itemCount;
        var n = this._record._fieldCount;
        var l = m - this.length;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(l));
        var i = 0;
        while (i < this._lower) {
            newArray[i] = oldArray[i];
            i += 1;
        }
        while (i < this._upper) {
            if (oldArray[i] instanceof Item.Field) {
                n -= 1;
            }
            i += 1;
        }
        i = this._lower;
        var j = this._upper;
        while (j < m) {
            newArray[i] = oldArray[j];
            i += 1;
            j += 1;
        }
        this._record._array = newArray;
        this._record._table = null;
        this._record._itemCount = l;
        this._record._fieldCount = n;
        this._record._flags &= ~Record.ALIASED;
        this._upper = this._lower;
    };
    RecordMapView.prototype.clearMutable = function () {
        var m = this._record._itemCount;
        var n = this._record._fieldCount;
        var array = this._record._array;
        var i = this._lower;
        while (i < this._upper) {
            if (array[i] instanceof Item.Field) {
                n -= 1;
            }
            i += 1;
        }
        i = this._lower;
        var j = this._upper;
        while (j < m) {
            var item = array[j];
            if (item instanceof Item.Field) {
                this._record._table = null;
            }
            array[i] = item;
            i += 1;
            j += 1;
        }
        this._record._itemCount = i;
        this._record._fieldCount = n;
        while (i < m) {
            array[i] = void 0;
            i += 1;
        }
        this._upper = this._lower;
    };
    RecordMapView.prototype.isAliased = function () {
        return (this._record._flags & Record.ALIASED) !== 0;
    };
    RecordMapView.prototype.isMutable = function () {
        return (this._record._flags & Record.IMMUTABLE) === 0;
    };
    RecordMapView.prototype.alias = function () {
        this._record._flags |= Record.ALIASED;
    };
    RecordMapView.prototype.branch = function () {
        var m = this.length;
        var n = 0;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(m));
        var i = this._lower;
        var j = 0;
        while (j < m) {
            var item = oldArray[i];
            newArray[j] = item;
            if (item instanceof Item.Field) {
                n += 1;
            }
            i += 1;
            j += 1;
        }
        return new RecordMap(newArray, null, m, n, 0);
    };
    RecordMapView.prototype.clone = function () {
        var m = this.length;
        var n = 0;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(m));
        var i = this._lower;
        var j = 0;
        while (j < m) {
            var item = oldArray[i];
            newArray[j] = item.clone();
            if (item instanceof Item.Field) {
                n += 1;
            }
            i += 1;
            j += 1;
        }
        return new RecordMap(newArray, null, m, n, 0);
    };
    RecordMapView.prototype.commit = function () {
        this._record.commit();
        return this;
    };
    RecordMapView.prototype.subRecord = function (lower, upper) {
        var n = this.length;
        if (lower === void 0) {
            lower = 0;
        }
        else if (lower < 0) {
            lower = n + lower;
        }
        if (upper === void 0) {
            upper = n;
        }
        else if (upper < 0) {
            upper = n + upper;
        }
        if (lower < 0 || upper > n || lower > upper) {
            throw new RangeError(lower + ", " + upper);
        }
        return new RecordMapView(this._record, this._lower + lower, this._upper + upper);
    };
    RecordMapView.prototype.forEach = function (callback, thisArg) {
        var array = this._record._array;
        for (var i = this._lower, n = this._upper; i < n; i += 1) {
            var result = callback.call(thisArg, array[i], i);
            if (result !== void 0) {
                return result;
            }
        }
        return;
    };
    return RecordMapView;
}(Record));
export { RecordMapView };
Item.RecordMapView = RecordMapView;
//# sourceMappingURL=RecordMapView.js.map