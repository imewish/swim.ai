import { __extends } from "tslib";
import { Cursor } from "@swim/util";
var RecordCursor = (function (_super) {
    __extends(RecordCursor, _super);
    function RecordCursor(record, lower, upper, index) {
        if (lower === void 0) { lower = 0; }
        if (upper === void 0) { upper = record.length; }
        if (index === void 0) { index = lower; }
        var _this = _super.call(this) || this;
        _this._record = record;
        _this._lower = lower;
        _this._upper = upper;
        _this._index = index;
        _this._direction = 0;
        return _this;
    }
    RecordCursor.prototype.isEmpty = function () {
        return this._index >= this._upper;
    };
    RecordCursor.prototype.head = function () {
        this._direction = 0;
        if (this._index < this._upper) {
            return this._record.getItem(this._index);
        }
        else {
            throw new Error("empty");
        }
    };
    RecordCursor.prototype.step = function () {
        this._direction = 0;
        if (this._index < this._upper) {
            this._index += 1;
        }
        else {
            throw new Error("empty");
        }
    };
    RecordCursor.prototype.skip = function (count) {
        this._index = Math.min(Math.max(this._lower, this._index + count, this._upper));
    };
    RecordCursor.prototype.hasNext = function () {
        return this._index < this._upper;
    };
    RecordCursor.prototype.nextIndex = function () {
        return this._index - this._lower;
    };
    RecordCursor.prototype.next = function () {
        this._direction = 1;
        var index = this._index;
        if (index < this._upper) {
            this._index = index + 1;
            return { value: this._record.getItem(index), done: this._index === this._upper };
        }
        else {
            this._index = this._upper;
            return { done: true };
        }
    };
    RecordCursor.prototype.hasPrevious = function () {
        return this._index > this._lower;
    };
    RecordCursor.prototype.previousIndex = function () {
        return this._index - this._lower - 1;
    };
    RecordCursor.prototype.previous = function () {
        this._direction = -1;
        var index = this._index - 1;
        if (index >= this._lower) {
            this._index = index;
            return { value: this._record.getItem(index), done: index === this._lower };
        }
        else {
            this._index = 0;
            return { done: true };
        }
    };
    RecordCursor.prototype.set = function (newItem) {
        if (this._direction > 0) {
            this._record.setItem(this._index - 1, newItem);
        }
        else {
            this._record.setItem(this._index, newItem);
        }
    };
    RecordCursor.prototype.delete = function () {
        if (this._direction > 0) {
            this._index -= 1;
        }
        this._record.splice(this._index, 1);
        this._direction = 0;
    };
    return RecordCursor;
}(Cursor));
export { RecordCursor };
//# sourceMappingURL=RecordCursor.js.map