import { Output } from "@swim/codec";
import { AnyItem, Item } from "./Item";
import { AnyValue, Value } from "./Value";
export declare type AnyBool = Bool | boolean;
export declare class Bool extends Value {
    readonly _value: boolean;
    _hashCode?: number;
    private constructor();
    isConstant(): boolean;
    get value(): boolean;
    stringValue(): string;
    stringValue<T>(orElse: T): string;
    booleanValue(): boolean;
    booleanValue<T>(orElse: T): boolean;
    toAny(): AnyBool;
    valueOf(): boolean;
    conditional(thenTerm: AnyValue, elseTerm: AnyValue): Value;
    conditional(thenTerm: AnyItem, elseTerm: AnyItem): Item;
    or(that: AnyValue): Value;
    or(that: AnyItem): Item;
    and(that: AnyValue): Value;
    and(that: AnyItem): Item;
    not(): Value;
    typeOrder(): number;
    compareTo(that: Item): 0 | 1 | -1;
    equals(that: unknown): boolean;
    hashCode(): number;
    debug(output: Output): void;
    display(output: Output): void;
    private static readonly True;
    private static readonly False;
    static from(value: boolean): Bool;
    static fromAny(value: AnyBool): Bool;
}
//# sourceMappingURL=Bool.d.ts.map