import { HashGenCacheSet } from "@swim/util";
import { OutputSettings, Output } from "@swim/codec";
import { AnyItem, Item } from "./Item";
import { AnyValue, Value } from "./Value";
export declare type AnyText = Text | string;
export declare class Text extends Value {
    readonly _value: string;
    _hashCode?: number;
    private constructor();
    isConstant(): boolean;
    get value(): string;
    get size(): number;
    stringValue(): string;
    stringValue<T>(orElse: T): string;
    numberValue(): number | undefined;
    numberValue<T>(orElse: T): number | T;
    booleanValue(): boolean | undefined;
    booleanValue<T>(orElse: T): boolean | T;
    toAny(): AnyText;
    valueOf(): string;
    plus(that: AnyValue): Value;
    plus(that: AnyItem): Item;
    branch(): Text;
    clone(): Text;
    commit(): this;
    typeOrder(): number;
    compareTo(that: Item): 0 | 1 | -1;
    equals(that: unknown): boolean;
    hashCode(): number;
    debug(output: Output): void;
    display(output: Output): void;
    toString(): string;
    private static _empty?;
    private static _cache?;
    static output(settings?: OutputSettings): Output<Text>;
    static empty(): Text;
    static from(value: string): Text;
    static fromAny(value: AnyText): Text;
    static cache(): HashGenCacheSet<Text>;
}
//# sourceMappingURL=Text.d.ts.map