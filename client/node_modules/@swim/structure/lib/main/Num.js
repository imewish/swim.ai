import { __extends } from "tslib";
import { Murmur3, Objects, HashGenCacheSet } from "@swim/util";
import { Format } from "@swim/codec";
import { Item } from "./Item";
import { Value } from "./Value";
var Num = (function (_super) {
    __extends(Num, _super);
    function Num(value, flags) {
        if (flags === void 0) { flags = 0; }
        var _this = _super.call(this) || this;
        _this._value = value;
        _this._flags = flags;
        return _this;
    }
    Num.prototype.isConstant = function () {
        return true;
    };
    Object.defineProperty(Num.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Num.prototype.isNaN = function () {
        return isNaN(this._value);
    };
    Num.prototype.isInfinite = function () {
        return !isNaN(this._value) && !isFinite(this._value);
    };
    Num.prototype.isUint32 = function () {
        return (this._flags & Num.UINT32) !== 0;
    };
    Num.prototype.isUint64 = function () {
        return (this._flags & Num.UINT64) !== 0;
    };
    Num.prototype.stringValue = function (orElse) {
        return "" + this._value;
    };
    Num.prototype.numberValue = function (orElse) {
        return this._value;
    };
    Num.prototype.booleanValue = function (orElse) {
        return !!this._value;
    };
    Num.prototype.toAny = function () {
        return this._value;
    };
    Num.prototype.valueOf = function () {
        return this._value;
    };
    Num.prototype.bitwiseOr = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Num) {
            return Num.from((this._value | that._value) >>> 0);
        }
        return _super.prototype.bitwiseOr.call(this, that);
    };
    Num.prototype.bitwiseXor = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Num) {
            return Num.from((this._value ^ that._value) >>> 0);
        }
        return _super.prototype.bitwiseXor.call(this, that);
    };
    Num.prototype.bitwiseAnd = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Num) {
            return Num.from((this._value & that._value) >>> 0);
        }
        return _super.prototype.bitwiseAnd.call(this, that);
    };
    Num.prototype.plus = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Num) {
            return Num.from(this._value + that._value);
        }
        return _super.prototype.plus.call(this, that);
    };
    Num.prototype.minus = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Num) {
            return Num.from(this._value - that._value);
        }
        return _super.prototype.minus.call(this, that);
    };
    Num.prototype.times = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Num) {
            return Num.from(this._value * that._value);
        }
        return _super.prototype.times.call(this, that);
    };
    Num.prototype.divide = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Num) {
            return Num.from(this._value / that._value);
        }
        return _super.prototype.divide.call(this, that);
    };
    Num.prototype.modulo = function (that) {
        that = Item.fromAny(that);
        if (that instanceof Num) {
            return Num.from(this._value % that._value);
        }
        return _super.prototype.modulo.call(this, that);
    };
    Num.prototype.bitwiseNot = function () {
        return Num.from(~this._value >>> 0);
    };
    Num.prototype.negative = function () {
        return Num.from(-this._value);
    };
    Num.prototype.positive = function () {
        return this;
    };
    Num.prototype.inverse = function () {
        return Num.from(1 / this._value);
    };
    Num.prototype.abs = function () {
        return Num.from(Math.abs(this._value));
    };
    Num.prototype.ceil = function () {
        return Num.from(Math.ceil(this._value));
    };
    Num.prototype.floor = function () {
        return Num.from(Math.floor(this._value));
    };
    Num.prototype.round = function () {
        return Num.from(Math.round(this._value));
    };
    Num.prototype.sqrt = function () {
        return Num.from(Math.sqrt(this._value));
    };
    Num.prototype.pow = function (that) {
        that = Num.fromAny(that);
        return Num.from(Math.pow(this._value, that._value));
    };
    Num.prototype.max = function (that) {
        return this.compareTo(that) >= 0 ? this : that;
    };
    Num.prototype.min = function (that) {
        return this.compareTo(that) <= 0 ? this : that;
    };
    Num.prototype.typeOrder = function () {
        return 6;
    };
    Num.prototype.compareTo = function (that) {
        if (that instanceof Num) {
            var x = this._value;
            var y = that._value;
            return x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0;
        }
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    Num.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Num) {
            var x = this._value;
            var y = that._value;
            return x === y || isNaN(x) && isNaN(y);
        }
        return false;
    };
    Num.prototype.hashCode = function () {
        return Murmur3.hash(this._value);
    };
    Num.prototype.debug = function (output) {
        output = output.write("Num").write(46).write("from")
            .write(40).display(this).write(41);
    };
    Num.prototype.display = function (output) {
        Format.displayNumber(this._value, output);
    };
    Num.positiveZero = function () {
        if (Num._positiveZero === void 0) {
            Num._positiveZero = new Num(0);
        }
        return Num._positiveZero;
    };
    Num.negativeZero = function () {
        if (Num._negativeZero === void 0) {
            Num._negativeZero = new Num(-0);
        }
        return Num._negativeZero;
    };
    Num.positiveOne = function () {
        if (Num._positiveOne === void 0) {
            Num._positiveOne = new Num(1);
        }
        return Num._positiveOne;
    };
    Num.negativeOne = function () {
        if (Num._negativeOne === void 0) {
            Num._negativeOne = new Num(-1);
        }
        return Num._negativeOne;
    };
    Num.nan = function () {
        if (Num._nan === void 0) {
            Num._nan = new Num(NaN);
        }
        return Num._nan;
    };
    Num.uint32 = function (value) {
        return new Num(value, Num.UINT32);
    };
    Num.uint64 = function (value) {
        return new Num(value, Num.UINT64);
    };
    Num.from = function (value) {
        if (typeof value === "number") {
            if (value === 0) {
                if (1 / value === -Infinity) {
                    return Num.negativeZero();
                }
                else {
                    return Num.positiveZero();
                }
            }
            else if (value === 1) {
                return Num.positiveOne();
            }
            else if (value === -1) {
                return Num.negativeOne();
            }
            else if (isNaN(value)) {
                return Num.nan();
            }
            else {
                return Num.cache().put(new Num(value));
            }
        }
        else if (typeof value === "string") {
            if (value === "NaN") {
                return Num.nan();
            }
            else {
                var num = +value;
                if (isFinite(num)) {
                    return Num.from(num);
                }
            }
            throw new Error(value);
        }
        throw new TypeError("" + value);
    };
    Num.fromAny = function (value) {
        if (value instanceof Num) {
            return value;
        }
        else if (typeof value === "number") {
            return Num.from(value);
        }
        else {
            throw new TypeError("" + value);
        }
    };
    Num.cache = function () {
        if (Num._cache == null) {
            var cacheSize = 16;
            Num._cache = new HashGenCacheSet(cacheSize);
        }
        return Num._cache;
    };
    Num.TYPE_MASK = 0x3;
    Num.UINT32 = 1;
    Num.UINT64 = 2;
    return Num;
}(Value));
export { Num };
Item.Num = Num;
//# sourceMappingURL=Num.js.map