import { AnyItem, Item } from "./Item";
import { AnyValue, Value } from "./Value";
import { Record } from "./Record";
import { RecordMap } from "./RecordMap";
import { AnyNum } from "./Num";
export declare class RecordMapView extends Record {
    readonly _record: RecordMap;
    _lower: number;
    _upper: number;
    constructor(record: RecordMap, lower: number, upper: number);
    isEmpty(): boolean;
    isArray(): boolean;
    isObject(): boolean;
    get length(): number;
    fieldCount(): number;
    valueCount(): number;
    isConstant(): boolean;
    tag(): string | undefined;
    target(): Value;
    head(): Item;
    tail(): Record;
    body(): Value;
    indexOf(item: AnyItem, index?: number): number;
    lastIndexOf(item: AnyItem, index?: number): number;
    getItem(index: AnyNum): Item;
    setItem(index: number, newItem: AnyItem): this;
    private setItemAliased;
    private setItemMutable;
    push(...newItems: AnyItem[]): number;
    private pushAliased;
    private pushMutable;
    splice(start: number, deleteCount?: number, ...newItems: AnyItem[]): Item[];
    delete(key: AnyValue): Item;
    deleteAliased(key: Value): Item;
    deleteMutable(key: Value): Item;
    clear(): void;
    private clearAliased;
    private clearMutable;
    isAliased(): boolean;
    isMutable(): boolean;
    alias(): void;
    branch(): RecordMap;
    clone(): RecordMap;
    commit(): this;
    subRecord(lower?: number, upper?: number): Record;
    forEach<T, S = unknown>(callback: (this: S, item: Item, index: number) => T | void, thisArg?: S): T | undefined;
}
//# sourceMappingURL=RecordMapView.d.ts.map