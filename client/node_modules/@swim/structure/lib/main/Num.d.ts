import { HashGenCacheSet } from "@swim/util";
import { Output } from "@swim/codec";
import { AnyItem, Item } from "./Item";
import { AnyValue, Value } from "./Value";
export declare type AnyNum = Num | number;
export declare class Num extends Value {
    readonly _value: number;
    readonly _flags: number;
    private constructor();
    isConstant(): boolean;
    get value(): number;
    isNaN(): boolean;
    isInfinite(): boolean;
    isUint32(): boolean;
    isUint64(): boolean;
    stringValue(): string;
    stringValue<T>(orElse: T): string;
    numberValue(): number;
    numberValue<T>(orElse: T): number;
    booleanValue(): boolean;
    booleanValue<T>(orElse: T): boolean;
    toAny(): AnyNum;
    valueOf(): number;
    bitwiseOr(that: AnyValue): Value;
    bitwiseOr(that: AnyItem): Item;
    bitwiseXor(that: AnyValue): Value;
    bitwiseXor(that: AnyItem): Item;
    bitwiseAnd(that: AnyValue): Value;
    bitwiseAnd(that: AnyItem): Item;
    plus(that: AnyValue): Value;
    plus(that: AnyItem): Item;
    minus(that: AnyValue): Value;
    minus(that: AnyItem): Item;
    times(that: AnyValue): Value;
    times(that: AnyItem): Item;
    divide(that: AnyValue): Value;
    divide(that: AnyItem): Item;
    modulo(that: AnyValue): Value;
    modulo(that: AnyItem): Item;
    bitwiseNot(): Value;
    negative(): Value;
    positive(): Value;
    inverse(): Value;
    abs(): Num;
    ceil(): Num;
    floor(): Num;
    round(): Num;
    sqrt(): Num;
    pow(that: AnyNum): Num;
    max(that: Num): Num;
    max(that: Item): Item;
    min(that: Num): Num;
    min(that: Item): Item;
    typeOrder(): number;
    compareTo(that: Item): 0 | 1 | -1;
    equals(that: unknown): boolean;
    hashCode(): number;
    debug(output: Output): void;
    display(output: Output): void;
    static readonly TYPE_MASK = 3;
    static readonly UINT32: number;
    static readonly UINT64: number;
    private static _positiveZero?;
    private static _negativeZero?;
    private static _positiveOne?;
    private static _negativeOne?;
    private static _nan?;
    private static _cache?;
    static positiveZero(): Num;
    static negativeZero(): Num;
    static positiveOne(): Num;
    static negativeOne(): Num;
    static nan(): Num;
    static uint32(value: number): Num;
    static uint64(value: number): Num;
    static from(value: number | string): Num;
    static fromAny(value: AnyNum): Num;
    static cache(): HashGenCacheSet<Num>;
}
//# sourceMappingURL=Num.d.ts.map