import { Cursor } from "@swim/util";
import { Output } from "@swim/codec";
import { AnyItem, Item } from "./Item";
import { AnyValue, Value } from "./Value";
import { Record } from "./Record";
import { AnyText } from "./Text";
export declare type AnyAbsent = Absent | undefined;
export declare class Absent extends Value {
    private constructor();
    isDefined(): boolean;
    isDistinct(): boolean;
    isConstant(): boolean;
    unflattened(): Record;
    updated(key: AnyValue, value: AnyValue): Record;
    updatedAttr(key: AnyText, value: AnyValue): Record;
    updatedSlot(key: AnyValue, value: AnyValue): Record;
    appended(...items: AnyItem[]): Record;
    prepended(...items: AnyItem[]): Record;
    concat(...items: AnyItem[]): Record;
    cond(thenTerm: AnyValue, elseTerm: AnyValue): Value;
    cond(thenTerm: AnyItem, elseTerm: AnyItem): Item;
    or(that: AnyValue): Value;
    or(that: AnyItem): Item;
    and(that: AnyValue): Value;
    and(that: AnyItem): Item;
    not(): Value;
    booleanValue(): boolean;
    booleanValue<T>(orElse: T): boolean;
    toAny(): AnyAbsent;
    forEach<T, S = unknown>(callback: (this: S, item: Item, index: number) => T | void, thisArg?: S): T | undefined;
    iterator(): Cursor<Item>;
    typeOrder(): number;
    compareTo(that: Item): 0 | 1 | -1;
    equals(that: unknown): boolean;
    hashCode(): number;
    debug(output: Output): void;
    display(output: Output): void;
    private static readonly _absent;
    private static _hashSeed?;
    static absent(): Absent;
    static fromAny(value: AnyAbsent): Absent;
}
//# sourceMappingURL=Absent.d.ts.map