import { __extends } from "tslib";
import { Cursor } from "@swim/util";
var ValueEntryCursor = (function (_super) {
    __extends(ValueEntryCursor, _super);
    function ValueEntryCursor(cursor, keyForm, valueForm) {
        var _this = _super.call(this) || this;
        _this._cursor = cursor;
        _this._keyForm = keyForm;
        _this._valueForm = valueForm;
        return _this;
    }
    ValueEntryCursor.prototype.isEmpty = function () {
        return this._cursor.isEmpty();
    };
    ValueEntryCursor.prototype.head = function () {
        var pair = this._cursor.head();
        return [pair[0].coerce(this._keyForm), pair[1].coerce(this._valueForm)];
    };
    ValueEntryCursor.prototype.step = function () {
        this._cursor.step();
    };
    ValueEntryCursor.prototype.skip = function (count) {
        this._cursor.skip(count);
    };
    ValueEntryCursor.prototype.hasNext = function () {
        return this._cursor.hasNext();
    };
    ValueEntryCursor.prototype.nextIndex = function () {
        return this._cursor.nextIndex();
    };
    ValueEntryCursor.prototype.next = function () {
        var _a = this._cursor.next(), value = _a.value, done = _a.done;
        return { value: value && [value[0].coerce(this._keyForm), value[1].coerce(this._valueForm)], done: done };
    };
    ValueEntryCursor.prototype.hasPrevious = function () {
        return this._cursor.hasPrevious();
    };
    ValueEntryCursor.prototype.previousIndex = function () {
        return this._cursor.previousIndex();
    };
    ValueEntryCursor.prototype.previous = function () {
        var _a = this._cursor.next(), value = _a.value, done = _a.done;
        return { value: value && [value[0].coerce(this._keyForm), value[1].coerce(this._valueForm)], done: done };
    };
    ValueEntryCursor.prototype.delete = function () {
        this._cursor.delete();
    };
    return ValueEntryCursor;
}(Cursor));
export { ValueEntryCursor };
//# sourceMappingURL=ValueEntryCursor.js.map