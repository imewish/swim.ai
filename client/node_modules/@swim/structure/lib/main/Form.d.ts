import { AnyItem, Item } from "./Item";
import { AnyValue, Value } from "./Value";
import { TagForm } from "./form/TagForm";
import { UnitForm } from "./form/UnitForm";
import { StringForm } from "./form/StringForm";
import { NumberForm } from "./form/NumberForm";
import { BooleanForm } from "./form/BooleanForm";
import { AnyForm } from "./form/AnyForm";
import { ItemForm } from "./form/ItemForm";
import { ValueForm } from "./form/ValueForm";
export declare abstract class Form<T extends U, U = T> {
    tag(): string | undefined;
    tag(tag: string | undefined): Form<T, U>;
    unit(): T | undefined;
    unit(unit: T | undefined): Form<T, U>;
    abstract mold(object: U, item?: Item): Item;
    abstract cast(item: Item, object?: T): T | undefined;
    static TagForm: typeof TagForm;
    static UnitForm: typeof UnitForm;
    static StringForm: typeof StringForm;
    static NumberForm: typeof NumberForm;
    static BooleanForm: typeof BooleanForm;
    static AnyForm: typeof AnyForm;
    static ItemForm: typeof ItemForm;
    static ValueForm: typeof ValueForm;
    private static _stringForm?;
    private static _numberForm?;
    private static _booleanForm?;
    private static _anyForm?;
    private static _itemForm?;
    private static _valueForm?;
    static forString(): Form<string>;
    static forNumber(): Form<number>;
    static forBoolean(): Form<boolean>;
    static forAny(): Form<AnyItem>;
    static forItem(): Form<Item, AnyItem>;
    static forValue(): Form<Value, AnyValue>;
}
//# sourceMappingURL=Form.d.ts.map