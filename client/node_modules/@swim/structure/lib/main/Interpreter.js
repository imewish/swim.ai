import { InterpreterException } from "./InterpreterException";
import { InterpreterSettings } from "./InterpreterSettings";
import { Item } from "./Item";
var Interpreter = (function () {
    function Interpreter(settings, scopeStack, scopeDepth) {
        if (settings === void 0) { settings = InterpreterSettings.standard(); }
        if (scopeStack === void 0) { scopeStack = null; }
        if (scopeDepth === void 0) { scopeDepth = 0; }
        this._settings = settings;
        this._scopeStack = scopeStack;
        this._scopeDepth = scopeDepth;
    }
    Interpreter.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            this._settings = settings;
            return this;
        }
    };
    Interpreter.prototype.scopeDepth = function () {
        return this._scopeDepth;
    };
    Interpreter.prototype.peekScope = function () {
        var scopeDepth = this._scopeDepth;
        if (scopeDepth <= 0) {
            throw new InterpreterException("scope stack empty");
        }
        return this._scopeStack[scopeDepth - 1];
    };
    Interpreter.prototype.getScope = function (index) {
        if (index < 0 || index >= this._scopeDepth) {
            throw new RangeError("" + index);
        }
        return this._scopeStack[index];
    };
    Interpreter.prototype.pushScope = function (scope) {
        var scopeDepth = this._scopeDepth;
        if (scopeDepth >= this._settings._maxScopeDepth) {
            throw new InterpreterException("scope stack overflow");
        }
        var oldScopeStack = this._scopeStack;
        var newScopeStack;
        if (oldScopeStack === null || scopeDepth + 1 > oldScopeStack.length) {
            newScopeStack = new Array(Interpreter.expand(scopeDepth + 1));
            if (oldScopeStack != null) {
                for (var i = 0; i < scopeDepth; i += 1) {
                    newScopeStack[i] = oldScopeStack[i];
                }
            }
            this._scopeStack = newScopeStack;
        }
        else {
            newScopeStack = oldScopeStack;
        }
        newScopeStack[scopeDepth] = scope;
        this._scopeDepth = scopeDepth + 1;
    };
    Interpreter.prototype.popScope = function () {
        var scopeDepth = this._scopeDepth;
        if (scopeDepth <= 0) {
            throw new InterpreterException("scope stack empty");
        }
        var scopeStack = this._scopeStack;
        var scope = scopeStack[scopeDepth - 1];
        scopeStack[scopeDepth - 1] = void 0;
        this._scopeDepth = scopeDepth - 1;
        return scope;
    };
    Interpreter.prototype.swapScope = function (newScope) {
        var scopeDepth = this._scopeDepth;
        if (scopeDepth <= 0) {
            throw new InterpreterException("scope stack empty");
        }
        var scopeStack = this._scopeStack;
        var oldScope = scopeStack[scopeDepth - 1];
        scopeStack[scopeDepth - 1] = newScope;
        return oldScope;
    };
    Interpreter.prototype.willOperate = function (operator) {
    };
    Interpreter.prototype.didOperate = function (operator, result) {
    };
    Interpreter.prototype.willSelect = function (selector) {
    };
    Interpreter.prototype.didSelect = function (selector, result) {
    };
    Interpreter.prototype.willTransform = function (selector) {
    };
    Interpreter.prototype.didTransform = function (selector, result) {
    };
    Interpreter.of = function () {
        var objects = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            objects[_i] = arguments[_i];
        }
        var n = arguments.length;
        var scopes = new Array(Interpreter.expand(n));
        for (var i = 0; i < n; i += 1) {
            var scope = Item.fromAny(arguments[i]);
            scopes[i] = scope;
        }
        return new Interpreter(InterpreterSettings.standard(), scopes, n);
    };
    Interpreter.fromAny = function (interpreter, globalScope) {
        if (globalScope === void 0) { globalScope = Item.globalScope(); }
        if (!(interpreter instanceof Interpreter)) {
            var scope = interpreter;
            interpreter = new Interpreter();
            if (globalScope) {
                interpreter.pushScope(globalScope);
            }
            if (scope !== void 0) {
                interpreter.pushScope(Item.fromAny(scope));
            }
        }
        return interpreter;
    };
    Interpreter.expand = function (n) {
        n = Math.max(32, n) - 1;
        n |= n >> 1;
        n |= n >> 2;
        n |= n >> 4;
        n |= n >> 8;
        n |= n >> 16;
        return n + 1;
    };
    return Interpreter;
}());
export { Interpreter };
//# sourceMappingURL=Interpreter.js.map