import { __extends } from "tslib";
import { Interpreter } from "./Interpreter";
import { Item } from "./Item";
import { Value } from "./Value";
import { Expression } from "./Expression";
var Selector = (function (_super) {
    __extends(Selector, _super);
    function Selector() {
        return _super.call(this) || this;
    }
    Selector.prototype.isConstant = function () {
        return false;
    };
    Selector.prototype.evaluate = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var selected = Item.Record.create();
        this.forSelected(interpreter, function (interpreter) {
            var scope = interpreter.peekScope();
            if (scope) {
                selected.push(scope);
            }
        }, this);
        return selected.isEmpty() ? Item.absent() : selected.flattened();
    };
    Selector.prototype.get = function (key) {
        key = Value.fromAny(key);
        return this.andThen(new Item.GetSelector(key, Selector.identity()));
    };
    Selector.prototype.getAttr = function (key) {
        key = Item.Text.fromAny(key);
        return this.andThen(new Item.GetAttrSelector(key, Selector.identity()));
    };
    Selector.prototype.getItem = function (index) {
        index = Item.Num.fromAny(index);
        return this.andThen(new Item.GetItemSelector(index, Selector.identity()));
    };
    Selector.prototype.keys = function () {
        return this.andThen(Selector.keys());
    };
    Selector.prototype.values = function () {
        return this.andThen(Selector.values());
    };
    Selector.prototype.children = function () {
        return this.andThen(Selector.children());
    };
    Selector.prototype.descendants = function () {
        return this.andThen(Selector.descendants());
    };
    Selector.prototype.filter = function (predicate) {
        if (arguments.length === 0) {
            return new Item.FilterSelector(this, Selector.identity());
        }
        else {
            predicate = Item.fromAny(predicate);
            return this.andThen(predicate.filter());
        }
    };
    Selector.prototype.invoke = function (args) {
        return new Item.InvokeOperator(this, args);
    };
    Selector.prototype.precedence = function () {
        return 11;
    };
    Selector.prototype.debug = function (output) {
        output = output.write("Selector").write(46).write("identity").write(40).write(41);
        this.debugThen(output);
    };
    Selector.identity = function () {
        return Selector._identity;
    };
    Selector.get = function (key) {
        key = Value.fromAny(key);
        return new Item.GetSelector(key, Selector.identity());
    };
    Selector.getAttr = function (key) {
        key = Item.Text.fromAny(key);
        return new Item.GetAttrSelector(key, Selector.identity());
    };
    Selector.getItem = function (index) {
        index = Item.Num.fromAny(index);
        return new Item.GetItemSelector(index, Selector.identity());
    };
    Selector.keys = function () {
        if (!Selector._keys) {
            Selector._keys = new Item.KeysSelector(Selector.identity());
        }
        return Selector._keys;
    };
    Selector.values = function () {
        if (!Selector._values) {
            Selector._values = new Item.ValuesSelector(Selector.identity());
        }
        return Selector._values;
    };
    Selector.children = function () {
        if (!Selector._children) {
            Selector._children = new Item.ChildrenSelector(Selector.identity());
        }
        return Selector._children;
    };
    Selector.descendants = function () {
        if (!Selector._descendants) {
            Selector._descendants = new Item.DescendantsSelector(Selector.identity());
        }
        return Selector._descendants;
    };
    Selector.literal = function (item) {
        item = Item.fromAny(item);
        if (!(item instanceof Selector)) {
            item = new Item.LiteralSelector(item, Selector.identity());
        }
        return item;
    };
    return Selector;
}(Expression));
export { Selector };
Item.Selector = Selector;
//# sourceMappingURL=Selector.js.map