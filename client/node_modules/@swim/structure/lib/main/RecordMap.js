import { __extends } from "tslib";
import { Item } from "./Item";
import { Value } from "./Value";
import { Record } from "./Record";
import { Interpreter } from "./Interpreter";
var RecordMap = (function (_super) {
    __extends(RecordMap, _super);
    function RecordMap(array, table, itemCount, fieldCount, flags) {
        var _this = _super.call(this) || this;
        _this._array = array;
        _this._table = table;
        _this._itemCount = itemCount;
        _this._fieldCount = fieldCount;
        _this._flags = flags;
        return _this;
    }
    RecordMap.prototype.isEmpty = function () {
        return this._itemCount === 0;
    };
    Object.defineProperty(RecordMap.prototype, "length", {
        get: function () {
            return this._itemCount;
        },
        enumerable: true,
        configurable: true
    });
    RecordMap.prototype.fieldCount = function () {
        return this._fieldCount;
    };
    RecordMap.prototype.valueCount = function () {
        return this._itemCount - this._fieldCount;
    };
    RecordMap.prototype.isConstant = function () {
        var array = this._array;
        for (var i = 0, n = this._itemCount; i < n; i += 1) {
            if (!array[i].isConstant()) {
                return false;
            }
        }
        return true;
    };
    RecordMap.prototype.tag = function () {
        if (this._fieldCount > 0) {
            var head = this._array[0];
            if (head instanceof Item.Attr) {
                return head.key.value;
            }
        }
        return void 0;
    };
    RecordMap.prototype.target = function () {
        var value;
        var record;
        var modified = false;
        var array = this._array;
        for (var i = 0, n = this._itemCount; i < n; i += 1) {
            var item = array[i];
            if (item instanceof Item.Attr) {
                modified = true;
            }
            else if (value === void 0 && item instanceof Value) {
                value = item;
            }
            else {
                if (record === void 0) {
                    record = Record.create();
                    if (value !== void 0) {
                        record.push(value);
                    }
                }
                record.push(item);
            }
        }
        if (value === void 0) {
            return Value.extant();
        }
        else if (record === void 0) {
            return value;
        }
        else if (modified) {
            return record;
        }
        else {
            return this;
        }
    };
    RecordMap.prototype.head = function () {
        if (this._itemCount > 0) {
            return this._array[0];
        }
        return Item.absent();
    };
    RecordMap.prototype.tail = function () {
        var n = this._itemCount;
        if (n > 0) {
            return new Record.RecordMapView(this, 1, n);
        }
        else {
            return Record.empty();
        }
    };
    RecordMap.prototype.body = function () {
        var n = this._itemCount;
        if (n > 2) {
            return new Record.RecordMapView(this, 1, n).branch();
        }
        else if (n === 2) {
            var item = this._array[1];
            if (item instanceof Value) {
                return item;
            }
            else {
                return Record.of(item);
            }
        }
        return Value.absent();
    };
    RecordMap.prototype.has = function (key) {
        if (this._fieldCount !== 0) {
            key = Value.fromAny(key);
            var table = this.hashTable();
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field = table[i];
                if (field !== void 0) {
                    if (field.key.equals(key)) {
                        return true;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
        }
        return false;
    };
    RecordMap.prototype.indexOf = function (item, index) {
        if (index === void 0) { index = 0; }
        item = Item.fromAny(item);
        var array = this._array;
        var n = this._itemCount;
        if (index < 0) {
            index = Math.max(0, n + index);
        }
        while (index < n) {
            if (item.equals(array[index])) {
                return index;
            }
            index += 1;
        }
        return -1;
    };
    RecordMap.prototype.lastIndexOf = function (item, index) {
        item = Item.fromAny(item);
        var array = this._array;
        var n = this._itemCount;
        if (index === void 0) {
            index = n - 1;
        }
        else if (index < 0) {
            index = n + index;
        }
        index = Math.min(index, n - 1);
        while (index >= 0) {
            if (item.equals(array[index])) {
                return index;
            }
            index -= 1;
        }
        return -1;
    };
    RecordMap.prototype.get = function (key) {
        if (this._fieldCount > 0) {
            key = Value.fromAny(key);
            var table = this.hashTable();
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field = table[i];
                if (field !== void 0) {
                    if (field.key.equals(key)) {
                        return field.value;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
        }
        return Value.absent();
    };
    RecordMap.prototype.getAttr = function (key) {
        if (this._fieldCount > 0) {
            key = Value.Text.fromAny(key);
            var table = this.hashTable();
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field = table[i];
                if (field !== void 0) {
                    if (field instanceof Item.Attr && field.key.equals(key)) {
                        return field.value;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
        }
        return Value.absent();
    };
    RecordMap.prototype.getSlot = function (key) {
        if (this._fieldCount > 0) {
            key = Value.fromAny(key);
            var table = this.hashTable();
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field = table[i];
                if (field !== void 0) {
                    if (field instanceof Item.Slot && field.key.equals(key)) {
                        return field.value;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
        }
        return Value.absent();
    };
    RecordMap.prototype.getField = function (key) {
        if (this._fieldCount > 0) {
            key = Value.fromAny(key);
            var table = this.hashTable();
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field = table[i];
                if (field !== void 0) {
                    if (field.key.equals(key)) {
                        return field;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
        }
        return void 0;
    };
    RecordMap.prototype.getItem = function (index) {
        if (index instanceof Item.Num) {
            index = index.value;
        }
        var n = this._itemCount;
        if (index < 0) {
            index = n + index;
        }
        if (index >= 0 && index < n) {
            return this._array[index];
        }
        else {
            return Item.absent();
        }
    };
    RecordMap.prototype.set = function (key, newValue) {
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error("immutable");
        }
        key = Value.fromAny(key);
        newValue = Value.fromAny(newValue);
        if ((this._flags & Record.ALIASED) !== 0) {
            if (this._fieldCount > 0) {
                this.setAliased(key, newValue);
            }
            else {
                this.pushAliased(new Item.Slot(key, newValue));
            }
        }
        else {
            if (this._fieldCount > 0) {
                if (this._table !== null) {
                    this.setMutable(key, newValue);
                }
                else {
                    this.updateMutable(key, newValue);
                }
            }
            else {
                this.pushMutable(new Item.Slot(key, newValue));
            }
        }
        return this;
    };
    RecordMap.prototype.setAliased = function (key, newValue) {
        var n = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(n + 1));
        for (var i = 0; i < n; i += 1) {
            var item = oldArray[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                newArray[i] = item.updatedValue(newValue);
                i += 1;
                while (i < n) {
                    newArray[i] = oldArray[i];
                    i += 1;
                }
                this._array = newArray;
                this._table = null;
                this._flags &= ~Record.ALIASED;
                return;
            }
            newArray[i] = item;
        }
        newArray[n] = new Item.Slot(key, newValue);
        this._array = newArray;
        this._table = null;
        this._itemCount = n + 1;
        this._fieldCount += 1;
        this._flags &= ~Record.ALIASED;
    };
    RecordMap.prototype.setMutable = function (key, newValue) {
        var table = this._table;
        var n = table.length;
        var x = Math.abs(key.hashCode() % n);
        var i = x;
        do {
            var field_1 = table[i];
            if (field_1 !== void 0) {
                if (field_1.key.equals(key)) {
                    if (field_1.isMutable()) {
                        field_1.setValue(newValue);
                        return;
                    }
                    else {
                        this.updateMutable(key, newValue);
                        return;
                    }
                }
            }
            else {
                break;
            }
            i = (i + 1) % n;
        } while (i !== x);
        var field = new Item.Slot(key, newValue);
        this.pushMutable(field);
        RecordMap.put(table, field);
    };
    RecordMap.prototype.updateMutable = function (key, newValue) {
        var array = this._array;
        for (var i = 0, n = this._itemCount; i < n; i += 1) {
            var item = array[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                array[i] = item.updatedValue(newValue);
                this._table = null;
                return;
            }
        }
        var field = new Item.Slot(key, newValue);
        this.pushMutable(field);
        RecordMap.put(this._table, field);
    };
    RecordMap.prototype.setAttr = function (key, newValue) {
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error("immutable");
        }
        key = Value.Text.fromAny(key);
        newValue = Value.fromAny(newValue);
        if ((this._flags & Record.ALIASED) !== 0) {
            if (this._fieldCount > 0) {
                this.setAttrAliased(key, newValue);
            }
            else {
                this.pushAliased(new Item.Attr(key, newValue));
            }
        }
        else {
            if (this._fieldCount > 0) {
                if (this._table !== null) {
                    this.setAttrMutable(key, newValue);
                }
                else {
                    this.updateAttrMutable(key, newValue);
                }
            }
            else {
                this.pushMutable(new Item.Attr(key, newValue));
            }
        }
        return this;
    };
    RecordMap.prototype.setAttrAliased = function (key, newValue) {
        var n = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(n + 1));
        for (var i = 0; i < n; i += 1) {
            var item = oldArray[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                newArray[i] = new Item.Attr(key, newValue);
                i += 1;
                while (i < n) {
                    newArray[i] = oldArray[i];
                    i += 1;
                }
                this._array = newArray;
                this._table = null;
                this._flags &= ~Record.ALIASED;
                return;
            }
            newArray[i] = item;
        }
        newArray[n] = new Item.Attr(key, newValue);
        this._array = newArray;
        this._table = null;
        this._itemCount = n + 1;
        this._fieldCount += 1;
        this._flags &= ~Record.ALIASED;
    };
    RecordMap.prototype.setAttrMutable = function (key, newValue) {
        var table = this._table;
        var n = table.length;
        var x = Math.abs(key.hashCode() % n);
        var i = x;
        do {
            var field_2 = table[i];
            if (field_2 !== void 0) {
                if (field_2.key.equals(key)) {
                    if (field_2 instanceof Item.Attr && field_2.isMutable()) {
                        field_2.setValue(newValue);
                    }
                    else {
                        this.updateAttrMutable(key, newValue);
                    }
                    return;
                }
            }
            else {
                break;
            }
            i = (i + 1) % n;
        } while (i !== x);
        var field = new Item.Attr(key, newValue);
        this.push(field);
        RecordMap.put(table, field);
    };
    RecordMap.prototype.updateAttrMutable = function (key, newValue) {
        var array = this._array;
        for (var i = 0, n = this._itemCount; i < n; i += 1) {
            var item = array[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                array[i] = new Item.Attr(key, newValue);
                this._table = null;
                return;
            }
        }
        var field = new Item.Attr(key, newValue);
        this.push(field);
        RecordMap.put(this._table, field);
    };
    RecordMap.prototype.setSlot = function (key, newValue) {
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error("immutable");
        }
        key = Value.fromAny(key);
        newValue = Value.fromAny(newValue);
        if ((this._flags & Record.ALIASED) !== 0) {
            if (this._fieldCount > 0) {
                this.setSlotAliased(key, newValue);
            }
            else {
                this.pushAliased(new Item.Slot(key, newValue));
            }
        }
        else {
            if (this._fieldCount > 0) {
                if (this._table !== null) {
                    this.setSlotMutable(key, newValue);
                }
                else {
                    this.updateSlotMutable(key, newValue);
                }
            }
            else {
                this.pushMutable(new Item.Slot(key, newValue));
            }
        }
        return this;
    };
    RecordMap.prototype.setSlotAliased = function (key, newValue) {
        var n = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(n + 1));
        for (var i = 0; i < n; i += 1) {
            var item = oldArray[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                newArray[i] = new Item.Slot(key, newValue);
                i += 1;
                while (i < n) {
                    newArray[i] = oldArray[i];
                    i += 1;
                }
                this._array = newArray;
                this._table = null;
                this._flags &= ~Record.ALIASED;
                return;
            }
            newArray[i] = item;
        }
        newArray[n] = new Item.Slot(key, newValue);
        this._array = newArray;
        this._table = null;
        this._itemCount = n + 1;
        this._fieldCount += 1;
        this._flags &= ~Record.ALIASED;
    };
    RecordMap.prototype.setSlotMutable = function (key, newValue) {
        var table = this._table;
        var n = table.length;
        var x = Math.abs(key.hashCode() % n);
        var i = x;
        do {
            var field_3 = table[i];
            if (field_3 !== void 0) {
                if (field_3.key.equals(key)) {
                    if (field_3 instanceof Item.Slot && field_3.isMutable()) {
                        field_3.setValue(newValue);
                    }
                    else {
                        this.updateSlotMutable(key, newValue);
                    }
                    return;
                }
            }
            else {
                break;
            }
            i = (i + 1) % n;
        } while (i !== x);
        var field = new Item.Slot(key, newValue);
        this.push(field);
        RecordMap.put(table, field);
    };
    RecordMap.prototype.updateSlotMutable = function (key, newValue) {
        var array = this._array;
        for (var i = 0, n = this._itemCount; i < n; i += 1) {
            var item = array[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                array[i] = new Item.Slot(key, newValue);
                this._table = null;
                return;
            }
        }
        var field = new Item.Slot(key, newValue);
        this.push(field);
        RecordMap.put(this._table, field);
    };
    RecordMap.prototype.setItem = function (index, newItem) {
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error("immutable");
        }
        newItem = Item.fromAny(newItem);
        var n = this._itemCount;
        if (index < 0) {
            index = n + index;
        }
        if (index < 0 || index > n) {
            throw new RangeError("" + index);
        }
        if ((this._flags & Record.ALIASED) !== 0) {
            this.setItemAliased(index, newItem);
        }
        else {
            this.setItemMutable(index, newItem);
        }
        return this;
    };
    RecordMap.prototype.setItemAliased = function (index, newItem) {
        var n = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(n));
        for (var i = 0; i < n; i += 1) {
            newArray[i] = oldArray[i];
        }
        var oldItem = oldArray[index];
        newArray[index] = newItem;
        this._array = newArray;
        this._table = null;
        if (newItem instanceof Item.Field) {
            if (!(oldItem instanceof Item.Field)) {
                this._fieldCount += 1;
            }
        }
        else if (oldItem instanceof Item.Field) {
            this._fieldCount -= 1;
        }
        this._flags &= ~Record.ALIASED;
    };
    RecordMap.prototype.setItemMutable = function (index, newItem) {
        var array = this._array;
        var oldItem = array[index];
        array[index] = newItem;
        if (newItem instanceof Item.Field) {
            this._table = null;
            if (!(oldItem instanceof Item.Field)) {
                this._fieldCount += 1;
            }
        }
        else if (oldItem instanceof Item.Field) {
            this._table = null;
            this._fieldCount -= 1;
        }
    };
    RecordMap.prototype.updated = function (key, newValue) {
        key = Value.fromAny(key);
        newValue = Value.fromAny(newValue);
        var record = (this._flags & Record.IMMUTABLE) === 0 ? this : this.branch();
        if ((record._flags & Record.ALIASED) !== 0) {
            if (record._fieldCount > 0) {
                record.setAliased(key, newValue);
            }
            else {
                record.pushAliased(new Item.Slot(key, newValue));
            }
        }
        else {
            if (record._fieldCount > 0) {
                if (record._table !== null) {
                    record.setMutable(key, newValue);
                }
                else {
                    record.updateMutable(key, newValue);
                }
            }
            else {
                record.pushMutable(new Item.Slot(key, newValue));
            }
        }
        return record;
    };
    RecordMap.prototype.updatedAttr = function (key, newValue) {
        key = Value.Text.fromAny(key);
        newValue = Value.fromAny(newValue);
        var record = (this._flags & Record.IMMUTABLE) === 0 ? this : this.branch();
        if ((record._flags & Record.ALIASED) !== 0) {
            if (record._fieldCount > 0) {
                record.setAttrAliased(key, newValue);
            }
            else {
                record.pushAliased(new Item.Attr(key, newValue));
            }
        }
        else {
            if (record._fieldCount > 0) {
                if (record._table !== null) {
                    record.setAttrMutable(key, newValue);
                }
                else {
                    record.updateAttrMutable(key, newValue);
                }
            }
            else {
                record.pushMutable(new Item.Attr(key, newValue));
            }
        }
        return record;
    };
    RecordMap.prototype.updatedSlot = function (key, newValue) {
        key = Value.fromAny(key);
        newValue = Value.fromAny(newValue);
        var record = (this._flags & Record.IMMUTABLE) === 0 ? this : this.branch();
        if ((record._flags & Record.ALIASED) !== 0) {
            if (record._fieldCount > 0) {
                record.setSlotAliased(key, newValue);
            }
            else {
                record.pushAliased(new Item.Slot(key, newValue));
            }
        }
        else {
            if (record._fieldCount > 0) {
                if (record._table !== null) {
                    record.setSlotMutable(key, newValue);
                }
                else {
                    record.updateSlotMutable(key, newValue);
                }
            }
            else {
                record.pushMutable(new Item.Slot(key, newValue));
            }
        }
        return record;
    };
    RecordMap.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error("immutable");
        }
        if ((this._flags & Record.ALIASED) !== 0) {
            this.pushAliased.apply(this, arguments);
        }
        else {
            this.pushMutable.apply(this, arguments);
        }
        return this._itemCount;
    };
    RecordMap.prototype.pushAliased = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var k = arguments.length;
        var m = this._itemCount;
        var n = this._fieldCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(m + k));
        if (oldArray !== null) {
            for (var i = 0; i < m; i += 1) {
                newArray[i] = oldArray[i];
            }
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.fromAny(arguments[i]);
            newArray[m] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
            }
        }
        this._array = newArray;
        this._table = null;
        this._itemCount = m;
        this._fieldCount = n;
        this._flags &= ~Record.ALIASED;
    };
    RecordMap.prototype.pushMutable = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var k = arguments.length;
        var m = this._itemCount;
        var n = this._fieldCount;
        var oldArray = this._array;
        var newArray;
        if (oldArray === null || m + k > oldArray.length) {
            newArray = new Array(Record.expand(m + k));
            if (oldArray !== null) {
                for (var i = 0; i < m; i += 1) {
                    newArray[i] = oldArray[i];
                }
            }
        }
        else {
            newArray = oldArray;
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.fromAny(arguments[i]);
            newArray[m] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
                this._table = null;
            }
        }
        this._array = newArray;
        this._itemCount = m;
        this._fieldCount = n;
    };
    RecordMap.prototype.splice = function (start, deleteCount) {
        if (deleteCount === void 0) { deleteCount = 0; }
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error("immutable");
        }
        var n = this._itemCount;
        if (start < 0) {
            start = n + start;
        }
        start = Math.min(Math.max(0, start), n);
        deleteCount = Math.min(Math.max(0, deleteCount), n - start);
        if ((this._flags & Record.ALIASED) !== 0) {
            return this.spliceAliased.apply(this, arguments);
        }
        else {
            return this.spliceMutable.apply(this, arguments);
        }
    };
    RecordMap.prototype.spliceAliased = function (start, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        var k = newItems.length;
        var m = this._itemCount;
        var n = this._fieldCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(m - deleteCount + k));
        for (var i = 0; i < start; i += 1) {
            newArray[i] = oldArray[i];
        }
        var oldItems = [];
        for (var i = start; i < start + deleteCount; i += 1) {
            var oldItem = oldArray[i];
            oldItems.push(oldItem);
            m -= 1;
            if (oldItem instanceof Item.Field) {
                n -= 1;
            }
        }
        for (var i = start; i < m; i += 1) {
            newArray[i + k] = oldArray[i + deleteCount];
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.fromAny(newItems[i]);
            newArray[i + start] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
            }
        }
        this._array = newArray;
        this._table = null;
        this._itemCount = m;
        this._fieldCount = n;
        this._flags &= ~Record.ALIASED;
        return oldItems;
    };
    RecordMap.prototype.spliceMutable = function (start, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        var k = newItems.length;
        var m = this._itemCount;
        var n = this._fieldCount;
        var oldArray = this._array;
        var newArray;
        if (oldArray === null || m - deleteCount + k > oldArray.length) {
            newArray = new Array(Record.expand(m - deleteCount + k));
            if (oldArray !== null) {
                for (var i = 0; i < start; i += 1) {
                    newArray[i] = oldArray[i];
                }
            }
        }
        else {
            newArray = oldArray;
        }
        var oldItems = [];
        for (var i = start; i < start + deleteCount; i += 1) {
            var oldItem = oldArray[i];
            oldItems.push(oldItem);
            m -= 1;
            if (oldItem instanceof Item.Field) {
                n -= 1;
            }
        }
        if (k > deleteCount) {
            for (var i = m - 1; i >= start; i -= 1) {
                newArray[i + k] = oldArray[i + deleteCount];
            }
        }
        else {
            for (var i = start; i < m; i += 1) {
                newArray[i + k] = oldArray[i + deleteCount];
            }
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.fromAny(newItems[i]);
            newArray[i + start] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
            }
        }
        this._array = newArray;
        this._itemCount = m;
        this._fieldCount = n;
        return oldItems;
    };
    RecordMap.prototype.delete = function (key) {
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error("immutable");
        }
        key = Value.fromAny(key);
        if ((this._flags & Record.ALIASED) !== 0) {
            return this.deleteAliased(key);
        }
        else {
            return this.deleteMutable(key);
        }
    };
    RecordMap.prototype.deleteAliased = function (key) {
        var n = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(n));
        for (var i = 0; i < n; i += 1) {
            var item = oldArray[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                for (var j = i + 1; j < n; j += 1, i += 1) {
                    newArray[i] = oldArray[j];
                }
                this._array = newArray;
                this._table = null;
                this._itemCount = n - 1;
                this._fieldCount -= 1;
                this._flags &= ~Record.ALIASED;
                return item;
            }
            newArray[i] = item;
        }
        return Item.absent();
    };
    RecordMap.prototype.deleteMutable = function (key) {
        var n = this._itemCount;
        var array = this._array;
        for (var i = 0; i < n; i += 1) {
            var item = array[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                for (var j = i + 1; j < n; j += 1, i += 1) {
                    array[i] = array[j];
                }
                array[n - 1] = void 0;
                this._table = null;
                this._itemCount = n - 1;
                this._fieldCount -= 1;
                return item;
            }
        }
        return Item.absent();
    };
    RecordMap.prototype.clear = function () {
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error("immutable");
        }
        this._array = null;
        this._table = null;
        this._itemCount = 0;
        this._fieldCount = 0;
        this._flags = 0;
    };
    RecordMap.prototype.isAliased = function () {
        return (this._flags & Record.ALIASED) !== 0;
    };
    RecordMap.prototype.isMutable = function () {
        return (this._flags & Record.IMMUTABLE) === 0;
    };
    RecordMap.prototype.alias = function () {
        this._flags |= Record.ALIASED;
    };
    RecordMap.prototype.branch = function () {
        if ((this._flags & (Record.ALIASED | Record.IMMUTABLE)) === 0) {
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                array[i].alias();
            }
        }
        this._flags |= Record.ALIASED;
        return new RecordMap(this._array, this._table, this._itemCount, this._fieldCount, Record.ALIASED);
    };
    RecordMap.prototype.clone = function () {
        var itemCount = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(itemCount);
        for (var i = 0; i < itemCount; i += 1) {
            newArray[i] = oldArray[i].clone();
        }
        return new RecordMap(newArray, null, itemCount, this._fieldCount, 0);
    };
    RecordMap.prototype.commit = function () {
        if ((this._flags & Record.IMMUTABLE) === 0) {
            this._flags |= Record.IMMUTABLE;
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                array[i].commit();
            }
        }
        return this;
    };
    RecordMap.prototype.hashTable = function () {
        var n = this._fieldCount;
        var table = this._table;
        if (n !== 0 && this._table === null) {
            table = new Array(Record.expand(Math.max(n, n * 10 / 7)));
            var array = this._array;
            for (var i = 0, m = this._itemCount; i < m; i += 1) {
                var item = array[i];
                if (item instanceof Item.Field) {
                    RecordMap.put(table, item);
                }
            }
            this._table = table;
        }
        return table;
    };
    RecordMap.put = function (table, field) {
        if (table !== null) {
            var n = table.length;
            var x = Math.abs(field.key.hashCode() % n);
            var i = x;
            do {
                var item = table[i];
                if (item !== void 0) {
                    if (field.key.equals(item.key)) {
                        table[i] = field;
                        return;
                    }
                }
                else {
                    table[i] = field;
                    return;
                }
                i = (i + 1) % n;
            } while (i !== x);
            throw new Error();
        }
    };
    RecordMap.prototype.evaluate = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var array = this._array;
        var n = this._itemCount;
        var scope = Record.create(n);
        interpreter.pushScope(scope);
        var changed = false;
        for (var i = 0; i < n; i += 1) {
            var oldItem = array[i];
            var newItem = oldItem.evaluate(interpreter);
            if (newItem.isDefined()) {
                scope.push(newItem);
            }
            if (oldItem !== newItem) {
                changed = true;
            }
        }
        interpreter.popScope();
        return changed ? scope : this;
    };
    RecordMap.prototype.substitute = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var array = this._array;
        var n = this._itemCount;
        var scope = Record.create(n);
        interpreter.pushScope(scope);
        var changed = false;
        for (var i = 0; i < n; i += 1) {
            var oldItem = array[i];
            var newItem = oldItem.substitute(interpreter);
            if (newItem.isDefined()) {
                scope.push(newItem);
            }
            if (oldItem !== newItem) {
                changed = true;
            }
        }
        interpreter.popScope();
        return changed ? scope : this;
    };
    RecordMap.prototype.subRecord = function (lower, upper) {
        var n = this._itemCount;
        if (lower === void 0) {
            lower = 0;
        }
        else if (lower < 0) {
            lower = n + lower;
        }
        if (upper === void 0) {
            upper = n;
        }
        else if (upper < 0) {
            upper = n + upper;
        }
        if (lower < 0 || upper > n || lower > upper) {
            throw new RangeError(lower + ", " + upper);
        }
        return new Record.RecordMapView(this, lower, upper);
    };
    RecordMap.prototype.forEach = function (callback, thisArg) {
        var array = this._array;
        for (var i = 0, n = this._itemCount; i < n; i += 1) {
            var result = callback.call(thisArg, array[i], i);
            if (result !== void 0) {
                return result;
            }
        }
        return;
    };
    RecordMap.empty = function () {
        if (!RecordMap._empty) {
            RecordMap._empty = new RecordMap(null, null, 0, 0, Record.ALIASED | Record.IMMUTABLE);
        }
        return RecordMap._empty;
    };
    RecordMap.create = function (initialCapacity) {
        if (initialCapacity === void 0) {
            return new RecordMap(null, null, 0, 0, Record.ALIASED);
        }
        else {
            return new RecordMap(new Array(initialCapacity), null, 0, 0, 0);
        }
    };
    RecordMap.of = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var n = arguments.length;
        if (n === 0) {
            return new RecordMap(null, null, 0, 0, Record.ALIASED);
        }
        else {
            var array = new Array(n);
            var itemCount = 0;
            var fieldCount = 0;
            for (var i = 0; i < n; i += 1) {
                var item = Item.fromAny(arguments[i]);
                array[i] = item;
                itemCount += 1;
                if (item instanceof Item.Field) {
                    fieldCount += 1;
                }
            }
            return new RecordMap(array, null, itemCount, fieldCount, 0);
        }
    };
    return RecordMap;
}(Record));
export { RecordMap };
Item.RecordMap = RecordMap;
//# sourceMappingURL=RecordMap.js.map