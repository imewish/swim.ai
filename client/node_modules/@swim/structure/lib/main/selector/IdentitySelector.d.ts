import { Output } from "@swim/codec";
import { AnyItem, Item } from "../Item";
import { AnyValue } from "../Value";
import { AnyText } from "../Text";
import { AnyNum } from "../Num";
import { Selector } from "../Selector";
import { AnyInterpreter, Interpreter } from "../Interpreter";
export declare class IdentitySelector extends Selector {
    then(): Selector;
    forSelected<T, S = unknown>(interpreter: Interpreter, callback: (this: S, interpreter: Interpreter) => T | undefined, thisArg?: S): T | undefined;
    mapSelected<S = unknown>(interpreter: Interpreter, transform: (this: S, interpreter: Interpreter) => Item, thisArg?: S): Item;
    substitute(interpreter: AnyInterpreter): Item;
    get(key: AnyValue): Selector;
    getAttr(key: AnyText): Selector;
    getItem(index: AnyNum): Selector;
    andThen(then: Selector): Selector;
    keys(): Selector;
    values(): Selector;
    children(): Selector;
    descendants(): Selector;
    filter(predicate?: AnyItem): Selector;
    typeOrder(): number;
    compareTo(that: Item): 0 | 1 | -1;
    equals(that: unknown): boolean;
    hashCode(): number;
    debugThen(output: Output): void;
    clone(): Selector;
    private static _hashSeed?;
}
//# sourceMappingURL=IdentitySelector.d.ts.map