import { __extends } from "tslib";
import { Murmur3, Objects } from "@swim/util";
import { Item } from "../Item";
import { Selector } from "../Selector";
import { Interpreter } from "../Interpreter";
var DescendantsSelector = (function (_super) {
    __extends(DescendantsSelector, _super);
    function DescendantsSelector(then) {
        var _this = _super.call(this) || this;
        _this._then = then;
        return _this;
    }
    DescendantsSelector.prototype.then = function () {
        return this._then;
    };
    DescendantsSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
        var selected;
        interpreter.willSelect(this);
        if (interpreter.scopeDepth() !== 0) {
            var scope = interpreter.popScope().toValue();
            if (scope instanceof Item.Record) {
                var children = scope.iterator();
                while (selected === void 0 && children.hasNext()) {
                    var child = children.next().value;
                    interpreter.pushScope(child);
                    selected = this._then.forSelected(interpreter, callback, thisArg);
                    if (selected === void 0) {
                        this.forSelected(interpreter, callback, thisArg);
                    }
                    interpreter.popScope();
                }
            }
            interpreter.pushScope(scope);
        }
        interpreter.didSelect(this, selected);
        return selected;
    };
    DescendantsSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
        var result;
        interpreter.willTransform(this);
        if (interpreter.scopeDepth() !== 0) {
            var scope = interpreter.popScope().toValue();
            if (scope instanceof Item.Record) {
                var children = scope.iterator();
                while (children.hasNext()) {
                    var oldChild = children.next().value;
                    interpreter.pushScope(oldChild);
                    var newChild = this._then.mapSelected(interpreter, transform, thisArg);
                    if (newChild.isDefined()) {
                        newChild = this.mapSelected(interpreter, transform, thisArg);
                    }
                    interpreter.popScope();
                    if (newChild.isDefined()) {
                        if (newChild !== oldChild) {
                            children.set(newChild);
                        }
                    }
                    else {
                        children.delete();
                    }
                }
            }
            interpreter.pushScope(scope);
            result = scope;
        }
        else {
            result = Item.absent();
        }
        interpreter.didTransform(this, result);
        return result;
    };
    DescendantsSelector.prototype.substitute = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var then = this._then.substitute(interpreter);
        if (!(then instanceof Selector)) {
            then = this._then;
        }
        return new DescendantsSelector(then);
    };
    DescendantsSelector.prototype.andThen = function (then) {
        return new DescendantsSelector(this._then.andThen(then));
    };
    DescendantsSelector.prototype.typeOrder = function () {
        return 18;
    };
    DescendantsSelector.prototype.compareTo = function (that) {
        if (that instanceof DescendantsSelector) {
            return this._then.compareTo(that._then);
        }
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    DescendantsSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof DescendantsSelector) {
            return this._then.equals(that._then);
        }
        return false;
    };
    DescendantsSelector.prototype.hashCode = function () {
        if (DescendantsSelector._hashSeed === void 0) {
            DescendantsSelector._hashSeed = Murmur3.seed(DescendantsSelector);
        }
        return Murmur3.mash(Murmur3.mix(DescendantsSelector._hashSeed, this._then.hashCode()));
    };
    DescendantsSelector.prototype.debugThen = function (output) {
        output = output.write(46).write("descendants").write(40).write(41);
        this._then.debugThen(output);
    };
    DescendantsSelector.prototype.clone = function () {
        return new DescendantsSelector(this._then.clone());
    };
    return DescendantsSelector;
}(Selector));
export { DescendantsSelector };
Item.DescendantsSelector = DescendantsSelector;
//# sourceMappingURL=DescendantsSelector.js.map