import { __extends } from "tslib";
import { Murmur3, Objects } from "@swim/util";
import { Item } from "../Item";
import { Value } from "../Value";
import { Selector } from "../Selector";
import { Interpreter } from "../Interpreter";
var IdentitySelector = (function (_super) {
    __extends(IdentitySelector, _super);
    function IdentitySelector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IdentitySelector.prototype.then = function () {
        return this;
    };
    IdentitySelector.prototype.forSelected = function (interpreter, callback, thisArg) {
        var selected;
        interpreter.willSelect(this);
        if (interpreter.scopeDepth() !== 0) {
            var oldScope = interpreter.popScope();
            var newScope = oldScope.evaluate(interpreter);
            interpreter.pushScope(newScope);
            selected = callback.call(thisArg, interpreter);
            interpreter.swapScope(oldScope);
        }
        interpreter.didSelect(this, selected);
        return selected;
    };
    IdentitySelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
        return transform.call(thisArg, interpreter);
    };
    IdentitySelector.prototype.substitute = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        return interpreter.peekScope().substitute(interpreter);
    };
    IdentitySelector.prototype.get = function (key) {
        key = Value.fromAny(key);
        return new Item.GetSelector(key, this);
    };
    IdentitySelector.prototype.getAttr = function (key) {
        key = Item.Text.fromAny(key);
        return new Item.GetAttrSelector(key, this);
    };
    IdentitySelector.prototype.getItem = function (index) {
        index = Item.Num.fromAny(index);
        return new Item.GetItemSelector(index, this);
    };
    IdentitySelector.prototype.andThen = function (then) {
        return then;
    };
    IdentitySelector.prototype.keys = function () {
        return Selector.keys();
    };
    IdentitySelector.prototype.values = function () {
        return Selector.values();
    };
    IdentitySelector.prototype.children = function () {
        return Selector.children();
    };
    IdentitySelector.prototype.descendants = function () {
        return Selector.descendants();
    };
    IdentitySelector.prototype.filter = function (predicate) {
        if (arguments.length === 0) {
            return new Item.FilterSelector(this, this);
        }
        else {
            predicate = Item.fromAny(predicate);
            return predicate.filter();
        }
    };
    IdentitySelector.prototype.typeOrder = function () {
        return 10;
    };
    IdentitySelector.prototype.compareTo = function (that) {
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    IdentitySelector.prototype.equals = function (that) {
        return this === that;
    };
    IdentitySelector.prototype.hashCode = function () {
        if (IdentitySelector._hashSeed === void 0) {
            IdentitySelector._hashSeed = Murmur3.seed(IdentitySelector);
        }
        return IdentitySelector._hashSeed;
    };
    IdentitySelector.prototype.debugThen = function (output) {
    };
    IdentitySelector.prototype.clone = function () {
        return this;
    };
    return IdentitySelector;
}(Selector));
export { IdentitySelector };
Item.IdentitySelector = IdentitySelector;
Selector._identity = new IdentitySelector();
//# sourceMappingURL=IdentitySelector.js.map