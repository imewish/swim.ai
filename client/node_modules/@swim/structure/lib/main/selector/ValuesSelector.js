import { __extends } from "tslib";
import { Murmur3, Objects } from "@swim/util";
import { Item } from "../Item";
import { Selector } from "../Selector";
import { Interpreter } from "../Interpreter";
var ValuesSelector = (function (_super) {
    __extends(ValuesSelector, _super);
    function ValuesSelector(then) {
        var _this = _super.call(this) || this;
        _this._then = then;
        return _this;
    }
    ValuesSelector.prototype.then = function () {
        return this._then;
    };
    ValuesSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
        var selected;
        interpreter.willSelect(this);
        if (interpreter.scopeDepth() !== 0) {
            var scope = interpreter.popScope();
            if (scope instanceof Item.Record) {
                var children = scope.iterator();
                while (selected === void 0 && children.hasNext()) {
                    var child = children.next().value;
                    interpreter.pushScope(child.toValue());
                    selected = this._then.forSelected(interpreter, callback, thisArg);
                    interpreter.popScope();
                }
            }
            else {
                interpreter.pushScope(scope.toValue());
                selected = this._then.forSelected(interpreter, callback, thisArg);
                interpreter.popScope();
            }
            interpreter.pushScope(scope);
        }
        interpreter.didSelect(this, selected);
        return selected;
    };
    ValuesSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
        var result;
        interpreter.willTransform(this);
        if (interpreter.scopeDepth() !== 0) {
            var scope = interpreter.popScope();
            if (scope instanceof Item.Record) {
                var children = scope.iterator();
                while (children.hasNext()) {
                    var child = children.next().value;
                    if (child instanceof Item.Field) {
                        var oldValue = child.toValue();
                        interpreter.pushScope(oldValue);
                        var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                        interpreter.popScope();
                        if (newItem.isDefined()) {
                            if (newItem instanceof Item.Field) {
                                children.set(newItem);
                            }
                            else if (newItem !== oldValue) {
                                children.set(child.updatedValue(newItem.toValue()));
                            }
                        }
                        else {
                            children.delete();
                        }
                    }
                    else {
                        interpreter.pushScope(child.toValue());
                        var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                        interpreter.popScope();
                        if (newItem.isDefined()) {
                            if (child !== newItem) {
                                children.set(newItem);
                            }
                        }
                        else {
                            children.delete();
                        }
                    }
                }
            }
            else if (scope instanceof Item.Field) {
                var oldValue = scope.toValue();
                interpreter.pushScope(oldValue);
                var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                interpreter.popScope();
                if (newItem.isDefined()) {
                    if (newItem instanceof Item.Field) {
                        scope = newItem;
                    }
                    else if (newItem !== oldValue) {
                        scope = scope.updatedValue(newItem.toValue());
                    }
                }
                else {
                    scope = Item.absent();
                }
            }
            else {
                interpreter.pushScope(scope);
                scope = this._then.mapSelected(interpreter, transform, thisArg);
                interpreter.popScope();
            }
            interpreter.pushScope(scope);
            result = scope;
        }
        else {
            result = Item.absent();
        }
        interpreter.didTransform(this, result);
        return result;
    };
    ValuesSelector.prototype.substitute = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var then = this._then.substitute(interpreter);
        if (!(then instanceof Selector)) {
            then = this._then;
        }
        return new ValuesSelector(then);
    };
    ValuesSelector.prototype.andThen = function (then) {
        return new ValuesSelector(this._then.andThen(then));
    };
    ValuesSelector.prototype.typeOrder = function () {
        return 16;
    };
    ValuesSelector.prototype.compareTo = function (that) {
        if (that instanceof ValuesSelector) {
            return this._then.compareTo(that._then);
        }
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    ValuesSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof ValuesSelector) {
            return this._then.equals(that._then);
        }
        return false;
    };
    ValuesSelector.prototype.hashCode = function () {
        if (ValuesSelector._hashSeed === void 0) {
            ValuesSelector._hashSeed = Murmur3.seed(ValuesSelector);
        }
        return Murmur3.mash(Murmur3.mix(ValuesSelector._hashSeed, this._then.hashCode()));
    };
    ValuesSelector.prototype.debugThen = function (output) {
        output = output.write(46).write("values").write(40).write(41);
        this._then.debugThen(output);
    };
    ValuesSelector.prototype.clone = function () {
        return new ValuesSelector(this._then.clone());
    };
    return ValuesSelector;
}(Selector));
export { ValuesSelector };
Item.ValuesSelector = ValuesSelector;
//# sourceMappingURL=ValuesSelector.js.map