import { __extends } from "tslib";
import { Murmur3, Objects } from "@swim/util";
import { Item } from "../Item";
import { Selector } from "../Selector";
import { Interpreter } from "../Interpreter";
var FilterSelector = (function (_super) {
    __extends(FilterSelector, _super);
    function FilterSelector(predicate, then) {
        var _this = _super.call(this) || this;
        _this._predicate = predicate;
        _this._then = then;
        return _this;
    }
    FilterSelector.prototype.predicate = function () {
        return this._predicate;
    };
    FilterSelector.prototype.then = function () {
        return this._then;
    };
    FilterSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
        var selected;
        interpreter.willSelect(this);
        if (interpreter.scopeDepth() !== 0) {
            if (this.filterSelected(interpreter)) {
                selected = this._then.forSelected(interpreter, callback, thisArg);
            }
        }
        interpreter.didSelect(this, selected);
        return selected;
    };
    FilterSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
        var result;
        interpreter.willTransform(this);
        if (interpreter.scopeDepth() !== 0) {
            if (this.filterSelected(interpreter)) {
                result = this._then.mapSelected(interpreter, transform, thisArg);
            }
            else {
                result = interpreter.peekScope().toValue();
            }
        }
        else {
            result = Item.absent();
        }
        interpreter.didTransform(this, result);
        return result;
    };
    FilterSelector.prototype.substitute = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var predicate = this._predicate.substitute(interpreter);
        if (!(predicate instanceof Selector)) {
            predicate = this._predicate;
        }
        var then = this._then.substitute(interpreter);
        if (!(then instanceof Selector)) {
            then = this._then;
        }
        return new FilterSelector(predicate, then);
    };
    FilterSelector.prototype.filterSelected = function (interpreter) {
        return this._predicate.forSelected(interpreter, this.selected, this) !== void 0;
    };
    FilterSelector.prototype.selected = function (interpreter) {
        return null;
    };
    FilterSelector.prototype.andThen = function (then) {
        return new FilterSelector(this._predicate, this._then.andThen(then));
    };
    FilterSelector.prototype.filter = function (predicate) {
        if (arguments.length === 0) {
            return this;
        }
        else {
            predicate = Item.fromAny(predicate);
            return this.andThen(predicate.filter());
        }
    };
    FilterSelector.prototype.typeOrder = function () {
        return 19;
    };
    FilterSelector.prototype.compareTo = function (that) {
        if (that instanceof FilterSelector) {
            var order = this._predicate.compareTo(that._predicate);
            if (order === 0) {
                order = this._then.compareTo(that._then);
            }
            return order;
        }
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    FilterSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof FilterSelector) {
            return this._predicate.equals(that._predicate) && this._then.equals(that._then);
        }
        return false;
    };
    FilterSelector.prototype.hashCode = function () {
        if (FilterSelector._hashSeed === void 0) {
            FilterSelector._hashSeed = Murmur3.seed(FilterSelector);
        }
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(FilterSelector._hashSeed, this._predicate.hashCode()), this._then.hashCode()));
    };
    FilterSelector.prototype.debugThen = function (output) {
        output = output.write(46).write("filter").write(40).debug(this._predicate).write(41);
        this._then.debugThen(output);
    };
    FilterSelector.prototype.clone = function () {
        return new FilterSelector(this._predicate.clone(), this._then.clone());
    };
    return FilterSelector;
}(Selector));
export { FilterSelector };
Item.FilterSelector = FilterSelector;
//# sourceMappingURL=FilterSelector.js.map