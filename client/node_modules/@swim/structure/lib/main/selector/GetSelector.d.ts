import { Output } from "@swim/codec";
import { Item } from "../Item";
import { Value } from "../Value";
import { Selector } from "../Selector";
import { AnyInterpreter, Interpreter } from "../Interpreter";
export declare class GetSelector extends Selector {
    readonly _key: Value;
    readonly _then: Selector;
    constructor(key: Value, then: Selector);
    accessor(): Value;
    then(): Selector;
    forSelected<T, S = unknown>(interpreter: Interpreter, callback: (this: S, interpreter: Interpreter) => T | undefined, thisArg?: S): T | undefined;
    private static forSelected;
    mapSelected<S = unknown>(interpreter: Interpreter, transform: (this: S, interpreter: Interpreter) => Item, thisArg?: S): Item;
    substitute(interpreter: AnyInterpreter): Item;
    private static substitute;
    andThen(then: Selector): Selector;
    typeOrder(): number;
    compareTo(that: Item): 0 | 1 | -1;
    equals(that: unknown): boolean;
    hashCode(): number;
    debugThen(output: Output): void;
    clone(): Selector;
    private static _hashSeed?;
}
//# sourceMappingURL=GetSelector.d.ts.map