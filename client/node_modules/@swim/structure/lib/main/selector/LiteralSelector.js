import { __extends } from "tslib";
import { Murmur3, Objects } from "@swim/util";
import { Item } from "../Item";
import { Selector } from "../Selector";
import { Interpreter } from "../Interpreter";
var LiteralSelector = (function (_super) {
    __extends(LiteralSelector, _super);
    function LiteralSelector(item, then) {
        var _this = _super.call(this) || this;
        _this._item = item.commit();
        _this._then = then;
        return _this;
    }
    LiteralSelector.prototype.item = function () {
        return this._item;
    };
    LiteralSelector.prototype.then = function () {
        return this._then;
    };
    LiteralSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
        var selected;
        interpreter.willSelect(this);
        if (interpreter.scopeDepth() !== 0) {
            var literal = this._item.evaluate(interpreter);
            if (literal.isDefined()) {
                interpreter.pushScope(literal);
                selected = this._then.forSelected(interpreter, callback, thisArg);
                interpreter.popScope();
            }
        }
        interpreter.didSelect(this, selected);
        return selected;
    };
    LiteralSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
        var result;
        interpreter.willTransform(this);
        if (interpreter.scopeDepth() !== 0) {
            var literal = this._item.evaluate(interpreter);
            if (literal.isDefined()) {
                interpreter.pushScope(literal);
                literal = this._then.mapSelected(interpreter, transform, thisArg);
                interpreter.popScope();
            }
            result = literal;
        }
        else {
            result = Item.absent();
        }
        interpreter.didTransform(this, result);
        return result;
    };
    LiteralSelector.prototype.substitute = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var item = this._item.substitute(interpreter);
        var then = this._then.substitute(interpreter);
        if (!(then instanceof Selector)) {
            then = this._then;
        }
        return new LiteralSelector(item, then);
    };
    LiteralSelector.prototype.andThen = function (then) {
        return new LiteralSelector(this._item, this._then.andThen(then));
    };
    LiteralSelector.prototype.precedence = function () {
        return this._item.precedence();
    };
    LiteralSelector.prototype.typeOrder = function () {
        return 11;
    };
    LiteralSelector.prototype.compareTo = function (that) {
        if (that instanceof LiteralSelector) {
            var order = this._item.compareTo(that._item);
            if (order === 0) {
                order = this._then.compareTo(that._then);
            }
            return order;
        }
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    LiteralSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LiteralSelector) {
            return this._item.equals(that._item) && this._then.equals(that._then);
        }
        return false;
    };
    LiteralSelector.prototype.hashCode = function () {
        if (LiteralSelector._hashSeed === void 0) {
            LiteralSelector._hashSeed = Murmur3.seed(LiteralSelector);
        }
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(LiteralSelector._hashSeed, this._item.hashCode()), this._then.hashCode()));
    };
    LiteralSelector.prototype.debug = function (output) {
        output = output.write("Selector").write(46).write("literal").write(40)
            .debug(this._item).write(41);
        this._then.debugThen(output);
    };
    LiteralSelector.prototype.debugThen = function (output) {
    };
    LiteralSelector.prototype.clone = function () {
        return new LiteralSelector(this._item.clone(), this._then.clone());
    };
    return LiteralSelector;
}(Selector));
export { LiteralSelector };
Item.LiteralSelector = LiteralSelector;
//# sourceMappingURL=LiteralSelector.js.map