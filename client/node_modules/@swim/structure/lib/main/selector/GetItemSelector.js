import { __extends } from "tslib";
import { Murmur3, Objects } from "@swim/util";
import { Item } from "../Item";
import { Selector } from "../Selector";
import { Interpreter } from "../Interpreter";
var GetItemSelector = (function (_super) {
    __extends(GetItemSelector, _super);
    function GetItemSelector(index, then) {
        var _this = _super.call(this) || this;
        _this._index = index;
        _this._then = then;
        return _this;
    }
    GetItemSelector.prototype.accessor = function () {
        return this._index;
    };
    GetItemSelector.prototype.then = function () {
        return this._then;
    };
    GetItemSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
        var selected;
        interpreter.willSelect(this);
        var index = this._index.numberValue();
        if (interpreter.scopeDepth() !== 0) {
            var scope = interpreter.popScope().toValue();
            if (scope instanceof Item.Record && index < scope.length) {
                var item = scope.getItem(index);
                interpreter.pushScope(item);
                selected = this._then.forSelected(interpreter, callback, thisArg);
                interpreter.popScope();
            }
            interpreter.pushScope(scope);
        }
        interpreter.didSelect(this, selected);
        return selected;
    };
    GetItemSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
        var result;
        interpreter.willTransform(this);
        if (interpreter.scopeDepth() !== 0) {
            var scope = interpreter.popScope().toValue();
            var index = this._index.numberValue();
            if (scope instanceof Item.Record && index < scope.length) {
                var oldItem = scope.getItem(index);
                interpreter.pushScope(oldItem);
                var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                interpreter.popScope();
                if (newItem.isDefined()) {
                    scope.setItem(index, newItem);
                }
                else {
                    scope.splice(index, 1);
                }
            }
            interpreter.pushScope(scope);
            result = scope;
        }
        else {
            result = Item.absent();
        }
        interpreter.didTransform(this, result);
        return result;
    };
    GetItemSelector.prototype.substitute = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var index = this._index.numberValue();
        if (interpreter.scopeDepth() !== 0) {
            var scope = interpreter.popScope().toValue();
            var selected = void 0;
            if (scope instanceof Item.Record && index < scope.length) {
                var item = scope.getItem(index);
                selected = item.substitute(interpreter);
            }
            interpreter.pushScope(scope);
            if (selected) {
                return selected;
            }
        }
        var then = this._then.substitute(interpreter);
        if (!(then instanceof Selector)) {
            then = this._then;
        }
        return new GetItemSelector(this._index, then);
    };
    GetItemSelector.prototype.andThen = function (then) {
        return new GetItemSelector(this._index, this._then.andThen(then));
    };
    GetItemSelector.prototype.typeOrder = function () {
        return 14;
    };
    GetItemSelector.prototype.compareTo = function (that) {
        if (that instanceof GetItemSelector) {
            var order = this._index.compareTo(that._index);
            if (order === 0) {
                order = this._then.compareTo(that._then);
            }
            return order;
        }
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    GetItemSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof GetItemSelector) {
            return this._index.equals(that._index) && this._then.equals(that._then);
        }
        return false;
    };
    GetItemSelector.prototype.hashCode = function () {
        if (GetItemSelector._hashSeed === void 0) {
            GetItemSelector._hashSeed = Murmur3.seed(GetItemSelector);
        }
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(GetItemSelector._hashSeed, this._index.hashCode()), this._then.hashCode()));
    };
    GetItemSelector.prototype.debugThen = function (output) {
        output = output.write(46).write("getItem").write(40).debug(this._index).write(41);
        this._then.debugThen(output);
    };
    GetItemSelector.prototype.clone = function () {
        return new GetItemSelector(this._index, this._then.clone());
    };
    return GetItemSelector;
}(Selector));
export { GetItemSelector };
Item.GetItemSelector = GetItemSelector;
//# sourceMappingURL=GetItemSelector.js.map