import { __extends } from "tslib";
import { Murmur3, Objects } from "@swim/util";
import { Item } from "../Item";
import { Attr } from "../Attr";
import { Selector } from "../Selector";
import { Interpreter } from "../Interpreter";
var GetAttrSelector = (function (_super) {
    __extends(GetAttrSelector, _super);
    function GetAttrSelector(key, then) {
        var _this = _super.call(this) || this;
        _this._key = key;
        _this._then = then;
        return _this;
    }
    GetAttrSelector.prototype.accessor = function () {
        return this._key;
    };
    GetAttrSelector.prototype.then = function () {
        return this._then;
    };
    GetAttrSelector.prototype.forSelected = function (interpreter, callback, thisArg) {
        interpreter.willSelect(this);
        var key = this._key;
        var selected = GetAttrSelector.forSelected(key, this._then, interpreter, callback);
        interpreter.didSelect(this, selected);
        return selected;
    };
    GetAttrSelector.forSelected = function (key, then, interpreter, callback, thisArg) {
        var selected;
        if (interpreter.scopeDepth() !== 0) {
            var scope = interpreter.popScope().toValue();
            var field = void 0;
            if (scope instanceof Item.Record) {
                field = scope.getField(key);
                if (field instanceof Attr) {
                    interpreter.pushScope(field.toValue());
                    selected = then.forSelected(interpreter, callback, thisArg);
                    interpreter.popScope();
                }
            }
            if (field === void 0 && selected === void 0) {
                GetAttrSelector.forSelected(key, then, interpreter, callback, thisArg);
            }
            interpreter.pushScope(scope);
        }
        return selected;
    };
    GetAttrSelector.prototype.mapSelected = function (interpreter, transform, thisArg) {
        var result;
        interpreter.willTransform(this);
        var key = this._key;
        if (interpreter.scopeDepth() !== 0) {
            var scope = interpreter.popScope().toValue();
            if (scope instanceof Item.Record) {
                var oldField = scope.getField(key);
                if (oldField instanceof Item.Attr) {
                    interpreter.pushScope(oldField.toValue());
                    var newItem = this._then.mapSelected(interpreter, transform, thisArg);
                    interpreter.popScope();
                    if (newItem instanceof Item.Field) {
                        if (key.equals(newItem.key)) {
                            scope.setAttr(key, newItem.toValue());
                        }
                        else {
                            scope.delete(key);
                            scope.push(newItem);
                        }
                    }
                    else if (newItem.isDefined()) {
                        scope.setAttr(key, newItem.toValue());
                    }
                    else {
                        scope.delete(key);
                    }
                }
            }
            interpreter.pushScope(scope);
            result = scope;
        }
        else {
            result = Item.absent();
        }
        interpreter.didTransform(this, result);
        return result;
    };
    GetAttrSelector.prototype.substitute = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var key = this._key;
        var value = GetAttrSelector.substitute(key, this._then, interpreter);
        if (value) {
            return value;
        }
        var then = this._then.substitute(interpreter);
        if (!(then instanceof Selector)) {
            then = this._then;
        }
        return new GetAttrSelector(this._key, then);
    };
    GetAttrSelector.substitute = function (key, then, interpreter) {
        var selected;
        if (interpreter.scopeDepth() !== 0) {
            var scope = interpreter.popScope().toValue();
            var field = void 0;
            if (scope instanceof Item.Record) {
                field = scope.getField(key);
                if (field instanceof Item.Attr) {
                    selected = field.toValue().substitute(interpreter);
                }
            }
            if (field === void 0 && selected === void 0) {
                GetAttrSelector.substitute(key, then, interpreter);
            }
            interpreter.pushScope(scope);
        }
        return selected;
    };
    GetAttrSelector.prototype.andThen = function (then) {
        return new GetAttrSelector(this._key, this._then.andThen(then));
    };
    GetAttrSelector.prototype.typeOrder = function () {
        return 13;
    };
    GetAttrSelector.prototype.compareTo = function (that) {
        if (that instanceof GetAttrSelector) {
            var order = this._key.compareTo(that._key);
            if (order === 0) {
                order = this._then.compareTo(that._then);
            }
            return order;
        }
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    GetAttrSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof GetAttrSelector) {
            return this._key.equals(that._key) && this._then.equals(that._then);
        }
        return false;
    };
    GetAttrSelector.prototype.hashCode = function () {
        if (GetAttrSelector._hashSeed === void 0) {
            GetAttrSelector._hashSeed = Murmur3.seed(GetAttrSelector);
        }
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(GetAttrSelector._hashSeed, this._key.hashCode()), this._then.hashCode()));
    };
    GetAttrSelector.prototype.debugThen = function (output) {
        output = output.write(46).write("getAttr").write(40).debug(this._key).write(41);
        this._then.debugThen(output);
    };
    GetAttrSelector.prototype.clone = function () {
        return new GetAttrSelector(this._key.clone(), this._then.clone());
    };
    return GetAttrSelector;
}(Selector));
export { GetAttrSelector };
Item.GetAttrSelector = GetAttrSelector;
//# sourceMappingURL=GetAttrSelector.js.map