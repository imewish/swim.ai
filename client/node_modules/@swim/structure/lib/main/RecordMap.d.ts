import { AnyItem, Item } from "./Item";
import { Field } from "./Field";
import { AnyValue, Value } from "./Value";
import { Record } from "./Record";
import { AnyText } from "./Text";
import { AnyNum } from "./Num";
import { AnyInterpreter } from "./Interpreter";
export declare class RecordMap extends Record {
    _array: Array<Item> | null;
    _table: Array<Field> | null;
    _itemCount: number;
    _fieldCount: number;
    _flags: number;
    constructor(array: Array<Item> | null, table: Array<Field> | null, itemCount: number, fieldCount: number, flags: number);
    isEmpty(): boolean;
    get length(): number;
    fieldCount(): number;
    valueCount(): number;
    isConstant(): boolean;
    tag(): string | undefined;
    target(): Value;
    head(): Item;
    tail(): Record;
    body(): Value;
    has(key: AnyValue): boolean;
    indexOf(item: AnyItem, index?: number): number;
    lastIndexOf(item: AnyItem, index?: number): number;
    get(key: AnyValue): Value;
    getAttr(key: AnyText): Value;
    getSlot(key: AnyValue): Value;
    getField(key: AnyValue): Field | undefined;
    getItem(index: AnyNum): Item;
    set(key: AnyValue, newValue: Value): this;
    private setAliased;
    private setMutable;
    private updateMutable;
    setAttr(key: AnyText, newValue: Value): this;
    private setAttrAliased;
    private setAttrMutable;
    private updateAttrMutable;
    setSlot(key: AnyValue, newValue: Value): this;
    private setSlotAliased;
    private setSlotMutable;
    private updateSlotMutable;
    setItem(index: number, newItem: AnyItem): this;
    private setItemAliased;
    private setItemMutable;
    updated(key: AnyValue, newValue: AnyValue): Record;
    updatedAttr(key: AnyText, newValue: AnyValue): Record;
    updatedSlot(key: AnyValue, newValue: AnyValue): Record;
    push(...newItems: AnyItem[]): number;
    private pushAliased;
    private pushMutable;
    splice(start: number, deleteCount?: number, ...newItems: AnyItem[]): Item[];
    spliceAliased(start: number, deleteCount: number, ...newItems: AnyItem[]): Item[];
    spliceMutable(start: number, deleteCount: number, ...newItems: AnyItem[]): Item[];
    delete(key: AnyValue): Item;
    private deleteAliased;
    private deleteMutable;
    clear(): void;
    isAliased(): boolean;
    isMutable(): boolean;
    alias(): void;
    branch(): RecordMap;
    clone(): RecordMap;
    commit(): this;
    hashTable(): Array<Field> | null;
    static put(table: Field[] | null, field: Field): void;
    evaluate(interpreter: AnyInterpreter): Record;
    substitute(interpreter: AnyInterpreter): Record;
    subRecord(lower?: number, upper?: number): Record;
    forEach<T, S = unknown>(callback: (this: S, item: Item, index: number) => T | void, thisArg?: S): T | undefined;
    private static _empty?;
    static empty(): RecordMap;
    static create(initialCapacity?: number): RecordMap;
    static of(...items: AnyItem[]): RecordMap;
}
//# sourceMappingURL=RecordMap.d.ts.map