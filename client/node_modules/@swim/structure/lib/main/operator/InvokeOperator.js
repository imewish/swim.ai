import { __extends } from "tslib";
import { Murmur3, Objects } from "@swim/util";
import { Item } from "../Item";
import { Operator } from "../Operator";
import { Interpreter } from "../Interpreter";
var InvokeOperator = (function (_super) {
    __extends(InvokeOperator, _super);
    function InvokeOperator(func, args) {
        var _this = _super.call(this) || this;
        _this._func = func;
        _this._args = args.commit();
        return _this;
    }
    InvokeOperator.prototype.func = function () {
        return this._func;
    };
    InvokeOperator.prototype.args = function () {
        return this._args;
    };
    InvokeOperator.prototype.state = function () {
        return this._state;
    };
    InvokeOperator.prototype.setState = function (state) {
        this._state = state;
    };
    InvokeOperator.prototype.isConstant = function () {
        return this._func.isConstant() && this._args.isConstant();
    };
    InvokeOperator.prototype.precedence = function () {
        return 11;
    };
    InvokeOperator.prototype.evaluate = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var func = this._func.evaluate(interpreter);
        if (func instanceof Item.Func) {
            return func.invoke(this._args, interpreter, this);
        }
        return Item.absent();
    };
    InvokeOperator.prototype.substitute = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var func = this._func.evaluate(interpreter);
        if (func instanceof Item.Func) {
            var result = func.expand(this._args, interpreter, this);
            if (result) {
                return result;
            }
        }
        var args = this._args.substitute(interpreter).toValue();
        return new InvokeOperator(this._func, args);
    };
    InvokeOperator.prototype.typeOrder = function () {
        return 41;
    };
    InvokeOperator.prototype.compareTo = function (that) {
        if (that instanceof InvokeOperator) {
            var order = this._func.compareTo(that._func);
            if (order === 0) {
                order = this._args.compareTo(that._args);
            }
            return order;
        }
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    InvokeOperator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof InvokeOperator) {
            return this._func.equals(that._func) && this._args.equals(that._args);
        }
        return false;
    };
    InvokeOperator.prototype.hashCode = function () {
        if (InvokeOperator._hashSeed === void 0) {
            InvokeOperator._hashSeed = Murmur3.seed(InvokeOperator);
        }
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(InvokeOperator._hashSeed, this._func.hashCode()), this._args.hashCode()));
    };
    InvokeOperator.prototype.debug = function (output) {
        output.debug(this._func).write(46).write("invoke").write(40)
            .debug(this._args).write(41);
    };
    InvokeOperator.prototype.clone = function () {
        return new InvokeOperator(this._func.clone(), this._args.clone());
    };
    return InvokeOperator;
}(Operator));
export { InvokeOperator };
Item.InvokeOperator = InvokeOperator;
//# sourceMappingURL=InvokeOperator.js.map