import { __extends } from "tslib";
import { Murmur3, Objects } from "@swim/util";
import { Item } from "../Item";
import { BinaryOperator } from "./BinaryOperator";
import { Interpreter } from "../Interpreter";
var BitwiseXorOperator = (function (_super) {
    __extends(BitwiseXorOperator, _super);
    function BitwiseXorOperator(operand1, operand2) {
        return _super.call(this, operand1, operand2) || this;
    }
    BitwiseXorOperator.prototype.operator = function () {
        return "^";
    };
    BitwiseXorOperator.prototype.precedence = function () {
        return 6;
    };
    BitwiseXorOperator.prototype.evaluate = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        interpreter.willOperate(this);
        var argument1 = this._operand1.evaluate(interpreter);
        var argument2 = this._operand2.evaluate(interpreter);
        var result = argument1.bitwiseXor(argument2);
        interpreter.didOperate(this, result);
        return result;
    };
    BitwiseXorOperator.prototype.substitute = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var argument1 = this._operand1.substitute(interpreter);
        var argument2 = this._operand2.substitute(interpreter);
        return argument1.bitwiseXor(argument2);
    };
    BitwiseXorOperator.prototype.typeOrder = function () {
        return 24;
    };
    BitwiseXorOperator.prototype.compareTo = function (that) {
        if (that instanceof BitwiseXorOperator) {
            var order = this._operand1.compareTo(that._operand1);
            if (order === 0) {
                order = this._operand2.compareTo(that._operand2);
            }
            return order;
        }
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    BitwiseXorOperator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof BitwiseXorOperator) {
            return this._operand1.equals(that._operand1) && this._operand2.equals(that._operand2);
        }
        return false;
    };
    BitwiseXorOperator.prototype.hashCode = function () {
        if (BitwiseXorOperator._hashSeed === void 0) {
            BitwiseXorOperator._hashSeed = Murmur3.seed(BitwiseXorOperator);
        }
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(BitwiseXorOperator._hashSeed, this._operand1.hashCode()), this._operand2.hashCode()));
    };
    BitwiseXorOperator.prototype.debug = function (output) {
        output.debug(this._operand1).write(46).write("bitwiseXor").write(40)
            .debug(this._operand2).write(41);
    };
    BitwiseXorOperator.prototype.clone = function () {
        return new BitwiseXorOperator(this._operand1.clone(), this._operand2.clone());
    };
    return BitwiseXorOperator;
}(BinaryOperator));
export { BitwiseXorOperator };
Item.BitwiseXorOperator = BitwiseXorOperator;
//# sourceMappingURL=BitwiseXorOperator.js.map