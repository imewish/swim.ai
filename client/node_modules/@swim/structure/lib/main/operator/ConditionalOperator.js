import { __extends } from "tslib";
import { Murmur3, Objects } from "@swim/util";
import { Item } from "../Item";
import { Operator } from "../Operator";
import { Interpreter } from "../Interpreter";
var ConditionalOperator = (function (_super) {
    __extends(ConditionalOperator, _super);
    function ConditionalOperator(ifTerm, thenTerm, elseTerm) {
        var _this = _super.call(this) || this;
        _this._ifTerm = ifTerm.commit();
        _this._thenTerm = thenTerm.commit();
        _this._elseTerm = elseTerm.commit();
        return _this;
    }
    ConditionalOperator.prototype.ifTerm = function () {
        return this._ifTerm;
    };
    ConditionalOperator.prototype.thenTerm = function () {
        return this._thenTerm;
    };
    ConditionalOperator.prototype.elseTerm = function () {
        return this._elseTerm;
    };
    ConditionalOperator.prototype.isConstant = function () {
        return this._ifTerm.isConstant() && this._thenTerm.isConstant()
            && this._elseTerm.isConstant();
    };
    ConditionalOperator.prototype.precedence = function () {
        return 2;
    };
    ConditionalOperator.prototype.evaluate = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        interpreter.willOperate(this);
        var result;
        var ifTerm = this._ifTerm.evaluate(interpreter);
        if (ifTerm.booleanValue(false)) {
            var theTerm = this._thenTerm.evaluate(interpreter);
            result = theTerm;
        }
        else {
            var elseTerm = this._elseTerm.evaluate(interpreter);
            result = elseTerm;
        }
        interpreter.didOperate(this, result);
        return result;
    };
    ConditionalOperator.prototype.substitute = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var ifTerm = this._ifTerm.substitute(interpreter);
        var thenTerm = this._thenTerm.substitute(interpreter);
        var elseTerm = this._elseTerm.substitute(interpreter);
        return new ConditionalOperator(ifTerm, thenTerm, elseTerm);
    };
    ConditionalOperator.prototype.typeOrder = function () {
        return 20;
    };
    ConditionalOperator.prototype.compareTo = function (that) {
        if (that instanceof ConditionalOperator) {
            var order = this._ifTerm.compareTo(that._ifTerm);
            if (order === 0) {
                order = this._thenTerm.compareTo(that._thenTerm);
                if (order === 0) {
                    order = this._elseTerm.compareTo(that._elseTerm);
                }
            }
            return order;
        }
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    ConditionalOperator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof ConditionalOperator) {
            return this._ifTerm.equals(that._ifTerm) && this._thenTerm.equals(that._thenTerm)
                && this._elseTerm.equals(that._elseTerm);
        }
        return false;
    };
    ConditionalOperator.prototype.hashCode = function () {
        if (ConditionalOperator._hashSeed === void 0) {
            ConditionalOperator._hashSeed = Murmur3.seed(ConditionalOperator);
        }
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(ConditionalOperator._hashSeed, this._ifTerm.hashCode()), this._thenTerm.hashCode()), this._elseTerm.hashCode()));
    };
    ConditionalOperator.prototype.debug = function (output) {
        output.debug(this._ifTerm).write(46).write("conditional").write(40)
            .debug(this._thenTerm).write(44).write(32)
            .debug(this._elseTerm).write(41);
    };
    ConditionalOperator.prototype.clone = function () {
        return new ConditionalOperator(this._ifTerm.clone(), this._thenTerm.clone(), this._elseTerm.clone());
    };
    return ConditionalOperator;
}(Operator));
export { ConditionalOperator };
Item.ConditionalOperator = ConditionalOperator;
//# sourceMappingURL=ConditionalOperator.js.map