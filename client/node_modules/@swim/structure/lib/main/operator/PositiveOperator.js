import { __extends } from "tslib";
import { Murmur3, Objects } from "@swim/util";
import { Item } from "../Item";
import { UnaryOperator } from "./UnaryOperator";
import { Interpreter } from "../Interpreter";
var PositiveOperator = (function (_super) {
    __extends(PositiveOperator, _super);
    function PositiveOperator(operand) {
        return _super.call(this, operand) || this;
    }
    PositiveOperator.prototype.operator = function () {
        return "+";
    };
    PositiveOperator.prototype.precedence = function () {
        return 10;
    };
    PositiveOperator.prototype.evaluate = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var argument = this._operand.evaluate(interpreter);
        return argument.positive();
    };
    PositiveOperator.prototype.substitute = function (interpreter) {
        interpreter = Interpreter.fromAny(interpreter);
        var argument = this._operand.substitute(interpreter);
        return argument.positive();
    };
    PositiveOperator.prototype.typeOrder = function () {
        return 40;
    };
    PositiveOperator.prototype.compareTo = function (that) {
        if (that instanceof PositiveOperator) {
            return this._operand.compareTo(that._operand);
        }
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    PositiveOperator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof PositiveOperator) {
            return this._operand.equals(that._operand);
        }
        return false;
    };
    PositiveOperator.prototype.hashCode = function () {
        if (PositiveOperator._hashSeed === void 0) {
            PositiveOperator._hashSeed = Murmur3.seed(PositiveOperator);
        }
        return Murmur3.mash(Murmur3.mix(PositiveOperator._hashSeed, this._operand.hashCode()));
    };
    PositiveOperator.prototype.debug = function (output) {
        output.debug(this._operand).write(46).write("positive").write(40).write(41);
    };
    PositiveOperator.prototype.clone = function () {
        return new PositiveOperator(this._operand.clone());
    };
    return PositiveOperator;
}(UnaryOperator));
export { PositiveOperator };
Item.PositiveOperator = PositiveOperator;
//# sourceMappingURL=PositiveOperator.js.map