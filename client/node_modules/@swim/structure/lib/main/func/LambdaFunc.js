import { __extends } from "tslib";
import { Murmur3, Objects } from "@swim/util";
import { Item } from "../Item";
import { Func } from "../Func";
import { Interpreter } from "../Interpreter";
var LambdaFunc = (function (_super) {
    __extends(LambdaFunc, _super);
    function LambdaFunc(bindings, template) {
        var _this = _super.call(this) || this;
        _this._bindings = bindings;
        _this._template = template;
        return _this;
    }
    LambdaFunc.prototype.bindings = function () {
        return this._bindings;
    };
    LambdaFunc.prototype.template = function () {
        return this._template;
    };
    LambdaFunc.prototype.precedence = function () {
        return 1;
    };
    LambdaFunc.prototype.invoke = function (args, interpreter, operator) {
        interpreter = Interpreter.fromAny(interpreter);
        var bindings = this._bindings;
        var arity = Math.max(1, bindings.length);
        var params = Item.Record.create(arity);
        var i = 0;
        var j = 0;
        while (i < arity) {
            var binding = bindings instanceof Item.Record ? bindings.getItem(i) : i === 0 ? bindings : Item.absent();
            var arg = args instanceof Item.Record ? args.getItem(j).toValue() : j === 0 ? args : Item.Value.absent();
            if (binding instanceof Item.Text && arg.isDistinct()) {
                params.push(Item.Slot.of(binding, arg));
                j += 1;
            }
            else if (binding instanceof Item.Slot) {
                if (arg.isDistinct()) {
                    params.push(binding.updatedValue(arg));
                }
                else {
                    params.push(binding);
                }
                j += 1;
            }
            i += 1;
        }
        interpreter.pushScope(params);
        var result = this._template.evaluate(interpreter);
        interpreter.popScope();
        return result;
    };
    LambdaFunc.prototype.typeOrder = function () {
        return 50;
    };
    LambdaFunc.prototype.compareTo = function (that) {
        if (that instanceof LambdaFunc) {
            var order = this._bindings.compareTo(that._bindings);
            if (order === 0) {
                order = this._template.compareTo(that._template);
            }
            return order;
        }
        return Objects.compare(this.typeOrder(), that.typeOrder());
    };
    LambdaFunc.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LambdaFunc) {
            return this._bindings.equals(that._bindings) && this._template.equals(that._template);
        }
        return false;
    };
    LambdaFunc.prototype.hashCode = function () {
        if (LambdaFunc._hashSeed === void 0) {
            LambdaFunc._hashSeed = Murmur3.seed(LambdaFunc);
        }
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(LambdaFunc._hashSeed, this._bindings.hashCode()), this._template.hashCode()));
    };
    LambdaFunc.prototype.debug = function (output) {
        output.debug(this.bindings).write(46).write("lambda").write(40)
            .debug(this.template).write(41);
    };
    return LambdaFunc;
}(Func));
export { LambdaFunc };
Item.LambdaFunc = LambdaFunc;
//# sourceMappingURL=LambdaFunc.js.map