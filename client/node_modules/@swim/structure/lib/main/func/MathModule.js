import { __extends } from "tslib";
import { Item } from "../Item";
import { Interpreter } from "../Interpreter";
import { BridgeFunc } from "./BridgeFunc";
var MathModule = (function () {
    function MathModule() {
    }
    MathModule.max = function () {
        if (!MathModule._max) {
            MathModule._max = new MaxFunc();
        }
        return MathModule._max;
    };
    MathModule.min = function () {
        if (!MathModule._min) {
            MathModule._min = new MinFunc();
        }
        return MathModule._min;
    };
    MathModule.abs = function () {
        if (!MathModule._abs) {
            MathModule._abs = new AbsFunc();
        }
        return MathModule._abs;
    };
    MathModule.ceil = function () {
        if (!MathModule._ceil) {
            MathModule._ceil = new CeilFunc();
        }
        return MathModule._ceil;
    };
    MathModule.floor = function () {
        if (!MathModule._floor) {
            MathModule._floor = new FloorFunc();
        }
        return MathModule._floor;
    };
    MathModule.round = function () {
        if (!MathModule._round) {
            MathModule._round = new RoundFunc();
        }
        return MathModule._round;
    };
    MathModule.sqrt = function () {
        if (!MathModule._sqrt) {
            MathModule._sqrt = new SqrtFunc();
        }
        return MathModule._sqrt;
    };
    MathModule.pow = function () {
        if (!MathModule._pow) {
            MathModule._pow = new PowFunc();
        }
        return MathModule._pow;
    };
    MathModule.rate = function () {
        if (!MathModule._rate) {
            MathModule._rate = new RateFunc();
        }
        return MathModule._rate;
    };
    MathModule.random = function () {
        if (!MathModule._random) {
            MathModule._random = new RandomFunc();
        }
        return MathModule._random;
    };
    MathModule.scope = function () {
        if (!MathModule._scope) {
            MathModule._scope = Item.Record.create(10)
                .slot("max", MathModule.max())
                .slot("min", MathModule.min())
                .slot("abs", MathModule.abs())
                .slot("ceil", MathModule.ceil())
                .slot("floor", MathModule.floor())
                .slot("round", MathModule.round())
                .slot("pow", MathModule.pow())
                .slot("sqrt", MathModule.sqrt())
                .slot("rate", MathModule.rate())
                .slot("random", MathModule.random())
                .commit();
        }
        return MathModule._scope;
    };
    return MathModule;
}());
export { MathModule };
Item.MathModule = MathModule;
var MaxFunc = (function (_super) {
    __extends(MaxFunc, _super);
    function MaxFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MaxFunc.prototype.invoke = function (args, interpreter, operator) {
        interpreter = Interpreter.fromAny(interpreter);
        var x;
        var y;
        if (args.length >= 2) {
            x = args.getItem(0).evaluate(interpreter);
            y = args.getItem(1).evaluate(interpreter);
        }
        else {
            x = args.evaluate(interpreter);
        }
        if (y !== void 0) {
            return x.max(y);
        }
        else if (operator) {
            y = operator.state();
            var max = y !== void 0 ? x.max(y) : x;
            operator.setState(max);
            return max;
        }
        return Item.absent();
    };
    MaxFunc.prototype.expand = function (args, interpreter, operator) {
        if (args.length === 1) {
            args = args.evaluate(interpreter).toValue();
            return this.invoke(args, interpreter, operator);
        }
        return void 0;
    };
    return MaxFunc;
}(BridgeFunc));
var MinFunc = (function (_super) {
    __extends(MinFunc, _super);
    function MinFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MinFunc.prototype.invoke = function (args, interpreter, operator) {
        interpreter = Interpreter.fromAny(interpreter);
        var x;
        var y;
        if (args.length >= 2) {
            x = args.getItem(0).evaluate(interpreter);
            y = args.getItem(1).evaluate(interpreter);
        }
        else {
            x = args.evaluate(interpreter);
        }
        if (y !== void 0) {
            return x.min(y);
        }
        else if (operator) {
            y = operator.state();
            var min = y !== void 0 ? x.min(y) : x;
            operator.setState(min);
            return min;
        }
        return Item.absent();
    };
    MinFunc.prototype.expand = function (args, interpreter, operator) {
        if (args.length === 1) {
            args = args.evaluate(interpreter).toValue();
            return this.invoke(args, interpreter, operator);
        }
        return void 0;
    };
    return MinFunc;
}(BridgeFunc));
var AbsFunc = (function (_super) {
    __extends(AbsFunc, _super);
    function AbsFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbsFunc.prototype.invoke = function (args, interpreter, operator) {
        args = args.evaluate(interpreter).toValue();
        if (args instanceof Item.Num) {
            return args.abs();
        }
        return Item.absent();
    };
    return AbsFunc;
}(BridgeFunc));
var CeilFunc = (function (_super) {
    __extends(CeilFunc, _super);
    function CeilFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CeilFunc.prototype.invoke = function (args, interpreter, operator) {
        args = args.evaluate(interpreter).toValue();
        if (args instanceof Item.Num) {
            return args.ceil();
        }
        return Item.absent();
    };
    return CeilFunc;
}(BridgeFunc));
var FloorFunc = (function (_super) {
    __extends(FloorFunc, _super);
    function FloorFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FloorFunc.prototype.invoke = function (args, interpreter, operator) {
        args = args.evaluate(interpreter).toValue();
        if (args instanceof Item.Num) {
            return args.floor();
        }
        return Item.absent();
    };
    return FloorFunc;
}(BridgeFunc));
var RoundFunc = (function (_super) {
    __extends(RoundFunc, _super);
    function RoundFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RoundFunc.prototype.invoke = function (args, interpreter, operator) {
        args = args.evaluate(interpreter).toValue();
        if (args instanceof Item.Num) {
            return args.round();
        }
        return Item.absent();
    };
    return RoundFunc;
}(BridgeFunc));
var SqrtFunc = (function (_super) {
    __extends(SqrtFunc, _super);
    function SqrtFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SqrtFunc.prototype.invoke = function (args, interpreter, operator) {
        args = args.evaluate(interpreter).toValue();
        if (args instanceof Item.Num) {
            return args.sqrt();
        }
        return Item.absent();
    };
    return SqrtFunc;
}(BridgeFunc));
var PowFunc = (function (_super) {
    __extends(PowFunc, _super);
    function PowFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PowFunc.prototype.invoke = function (args, interpreter, operator) {
        interpreter = Interpreter.fromAny(interpreter);
        var x = args.getItem(0).evaluate(interpreter);
        var y = args.getItem(1).evaluate(interpreter);
        if (x instanceof Item.Num && y instanceof Item.Num) {
            return x.pow(y);
        }
        return Item.absent();
    };
    return PowFunc;
}(BridgeFunc));
var RateFunc = (function (_super) {
    __extends(RateFunc, _super);
    function RateFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RateFunc.prototype.invoke = function (args, interpreter, operator) {
        interpreter = Interpreter.fromAny(interpreter);
        var value;
        var period;
        if (args.length >= 2) {
            value = args.getItem(0).evaluate(interpreter).numberValue(NaN);
            period = args.getItem(1).evaluate(interpreter).numberValue(1000);
        }
        else {
            value = args.evaluate(interpreter).numberValue(NaN);
            period = 1000;
        }
        if (isFinite(value) && operator) {
            var state = operator.state();
            if (state === void 0) {
                state = { v0: value, t0: Date.now(), dv: 0, dt: 0 };
                operator.setState(state);
            }
            else {
                var t1 = Date.now();
                var dt = t1 - state.t0;
                if (dt > period && t1 > state.t0 || dt > 2 * period) {
                    var dv = value - state.v0;
                    state.v0 = value;
                    state.t0 = t1;
                    state.dv = dv;
                    state.dt = dt;
                }
                operator.setState(state);
                if (state.dt !== 0) {
                    var rate = period * state.dv / state.dt;
                    return Item.Num.from(rate);
                }
            }
        }
        return Item.absent();
    };
    RateFunc.prototype.expand = function (args, interpreter, operator) {
        args = args.evaluate(interpreter).toValue();
        return this.invoke(args, interpreter, operator);
    };
    return RateFunc;
}(BridgeFunc));
var RandomFunc = (function (_super) {
    __extends(RandomFunc, _super);
    function RandomFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RandomFunc.prototype.invoke = function (args, interpreter, operator) {
        args = args.evaluate(interpreter).toValue();
        var lower = args.length >= 1 ? args.getItem(0).numberValue(0.0) : 0.0;
        var upper = args.length >= 2 ? args.getItem(1).numberValue(lower + 1.0) : lower + 1.0;
        var value = lower + Math.random() * (upper - lower);
        return Item.Num.from(value);
    };
    return RandomFunc;
}(BridgeFunc));
//# sourceMappingURL=MathModule.js.map