import { Output } from "@swim/codec";
import { AnyItem, Item } from "./Item";
import { AnyField, Field } from "./Field";
import { AnyValue, Value } from "./Value";
import { AnyInterpreter } from "./Interpreter";
export declare class Slot extends Field {
    readonly _key: Value;
    _value: Value;
    _flags: number;
    constructor(key: Value, value?: Value, flags?: number);
    get key(): Value;
    get value(): Value;
    isConstant(): boolean;
    setValue(newValue: Value): Value;
    updatedValue(value: Value): Slot;
    bitwiseOr(that: AnyItem): Item;
    bitwiseXor(that: AnyItem): Item;
    bitwiseAnd(that: AnyItem): Item;
    plus(that: AnyItem): Item;
    minus(that: AnyItem): Item;
    times(that: AnyItem): Item;
    divide(that: AnyItem): Item;
    modulo(that: AnyItem): Item;
    not(): Item;
    bitwiseNot(): Item;
    negative(): Item;
    positive(): Item;
    inverse(): Item;
    evaluate(interpreter: AnyInterpreter): Item;
    substitute(interpreter: AnyInterpreter): Item;
    toAny(): AnyField;
    isAliased(): boolean;
    isMutable(): boolean;
    alias(): void;
    branch(): Slot;
    clone(): Slot;
    commit(): this;
    typeOrder(): number;
    compareTo(that: Item): 0 | 1 | -1;
    keyEquals(key: unknown): boolean;
    equals(that: unknown): boolean;
    hashCode(): number;
    debug(output: Output): void;
    display(output: Output): void;
    private static _hashSeed?;
    static of(key: AnyValue, value?: AnyValue): Slot;
}
//# sourceMappingURL=Slot.d.ts.map