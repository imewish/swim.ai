(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@swim/codec'), require('@swim/recon'), require('@swim/util'), require('@swim/uri'), require('@swim/structure')) :
    typeof define === 'function' && define.amd ? define(['exports', '@swim/codec', '@swim/recon', '@swim/util', '@swim/uri', '@swim/structure'], factory) :
    (global = global || self, factory(global.swim = global.swim || {}, global.swim, global.swim, global.swim, global.swim, global.swim));
}(this, (function (exports, codec, recon, util, uri, structure) { 'use strict';

    var Envelope = (function () {
        function Envelope() {
        }
        Envelope.prototype.tag = function () {
            return this.constructor.tag();
        };
        Envelope.prototype.prio = function (prio) {
            if (prio === void 0) {
                return 0;
            }
            else {
                return this;
            }
        };
        Envelope.prototype.rate = function (rate) {
            if (rate === void 0) {
                return 0;
            }
            else {
                return this;
            }
        };
        Envelope.prototype.toRecon = function () {
            return recon.Recon.toString(this.toValue());
        };
        Envelope.prototype.toString = function () {
            return codec.Format.debug(this);
        };
        Envelope.tag = function () {
            return void 0;
        };
        Envelope.fromValue = function (value) {
            switch (value.tag()) {
                case "event": return Envelope.EventMessage.fromValue(value);
                case "command": return Envelope.CommandMessage.fromValue(value);
                case "link": return Envelope.LinkRequest.fromValue(value);
                case "linked": return Envelope.LinkedResponse.fromValue(value);
                case "sync": return Envelope.SyncRequest.fromValue(value);
                case "synced": return Envelope.SyncedResponse.fromValue(value);
                case "unlink": return Envelope.UnlinkRequest.fromValue(value);
                case "unlinked": return Envelope.UnlinkedResponse.fromValue(value);
                case "auth": return Envelope.AuthRequest.fromValue(value);
                case "authed": return Envelope.AuthedResponse.fromValue(value);
                case "deauth": return Envelope.DeauthRequest.fromValue(value);
                case "deauthed": return Envelope.DeauthedResponse.fromValue(value);
                default: return void 0;
            }
        };
        Envelope.parseRecon = function (input) {
            return Envelope.fromValue(recon.Recon.parse(input));
        };
        return Envelope;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var HostAddressed = (function (_super) {
        __extends(HostAddressed, _super);
        function HostAddressed(body) {
            var _this = _super.call(this) || this;
            _this._body = body;
            return _this;
        }
        HostAddressed.prototype.node = function (node) {
            if (node === void 0) {
                return uri.Uri.empty();
            }
            else {
                return this;
            }
        };
        HostAddressed.prototype.lane = function (lane) {
            if (lane === void 0) {
                return uri.Uri.empty();
            }
            else {
                return this;
            }
        };
        HostAddressed.prototype.body = function (body) {
            if (body === void 0) {
                return this._body;
            }
            else {
                body = structure.Value.fromAny(body);
                return this.copy(body);
            }
        };
        HostAddressed.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof HostAddressed
                && this.__proto__.constructor === that.__proto__.constructor) {
                return this._body.equals(that._body);
            }
            return false;
        };
        HostAddressed.prototype.hashCode = function () {
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.seed(this.__proto__), this._body.hashCode()));
        };
        HostAddressed.prototype.debug = function (output) {
            output = output.write(this.__proto__.constructor.name).write(46).write("of").write(40);
            if (this._body.isDefined()) {
                output = output.debug(this._body);
            }
            output = output.write(41);
        };
        HostAddressed.prototype.toValue = function () {
            return structure.Attr.of(this.tag()).concat(this._body);
        };
        HostAddressed.fromValue = function (value, E) {
            var header = value.header(E.tag());
            if (header.isDefined()) {
                var body = value.body();
                return new E(body);
            }
            return void 0;
        };
        return HostAddressed;
    }(Envelope));

    var LaneAddressed = (function (_super) {
        __extends(LaneAddressed, _super);
        function LaneAddressed(node, lane, body) {
            var _this = _super.call(this) || this;
            _this._node = node;
            _this._lane = lane;
            _this._body = body;
            return _this;
        }
        LaneAddressed.prototype.node = function (node) {
            if (node === void 0) {
                return this._node;
            }
            else {
                node = uri.Uri.fromAny(node);
                return this.copy(node, this._lane, this._body);
            }
        };
        LaneAddressed.prototype.lane = function (lane) {
            if (lane === void 0) {
                return this._lane;
            }
            else {
                lane = uri.Uri.fromAny(lane);
                return this.copy(this._node, lane, this._body);
            }
        };
        LaneAddressed.prototype.body = function (body) {
            if (body === void 0) {
                return this._body;
            }
            else {
                body = structure.Value.fromAny(body);
                return this.copy(this._node, this._lane, body);
            }
        };
        LaneAddressed.prototype.toValue = function () {
            var header = structure.Record.create(2)
                .slot("node", this._node.toString())
                .slot("lane", this._lane.toString());
            return structure.Attr.of(this.tag(), header).concat(this._body);
        };
        LaneAddressed.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LaneAddressed
                && this.__proto__.constructor === that.__proto__.constructor) {
                return this._node.equals(that._node) && this._lane.equals(that._lane)
                    && this._body.equals(that._body);
            }
            return false;
        };
        LaneAddressed.prototype.hashCode = function () {
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(util.Murmur3.mix(util.Murmur3.seed(this.__proto__), this._node.hashCode()), this._lane.hashCode()), this._body.hashCode()));
        };
        LaneAddressed.prototype.debug = function (output) {
            output = output.write(this.__proto__.constructor.name).write(46).write("of").write(40)
                .debug(this._node.toString()).write(", ").debug(this._lane.toString());
            if (this._body.isDefined()) {
                output = output.write(", ").debug(this._body);
            }
            output = output.write(41);
        };
        LaneAddressed.fromValue = function (value, E) {
            var node;
            var lane;
            var header = value.header(E.tag());
            header.forEach(function (header, index) {
                var key = header.key.stringValue(void 0);
                if (key !== void 0) {
                    if (key === "node") {
                        node = uri.Uri.parse(header.toValue().stringValue(""));
                    }
                    else if (key === "lane") {
                        lane = uri.Uri.parse(header.toValue().stringValue(""));
                    }
                }
                else if (header instanceof structure.Value) {
                    if (index === 0) {
                        node = uri.Uri.parse(header.stringValue(""));
                    }
                    else if (index === 1) {
                        lane = uri.Uri.parse(header.stringValue(""));
                    }
                }
            });
            if (node && lane) {
                var body = value.body();
                return new E(node, lane, body);
            }
            return void 0;
        };
        return LaneAddressed;
    }(Envelope));

    var LinkAddressed = (function (_super) {
        __extends(LinkAddressed, _super);
        function LinkAddressed(node, lane, prio, rate, body) {
            var _this = _super.call(this) || this;
            _this._node = node;
            _this._lane = lane;
            _this._prio = prio;
            _this._rate = rate;
            _this._body = body;
            return _this;
        }
        LinkAddressed.prototype.node = function (node) {
            if (node === undefined) {
                return this._node;
            }
            else {
                node = uri.Uri.fromAny(node);
                return this.copy(node, this._lane, this._prio, this._rate, this._body);
            }
        };
        LinkAddressed.prototype.lane = function (lane) {
            if (lane === undefined) {
                return this._lane;
            }
            else {
                lane = uri.Uri.fromAny(lane);
                return this.copy(this._node, lane, this._prio, this._rate, this._body);
            }
        };
        LinkAddressed.prototype.prio = function (prio) {
            if (prio === undefined) {
                return this._prio;
            }
            else {
                return this.copy(this._node, this._lane, prio, this._rate, this._body);
            }
        };
        LinkAddressed.prototype.rate = function (rate) {
            if (rate === undefined) {
                return this._rate;
            }
            else {
                return this.copy(this._node, this._lane, this._prio, rate, this._body);
            }
        };
        LinkAddressed.prototype.body = function (body) {
            if (body === undefined) {
                return this._body;
            }
            else {
                body = structure.Value.fromAny(body);
                return this.copy(this._node, this._lane, this._prio, this._rate, body);
            }
        };
        LinkAddressed.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof LinkAddressed
                && this.__proto__.constructor === that.__proto__.constructor) {
                return this._node.equals(that._node) && this._lane.equals(that._lane)
                    && this._prio === that._prio && this._rate === that._rate
                    && this._body.equals(that._body);
            }
            return false;
        };
        LinkAddressed.prototype.hashCode = function () {
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(util.Murmur3.mix(util.Murmur3.mix(util.Murmur3.mix(util.Murmur3.seed(this.__proto__), this._node.hashCode()), this._lane.hashCode()), util.Murmur3.hash(this._prio)), util.Murmur3.hash(this._rate)), this._body.hashCode()));
        };
        LinkAddressed.prototype.debug = function (output) {
            output = output.write(this.__proto__.constructor.name).write(46).write("of").write(40)
                .debug(this._node.toString()).write(", ").debug(this._lane.toString());
            if (this._prio || this._rate) {
                output = output.write(", ").debug(this._prio).write(", ").debug(this._rate);
            }
            if (this._body.isDefined()) {
                output = output.write(", ").debug(this._body);
            }
            output = output.write(41);
        };
        LinkAddressed.prototype.toValue = function () {
            var header = structure.Record.create(4)
                .slot("node", this._node.toString())
                .slot("lane", this._lane.toString());
            if (this._prio) {
                header.slot("prio", this._prio);
            }
            if (this._rate) {
                header.slot("rate", this._rate);
            }
            return structure.Attr.of(this.tag(), header).concat(this._body);
        };
        LinkAddressed.fromValue = function (value, E) {
            var node;
            var lane;
            var prio = 0;
            var rate = 0;
            var header = value.header(E.tag());
            header.forEach(function (header, index) {
                var key = header.key.stringValue(void 0);
                if (key !== void 0) {
                    if (key === "node") {
                        node = uri.Uri.parse(header.toValue().stringValue(""));
                    }
                    else if (key === "lane") {
                        lane = uri.Uri.parse(header.toValue().stringValue(""));
                    }
                    else if (key === "prio") {
                        prio = header.numberValue(prio);
                    }
                    else if (key === "rate") {
                        rate = header.numberValue(rate);
                    }
                }
                else if (header instanceof structure.Value) {
                    if (index === 0) {
                        node = uri.Uri.parse(header.stringValue(""));
                    }
                    else if (index === 1) {
                        lane = uri.Uri.parse(header.stringValue(""));
                    }
                }
            });
            if (node && lane) {
                var body = value.body();
                return new E(node, lane, prio, rate, body);
            }
            return void 0;
        };
        return LinkAddressed;
    }(Envelope));

    var EventMessage = (function (_super) {
        __extends(EventMessage, _super);
        function EventMessage(node, lane, body) {
            return _super.call(this, node, lane, body) || this;
        }
        EventMessage.prototype.copy = function (node, lane, body) {
            return new EventMessage(node, lane, body);
        };
        EventMessage.tag = function () {
            return "event";
        };
        EventMessage.fromValue = function (value) {
            return LaneAddressed.fromValue(value, EventMessage);
        };
        EventMessage.of = function (node, lane, body) {
            if (body === void 0) { body = structure.Value.absent(); }
            node = uri.Uri.fromAny(node);
            lane = uri.Uri.fromAny(lane);
            body = structure.Value.fromAny(body);
            return new EventMessage(node, lane, body);
        };
        return EventMessage;
    }(LaneAddressed));
    Envelope.EventMessage = EventMessage;

    var CommandMessage = (function (_super) {
        __extends(CommandMessage, _super);
        function CommandMessage(node, lane, body) {
            return _super.call(this, node, lane, body) || this;
        }
        CommandMessage.prototype.copy = function (node, lane, body) {
            return new CommandMessage(node, lane, body);
        };
        CommandMessage.tag = function () {
            return "command";
        };
        CommandMessage.fromValue = function (value) {
            return LaneAddressed.fromValue(value, CommandMessage);
        };
        CommandMessage.of = function (node, lane, body) {
            if (body === void 0) { body = structure.Value.absent(); }
            node = uri.Uri.fromAny(node);
            lane = uri.Uri.fromAny(lane);
            body = structure.Value.fromAny(body);
            return new CommandMessage(node, lane, body);
        };
        return CommandMessage;
    }(LaneAddressed));
    Envelope.CommandMessage = CommandMessage;

    var LinkRequest = (function (_super) {
        __extends(LinkRequest, _super);
        function LinkRequest(node, lane, prio, rate, body) {
            return _super.call(this, node, lane, prio, rate, body) || this;
        }
        LinkRequest.prototype.copy = function (node, lane, prio, rate, body) {
            return new LinkRequest(node, lane, prio, rate, body);
        };
        LinkRequest.tag = function () {
            return "link";
        };
        LinkRequest.fromValue = function (value) {
            return LinkAddressed.fromValue(value, LinkRequest);
        };
        LinkRequest.of = function (node, lane, prio, rate, body) {
            if (prio === void 0) { prio = 0; }
            if (rate === void 0) { rate = 0; }
            if (body === void 0) { body = structure.Value.absent(); }
            node = uri.Uri.fromAny(node);
            lane = uri.Uri.fromAny(lane);
            body = structure.Value.fromAny(body);
            return new LinkRequest(node, lane, prio, rate, body);
        };
        return LinkRequest;
    }(LinkAddressed));
    Envelope.LinkRequest = LinkRequest;

    var LinkedResponse = (function (_super) {
        __extends(LinkedResponse, _super);
        function LinkedResponse(node, lane, prio, rate, body) {
            return _super.call(this, node, lane, prio, rate, body) || this;
        }
        LinkedResponse.prototype.copy = function (node, lane, prio, rate, body) {
            return new LinkedResponse(node, lane, prio, rate, body);
        };
        LinkedResponse.tag = function () {
            return "linked";
        };
        LinkedResponse.fromValue = function (value) {
            return LinkAddressed.fromValue(value, LinkedResponse);
        };
        LinkedResponse.of = function (node, lane, prio, rate, body) {
            if (prio === void 0) { prio = 0; }
            if (rate === void 0) { rate = 0; }
            if (body === void 0) { body = structure.Value.absent(); }
            node = uri.Uri.fromAny(node);
            lane = uri.Uri.fromAny(lane);
            body = structure.Value.fromAny(body);
            return new LinkedResponse(node, lane, prio, rate, body);
        };
        return LinkedResponse;
    }(LinkAddressed));
    Envelope.LinkedResponse = LinkedResponse;

    var SyncRequest = (function (_super) {
        __extends(SyncRequest, _super);
        function SyncRequest(node, lane, prio, rate, body) {
            return _super.call(this, node, lane, prio, rate, body) || this;
        }
        SyncRequest.prototype.copy = function (node, lane, prio, rate, body) {
            return new SyncRequest(node, lane, prio, rate, body);
        };
        SyncRequest.tag = function () {
            return "sync";
        };
        SyncRequest.fromValue = function (value) {
            return LinkAddressed.fromValue(value, SyncRequest);
        };
        SyncRequest.of = function (node, lane, prio, rate, body) {
            if (prio === void 0) { prio = 0; }
            if (rate === void 0) { rate = 0; }
            if (body === void 0) { body = structure.Value.absent(); }
            node = uri.Uri.fromAny(node);
            lane = uri.Uri.fromAny(lane);
            body = structure.Value.fromAny(body);
            return new SyncRequest(node, lane, prio, rate, body);
        };
        return SyncRequest;
    }(LinkAddressed));
    Envelope.SyncRequest = SyncRequest;

    var SyncedResponse = (function (_super) {
        __extends(SyncedResponse, _super);
        function SyncedResponse(node, lane, body) {
            return _super.call(this, node, lane, body) || this;
        }
        SyncedResponse.prototype.copy = function (node, lane, body) {
            return new SyncedResponse(node, lane, body);
        };
        SyncedResponse.tag = function () {
            return "synced";
        };
        SyncedResponse.fromValue = function (value) {
            return LaneAddressed.fromValue(value, SyncedResponse);
        };
        SyncedResponse.of = function (node, lane, body) {
            if (body === void 0) { body = structure.Value.absent(); }
            node = uri.Uri.fromAny(node);
            lane = uri.Uri.fromAny(lane);
            body = structure.Value.fromAny(body);
            return new SyncedResponse(node, lane, body);
        };
        return SyncedResponse;
    }(LaneAddressed));
    Envelope.SyncedResponse = SyncedResponse;

    var UnlinkRequest = (function (_super) {
        __extends(UnlinkRequest, _super);
        function UnlinkRequest(node, lane, body) {
            return _super.call(this, node, lane, body) || this;
        }
        UnlinkRequest.prototype.copy = function (node, lane, body) {
            return new UnlinkRequest(node, lane, body);
        };
        UnlinkRequest.tag = function () {
            return "unlink";
        };
        UnlinkRequest.fromValue = function (value) {
            return LaneAddressed.fromValue(value, UnlinkRequest);
        };
        UnlinkRequest.of = function (node, lane, body) {
            if (body === void 0) { body = structure.Value.absent(); }
            node = uri.Uri.fromAny(node);
            lane = uri.Uri.fromAny(lane);
            body = structure.Value.fromAny(body);
            return new UnlinkRequest(node, lane, body);
        };
        return UnlinkRequest;
    }(LaneAddressed));
    Envelope.UnlinkRequest = UnlinkRequest;

    var UnlinkedResponse = (function (_super) {
        __extends(UnlinkedResponse, _super);
        function UnlinkedResponse(node, lane, body) {
            return _super.call(this, node, lane, body) || this;
        }
        UnlinkedResponse.prototype.copy = function (node, lane, body) {
            return new UnlinkedResponse(node, lane, body);
        };
        UnlinkedResponse.tag = function () {
            return "unlinked";
        };
        UnlinkedResponse.fromValue = function (value) {
            return LaneAddressed.fromValue(value, UnlinkedResponse);
        };
        UnlinkedResponse.of = function (node, lane, body) {
            if (body === void 0) { body = structure.Value.absent(); }
            node = uri.Uri.fromAny(node);
            lane = uri.Uri.fromAny(lane);
            body = structure.Value.fromAny(body);
            return new UnlinkedResponse(node, lane, body);
        };
        return UnlinkedResponse;
    }(LaneAddressed));
    Envelope.UnlinkedResponse = UnlinkedResponse;

    var AuthRequest = (function (_super) {
        __extends(AuthRequest, _super);
        function AuthRequest(body) {
            return _super.call(this, body) || this;
        }
        AuthRequest.prototype.copy = function (body) {
            return new AuthRequest(body);
        };
        AuthRequest.tag = function () {
            return "auth";
        };
        AuthRequest.fromValue = function (value) {
            return HostAddressed.fromValue(value, AuthRequest);
        };
        AuthRequest.of = function (body) {
            if (body === void 0) { body = structure.Value.absent(); }
            body = structure.Value.fromAny(body);
            return new AuthRequest(body);
        };
        return AuthRequest;
    }(HostAddressed));
    Envelope.AuthRequest = AuthRequest;

    var AuthedResponse = (function (_super) {
        __extends(AuthedResponse, _super);
        function AuthedResponse(body) {
            return _super.call(this, body) || this;
        }
        AuthedResponse.prototype.copy = function (body) {
            return new AuthedResponse(body);
        };
        AuthedResponse.tag = function () {
            return "authed";
        };
        AuthedResponse.fromValue = function (value) {
            return HostAddressed.fromValue(value, AuthedResponse);
        };
        AuthedResponse.of = function (body) {
            if (body === void 0) { body = structure.Value.absent(); }
            body = structure.Value.fromAny(body);
            return new AuthedResponse(body);
        };
        return AuthedResponse;
    }(HostAddressed));
    Envelope.AuthedResponse = AuthedResponse;

    var DeauthRequest = (function (_super) {
        __extends(DeauthRequest, _super);
        function DeauthRequest(body) {
            return _super.call(this, body) || this;
        }
        DeauthRequest.prototype.copy = function (body) {
            return new DeauthRequest(body);
        };
        DeauthRequest.tag = function () {
            return "deauth";
        };
        DeauthRequest.fromValue = function (value) {
            return HostAddressed.fromValue(value, DeauthRequest);
        };
        DeauthRequest.of = function (body) {
            if (body === void 0) { body = structure.Value.absent(); }
            body = structure.Value.fromAny(body);
            return new DeauthRequest(body);
        };
        return DeauthRequest;
    }(HostAddressed));
    Envelope.DeauthRequest = DeauthRequest;

    var DeauthedResponse = (function (_super) {
        __extends(DeauthedResponse, _super);
        function DeauthedResponse(body) {
            return _super.call(this, body) || this;
        }
        DeauthedResponse.prototype.copy = function (body) {
            return new DeauthedResponse(body);
        };
        DeauthedResponse.tag = function () {
            return "deauthed";
        };
        DeauthedResponse.fromValue = function (value) {
            return HostAddressed.fromValue(value, DeauthedResponse);
        };
        DeauthedResponse.of = function (body) {
            if (body === void 0) { body = structure.Value.absent(); }
            body = structure.Value.fromAny(body);
            return new DeauthedResponse(body);
        };
        return DeauthedResponse;
    }(HostAddressed));
    Envelope.DeauthedResponse = DeauthedResponse;

    exports.AuthRequest = AuthRequest;
    exports.AuthedResponse = AuthedResponse;
    exports.CommandMessage = CommandMessage;
    exports.DeauthRequest = DeauthRequest;
    exports.DeauthedResponse = DeauthedResponse;
    exports.Envelope = Envelope;
    exports.EventMessage = EventMessage;
    exports.HostAddressed = HostAddressed;
    exports.LaneAddressed = LaneAddressed;
    exports.LinkAddressed = LinkAddressed;
    exports.LinkRequest = LinkRequest;
    exports.LinkedResponse = LinkedResponse;
    exports.SyncRequest = SyncRequest;
    exports.SyncedResponse = SyncedResponse;
    exports.UnlinkRequest = UnlinkRequest;
    exports.UnlinkedResponse = UnlinkedResponse;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=swim-warp.js.map