import { HashCode } from "@swim/util";
import { Output, Debug } from "@swim/codec";
import { AnyUri, Uri } from "@swim/uri";
import { AnyValue, Value } from "@swim/structure";
import { EventMessage } from "./EventMessage";
import { CommandMessage } from "./CommandMessage";
import { LinkRequest } from "./LinkRequest";
import { LinkedResponse } from "./LinkedResponse";
import { SyncRequest } from "./SyncRequest";
import { SyncedResponse } from "./SyncedResponse";
import { UnlinkRequest } from "./UnlinkRequest";
import { UnlinkedResponse } from "./UnlinkedResponse";
import { AuthRequest } from "./AuthRequest";
import { AuthedResponse } from "./AuthedResponse";
import { DeauthRequest } from "./DeauthRequest";
import { DeauthedResponse } from "./DeauthedResponse";
export declare abstract class Envelope implements HashCode, Debug {
    tag(): string;
    abstract node(): Uri;
    abstract node(node: AnyUri): this;
    abstract lane(): Uri;
    abstract lane(lane: AnyUri): this;
    prio(): number;
    prio(prio: number): this;
    rate(): number;
    rate(rate: number): this;
    abstract body(): Value;
    abstract body(body: AnyValue): this;
    abstract toValue(): Value;
    toRecon(): string;
    abstract equals(that: unknown): boolean;
    abstract hashCode(): number;
    abstract debug(output: Output): void;
    toString(): string;
    static tag(): string;
    static fromValue(value: Value): Envelope | undefined;
    static parseRecon(input: string): Envelope | undefined;
    static EventMessage: typeof EventMessage;
    static CommandMessage: typeof CommandMessage;
    static LinkRequest: typeof LinkRequest;
    static LinkedResponse: typeof LinkedResponse;
    static SyncRequest: typeof SyncRequest;
    static SyncedResponse: typeof SyncedResponse;
    static UnlinkRequest: typeof UnlinkRequest;
    static UnlinkedResponse: typeof UnlinkedResponse;
    static AuthRequest: typeof AuthRequest;
    static AuthedResponse: typeof AuthedResponse;
    static DeauthRequest: typeof DeauthRequest;
    static DeauthedResponse: typeof DeauthedResponse;
}
//# sourceMappingURL=Envelope.d.ts.map