import { __extends } from "tslib";
import { Murmur3 } from "@swim/util";
import { Uri } from "@swim/uri";
import { Value, Attr } from "@swim/structure";
import { Envelope } from "./Envelope";
var HostAddressed = (function (_super) {
    __extends(HostAddressed, _super);
    function HostAddressed(body) {
        var _this = _super.call(this) || this;
        _this._body = body;
        return _this;
    }
    HostAddressed.prototype.node = function (node) {
        if (node === void 0) {
            return Uri.empty();
        }
        else {
            return this;
        }
    };
    HostAddressed.prototype.lane = function (lane) {
        if (lane === void 0) {
            return Uri.empty();
        }
        else {
            return this;
        }
    };
    HostAddressed.prototype.body = function (body) {
        if (body === void 0) {
            return this._body;
        }
        else {
            body = Value.fromAny(body);
            return this.copy(body);
        }
    };
    HostAddressed.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof HostAddressed
            && this.__proto__.constructor === that.__proto__.constructor) {
            return this._body.equals(that._body);
        }
        return false;
    };
    HostAddressed.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.seed(this.__proto__), this._body.hashCode()));
    };
    HostAddressed.prototype.debug = function (output) {
        output = output.write(this.__proto__.constructor.name).write(46).write("of").write(40);
        if (this._body.isDefined()) {
            output = output.debug(this._body);
        }
        output = output.write(41);
    };
    HostAddressed.prototype.toValue = function () {
        return Attr.of(this.tag()).concat(this._body);
    };
    HostAddressed.fromValue = function (value, E) {
        var header = value.header(E.tag());
        if (header.isDefined()) {
            var body = value.body();
            return new E(body);
        }
        return void 0;
    };
    return HostAddressed;
}(Envelope));
export { HostAddressed };
//# sourceMappingURL=HostAddressed.js.map