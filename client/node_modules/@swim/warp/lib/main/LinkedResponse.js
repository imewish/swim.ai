import { __extends } from "tslib";
import { Uri } from "@swim/uri";
import { Value } from "@swim/structure";
import { Envelope } from "./Envelope";
import { LinkAddressed } from "./LinkAddressed";
var LinkedResponse = (function (_super) {
    __extends(LinkedResponse, _super);
    function LinkedResponse(node, lane, prio, rate, body) {
        return _super.call(this, node, lane, prio, rate, body) || this;
    }
    LinkedResponse.prototype.copy = function (node, lane, prio, rate, body) {
        return new LinkedResponse(node, lane, prio, rate, body);
    };
    LinkedResponse.tag = function () {
        return "linked";
    };
    LinkedResponse.fromValue = function (value) {
        return LinkAddressed.fromValue(value, LinkedResponse);
    };
    LinkedResponse.of = function (node, lane, prio, rate, body) {
        if (prio === void 0) { prio = 0; }
        if (rate === void 0) { rate = 0; }
        if (body === void 0) { body = Value.absent(); }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new LinkedResponse(node, lane, prio, rate, body);
    };
    return LinkedResponse;
}(LinkAddressed));
export { LinkedResponse };
Envelope.LinkedResponse = LinkedResponse;
//# sourceMappingURL=LinkedResponse.js.map