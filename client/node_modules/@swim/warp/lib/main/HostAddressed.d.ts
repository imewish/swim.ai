import { Output } from "@swim/codec";
import { AnyUri, Uri } from "@swim/uri";
import { AnyValue, Value } from "@swim/structure";
import { Envelope } from "./Envelope";
export declare abstract class HostAddressed extends Envelope {
    readonly _body: Value;
    constructor(body: Value);
    node(): Uri;
    node(node: AnyUri): this;
    lane(): Uri;
    lane(lane: AnyUri): this;
    body(): Value;
    body(body: AnyValue): this;
    equals(that: unknown): boolean;
    hashCode(): number;
    debug(output: Output): void;
    protected abstract copy(body: Value): this;
    toValue(): Value;
    static fromValue(value: Value, E?: {
        new (body: Value): HostAddressed;
        tag(): string;
    }): HostAddressed | undefined;
}
//# sourceMappingURL=HostAddressed.d.ts.map