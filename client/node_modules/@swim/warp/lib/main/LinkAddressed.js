import { __extends } from "tslib";
import { Murmur3 } from "@swim/util";
import { Uri } from "@swim/uri";
import { Attr, Value, Record } from "@swim/structure";
import { Envelope } from "./Envelope";
var LinkAddressed = (function (_super) {
    __extends(LinkAddressed, _super);
    function LinkAddressed(node, lane, prio, rate, body) {
        var _this = _super.call(this) || this;
        _this._node = node;
        _this._lane = lane;
        _this._prio = prio;
        _this._rate = rate;
        _this._body = body;
        return _this;
    }
    LinkAddressed.prototype.node = function (node) {
        if (node === undefined) {
            return this._node;
        }
        else {
            node = Uri.fromAny(node);
            return this.copy(node, this._lane, this._prio, this._rate, this._body);
        }
    };
    LinkAddressed.prototype.lane = function (lane) {
        if (lane === undefined) {
            return this._lane;
        }
        else {
            lane = Uri.fromAny(lane);
            return this.copy(this._node, lane, this._prio, this._rate, this._body);
        }
    };
    LinkAddressed.prototype.prio = function (prio) {
        if (prio === undefined) {
            return this._prio;
        }
        else {
            return this.copy(this._node, this._lane, prio, this._rate, this._body);
        }
    };
    LinkAddressed.prototype.rate = function (rate) {
        if (rate === undefined) {
            return this._rate;
        }
        else {
            return this.copy(this._node, this._lane, this._prio, rate, this._body);
        }
    };
    LinkAddressed.prototype.body = function (body) {
        if (body === undefined) {
            return this._body;
        }
        else {
            body = Value.fromAny(body);
            return this.copy(this._node, this._lane, this._prio, this._rate, body);
        }
    };
    LinkAddressed.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LinkAddressed
            && this.__proto__.constructor === that.__proto__.constructor) {
            return this._node.equals(that._node) && this._lane.equals(that._lane)
                && this._prio === that._prio && this._rate === that._rate
                && this._body.equals(that._body);
        }
        return false;
    };
    LinkAddressed.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.seed(this.__proto__), this._node.hashCode()), this._lane.hashCode()), Murmur3.hash(this._prio)), Murmur3.hash(this._rate)), this._body.hashCode()));
    };
    LinkAddressed.prototype.debug = function (output) {
        output = output.write(this.__proto__.constructor.name).write(46).write("of").write(40)
            .debug(this._node.toString()).write(", ").debug(this._lane.toString());
        if (this._prio || this._rate) {
            output = output.write(", ").debug(this._prio).write(", ").debug(this._rate);
        }
        if (this._body.isDefined()) {
            output = output.write(", ").debug(this._body);
        }
        output = output.write(41);
    };
    LinkAddressed.prototype.toValue = function () {
        var header = Record.create(4)
            .slot("node", this._node.toString())
            .slot("lane", this._lane.toString());
        if (this._prio) {
            header.slot("prio", this._prio);
        }
        if (this._rate) {
            header.slot("rate", this._rate);
        }
        return Attr.of(this.tag(), header).concat(this._body);
    };
    LinkAddressed.fromValue = function (value, E) {
        var node;
        var lane;
        var prio = 0;
        var rate = 0;
        var header = value.header(E.tag());
        header.forEach(function (header, index) {
            var key = header.key.stringValue(void 0);
            if (key !== void 0) {
                if (key === "node") {
                    node = Uri.parse(header.toValue().stringValue(""));
                }
                else if (key === "lane") {
                    lane = Uri.parse(header.toValue().stringValue(""));
                }
                else if (key === "prio") {
                    prio = header.numberValue(prio);
                }
                else if (key === "rate") {
                    rate = header.numberValue(rate);
                }
            }
            else if (header instanceof Value) {
                if (index === 0) {
                    node = Uri.parse(header.stringValue(""));
                }
                else if (index === 1) {
                    lane = Uri.parse(header.stringValue(""));
                }
            }
        });
        if (node && lane) {
            var body = value.body();
            return new E(node, lane, prio, rate, body);
        }
        return void 0;
    };
    return LinkAddressed;
}(Envelope));
export { LinkAddressed };
//# sourceMappingURL=LinkAddressed.js.map