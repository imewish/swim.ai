import { __extends } from "tslib";
import { Uri } from "@swim/uri";
import { Value } from "@swim/structure";
import { Envelope } from "./Envelope";
import { LaneAddressed } from "./LaneAddressed";
var EventMessage = (function (_super) {
    __extends(EventMessage, _super);
    function EventMessage(node, lane, body) {
        return _super.call(this, node, lane, body) || this;
    }
    EventMessage.prototype.copy = function (node, lane, body) {
        return new EventMessage(node, lane, body);
    };
    EventMessage.tag = function () {
        return "event";
    };
    EventMessage.fromValue = function (value) {
        return LaneAddressed.fromValue(value, EventMessage);
    };
    EventMessage.of = function (node, lane, body) {
        if (body === void 0) { body = Value.absent(); }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new EventMessage(node, lane, body);
    };
    return EventMessage;
}(LaneAddressed));
export { EventMessage };
Envelope.EventMessage = EventMessage;
//# sourceMappingURL=EventMessage.js.map