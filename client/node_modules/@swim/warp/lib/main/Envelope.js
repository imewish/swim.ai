import { Format } from "@swim/codec";
import { Recon } from "@swim/recon";
var Envelope = (function () {
    function Envelope() {
    }
    Envelope.prototype.tag = function () {
        return this.constructor.tag();
    };
    Envelope.prototype.prio = function (prio) {
        if (prio === void 0) {
            return 0;
        }
        else {
            return this;
        }
    };
    Envelope.prototype.rate = function (rate) {
        if (rate === void 0) {
            return 0;
        }
        else {
            return this;
        }
    };
    Envelope.prototype.toRecon = function () {
        return Recon.toString(this.toValue());
    };
    Envelope.prototype.toString = function () {
        return Format.debug(this);
    };
    Envelope.tag = function () {
        return void 0;
    };
    Envelope.fromValue = function (value) {
        switch (value.tag()) {
            case "event": return Envelope.EventMessage.fromValue(value);
            case "command": return Envelope.CommandMessage.fromValue(value);
            case "link": return Envelope.LinkRequest.fromValue(value);
            case "linked": return Envelope.LinkedResponse.fromValue(value);
            case "sync": return Envelope.SyncRequest.fromValue(value);
            case "synced": return Envelope.SyncedResponse.fromValue(value);
            case "unlink": return Envelope.UnlinkRequest.fromValue(value);
            case "unlinked": return Envelope.UnlinkedResponse.fromValue(value);
            case "auth": return Envelope.AuthRequest.fromValue(value);
            case "authed": return Envelope.AuthedResponse.fromValue(value);
            case "deauth": return Envelope.DeauthRequest.fromValue(value);
            case "deauthed": return Envelope.DeauthedResponse.fromValue(value);
            default: return void 0;
        }
    };
    Envelope.parseRecon = function (input) {
        return Envelope.fromValue(Recon.parse(input));
    };
    return Envelope;
}());
export { Envelope };
//# sourceMappingURL=Envelope.js.map