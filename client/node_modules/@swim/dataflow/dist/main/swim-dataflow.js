(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@swim/streamlet'), require('@swim/util'), require('@swim/collections'), require('@swim/structure')) :
    typeof define === 'function' && define.amd ? define(['exports', '@swim/streamlet', '@swim/util', '@swim/collections', '@swim/structure'], factory) :
    (global = global || self, factory(global.swim = global.swim || {}, global.swim, global.swim, global.swim, global.swim));
}(this, (function (exports, streamlet, util, collections, structure) { 'use strict';

    var RecordOutlet = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var outlet = object;
                return streamlet.MapOutlet.is(outlet) && streamlet.StreamletScope.is(outlet);
            }
            return false;
        },
        Streamlet: void 0,
        Model: void 0,
        Scope: void 0,
        Dataflow: void 0,
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var AbstractRecordOutlet = (function (_super) {
        __extends(AbstractRecordOutlet, _super);
        function AbstractRecordOutlet() {
            var _this = _super.call(this) || this;
            _this._effects = new collections.BTree();
            _this._outlets = new collections.BTree();
            _this._outputs = null;
            _this._version = -1;
            return _this;
        }
        AbstractRecordOutlet.prototype.streamletScope = function () {
            return null;
        };
        AbstractRecordOutlet.prototype.streamletContext = function () {
            var scope = this.streamletScope();
            if (scope !== null) {
                return scope.streamletContext();
            }
            return null;
        };
        AbstractRecordOutlet.prototype.hasOwn = function (key) {
            return this.has(key);
        };
        AbstractRecordOutlet.prototype.get = function (key) {
            if (key === void 0) {
                return this;
            }
            else {
                return _super.prototype.get.call(this, key);
            }
        };
        AbstractRecordOutlet.prototype.outlet = function (key) {
            if (typeof key === "string") {
                key = structure.Text.from(key);
            }
            if (!this.hasOwn(key)) {
                var scope = this.streamletScope();
                if (RecordOutlet.is(scope) && scope.has(key)) {
                    return scope.outlet(key);
                }
            }
            var outlet = this._outlets.get(key);
            if (outlet === void 0) {
                outlet = new streamlet.KeyOutlet(this, key);
                this._outlets = this._outlets.updated(key, outlet);
                this.invalidateInputKey(key, 0);
            }
            return outlet;
        };
        AbstractRecordOutlet.prototype.outputIterator = function () {
            return this._outputs !== null ? util.Cursor.array(this._outputs) : util.Cursor.empty();
        };
        AbstractRecordOutlet.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        AbstractRecordOutlet.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        AbstractRecordOutlet.prototype.unbindOutputs = function () {
            var outlets = this._outlets;
            if (outlets.isEmpty()) {
                this._outlets = new collections.BTree();
                outlets.forEach(function (key, keyOutlet) {
                    keyOutlet.unbindOutputs();
                }, this);
            }
            var oldOutputs = this._outputs;
            if (oldOutputs !== null) {
                this._outputs = null;
                for (var i = 0, n = oldOutputs.length; i < n; i += 1) {
                    oldOutputs[i].unbindInput();
                }
            }
        };
        AbstractRecordOutlet.prototype.disconnectOutputs = function () {
            var outlets = this._outlets;
            if (outlets.isEmpty()) {
                this._outlets = new collections.BTree();
                outlets.forEach(function (key, keyOutlet) {
                    keyOutlet.disconnectOutputs();
                }, this);
            }
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                    output.disconnectOutputs();
                }
            }
            this.forEach(function (member) {
                if (member instanceof structure.Field) {
                    member = member.toValue();
                }
                if (member instanceof AbstractRecordOutlet) {
                    member.disconnectOutputs();
                }
                else if (member instanceof RecordOutlet.Streamlet) {
                    member.disconnectOutputs();
                }
                else if (RecordOutlet.is(member)) {
                    member.disconnectOutputs();
                }
            }, this);
        };
        AbstractRecordOutlet.prototype.disconnectInputs = function () {
        };
        AbstractRecordOutlet.prototype.invalidateInputKey = function (key, effect) {
            var oldEffects = this._effects;
            if (oldEffects.get(key) !== effect) {
                this.willInvalidateInputKey(key, effect);
                this._effects = oldEffects.updated(key, effect);
                this._version = -1;
                this.onInvalidateInputKey(key, effect);
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    var output = this._outputs[i];
                    if (streamlet.MapInlet.is(output)) {
                        output.invalidateOutputKey(key, effect);
                    }
                    else {
                        output.invalidateOutput();
                    }
                }
                var outlet = this._outlets.get(key);
                if (outlet !== void 0) {
                    outlet.invalidateInput();
                }
                this.didInvalidateInputKey(key, effect);
            }
        };
        AbstractRecordOutlet.prototype.invalidateInput = function () {
            if (this._version >= 0) {
                this.willInvalidateInput();
                this._version = -1;
                this.onInvalidateInput();
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this._outlets.forEach(function (key, outlet) {
                    outlet.invalidateInput();
                }, this);
                this.didInvalidateInput();
            }
        };
        AbstractRecordOutlet.prototype.reconcileInputKey = function (key, version) {
            if (this._version < 0) {
                var oldEffects = this._effects;
                var effect = oldEffects.get(key);
                if (effect !== void 0) {
                    this.willReconcileInputKey(key, effect, version);
                    this._effects = oldEffects.removed(key);
                    this.onReconcileInputKey(key, effect, version);
                    for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                        var output = this._outputs[i];
                        if (streamlet.MapInlet.is(output)) {
                            output.reconcileOutputKey(key, version);
                        }
                    }
                    var outlet = this._outlets.get(key);
                    if (outlet !== void 0) {
                        outlet.reconcileInput(version);
                    }
                    this.didReconcileInputKey(key, effect, version);
                }
            }
        };
        AbstractRecordOutlet.prototype.reconcileInput = function (version) {
            if (this._version < 0) {
                this.willReconcileInput(version);
                this._effects.forEach(function (key) {
                    this.reconcileInputKey(key, version);
                }, this);
                this._version = version;
                this.onReconcileInput(version);
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.forEach(function (member) {
                    if (member instanceof structure.Field) {
                        member = member.toValue();
                    }
                    if (member instanceof AbstractRecordOutlet) {
                        member.reconcileInput(version);
                    }
                    else if (member instanceof RecordOutlet.Streamlet) {
                        member.reconcile(version);
                    }
                    else if (RecordOutlet.is(member)) {
                        member.reconcileInput(version);
                    }
                }, this);
                this.didReconcileInput(version);
            }
        };
        AbstractRecordOutlet.prototype.willInvalidateInputKey = function (key, effect) {
        };
        AbstractRecordOutlet.prototype.onInvalidateInputKey = function (key, effect) {
        };
        AbstractRecordOutlet.prototype.didInvalidateInputKey = function (key, effect) {
        };
        AbstractRecordOutlet.prototype.willInvalidateInput = function () {
        };
        AbstractRecordOutlet.prototype.onInvalidateInput = function () {
        };
        AbstractRecordOutlet.prototype.didInvalidateInput = function () {
        };
        AbstractRecordOutlet.prototype.willReconcileInputKey = function (key, effect, version) {
        };
        AbstractRecordOutlet.prototype.onReconcileInputKey = function (key, effect, version) {
        };
        AbstractRecordOutlet.prototype.didReconcileInputKey = function (key, effect, version) {
        };
        AbstractRecordOutlet.prototype.willReconcileInput = function (version) {
        };
        AbstractRecordOutlet.prototype.onReconcileInput = function (version) {
        };
        AbstractRecordOutlet.prototype.didReconcileInput = function (version) {
        };
        AbstractRecordOutlet.prototype.memoize = function () {
            var combinator = new streamlet.MemoizeMapCombinator();
            combinator.bindInput(this);
            return combinator;
        };
        AbstractRecordOutlet.prototype.filter = function (func) {
            if (typeof func !== "function") {
                return _super.prototype.filter.call(this, func);
            }
            else {
                var combinator = new streamlet.FilterFieldsCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
        };
        AbstractRecordOutlet.prototype.map = function (func) {
            if (func.length === 1) {
                var combinator = new streamlet.MapValueCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
            else {
                var combinator = new streamlet.MapFieldValuesCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
        };
        AbstractRecordOutlet.prototype.reduce = function (identity, accumulator, combiner) {
            var combinator = new streamlet.ReduceFieldsCombinator(identity, accumulator, combiner);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractRecordOutlet.prototype.watch = function (func) {
            if (func.length === 1) {
                var combinator = new streamlet.WatchValueCombinator(func);
                combinator.bindInput(this);
                return this;
            }
            else {
                var combinator = new streamlet.WatchFieldsCombinator(func);
                combinator.bindInput(this);
                return this;
            }
        };
        return AbstractRecordOutlet;
    }(structure.Record));

    var RecordStreamlet = (function (_super) {
        __extends(RecordStreamlet, _super);
        function RecordStreamlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RecordStreamlet.prototype.isConstant = function () {
            return false;
        };
        RecordStreamlet.prototype.streamletClass = function () {
            return this.__proto__;
        };
        RecordStreamlet.prototype.compile = function () {
            streamlet.AbstractStreamlet.reflectEachInlet(this, this.streamletClass(), function (inlet, name) {
                if (inlet.input() === null) {
                    this.compileInlet(inlet, name);
                }
            }, this);
        };
        RecordStreamlet.prototype.compileInlet = function (inlet, name) {
            var scope = this.streamletScope();
            if (scope !== null) {
                var input = scope.outlet(name);
                if (input !== null) {
                    inlet.bindInput(input);
                }
            }
        };
        return RecordStreamlet;
    }(structure.Record));
    RecordOutlet.Streamlet = RecordStreamlet;

    var AbstractRecordStreamlet = (function (_super) {
        __extends(AbstractRecordStreamlet, _super);
        function AbstractRecordStreamlet(scope) {
            if (scope === void 0) { scope = null; }
            var _this = _super.call(this) || this;
            _this.scope = scope;
            _this.context = null;
            _this._version = -1;
            return _this;
        }
        AbstractRecordStreamlet.prototype.streamletScope = function () {
            return this.scope;
        };
        AbstractRecordStreamlet.prototype.setStreamletScope = function (scope) {
            this.scope = scope;
        };
        AbstractRecordStreamlet.prototype.streamletContext = function () {
            if (this.context) {
                return this.context;
            }
            var scope = this.streamletScope();
            if (scope !== null) {
                return scope.streamletContext();
            }
            return null;
        };
        AbstractRecordStreamlet.prototype.setStreamletContext = function (context) {
            this.context = context;
        };
        AbstractRecordStreamlet.prototype.isEmpty = function () {
            return this.length !== 0;
        };
        Object.defineProperty(AbstractRecordStreamlet.prototype, "length", {
            get: function () {
                return streamlet.AbstractStreamlet.reflectOutletCount(this.streamletClass());
            },
            enumerable: true,
            configurable: true
        });
        AbstractRecordStreamlet.prototype.has = function (key) {
            if (key instanceof structure.Text) {
                key = key.value;
            }
            else if (typeof key !== "string") {
                return false;
            }
            var outlet = this.outlet(key);
            return outlet !== null;
        };
        AbstractRecordStreamlet.prototype.get = function (key) {
            if (key instanceof structure.Text) {
                key = key.value;
            }
            else if (typeof key !== "string") {
                return structure.Value.absent();
            }
            var outlet = this.outlet(key);
            if (outlet !== null) {
                var output = outlet.get();
                if (output !== void 0) {
                    return output;
                }
            }
            return structure.Value.absent();
        };
        AbstractRecordStreamlet.prototype.getAttr = function (key) {
            return structure.Value.absent();
        };
        AbstractRecordStreamlet.prototype.getSlot = function (key) {
            return this.get(key);
        };
        AbstractRecordStreamlet.prototype.getField = function (key) {
            if (typeof key === "string") {
                key = structure.Text.from(key);
            }
            else if (!(key instanceof structure.Text)) {
                return void 0;
            }
            var value = this.get(key);
            if (value.isDefined()) {
                return structure.Slot.of(key, value);
            }
            return void 0;
        };
        AbstractRecordStreamlet.prototype.getItem = function (index) {
            if (index instanceof structure.Num) {
                index = index.value;
            }
            var entry = streamlet.AbstractStreamlet.reflectOutletIndex(index, this, this.streamletClass());
            if (entry !== null) {
                var name_1 = entry[0];
                var output = entry[1].get();
                if (output === void 0) {
                    output = structure.Value.extant();
                }
                return structure.Slot.of(name_1, output);
            }
            return structure.Item.absent();
        };
        AbstractRecordStreamlet.prototype.set = function (key, newValue) {
            throw new Error("unsupported");
        };
        AbstractRecordStreamlet.prototype.setAttr = function (key, newValue) {
            throw new Error("unsupported");
        };
        AbstractRecordStreamlet.prototype.setSlot = function (key, newValue) {
            throw new Error("unsupported");
        };
        AbstractRecordStreamlet.prototype.setItem = function (index, item) {
            throw new Error("unsupported");
        };
        AbstractRecordStreamlet.prototype.push = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            throw new Error("unsupported");
        };
        AbstractRecordStreamlet.prototype.splice = function (start, deleteCount) {
            var newItems = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }
            throw new Error("unsupported");
        };
        AbstractRecordStreamlet.prototype.delete = function (key) {
            throw new Error("unsupported");
        };
        AbstractRecordStreamlet.prototype.clear = function () {
            throw new Error("unsupported");
        };
        AbstractRecordStreamlet.prototype.forEach = function (callback, thisArg) {
            return streamlet.AbstractStreamlet.reflectEachOutlet(this, this.streamletClass(), function (outlet, name, index) {
                var output = outlet.get();
                if (output !== void 0) {
                    var result = callback.call(thisArg, output, index);
                    if (result !== void 0) {
                        return result;
                    }
                }
            }, this);
        };
        AbstractRecordStreamlet.prototype.inlet = function (key) {
            if (key === void 0) {
                return new streamlet.StreamletInlet(this);
            }
            else {
                return streamlet.AbstractStreamlet.reflectInletKey(key, this, this.streamletClass());
            }
        };
        AbstractRecordStreamlet.prototype.bindInput = function (key, input) {
            var inlet = this.inlet(key);
            if (inlet === null) {
                throw new Error("" + key);
            }
            inlet.bindInput(input);
        };
        AbstractRecordStreamlet.prototype.unbindInput = function (key) {
            var inlet = this.inlet(key);
            if (inlet === null) {
                throw new Error("" + key);
            }
            inlet.unbindInput();
        };
        AbstractRecordStreamlet.prototype.outlet = function (key) {
            if (key === void 0) {
                return new streamlet.StreamletOutlet(this);
            }
            else if (typeof key === "string") {
                return streamlet.AbstractStreamlet.reflectOutletKey(key, this, this.streamletClass());
            }
            else {
                return key;
            }
        };
        AbstractRecordStreamlet.prototype.inoutlet = function () {
            return new streamlet.StreamletInoutlet(this);
        };
        AbstractRecordStreamlet.prototype.invalidate = function () {
            if (this._version >= 0) {
                this.willInvalidate();
                this._version = -1;
                this.onInvalidate();
                this.onInvalidateOutlets();
                this.didInvalidate();
            }
        };
        AbstractRecordStreamlet.prototype.reconcile = function (version) {
            if (this._version < 0) {
                this.willReconcile(version);
                this._version = version;
                this.onReconcileInlets(version);
                this.onReconcile(version);
                this.onReconcileOutlets(version);
                this.didReconcile(version);
            }
        };
        AbstractRecordStreamlet.prototype.getInput = function (inlet, orElse) {
            if (typeof inlet === "string") {
                inlet = this.inlet(inlet);
            }
            var object;
            if (inlet !== null) {
                var input = inlet.input();
                if (input !== null) {
                    object = input.get();
                }
            }
            if (object === void 0) {
                object = orElse;
            }
            return object;
        };
        AbstractRecordStreamlet.prototype.castInput = function (inlet, form, orElse) {
            var input = this.getInput(inlet);
            var object;
            if (input !== void 0) {
                object = form.cast(input);
            }
            if (object === void 0) {
                object = orElse;
            }
            return object;
        };
        AbstractRecordStreamlet.prototype.coerceInput = function (inlet, form, orElse) {
            var input = this.getInput(inlet);
            var object;
            if (input !== void 0) {
                object = form.cast(input);
            }
            if (object === void 0) {
                object = form.unit();
            }
            if (object === void 0) {
                object = orElse;
            }
            return object;
        };
        AbstractRecordStreamlet.prototype.getOutput = function (outlet) {
            return void 0;
        };
        AbstractRecordStreamlet.prototype.disconnectInputs = function () {
            streamlet.AbstractStreamlet.disconnectInputs(this, this.streamletClass());
        };
        AbstractRecordStreamlet.prototype.disconnectOutputs = function () {
            streamlet.AbstractStreamlet.disconnectOutputs(this, this.streamletClass());
        };
        AbstractRecordStreamlet.prototype.willInvalidateInlet = function (inlet) {
        };
        AbstractRecordStreamlet.prototype.didInvalidateInlet = function (inlet) {
            this.invalidate();
        };
        AbstractRecordStreamlet.prototype.willReconcileInlet = function (inlet, version) {
        };
        AbstractRecordStreamlet.prototype.didReconcileInlet = function (inlet, version) {
            this.reconcile(version);
        };
        AbstractRecordStreamlet.prototype.willInvalidateOutlet = function (outlet) {
        };
        AbstractRecordStreamlet.prototype.didInvalidateOutlet = function (outlet) {
        };
        AbstractRecordStreamlet.prototype.willReconcileOutlet = function (outlet, version) {
        };
        AbstractRecordStreamlet.prototype.didReconcileOutlet = function (outlet, version) {
        };
        AbstractRecordStreamlet.prototype.willInvalidate = function () {
        };
        AbstractRecordStreamlet.prototype.onInvalidate = function () {
        };
        AbstractRecordStreamlet.prototype.didInvalidate = function () {
        };
        AbstractRecordStreamlet.prototype.onInvalidateOutlets = function () {
            streamlet.AbstractStreamlet.invalidateOutlets(this, this.streamletClass());
        };
        AbstractRecordStreamlet.prototype.willReconcile = function (version) {
        };
        AbstractRecordStreamlet.prototype.onReconcileInlets = function (version) {
            streamlet.AbstractStreamlet.reconcileInlets(version, this, this.streamletClass());
        };
        AbstractRecordStreamlet.prototype.onReconcile = function (version) {
        };
        AbstractRecordStreamlet.prototype.onReconcileOutlets = function (version) {
            streamlet.AbstractStreamlet.reconcileOutlets(version, this, this.streamletClass());
        };
        AbstractRecordStreamlet.prototype.didReconcile = function (version) {
        };
        return AbstractRecordStreamlet;
    }(RecordStreamlet));

    var RecordFieldUpdater = (function (_super) {
        __extends(RecordFieldUpdater, _super);
        function RecordFieldUpdater(record, key) {
            var _this = _super.call(this) || this;
            _this._record = record;
            _this._key = key;
            return _this;
        }
        RecordFieldUpdater.prototype.onInvalidateOutput = function () {
            if (RecordOutlet.is(this._record)) {
                this._record.invalidateInputKey(this._key, 0);
            }
        };
        RecordFieldUpdater.prototype.onReconcileOutput = function (version) {
            if (this._input !== null) {
                var value = this._input.get();
                if (value !== void 0) {
                    this._record.set(this._key, value);
                }
                else {
                    this._record.delete(this._key);
                }
            }
        };
        return RecordFieldUpdater;
    }(streamlet.AbstractInlet));

    var Transmuter = (function () {
        function Transmuter() {
        }
        Transmuter.system = function () {
            return null;
        };
        return Transmuter;
    }());

    var RecordModel = (function (_super) {
        __extends(RecordModel, _super);
        function RecordModel(state) {
            if (state === void 0) { state = structure.Record.create(); }
            var _this = _super.call(this) || this;
            _this._state = state;
            _this._fieldUpdaters = new collections.BTree();
            return _this;
        }
        RecordModel.prototype.isEmpty = function () {
            return this._state.isEmpty();
        };
        RecordModel.prototype.isArray = function () {
            return this._state.isArray();
        };
        RecordModel.prototype.isObject = function () {
            return this._state.isObject();
        };
        Object.defineProperty(RecordModel.prototype, "length", {
            get: function () {
                return this._state.length;
            },
            enumerable: true,
            configurable: true
        });
        RecordModel.prototype.fieldCount = function () {
            return this._state.fieldCount();
        };
        RecordModel.prototype.valueCount = function () {
            return this._state.valueCount();
        };
        RecordModel.prototype.has = function (key) {
            if (this._state.has(key)) {
                return true;
            }
            else {
                var scope = this.streamletScope();
                return scope instanceof structure.Record ? scope.has(key) : false;
            }
        };
        RecordModel.prototype.hasOwn = function (key) {
            return this._state.has(key);
        };
        RecordModel.prototype.indexOf = function (item, index) {
            return this._state.indexOf(item, index);
        };
        RecordModel.prototype.lastIndexOf = function (item, index) {
            if (index === void 0) { index = 0; }
            return this._state.lastIndexOf(item, index);
        };
        RecordModel.prototype.get = function (key) {
            if (key === void 0) {
                return this;
            }
            else {
                key = structure.Value.fromAny(key);
                var value = this._state.get(key);
                if (!value.isDefined()) {
                    var scope = this.streamletScope();
                    if (scope instanceof structure.Record) {
                        value = scope.get(key);
                    }
                }
                return value;
            }
        };
        RecordModel.prototype.getAttr = function (key) {
            key = structure.Text.fromAny(key);
            var value = this._state.getAttr(key);
            if (!value.isDefined()) {
                var scope = this.streamletScope();
                if (scope instanceof structure.Record) {
                    value = scope.getAttr(key);
                }
            }
            return value;
        };
        RecordModel.prototype.getSlot = function (key) {
            key = structure.Value.fromAny(key);
            var value = this._state.getSlot(key);
            if (!value.isDefined()) {
                var scope = this.streamletScope();
                if (scope instanceof structure.Record) {
                    value = scope.getSlot(key);
                }
            }
            return value;
        };
        RecordModel.prototype.getField = function (key) {
            key = structure.Value.fromAny(key);
            var field = this._state.getField(key);
            if (field === void 0) {
                var scope = this.streamletScope();
                if (scope instanceof structure.Record) {
                    field = scope.getField(key);
                }
            }
            return field;
        };
        RecordModel.prototype.getItem = function (index) {
            return this._state.getItem(index);
        };
        RecordModel.prototype.bindValue = function (key, expr) {
            var fieldUpdater = new RecordFieldUpdater(this, key);
            var valueInput = RecordOutlet.Dataflow.compile(expr, this);
            fieldUpdater.bindInput(valueInput);
            this._fieldUpdaters = this._fieldUpdaters.updated(key, fieldUpdater);
        };
        RecordModel.prototype.set = function (key, newValue) {
            key = structure.Value.fromAny(key);
            if (!this._state.has(key)) {
                var scope = this.streamletScope();
                if (scope instanceof structure.Record && scope.has(key)) {
                    scope.set(key, newValue);
                }
                else {
                    this._state.set(key, newValue);
                }
            }
            else {
                this._state.set(key, newValue);
            }
            this.invalidateInputKey(key, 0);
            return this;
        };
        RecordModel.prototype.setAttr = function (key, newValue) {
            key = structure.Text.fromAny(key);
            if (!this._state.has(key)) {
                var scope = this.streamletScope();
                if (scope instanceof structure.Record && scope.has(key)) {
                    scope.setAttr(key, newValue);
                }
                else {
                    this._state.setAttr(key, newValue);
                }
            }
            else {
                this._state.setAttr(key, newValue);
            }
            this.invalidateInputKey(key, 0);
            return this;
        };
        RecordModel.prototype.setSlot = function (key, newValue) {
            key = structure.Value.fromAny(key);
            if (!this._state.has(key)) {
                var scope = this.streamletScope();
                if (scope instanceof structure.Record && scope.has(key)) {
                    scope.setSlot(key, newValue);
                }
                else {
                    this._state.setSlot(key, newValue);
                }
            }
            else {
                this._state.setSlot(key, newValue);
            }
            this.invalidateInputKey(key, 0);
            return this;
        };
        RecordModel.prototype.setItem = function (index, newItem) {
            var oldItem = this._state.getItem(index);
            newItem = structure.Item.fromAny(newItem);
            this._state.setItem(index, newItem);
            if (oldItem instanceof structure.Field && newItem instanceof structure.Field) {
                if (oldItem.key.equals(newItem.key)) {
                    this.invalidateInputKey(oldItem.key, 0);
                }
                else {
                    this.invalidateInputKey(oldItem.key, 1);
                    this.invalidateInputKey(newItem.key, 0);
                }
            }
            else if (oldItem instanceof structure.Field) {
                this.invalidateInputKey(oldItem.key, 1);
            }
            else if (newItem instanceof structure.Field) {
                this.invalidateInputKey(newItem.key, 0);
            }
            else {
                this.invalidateInput();
            }
            return this;
        };
        RecordModel.prototype.push = function () {
            var newItems = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newItems[_i] = arguments[_i];
            }
            var i = this._state.length;
            var n = this._state.push.apply(this._state, arguments);
            while (i < n) {
                var newItem = this._state.get(i);
                if (newItem instanceof structure.Field) {
                    this.invalidateInputKey(newItem.key, 0);
                }
                i += 1;
            }
            return n;
        };
        RecordModel.prototype.splice = function (start, deleteCount) {
            if (deleteCount === void 0) { deleteCount = 0; }
            var newItems = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }
            var n = this._state.length;
            if (start < 0) {
                start = n + start;
            }
            start = Math.max(0, start);
            deleteCount = Math.max(0, deleteCount);
            var deleted = this._state.splice.apply(this._state, arguments);
            for (var i = 0; i < deleted.length; i += 1) {
                var oldItem = deleted[i];
                if (oldItem instanceof structure.Field) {
                    this.invalidateInputKey(oldItem.key, 1);
                }
            }
            for (var i = start; i < start + newItems.length; i += 1) {
                var newItem = this._state.get(i);
                if (newItem instanceof structure.Field) {
                    this.invalidateInputKey(newItem.key, 0);
                }
            }
            return deleted;
        };
        RecordModel.prototype.delete = function (key) {
            var oldItem = this._state.delete(key);
            if (oldItem instanceof structure.Field) {
                this.invalidateInputKey(oldItem.key, 1);
            }
            return oldItem;
        };
        RecordModel.prototype.clear = function () {
            var oldState = this._state.branch();
            this._state.clear();
            oldState.forEach(function (oldItem) {
                if (oldItem instanceof structure.Field) {
                    this.invalidateInputKey(oldItem.key, 1);
                }
            }, this);
        };
        RecordModel.prototype.forEach = function (callback, thisArg) {
            return this._state.forEach(callback, thisArg);
        };
        RecordModel.prototype.keyIterator = function () {
            throw new Error();
        };
        RecordModel.prototype.disconnectInputs = function () {
            var fieldUpdaters = this._fieldUpdaters;
            if (!fieldUpdaters.isEmpty()) {
                this._fieldUpdaters = new collections.BTree();
                fieldUpdaters.forEach(function (key, inlet) {
                    inlet.disconnectInputs();
                }, this);
            }
        };
        RecordModel.prototype.memoize = function () {
            return this;
        };
        RecordModel.prototype.materialize = function (record) {
            record.forEach(function (item) {
                this.materializeItem(item);
            }, this);
        };
        RecordModel.prototype.materializeItem = function (item) {
            if (item instanceof structure.Field) {
                this.materializeField(item);
            }
            else {
                this.materializeValue(item);
            }
        };
        RecordModel.prototype.materializeField = function (field) {
            var value = field.value;
            if (value instanceof RecordStreamlet) {
                value.setStreamletScope(this);
                this._state.push(field);
            }
            else if (value instanceof structure.Record) {
                var child = new RecordOutlet.Scope(this);
                child.materialize(value);
                this._state.push(field.updatedValue(child));
            }
            else {
                this._state.push(field);
            }
        };
        RecordModel.prototype.materializeValue = function (value) {
            if (value instanceof RecordStreamlet) {
                value.setStreamletScope(this);
                this._state.push(value);
            }
            else if (value instanceof structure.Record) {
                var child = new RecordOutlet.Scope(this);
                child.materialize(value);
                this._state.push(child);
            }
            else {
                this._state.push(value);
            }
        };
        RecordModel.prototype.compile = function (record) {
            record.forEach(function (item, index) {
                this.compileItem(item, index);
            }, this);
        };
        RecordModel.prototype.compileItem = function (item, index) {
            if (item instanceof structure.Field) {
                this.compileField(item, index);
            }
            else {
                this.compileValue(item, index);
            }
        };
        RecordModel.prototype.compileField = function (field, index) {
            var key = field.key;
            var value = field.value;
            if (!key.isConstant()) ;
            else if (!value.isConstant()) {
                if (value instanceof RecordStreamlet) {
                    value.compile();
                    this.invalidateInputKey(key, 0);
                }
                else if (value instanceof structure.Record) {
                    this._state.getItem(index).toValue().compile(value);
                    this.invalidateInputKey(key, 0);
                }
                else {
                    field.setValue(structure.Value.extant());
                    this.bindValue(key, value);
                }
            }
            else {
                this.invalidateInputKey(key, 0);
            }
        };
        RecordModel.prototype.compileValue = function (value, index) {
            if (value instanceof RecordStreamlet) {
                value.compile();
            }
            else if (value instanceof structure.Record) {
                this._state.getItem(index).compile(value);
            }
            else if (!value.isConstant()) ;
        };
        RecordModel.prototype.transmute = function (transmuter) {
            if (transmuter === void 0) { transmuter = Transmuter.system(); }
            this.forEach(function (oldItem, index) {
                var newItem = this.transmuteItem(oldItem, transmuter);
                if (oldItem !== newItem) {
                    this.setItem(index, newItem);
                }
            }, this);
        };
        RecordModel.prototype.transmuteItem = function (item, transmuter) {
            if (item instanceof structure.Field) {
                return this.transmuteField(item, transmuter);
            }
            else {
                return this.transmuteValue(item, transmuter);
            }
        };
        RecordModel.prototype.transmuteField = function (field, transmuter) {
            var oldValue = field.value;
            var newValue = this.transmuteValue(oldValue, transmuter);
            if (oldValue !== newValue) {
                return field.updatedValue(newValue);
            }
            else {
                return field;
            }
        };
        RecordModel.prototype.transmuteValue = function (oldValue, transmuter) {
            if (oldValue instanceof RecordModel) {
                var newValue = this.transmuteModel(oldValue);
                if (oldValue === newValue && transmuter) {
                    newValue = transmuter.transmute(oldValue);
                }
                return newValue;
            }
            else {
                return oldValue;
            }
        };
        RecordModel.prototype.transmuteModel = function (model) {
            var scope = this.streamletScope();
            if (scope instanceof RecordModel) {
                return scope.transmuteModel(model);
            }
            else {
                return model;
            }
        };
        RecordModel.from = function (record) {
            var model = new RecordModel();
            model.materialize(record);
            model.compile(record);
            return model;
        };
        RecordModel.of = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            return RecordModel.from(structure.Record.of.apply(void 0, arguments));
        };
        RecordModel.globalScope = function () {
            var model = new RecordModel();
            model.materializeField(structure.Slot.of("math", structure.MathModule.scope().branch()));
            return model;
        };
        return RecordModel;
    }(AbstractRecordOutlet));
    RecordOutlet.Model = RecordModel;

    var RecordScope = (function (_super) {
        __extends(RecordScope, _super);
        function RecordScope(scope, state) {
            var _this = _super.call(this, state) || this;
            _this.scope = scope;
            return _this;
        }
        RecordScope.prototype.streamletScope = function () {
            return this.scope;
        };
        RecordScope.from = function (record) {
            var scope = new RecordScope(RecordScope.globalScope());
            scope.materialize(record);
            scope.compile(record);
            return scope;
        };
        RecordScope.of = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            return RecordScope.from(structure.Record.of.apply(void 0, arguments));
        };
        return RecordScope;
    }(RecordModel));
    RecordOutlet.Scope = RecordScope;

    var GetOutlet = (function (_super) {
        __extends(GetOutlet, _super);
        function GetOutlet() {
            var _this = _super.call(this) || this;
            _this._keyInlet = new streamlet.OutletInlet(_this);
            _this._mapInlet = new streamlet.OutletMapInlet(_this);
            return _this;
        }
        GetOutlet.prototype.keyInlet = function () {
            return this._keyInlet;
        };
        GetOutlet.prototype.mapInlet = function () {
            return this._mapInlet;
        };
        GetOutlet.prototype.get = function () {
            var keyInput = this._keyInlet.input();
            if (keyInput !== null) {
                var key = keyInput.get();
                if (key !== void 0) {
                    var mapInput = this._mapInlet.input();
                    if (mapInput !== null) {
                        var value = mapInput.get(key);
                        if (value !== void 0) {
                            return value;
                        }
                    }
                }
            }
            return structure.Value.absent();
        };
        return GetOutlet;
    }(streamlet.AbstractOutlet));

    var BinaryOutlet = (function (_super) {
        __extends(BinaryOutlet, _super);
        function BinaryOutlet() {
            var _this = _super.call(this) || this;
            _this._operand1Inlet = new streamlet.OutletInlet(_this);
            _this._operand2Inlet = new streamlet.OutletInlet(_this);
            return _this;
        }
        BinaryOutlet.prototype.operand1Inlet = function () {
            return this._operand1Inlet;
        };
        BinaryOutlet.prototype.operand2Inlet = function () {
            return this._operand2Inlet;
        };
        BinaryOutlet.prototype.get = function () {
            var operand1Input = this._operand1Inlet.input();
            var operand2Input = this._operand2Inlet.input();
            if (operand1Input !== null && operand2Input !== null) {
                var argument1 = operand1Input.get();
                var argument2 = operand2Input.get();
                if (argument1 !== void 0 && argument2 !== void 0) {
                    var result = this.evaluate(argument1, argument2);
                    return result.toValue();
                }
            }
            return structure.Value.absent();
        };
        return BinaryOutlet;
    }(streamlet.AbstractOutlet));

    var UnaryOutlet = (function (_super) {
        __extends(UnaryOutlet, _super);
        function UnaryOutlet() {
            var _this = _super.call(this) || this;
            _this._operandInlet = new streamlet.OutletInlet(_this);
            return _this;
        }
        UnaryOutlet.prototype.operandInlet = function () {
            return this._operandInlet;
        };
        UnaryOutlet.prototype.get = function () {
            var operandInput = this._operandInlet.input();
            if (operandInput !== null) {
                var argument = operandInput.get();
                if (argument !== void 0) {
                    var result = this.evaluate(argument);
                    return result.toValue();
                }
            }
            return structure.Value.absent();
        };
        return UnaryOutlet;
    }(streamlet.AbstractOutlet));

    var ConditionalOutlet = (function (_super) {
        __extends(ConditionalOutlet, _super);
        function ConditionalOutlet() {
            var _this = _super.call(this) || this;
            _this._ifInlet = new streamlet.OutletInlet(_this);
            _this._thenInlet = new streamlet.OutletInlet(_this);
            _this._elseInlet = new streamlet.OutletInlet(_this);
            return _this;
        }
        ConditionalOutlet.prototype.ifInlet = function () {
            return this._ifInlet;
        };
        ConditionalOutlet.prototype.thenInlet = function () {
            return this._thenInlet;
        };
        ConditionalOutlet.prototype.elseInlet = function () {
            return this._elseInlet;
        };
        ConditionalOutlet.prototype.get = function () {
            var ifInput = this._ifInlet.input();
            if (ifInput !== null) {
                var ifTerm = ifInput.get();
                if (ifTerm !== void 0) {
                    if (ifTerm.booleanValue(false)) {
                        var thenInput = this._thenInlet.input();
                        if (thenInput !== null) {
                            var thenTerm = thenInput.get();
                            if (thenTerm !== void 0) {
                                return thenTerm;
                            }
                        }
                    }
                    else {
                        var elseInput = this._elseInlet.input();
                        if (elseInput !== null) {
                            var elseTerm = elseInput.get();
                            if (elseTerm !== void 0) {
                                return elseTerm;
                            }
                        }
                    }
                }
            }
            return structure.Value.absent();
        };
        return ConditionalOutlet;
    }(streamlet.AbstractOutlet));

    var OrOutlet = (function (_super) {
        __extends(OrOutlet, _super);
        function OrOutlet() {
            var _this = _super.call(this) || this;
            _this._operand1Inlet = new streamlet.OutletInlet(_this);
            _this._operand2Inlet = new streamlet.OutletInlet(_this);
            return _this;
        }
        OrOutlet.prototype.operand1Inlet = function () {
            return this._operand1Inlet;
        };
        OrOutlet.prototype.operand2Inlet = function () {
            return this._operand2Inlet;
        };
        OrOutlet.prototype.get = function () {
            var operand1Input = this._operand1Inlet.input();
            var argument1 = operand1Input !== null ? operand1Input.get() : void 0;
            if (argument1 !== void 0 && argument1.booleanValue(false)) {
                return argument1;
            }
            var operand2Input = this._operand2Inlet.input();
            var argument2 = operand2Input !== null ? operand2Input.get() : void 0;
            if (argument2 !== void 0) {
                return argument2;
            }
            return structure.Value.absent();
        };
        return OrOutlet;
    }(streamlet.AbstractOutlet));

    var AndOutlet = (function (_super) {
        __extends(AndOutlet, _super);
        function AndOutlet() {
            var _this = _super.call(this) || this;
            _this._operand1Inlet = new streamlet.OutletInlet(_this);
            _this._operand2Inlet = new streamlet.OutletInlet(_this);
            return _this;
        }
        AndOutlet.prototype.operand1Inlet = function () {
            return this._operand1Inlet;
        };
        AndOutlet.prototype.operand2Inlet = function () {
            return this._operand2Inlet;
        };
        AndOutlet.prototype.get = function () {
            var operand1Input = this._operand1Inlet.input();
            var argument1 = operand1Input !== null ? operand1Input.get() : void 0;
            if (argument1 !== void 0) {
                if (argument1.booleanValue(false)) {
                    var operand2Input = this._operand2Inlet.input();
                    var argument2 = operand2Input !== null ? operand2Input.get() : void 0;
                    if (argument2 !== void 0) {
                        return argument2;
                    }
                }
                return argument1;
            }
            return structure.Value.absent();
        };
        return AndOutlet;
    }(streamlet.AbstractOutlet));

    var BitwiseOrOutlet = (function (_super) {
        __extends(BitwiseOrOutlet, _super);
        function BitwiseOrOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BitwiseOrOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.bitwiseOr(argument2);
        };
        return BitwiseOrOutlet;
    }(BinaryOutlet));

    var BitwiseXorOutlet = (function (_super) {
        __extends(BitwiseXorOutlet, _super);
        function BitwiseXorOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BitwiseXorOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.bitwiseXor(argument2);
        };
        return BitwiseXorOutlet;
    }(BinaryOutlet));

    var BitwiseAndOutlet = (function (_super) {
        __extends(BitwiseAndOutlet, _super);
        function BitwiseAndOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BitwiseAndOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.bitwiseAnd(argument2);
        };
        return BitwiseAndOutlet;
    }(BinaryOutlet));

    var LtOutlet = (function (_super) {
        __extends(LtOutlet, _super);
        function LtOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LtOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.lt(argument2);
        };
        return LtOutlet;
    }(BinaryOutlet));

    var LeOutlet = (function (_super) {
        __extends(LeOutlet, _super);
        function LeOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LeOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.le(argument2);
        };
        return LeOutlet;
    }(BinaryOutlet));

    var EqOutlet = (function (_super) {
        __extends(EqOutlet, _super);
        function EqOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        EqOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.eq(argument2);
        };
        return EqOutlet;
    }(BinaryOutlet));

    var NeOutlet = (function (_super) {
        __extends(NeOutlet, _super);
        function NeOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NeOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.ne(argument2);
        };
        return NeOutlet;
    }(BinaryOutlet));

    var GeOutlet = (function (_super) {
        __extends(GeOutlet, _super);
        function GeOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GeOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.ge(argument2);
        };
        return GeOutlet;
    }(BinaryOutlet));

    var GtOutlet = (function (_super) {
        __extends(GtOutlet, _super);
        function GtOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GtOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.gt(argument2);
        };
        return GtOutlet;
    }(BinaryOutlet));

    var PlusOutlet = (function (_super) {
        __extends(PlusOutlet, _super);
        function PlusOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PlusOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.plus(argument2);
        };
        return PlusOutlet;
    }(BinaryOutlet));

    var MinusOutlet = (function (_super) {
        __extends(MinusOutlet, _super);
        function MinusOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MinusOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.minus(argument2);
        };
        return MinusOutlet;
    }(BinaryOutlet));

    var TimesOutlet = (function (_super) {
        __extends(TimesOutlet, _super);
        function TimesOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TimesOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.times(argument2);
        };
        return TimesOutlet;
    }(BinaryOutlet));

    var DivideOutlet = (function (_super) {
        __extends(DivideOutlet, _super);
        function DivideOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DivideOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.divide(argument2);
        };
        return DivideOutlet;
    }(BinaryOutlet));

    var ModuloOutlet = (function (_super) {
        __extends(ModuloOutlet, _super);
        function ModuloOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModuloOutlet.prototype.evaluate = function (argument1, argument2) {
            return argument1.modulo(argument2);
        };
        return ModuloOutlet;
    }(BinaryOutlet));

    var NotOutlet = (function (_super) {
        __extends(NotOutlet, _super);
        function NotOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NotOutlet.prototype.evaluate = function (argument) {
            return argument.not();
        };
        return NotOutlet;
    }(UnaryOutlet));

    var BitwiseNotOutlet = (function (_super) {
        __extends(BitwiseNotOutlet, _super);
        function BitwiseNotOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BitwiseNotOutlet.prototype.evaluate = function (argument) {
            return argument.bitwiseNot();
        };
        return BitwiseNotOutlet;
    }(UnaryOutlet));

    var NegativeOutlet = (function (_super) {
        __extends(NegativeOutlet, _super);
        function NegativeOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NegativeOutlet.prototype.evaluate = function (argument) {
            return argument.negative();
        };
        return NegativeOutlet;
    }(UnaryOutlet));

    var PositiveOutlet = (function (_super) {
        __extends(PositiveOutlet, _super);
        function PositiveOutlet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PositiveOutlet.prototype.evaluate = function (argument) {
            return argument.positive();
        };
        return PositiveOutlet;
    }(UnaryOutlet));

    var InvokeOutlet = (function (_super) {
        __extends(InvokeOutlet, _super);
        function InvokeOutlet(scope) {
            var _this = _super.call(this) || this;
            _this._scope = scope;
            _this._funcInlet = new streamlet.OutletInlet(_this);
            _this._argsInlet = new streamlet.OutletInlet(_this);
            return _this;
        }
        InvokeOutlet.prototype.funcInlet = function () {
            return this._funcInlet;
        };
        InvokeOutlet.prototype.argsInlet = function () {
            return this._argsInlet;
        };
        InvokeOutlet.prototype.get = function () {
            var funcInput = this._funcInlet.input();
            var argsInput = this._argsInlet.input();
            if (funcInput !== null && argsInput !== null) {
                var func = funcInput.get();
                if (func instanceof structure.Func) {
                    var args = argsInput.get();
                    if (args !== void 0) {
                        var interpreter = new structure.Interpreter();
                        interpreter.pushScope(this._scope);
                        var result = func.invoke(args, interpreter, void 0);
                        return result.toValue();
                    }
                }
            }
            return structure.Value.absent();
        };
        return InvokeOutlet;
    }(streamlet.AbstractOutlet));

    var Dataflow = (function () {
        function Dataflow() {
        }
        Dataflow.compile = function (expr, scope) {
            if (scope instanceof streamlet.KeyOutlet) {
                var value = scope.get();
                if (streamlet.Outlet.is(value)) {
                    scope = value;
                }
            }
            if (expr.isConstant()) {
                return new streamlet.ValueInput(expr);
            }
            else if (expr instanceof structure.Selector) {
                return Dataflow.compileSelector(expr, scope);
            }
            else if (expr instanceof structure.Operator) {
                return Dataflow.compileOperator(expr, scope);
            }
            throw new TypeError("" + expr);
        };
        Dataflow.compileSelector = function (selector, scope) {
            if (selector instanceof structure.IdentitySelector) {
                return Dataflow.compileIdentitySelector(scope);
            }
            else if (selector instanceof structure.GetSelector) {
                return Dataflow.compileGetSelector(selector, scope);
            }
            else if (selector instanceof structure.GetAttrSelector) {
                return Dataflow.compileGetAttrSelector(selector, scope);
            }
            else if (selector instanceof structure.GetItemSelector) {
                return Dataflow.compileGetItemSelector(selector, scope);
            }
            else if (selector instanceof structure.KeysSelector) {
                return Dataflow.compileKeysSelector(scope);
            }
            else if (selector instanceof structure.ValuesSelector) {
                return Dataflow.compileValuesSelector(scope);
            }
            else if (selector instanceof structure.ChildrenSelector) {
                return Dataflow.compileChildrenSelector(scope);
            }
            else if (selector instanceof structure.DescendantsSelector) {
                return Dataflow.compileDescendantsSelector(scope);
            }
            else if (selector instanceof structure.FilterSelector) {
                return Dataflow.compileFilterSelector(selector, scope);
            }
            throw new TypeError("" + selector);
        };
        Dataflow.compileIdentitySelector = function (scope) {
            return scope;
        };
        Dataflow.compileGetSelector = function (selector, scope) {
            var key = selector.accessor();
            if (key.isConstant()) {
                if (RecordOutlet.is(scope)) {
                    var outlet = scope.outlet(key);
                    if (outlet !== null) {
                        return Dataflow.compile(selector.then(), outlet);
                    }
                }
                else if (streamlet.StreamletScope.is(scope)) {
                    var name_1 = key.stringValue(void 0);
                    if (name_1 !== void 0) {
                        var outlet = scope.outlet(name_1);
                        if (outlet !== null) {
                            return Dataflow.compile(selector.then(), outlet);
                        }
                    }
                }
            }
            else {
                var getOutlet = new GetOutlet();
                var outlet = Dataflow.compile(key, scope);
                getOutlet.keyInlet().bindInput(outlet);
                getOutlet.mapInlet().bindInput(scope);
                return getOutlet;
            }
            return null;
        };
        Dataflow.compileGetAttrSelector = function (selector, scope) {
            throw new Error();
        };
        Dataflow.compileGetItemSelector = function (selector, scope) {
            throw new Error();
        };
        Dataflow.compileKeysSelector = function (scope) {
            throw new Error();
        };
        Dataflow.compileValuesSelector = function (scope) {
            throw new Error();
        };
        Dataflow.compileChildrenSelector = function (scope) {
            throw new Error();
        };
        Dataflow.compileDescendantsSelector = function (scope) {
            throw new Error();
        };
        Dataflow.compileFilterSelector = function (selector, scope) {
            throw new Error();
        };
        Dataflow.compileOperator = function (operator, scope) {
            if (operator instanceof structure.ConditionalOperator) {
                return Dataflow.compileConditionalOperator(operator, scope);
            }
            else if (operator instanceof structure.BinaryOperator) {
                return Dataflow.compileBinaryOperator(operator, scope);
            }
            else if (operator instanceof structure.UnaryOperator) {
                return Dataflow.compileUnaryOperator(operator, scope);
            }
            else if (operator instanceof structure.InvokeOperator) {
                return Dataflow.compileInvokeOperator(operator, scope);
            }
            throw new TypeError("" + operator);
        };
        Dataflow.compileConditionalOperator = function (operator, scope) {
            var outlet = new ConditionalOutlet();
            var ifTerm = operator.ifTerm().toValue();
            var thenTerm = operator.thenTerm().toValue();
            var elseTerm = operator.elseTerm().toValue();
            var ifOutlet = Dataflow.compile(ifTerm, scope);
            var thenOutlet = Dataflow.compile(thenTerm, scope);
            var elseOutlet = Dataflow.compile(elseTerm, scope);
            outlet.ifInlet().bindInput(ifOutlet);
            outlet.thenInlet().bindInput(thenOutlet);
            outlet.elseInlet().bindInput(elseOutlet);
            return outlet;
        };
        Dataflow.compileBinaryOperator = function (operator, scope) {
            if (operator instanceof structure.OrOperator) {
                return Dataflow.compileOrOperator(operator, scope);
            }
            else if (operator instanceof structure.AndOperator) {
                return Dataflow.compileAndOperator(operator, scope);
            }
            else if (operator instanceof structure.BitwiseOrOperator) {
                return Dataflow.compileBitwiseOrOperator(operator, scope);
            }
            else if (operator instanceof structure.BitwiseXorOperator) {
                return Dataflow.compileBitwiseXorOperator(operator, scope);
            }
            else if (operator instanceof structure.BitwiseAndOperator) {
                return Dataflow.compileBitwiseAndOperator(operator, scope);
            }
            else if (operator instanceof structure.LtOperator) {
                return Dataflow.compileLtOperator(operator, scope);
            }
            else if (operator instanceof structure.LeOperator) {
                return Dataflow.compileLeOperator(operator, scope);
            }
            else if (operator instanceof structure.EqOperator) {
                return Dataflow.compileEqOperator(operator, scope);
            }
            else if (operator instanceof structure.NeOperator) {
                return Dataflow.compileNeOperator(operator, scope);
            }
            else if (operator instanceof structure.GeOperator) {
                return Dataflow.compileGeOperator(operator, scope);
            }
            else if (operator instanceof structure.GtOperator) {
                return Dataflow.compileGtOperator(operator, scope);
            }
            else if (operator instanceof structure.PlusOperator) {
                return Dataflow.compilePlusOperator(operator, scope);
            }
            else if (operator instanceof structure.MinusOperator) {
                return Dataflow.compileMinusOperator(operator, scope);
            }
            else if (operator instanceof structure.TimesOperator) {
                return Dataflow.compileTimesOperator(operator, scope);
            }
            else if (operator instanceof structure.DivideOperator) {
                return Dataflow.compileDivideOperator(operator, scope);
            }
            else if (operator instanceof structure.ModuloOperator) {
                return Dataflow.compileModuloOperator(operator, scope);
            }
            throw new TypeError("" + operator);
        };
        Dataflow.compileBinaryOutlet = function (operator, outlet, scope) {
            var operand1 = operator.operand1().toValue();
            var operand2 = operator.operand2().toValue();
            var operand1Outlet = Dataflow.compile(operand1, scope);
            var operand2Outlet = Dataflow.compile(operand2, scope);
            outlet.operand1Inlet().bindInput(operand1Outlet);
            outlet.operand2Inlet().bindInput(operand2Outlet);
            return outlet;
        };
        Dataflow.compileOrOperator = function (operator, scope) {
            var outlet = new OrOutlet();
            var operand1 = operator.operand1().toValue();
            var operand2 = operator.operand2().toValue();
            var operand1Outlet = Dataflow.compile(operand1, scope);
            var operand2Outlet = Dataflow.compile(operand2, scope);
            outlet.operand1Inlet().bindInput(operand1Outlet);
            outlet.operand2Inlet().bindInput(operand2Outlet);
            return outlet;
        };
        Dataflow.compileAndOperator = function (operator, scope) {
            var outlet = new AndOutlet();
            var operand1 = operator.operand1().toValue();
            var operand2 = operator.operand2().toValue();
            var operand1Outlet = Dataflow.compile(operand1, scope);
            var operand2Outlet = Dataflow.compile(operand2, scope);
            outlet.operand1Inlet().bindInput(operand1Outlet);
            outlet.operand2Inlet().bindInput(operand2Outlet);
            return outlet;
        };
        Dataflow.compileBitwiseOrOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new BitwiseOrOutlet(), scope);
        };
        Dataflow.compileBitwiseXorOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new BitwiseXorOutlet(), scope);
        };
        Dataflow.compileBitwiseAndOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new BitwiseAndOutlet(), scope);
        };
        Dataflow.compileLtOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new LtOutlet(), scope);
        };
        Dataflow.compileLeOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new LeOutlet(), scope);
        };
        Dataflow.compileEqOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new EqOutlet(), scope);
        };
        Dataflow.compileNeOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new NeOutlet(), scope);
        };
        Dataflow.compileGeOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new GeOutlet(), scope);
        };
        Dataflow.compileGtOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new GtOutlet(), scope);
        };
        Dataflow.compilePlusOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new PlusOutlet(), scope);
        };
        Dataflow.compileMinusOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new MinusOutlet(), scope);
        };
        Dataflow.compileTimesOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new TimesOutlet(), scope);
        };
        Dataflow.compileDivideOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new DivideOutlet(), scope);
        };
        Dataflow.compileModuloOperator = function (operator, scope) {
            return Dataflow.compileBinaryOutlet(operator, new ModuloOutlet(), scope);
        };
        Dataflow.compileUnaryOperator = function (operator, scope) {
            if (operator instanceof structure.NotOperator) {
                return Dataflow.compileNotOperator(operator, scope);
            }
            else if (operator instanceof structure.BitwiseNotOperator) {
                return Dataflow.compileBitwiseNotOperator(operator, scope);
            }
            else if (operator instanceof structure.NegativeOperator) {
                return Dataflow.compileNegativeOperator(operator, scope);
            }
            else if (operator instanceof structure.PositiveOperator) {
                return Dataflow.compilePositiveOperator(operator, scope);
            }
            throw new TypeError("" + operator);
        };
        Dataflow.compileUnaryOutlet = function (operator, outlet, scope) {
            var operand = operator.operand().toValue();
            var operandOutlet = Dataflow.compile(operand, scope);
            outlet.operandInlet().bindInput(operandOutlet);
            return outlet;
        };
        Dataflow.compileNotOperator = function (operator, scope) {
            return Dataflow.compileUnaryOutlet(operator, new NotOutlet(), scope);
        };
        Dataflow.compileBitwiseNotOperator = function (operator, scope) {
            return Dataflow.compileUnaryOutlet(operator, new BitwiseNotOutlet(), scope);
        };
        Dataflow.compileNegativeOperator = function (operator, scope) {
            return Dataflow.compileUnaryOutlet(operator, new NegativeOutlet(), scope);
        };
        Dataflow.compilePositiveOperator = function (operator, scope) {
            return Dataflow.compileUnaryOutlet(operator, new PositiveOutlet(), scope);
        };
        Dataflow.compileInvokeOperator = function (operator, scope) {
            var func = operator.func();
            var args = operator.args();
            var invokeOutlet = new InvokeOutlet(scope);
            var funcOutlet = Dataflow.compile(func, scope);
            var argsOutlet = Dataflow.compile(args, scope);
            invokeOutlet.funcInlet().bindInput(funcOutlet);
            invokeOutlet.argsInlet().bindInput(argsOutlet);
            return invokeOutlet;
        };
        return Dataflow;
    }());
    RecordOutlet.Dataflow = Dataflow;

    exports.AbstractRecordOutlet = AbstractRecordOutlet;
    exports.AbstractRecordStreamlet = AbstractRecordStreamlet;
    exports.AndOutlet = AndOutlet;
    exports.BinaryOutlet = BinaryOutlet;
    exports.BitwiseAndOutlet = BitwiseAndOutlet;
    exports.BitwiseNotOutlet = BitwiseNotOutlet;
    exports.BitwiseOrOutlet = BitwiseOrOutlet;
    exports.BitwiseXorOutlet = BitwiseXorOutlet;
    exports.ConditionalOutlet = ConditionalOutlet;
    exports.Dataflow = Dataflow;
    exports.DivideOutlet = DivideOutlet;
    exports.EqOutlet = EqOutlet;
    exports.GeOutlet = GeOutlet;
    exports.GetOutlet = GetOutlet;
    exports.GtOutlet = GtOutlet;
    exports.InvokeOutlet = InvokeOutlet;
    exports.LeOutlet = LeOutlet;
    exports.LtOutlet = LtOutlet;
    exports.MinusOutlet = MinusOutlet;
    exports.ModuloOutlet = ModuloOutlet;
    exports.NeOutlet = NeOutlet;
    exports.NegativeOutlet = NegativeOutlet;
    exports.NotOutlet = NotOutlet;
    exports.OrOutlet = OrOutlet;
    exports.PlusOutlet = PlusOutlet;
    exports.PositiveOutlet = PositiveOutlet;
    exports.RecordFieldUpdater = RecordFieldUpdater;
    exports.RecordModel = RecordModel;
    exports.RecordOutlet = RecordOutlet;
    exports.RecordScope = RecordScope;
    exports.RecordStreamlet = RecordStreamlet;
    exports.TimesOutlet = TimesOutlet;
    exports.Transmuter = Transmuter;
    exports.UnaryOutlet = UnaryOutlet;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=swim-dataflow.js.map