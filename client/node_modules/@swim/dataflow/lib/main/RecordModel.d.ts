import { Cursor } from "@swim/util";
import { BTree } from "@swim/collections";
import { AnyItem, Item, Field, AnyValue, Value, Record, AnyText, AnyNum } from "@swim/structure";
import { MapOutlet } from "@swim/streamlet";
import { AbstractRecordOutlet } from "./AbstractRecordOutlet";
import { RecordFieldUpdater } from "./RecordFieldUpdater";
import { Transmuter } from "./Transmuter";
export declare class RecordModel extends AbstractRecordOutlet {
    protected _state: Record;
    protected _fieldUpdaters: BTree<Value, RecordFieldUpdater>;
    constructor(state?: Record);
    isEmpty(): boolean;
    isArray(): boolean;
    isObject(): boolean;
    get length(): number;
    fieldCount(): number;
    valueCount(): number;
    has(key: AnyValue): boolean;
    hasOwn(key: AnyValue): boolean;
    indexOf(item: AnyItem, index?: number): number;
    lastIndexOf(item: AnyItem, index?: number): number;
    get(): Record;
    get(key: AnyValue): Value;
    getAttr(key: AnyText): Value;
    getSlot(key: AnyValue): Value;
    getField(key: AnyValue): Field | undefined;
    getItem(index: AnyNum): Item;
    bindValue(key: Value, expr: Value): void;
    set(key: AnyValue, newValue: AnyValue): this;
    setAttr(key: AnyText, newValue: AnyValue): this;
    setSlot(key: AnyValue, newValue: AnyValue): this;
    setItem(index: number, newItem: AnyItem): this;
    push(...newItems: AnyItem[]): number;
    splice(start: number, deleteCount?: number, ...newItems: AnyItem[]): Item[];
    delete(key: AnyValue): Item;
    clear(): void;
    forEach<T, S = unknown>(callback: (this: S, item: Item, index: number) => T | void, thisArg?: S): T | undefined;
    keyIterator(): Cursor<Value>;
    disconnectInputs(): void;
    memoize(): MapOutlet<Value, Value, Record>;
    materialize(record: Record): void;
    materializeItem(item: Item): void;
    materializeField(field: Field): void;
    materializeValue(value: Value): void;
    compile(record: Record): void;
    compileItem(item: Item, index: number): void;
    compileField(field: Field, index: number): void;
    compileValue(value: Value, index: number): void;
    transmute(transmuter?: Transmuter | null): void;
    transmuteItem(item: Item, transmuter: Transmuter | null): Item;
    transmuteField(field: Field, transmuter: Transmuter | null): Field;
    transmuteValue(oldValue: Value, transmuter: Transmuter | null): Value;
    transmuteModel(model: RecordModel): Record;
    static from(record: Record): RecordModel;
    static of(...items: AnyItem[]): RecordModel;
    static globalScope(): RecordModel;
}
//# sourceMappingURL=RecordModel.d.ts.map