import { __extends } from "tslib";
import { BTree } from "@swim/collections";
import { Item, Field, Slot, Value, Record, Text, MathModule } from "@swim/structure";
import { RecordOutlet } from "./RecordOutlet";
import { RecordStreamlet } from "./RecordStreamlet";
import { AbstractRecordOutlet } from "./AbstractRecordOutlet";
import { RecordFieldUpdater } from "./RecordFieldUpdater";
import { Transmuter } from "./Transmuter";
var RecordModel = (function (_super) {
    __extends(RecordModel, _super);
    function RecordModel(state) {
        if (state === void 0) { state = Record.create(); }
        var _this = _super.call(this) || this;
        _this._state = state;
        _this._fieldUpdaters = new BTree();
        return _this;
    }
    RecordModel.prototype.isEmpty = function () {
        return this._state.isEmpty();
    };
    RecordModel.prototype.isArray = function () {
        return this._state.isArray();
    };
    RecordModel.prototype.isObject = function () {
        return this._state.isObject();
    };
    Object.defineProperty(RecordModel.prototype, "length", {
        get: function () {
            return this._state.length;
        },
        enumerable: true,
        configurable: true
    });
    RecordModel.prototype.fieldCount = function () {
        return this._state.fieldCount();
    };
    RecordModel.prototype.valueCount = function () {
        return this._state.valueCount();
    };
    RecordModel.prototype.has = function (key) {
        if (this._state.has(key)) {
            return true;
        }
        else {
            var scope = this.streamletScope();
            return scope instanceof Record ? scope.has(key) : false;
        }
    };
    RecordModel.prototype.hasOwn = function (key) {
        return this._state.has(key);
    };
    RecordModel.prototype.indexOf = function (item, index) {
        return this._state.indexOf(item, index);
    };
    RecordModel.prototype.lastIndexOf = function (item, index) {
        if (index === void 0) { index = 0; }
        return this._state.lastIndexOf(item, index);
    };
    RecordModel.prototype.get = function (key) {
        if (key === void 0) {
            return this;
        }
        else {
            key = Value.fromAny(key);
            var value = this._state.get(key);
            if (!value.isDefined()) {
                var scope = this.streamletScope();
                if (scope instanceof Record) {
                    value = scope.get(key);
                }
            }
            return value;
        }
    };
    RecordModel.prototype.getAttr = function (key) {
        key = Text.fromAny(key);
        var value = this._state.getAttr(key);
        if (!value.isDefined()) {
            var scope = this.streamletScope();
            if (scope instanceof Record) {
                value = scope.getAttr(key);
            }
        }
        return value;
    };
    RecordModel.prototype.getSlot = function (key) {
        key = Value.fromAny(key);
        var value = this._state.getSlot(key);
        if (!value.isDefined()) {
            var scope = this.streamletScope();
            if (scope instanceof Record) {
                value = scope.getSlot(key);
            }
        }
        return value;
    };
    RecordModel.prototype.getField = function (key) {
        key = Value.fromAny(key);
        var field = this._state.getField(key);
        if (field === void 0) {
            var scope = this.streamletScope();
            if (scope instanceof Record) {
                field = scope.getField(key);
            }
        }
        return field;
    };
    RecordModel.prototype.getItem = function (index) {
        return this._state.getItem(index);
    };
    RecordModel.prototype.bindValue = function (key, expr) {
        var fieldUpdater = new RecordFieldUpdater(this, key);
        var valueInput = RecordOutlet.Dataflow.compile(expr, this);
        fieldUpdater.bindInput(valueInput);
        this._fieldUpdaters = this._fieldUpdaters.updated(key, fieldUpdater);
    };
    RecordModel.prototype.set = function (key, newValue) {
        key = Value.fromAny(key);
        if (!this._state.has(key)) {
            var scope = this.streamletScope();
            if (scope instanceof Record && scope.has(key)) {
                scope.set(key, newValue);
            }
            else {
                this._state.set(key, newValue);
            }
        }
        else {
            this._state.set(key, newValue);
        }
        this.invalidateInputKey(key, 0);
        return this;
    };
    RecordModel.prototype.setAttr = function (key, newValue) {
        key = Text.fromAny(key);
        if (!this._state.has(key)) {
            var scope = this.streamletScope();
            if (scope instanceof Record && scope.has(key)) {
                scope.setAttr(key, newValue);
            }
            else {
                this._state.setAttr(key, newValue);
            }
        }
        else {
            this._state.setAttr(key, newValue);
        }
        this.invalidateInputKey(key, 0);
        return this;
    };
    RecordModel.prototype.setSlot = function (key, newValue) {
        key = Value.fromAny(key);
        if (!this._state.has(key)) {
            var scope = this.streamletScope();
            if (scope instanceof Record && scope.has(key)) {
                scope.setSlot(key, newValue);
            }
            else {
                this._state.setSlot(key, newValue);
            }
        }
        else {
            this._state.setSlot(key, newValue);
        }
        this.invalidateInputKey(key, 0);
        return this;
    };
    RecordModel.prototype.setItem = function (index, newItem) {
        var oldItem = this._state.getItem(index);
        newItem = Item.fromAny(newItem);
        this._state.setItem(index, newItem);
        if (oldItem instanceof Field && newItem instanceof Field) {
            if (oldItem.key.equals(newItem.key)) {
                this.invalidateInputKey(oldItem.key, 0);
            }
            else {
                this.invalidateInputKey(oldItem.key, 1);
                this.invalidateInputKey(newItem.key, 0);
            }
        }
        else if (oldItem instanceof Field) {
            this.invalidateInputKey(oldItem.key, 1);
        }
        else if (newItem instanceof Field) {
            this.invalidateInputKey(newItem.key, 0);
        }
        else {
            this.invalidateInput();
        }
        return this;
    };
    RecordModel.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var i = this._state.length;
        var n = this._state.push.apply(this._state, arguments);
        while (i < n) {
            var newItem = this._state.get(i);
            if (newItem instanceof Field) {
                this.invalidateInputKey(newItem.key, 0);
            }
            i += 1;
        }
        return n;
    };
    RecordModel.prototype.splice = function (start, deleteCount) {
        if (deleteCount === void 0) { deleteCount = 0; }
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        var n = this._state.length;
        if (start < 0) {
            start = n + start;
        }
        start = Math.max(0, start);
        deleteCount = Math.max(0, deleteCount);
        var deleted = this._state.splice.apply(this._state, arguments);
        for (var i = 0; i < deleted.length; i += 1) {
            var oldItem = deleted[i];
            if (oldItem instanceof Field) {
                this.invalidateInputKey(oldItem.key, 1);
            }
        }
        for (var i = start; i < start + newItems.length; i += 1) {
            var newItem = this._state.get(i);
            if (newItem instanceof Field) {
                this.invalidateInputKey(newItem.key, 0);
            }
        }
        return deleted;
    };
    RecordModel.prototype.delete = function (key) {
        var oldItem = this._state.delete(key);
        if (oldItem instanceof Field) {
            this.invalidateInputKey(oldItem.key, 1);
        }
        return oldItem;
    };
    RecordModel.prototype.clear = function () {
        var oldState = this._state.branch();
        this._state.clear();
        oldState.forEach(function (oldItem) {
            if (oldItem instanceof Field) {
                this.invalidateInputKey(oldItem.key, 1);
            }
        }, this);
    };
    RecordModel.prototype.forEach = function (callback, thisArg) {
        return this._state.forEach(callback, thisArg);
    };
    RecordModel.prototype.keyIterator = function () {
        throw new Error();
    };
    RecordModel.prototype.disconnectInputs = function () {
        var fieldUpdaters = this._fieldUpdaters;
        if (!fieldUpdaters.isEmpty()) {
            this._fieldUpdaters = new BTree();
            fieldUpdaters.forEach(function (key, inlet) {
                inlet.disconnectInputs();
            }, this);
        }
    };
    RecordModel.prototype.memoize = function () {
        return this;
    };
    RecordModel.prototype.materialize = function (record) {
        record.forEach(function (item) {
            this.materializeItem(item);
        }, this);
    };
    RecordModel.prototype.materializeItem = function (item) {
        if (item instanceof Field) {
            this.materializeField(item);
        }
        else {
            this.materializeValue(item);
        }
    };
    RecordModel.prototype.materializeField = function (field) {
        var value = field.value;
        if (value instanceof RecordStreamlet) {
            value.setStreamletScope(this);
            this._state.push(field);
        }
        else if (value instanceof Record) {
            var child = new RecordOutlet.Scope(this);
            child.materialize(value);
            this._state.push(field.updatedValue(child));
        }
        else {
            this._state.push(field);
        }
    };
    RecordModel.prototype.materializeValue = function (value) {
        if (value instanceof RecordStreamlet) {
            value.setStreamletScope(this);
            this._state.push(value);
        }
        else if (value instanceof Record) {
            var child = new RecordOutlet.Scope(this);
            child.materialize(value);
            this._state.push(child);
        }
        else {
            this._state.push(value);
        }
    };
    RecordModel.prototype.compile = function (record) {
        record.forEach(function (item, index) {
            this.compileItem(item, index);
        }, this);
    };
    RecordModel.prototype.compileItem = function (item, index) {
        if (item instanceof Field) {
            this.compileField(item, index);
        }
        else {
            this.compileValue(item, index);
        }
    };
    RecordModel.prototype.compileField = function (field, index) {
        var key = field.key;
        var value = field.value;
        if (!key.isConstant()) {
        }
        else if (!value.isConstant()) {
            if (value instanceof RecordStreamlet) {
                value.compile();
                this.invalidateInputKey(key, 0);
            }
            else if (value instanceof Record) {
                this._state.getItem(index).toValue().compile(value);
                this.invalidateInputKey(key, 0);
            }
            else {
                field.setValue(Value.extant());
                this.bindValue(key, value);
            }
        }
        else {
            this.invalidateInputKey(key, 0);
        }
    };
    RecordModel.prototype.compileValue = function (value, index) {
        if (value instanceof RecordStreamlet) {
            value.compile();
        }
        else if (value instanceof Record) {
            this._state.getItem(index).compile(value);
        }
        else if (!value.isConstant()) {
        }
        else {
        }
    };
    RecordModel.prototype.transmute = function (transmuter) {
        if (transmuter === void 0) { transmuter = Transmuter.system(); }
        this.forEach(function (oldItem, index) {
            var newItem = this.transmuteItem(oldItem, transmuter);
            if (oldItem !== newItem) {
                this.setItem(index, newItem);
            }
        }, this);
    };
    RecordModel.prototype.transmuteItem = function (item, transmuter) {
        if (item instanceof Field) {
            return this.transmuteField(item, transmuter);
        }
        else {
            return this.transmuteValue(item, transmuter);
        }
    };
    RecordModel.prototype.transmuteField = function (field, transmuter) {
        var oldValue = field.value;
        var newValue = this.transmuteValue(oldValue, transmuter);
        if (oldValue !== newValue) {
            return field.updatedValue(newValue);
        }
        else {
            return field;
        }
    };
    RecordModel.prototype.transmuteValue = function (oldValue, transmuter) {
        if (oldValue instanceof RecordModel) {
            var newValue = this.transmuteModel(oldValue);
            if (oldValue === newValue && transmuter) {
                newValue = transmuter.transmute(oldValue);
            }
            return newValue;
        }
        else {
            return oldValue;
        }
    };
    RecordModel.prototype.transmuteModel = function (model) {
        var scope = this.streamletScope();
        if (scope instanceof RecordModel) {
            return scope.transmuteModel(model);
        }
        else {
            return model;
        }
    };
    RecordModel.from = function (record) {
        var model = new RecordModel();
        model.materialize(record);
        model.compile(record);
        return model;
    };
    RecordModel.of = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        return RecordModel.from(Record.of.apply(void 0, arguments));
    };
    RecordModel.globalScope = function () {
        var model = new RecordModel();
        model.materializeField(Slot.of("math", MathModule.scope().branch()));
        return model;
    };
    return RecordModel;
}(AbstractRecordOutlet));
export { RecordModel };
RecordOutlet.Model = RecordModel;
//# sourceMappingURL=RecordModel.js.map