import { Map } from "@swim/util";
import { Value, Record } from "@swim/structure";
import { Outlet, MapOutlet, StreamletScope } from "@swim/streamlet";
import { MapValueFunction, MapFieldValuesFunction } from "@swim/streamlet";
import { WatchValueFunction, WatchFieldsFunction } from "@swim/streamlet";
import { RecordStreamlet } from "./RecordStreamlet";
import { RecordModel } from "./RecordModel";
import { RecordScope } from "./RecordScope";
import { Dataflow } from "./Dataflow";
export interface RecordOutlet extends Outlet<Record>, MapOutlet<Value, Value, Record>, StreamletScope<Value> {
    outlet(key: Value | string): Outlet<Value>;
    get(): Record;
    get(key: Value): Value;
    memoize(): MapOutlet<Value, Value, Record>;
    map<O2>(func: MapValueFunction<Record, O2>): Outlet<O2>;
    map<V2>(func: MapFieldValuesFunction<Value, Value, V2>): MapOutlet<Value, V2, Map<Value, V2>>;
    watch(func: WatchValueFunction<Record>): this;
    watch(func: WatchFieldsFunction<Value, Value>): this;
}
export declare const RecordOutlet: {
    is(object: unknown): object is RecordOutlet;
    Streamlet: typeof RecordStreamlet;
    Model: typeof RecordModel;
    Scope: typeof RecordScope;
    Dataflow: typeof Dataflow;
};
//# sourceMappingURL=RecordOutlet.d.ts.map