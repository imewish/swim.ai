import { __extends } from "tslib";
import { Value, Func, Interpreter } from "@swim/structure";
import { AbstractOutlet, OutletInlet } from "@swim/streamlet";
var InvokeOutlet = (function (_super) {
    __extends(InvokeOutlet, _super);
    function InvokeOutlet(scope) {
        var _this = _super.call(this) || this;
        _this._scope = scope;
        _this._funcInlet = new OutletInlet(_this);
        _this._argsInlet = new OutletInlet(_this);
        return _this;
    }
    InvokeOutlet.prototype.funcInlet = function () {
        return this._funcInlet;
    };
    InvokeOutlet.prototype.argsInlet = function () {
        return this._argsInlet;
    };
    InvokeOutlet.prototype.get = function () {
        var funcInput = this._funcInlet.input();
        var argsInput = this._argsInlet.input();
        if (funcInput !== null && argsInput !== null) {
            var func = funcInput.get();
            if (func instanceof Func) {
                var args = argsInput.get();
                if (args !== void 0) {
                    var interpreter = new Interpreter();
                    interpreter.pushScope(this._scope);
                    var result = func.invoke(args, interpreter, void 0);
                    return result.toValue();
                }
            }
        }
        return Value.absent();
    };
    return InvokeOutlet;
}(AbstractOutlet));
export { InvokeOutlet };
//# sourceMappingURL=InvokeOutlet.js.map