import { __extends } from "tslib";
import { Value } from "@swim/structure";
import { AbstractOutlet, OutletInlet } from "@swim/streamlet";
var ConditionalOutlet = (function (_super) {
    __extends(ConditionalOutlet, _super);
    function ConditionalOutlet() {
        var _this = _super.call(this) || this;
        _this._ifInlet = new OutletInlet(_this);
        _this._thenInlet = new OutletInlet(_this);
        _this._elseInlet = new OutletInlet(_this);
        return _this;
    }
    ConditionalOutlet.prototype.ifInlet = function () {
        return this._ifInlet;
    };
    ConditionalOutlet.prototype.thenInlet = function () {
        return this._thenInlet;
    };
    ConditionalOutlet.prototype.elseInlet = function () {
        return this._elseInlet;
    };
    ConditionalOutlet.prototype.get = function () {
        var ifInput = this._ifInlet.input();
        if (ifInput !== null) {
            var ifTerm = ifInput.get();
            if (ifTerm !== void 0) {
                if (ifTerm.booleanValue(false)) {
                    var thenInput = this._thenInlet.input();
                    if (thenInput !== null) {
                        var thenTerm = thenInput.get();
                        if (thenTerm !== void 0) {
                            return thenTerm;
                        }
                    }
                }
                else {
                    var elseInput = this._elseInlet.input();
                    if (elseInput !== null) {
                        var elseTerm = elseInput.get();
                        if (elseTerm !== void 0) {
                            return elseTerm;
                        }
                    }
                }
            }
        }
        return Value.absent();
    };
    return ConditionalOutlet;
}(AbstractOutlet));
export { ConditionalOutlet };
//# sourceMappingURL=ConditionalOutlet.js.map