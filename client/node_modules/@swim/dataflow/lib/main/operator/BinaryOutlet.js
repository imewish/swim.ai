import { __extends } from "tslib";
import { Value } from "@swim/structure";
import { AbstractOutlet, OutletInlet } from "@swim/streamlet";
var BinaryOutlet = (function (_super) {
    __extends(BinaryOutlet, _super);
    function BinaryOutlet() {
        var _this = _super.call(this) || this;
        _this._operand1Inlet = new OutletInlet(_this);
        _this._operand2Inlet = new OutletInlet(_this);
        return _this;
    }
    BinaryOutlet.prototype.operand1Inlet = function () {
        return this._operand1Inlet;
    };
    BinaryOutlet.prototype.operand2Inlet = function () {
        return this._operand2Inlet;
    };
    BinaryOutlet.prototype.get = function () {
        var operand1Input = this._operand1Inlet.input();
        var operand2Input = this._operand2Inlet.input();
        if (operand1Input !== null && operand2Input !== null) {
            var argument1 = operand1Input.get();
            var argument2 = operand2Input.get();
            if (argument1 !== void 0 && argument2 !== void 0) {
                var result = this.evaluate(argument1, argument2);
                return result.toValue();
            }
        }
        return Value.absent();
    };
    return BinaryOutlet;
}(AbstractOutlet));
export { BinaryOutlet };
//# sourceMappingURL=BinaryOutlet.js.map