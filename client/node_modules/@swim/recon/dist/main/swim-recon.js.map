{"version":3,"file":"swim-recon.js","sources":["../../../../../node_modules/tslib/tslib.es6.js","../../main/BlockParser.ts","../../main/AttrParser.ts","../../main/BlockItemParser.ts","../../main/InlineItemParser.ts","../../main/RecordParser.ts","../../main/MarkupParser.ts","../../main/DataParser.ts","../../main/IdentParser.ts","../../main/StringParser.ts","../../main/NumberParser.ts","../../main/LambdaFuncParser.ts","../../main/ConditionalOperatorParser.ts","../../main/OrOperatorParser.ts","../../main/AndOperatorParser.ts","../../main/BitwiseOrOperatorParser.ts","../../main/BitwiseXorOperatorParser.ts","../../main/BitwiseAndOperatorParser.ts","../../main/ComparisonOperatorParser.ts","../../main/AttrExpressionParser.ts","../../main/AdditiveOperatorParser.ts","../../main/MultiplicativeOperatorParser.ts","../../main/PrefixOperatorParser.ts","../../main/InvokeOperatorParser.ts","../../main/PrimaryParser.ts","../../main/LiteralParser.ts","../../main/SelectorParser.ts","../../main/ReconParser.ts","../../main/ReconStructureParser.ts","../../main/AttrWriter.ts","../../main/SlotWriter.ts","../../main/BlockWriter.ts","../../main/PrimaryWriter.ts","../../main/MarkupTextWriter.ts","../../main/DataWriter.ts","../../main/IdentWriter.ts","../../main/StringWriter.ts","../../main/LambdaFuncWriter.ts","../../main/ConditionalOperatorWriter.ts","../../main/InfixOperatorWriter.ts","../../main/PrefixOperatorWriter.ts","../../main/InvokeOperatorWriter.ts","../../main/LiteralSelectorWriter.ts","../../main/GetSelectorWriter.ts","../../main/GetAttrSelectorWriter.ts","../../main/GetItemSelectorWriter.ts","../../main/KeysSelectorWriter.ts","../../main/ValuesSelectorWriter.ts","../../main/ChildrenSelectorWriter.ts","../../main/DescendantsSelectorWriter.ts","../../main/FilterSelectorWriter.ts","../../main/ReconWriter.ts","../../main/ReconStructureWriter.ts","../../main/Recon.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class BlockParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _keyParser: Parser<V> | undefined;\n  private readonly _valueParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, keyParser?: Parser<V>,\n              valueParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._keyParser = keyParser;\n    this._valueParser = valueParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return BlockParser.parse(input, this._recon, this._builder, this._keyParser,\n                             this._valueParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     keyParser?: Parser<V>, valueParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    block: do {\n      if (step === 1) {\n        while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 33/*'!'*/ || c === 34/*'\"'*/ || c === 36/*'$'*/ || c === 37/*'%'*/\n              || c === 39/*'\\''*/ || c === 40/*'('*/ || c === 43/*'+'*/ || c === 45/*'-'*/\n              || c >= 48/*'0'*/ && c <= 57/*'9'*/ || c === 64/*'@'*/\n              || c === 91/*'['*/ || c === 123/*'{'*/ || c === 126/*'~'*/\n              || Recon.isIdentStartChar(c)) {\n            builder = builder || recon.valueBuilder();\n            step = 2;\n          } else if (c === 35/*'#'*/) {\n            input = input.step();\n            step = 7;\n          } else {\n            if (builder) {\n              return Parser.done(builder.bind());\n            } else {\n              return Parser.done(recon.absent());\n            }\n          }\n        } else if (input.isDone()) {\n          if (builder) {\n            return Parser.done(builder.bind());\n          } else {\n            return Parser.done(recon.absent());\n          }\n        }\n      }\n      if (step === 2) {\n        if (!keyParser) {\n          keyParser = recon.parseBlockExpression(input);\n        }\n        while (keyParser.isCont() && !input.isEmpty()) {\n          keyParser = keyParser.feed(input);\n        }\n        if (keyParser.isDone()) {\n          step = 3;\n        } else if (keyParser.isError()) {\n          return keyParser;\n        }\n      }\n      if (step === 3) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 58/*':'*/) {\n            input = input.step();\n            step = 4;\n          } else {\n            builder!.push(recon.item(keyParser!.bind()));\n            keyParser = void 0;\n            step = 6;\n          }\n        } else if (input.isDone()) {\n          builder!.push(recon.item(keyParser!.bind()));\n          return Parser.done(builder!.bind());\n        }\n      }\n      if (step === 4) {\n        while (input.isCont() && Recon.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          step = 5;\n        } else if (input.isDone()) {\n          builder!.push(recon.slot(keyParser!.bind()));\n          return Parser.done(builder!.bind());\n        }\n      }\n      if (step === 5) {\n        if (!valueParser) {\n          valueParser = recon.parseBlockExpression(input);\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          builder!.push(recon.slot(keyParser!.bind(), valueParser.bind()));\n          keyParser = void 0;\n          valueParser = void 0;\n          step = 6;\n        } else if (valueParser.isError()) {\n          return valueParser;\n        }\n      }\n      if (step === 6) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 44/*','*/ || c === 59/*';'*/ || Recon.isNewline(c)) {\n            input = input.step();\n            step = 1;\n            continue;\n          } else if (c === 35/*'#'*/) {\n            input = input.step();\n            step = 7;\n          } else {\n            return Parser.done(builder!.bind());\n          }\n        } else if (input.isDone()) {\n          return Parser.done(builder!.bind());\n        }\n      }\n      if (step === 7) {\n        while (input.isCont()) {\n          c = input.head();\n          if (!Recon.isNewline(c)) {\n            input = input.step();\n          } else {\n            step = 1;\n            continue block;\n          }\n        }\n        if (input.isDone()) {\n          step = 1;\n          continue;\n        }\n      }\n      break;\n    } while (true);\n    return new BlockParser<I, V>(recon, builder, keyParser, valueParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Input, Parser, Diagnostic} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class AttrParser<I, V> extends Parser<I> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _keyParser: Parser<V> | undefined;\n  private readonly _valueParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, keyParser?: Parser<V>,\n              valueParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._keyParser = keyParser;\n    this._valueParser = valueParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<I> {\n    return AttrParser.parse(input, this._recon, this._keyParser,\n                            this._valueParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, keyParser?: Parser<V>,\n                     valueParser?: Parser<V>, step: number = 1): Parser<I> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 64/*'@'*/) {\n          input = input.step();\n          step = 2;\n        } else {\n          return Parser.error(Diagnostic.expected(64/*'@'*/, input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(64/*'@'*/, input));\n      }\n    }\n    if (step === 2) {\n      if (!keyParser) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 34/*'\"'*/ || c === 39/*'\\''*/) {\n            keyParser = recon.parseString(input);\n          } else if (Recon.isIdentStartChar(c)) {\n            keyParser = recon.parseIdent(input);\n          } else {\n            return Parser.error(Diagnostic.expected(\"attribute name\", input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(\"attribute name\", input));\n        }\n      } else {\n        keyParser = keyParser.feed(input);\n      }\n      if (keyParser) {\n        if (keyParser.isDone()) {\n          step = 3;\n        } else if (keyParser.isError()) {\n          return keyParser.asError();\n        }\n      }\n    }\n    if (step === 3) {\n      if (input.isCont() && input.head() === 40/*'('*/) {\n        input = input.step();\n        step = 4;\n      } else if (!input.isEmpty()) {\n        return Parser.done(recon.attr(keyParser!.bind()));\n      }\n    }\n    if (step === 4) {\n      while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 41/*')'*/) {\n          input = input.step();\n          return Parser.done(recon.attr(keyParser!.bind()));\n        } else {\n          step = 5;\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\")\", input));\n      }\n    }\n    if (step === 5) {\n      if (!valueParser) {\n        valueParser = recon.parseBlock(input);\n      }\n      while (valueParser.isCont() && !input.isEmpty()) {\n        valueParser = valueParser.feed(input);\n      }\n      if (valueParser.isDone()) {\n        step = 6;\n      } else if (valueParser.isError()) {\n        return valueParser.asError();\n      }\n    }\n    if (step === 6) {\n      while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 41/*')'*/) {\n          input = input.step();\n          return Parser.done(recon.attr(keyParser!.bind(), valueParser!.bind()));\n        } else {\n          return Parser.error(Diagnostic.expected(\")\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\")\", input));\n      }\n    }\n    return new AttrParser<I, V>(recon, keyParser, valueParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class BlockItemParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _fieldParser: Parser<I> | undefined;\n  private readonly _valueParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, fieldParser?: Parser<I>,\n              valueParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._fieldParser = fieldParser;\n    this._valueParser = valueParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return BlockItemParser.parse(input, this._recon, this._builder, this._fieldParser,\n                                 this._valueParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     fieldParser?: Parser<I>, valueParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 64/*'@'*/) {\n            fieldParser = recon.parseAttr(input);\n            step = 2;\n          } else if (c === 123/*'{'*/) {\n            builder = builder || recon.recordBuilder();\n            valueParser = recon.parseRecord(input, builder);\n            step = 5;\n          } else if (c === 91/*'['*/) {\n            builder = builder || recon.recordBuilder();\n            valueParser = recon.parseMarkup(input, builder);\n            step = 5;\n          } else if (Recon.isIdentStartChar(c)) {\n            valueParser = recon.parseIdent(input);\n            step = 4;\n          } else if (c === 34/*'\"'*/ || c === 39/*'\\''*/) {\n            valueParser = recon.parseString(input);\n            step = 4;\n          } else if (c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n            valueParser = recon.parseNumber(input);\n            step = 4;\n          } else if (c === 37/*'%'*/) {\n            valueParser = recon.parseData(input);\n            step = 4;\n          } else if (c === 36/*'$'*/) {\n            valueParser = recon.parseSelector(input);\n            step = 4;\n          } else if (!builder) {\n            return Parser.done(recon.extant());\n          } else {\n            return Parser.done(builder.bind());\n          }\n        } else if (input.isDone()) {\n          if (!builder) {\n            return Parser.done(recon.extant());\n          } else {\n            return Parser.done(builder.bind());\n          }\n        }\n      }\n      if (step === 2) {\n        while (fieldParser!.isCont() && !input.isEmpty()) {\n          fieldParser = fieldParser!.feed(input);\n        }\n        if (fieldParser!.isDone()) {\n          builder = builder || recon.valueBuilder();\n          builder.push(fieldParser!.bind());\n          fieldParser = void 0;\n          step = 3;\n        } else if (fieldParser!.isError()) {\n          return fieldParser!.asError();\n        }\n      }\n      if (step === 3) {\n        while (input.isCont() && Recon.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          step = 1;\n          continue;\n        } else if (input.isDone()) {\n          return Parser.done(builder!.bind());\n        }\n      }\n      if (step === 4) {\n        while (valueParser!.isCont() && !input.isEmpty()) {\n          valueParser = valueParser!.feed(input);\n        }\n        if (valueParser!.isDone()) {\n          builder = builder || recon.valueBuilder();\n          builder.push(recon.item(valueParser!.bind()));\n          valueParser = void 0;\n          step = 6;\n        } else if (valueParser!.isError()) {\n          return valueParser!;\n        }\n      }\n      if (step === 5) {\n        while (valueParser!.isCont() && !input.isEmpty()) {\n          valueParser = valueParser!.feed(input);\n        }\n        if (valueParser!.isDone()) {\n          valueParser = void 0;\n          step = 6;\n        } else if (valueParser!.isError()) {\n          return valueParser!;\n        }\n      }\n      if (step === 6) {\n        while (input.isCont() && Recon.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (input.head() === 64/*'@'*/) {\n            step = 1;\n          } else {\n            return Parser.done(builder!.bind());\n          }\n        } else if (input.isDone()) {\n          return Parser.done(builder!.bind());\n        }\n      }\n      break;\n    } while (true);\n    return new BlockItemParser<I, V>(recon, builder, fieldParser, valueParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser} from \"@swim/codec\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class InlineItemParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _fieldParser: Parser<I> | undefined;\n  private readonly _valueParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, fieldParser?: Parser<I>,\n              valueParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._fieldParser = fieldParser;\n    this._valueParser = valueParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return InlineItemParser.parse(input, this._recon, this._builder, this._fieldParser,\n                                  this._valueParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     fieldParser?: Parser<I>,  valueParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 64/*'@'*/) {\n          fieldParser = recon.parseAttr(input);\n          step = 2;\n        } else if (c === 123/*'{'*/) {\n          if (builder) {\n            valueParser = recon.parseRecord(input, builder);\n            step = 5;\n          } else {\n            valueParser = recon.parseRecord(input);\n            step = 4;\n          }\n        } else if (c === 91/*'['*/) {\n          if (builder) {\n            valueParser = recon.parseMarkup(input, builder);\n            step = 5;\n          } else {\n            valueParser = recon.parseMarkup(input);\n            step = 4;\n          }\n        } else if (!builder) {\n          return Parser.done(recon.extant());\n        } else {\n          return Parser.done(builder.bind());\n        }\n      } else if (input.isDone()) {\n        if (!builder) {\n          return Parser.done(recon.extant());\n        } else {\n          return Parser.done(builder.bind());\n        }\n      }\n    }\n    if (step === 2) {\n      while (fieldParser!.isCont() && !input.isEmpty()) {\n        fieldParser = fieldParser!.feed(input);\n      }\n      if (fieldParser!.isDone()) {\n        builder = builder || recon.valueBuilder();\n        builder.push(fieldParser!.bind());\n        fieldParser = void 0;\n        step = 3;\n      } else if (fieldParser!.isError()) {\n        return fieldParser!.asError();\n      }\n    }\n    if (step === 3) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 123/*'{'*/) {\n          valueParser = recon.parseRecord(input, builder);\n          step = 5;\n        } else if (c === 91/*'['*/) {\n          valueParser = recon.parseMarkup(input, builder);\n          step = 5;\n        } else {\n          return Parser.done(builder!.bind());\n        }\n      } else if (input.isDone()) {\n        return Parser.done(builder!.bind());\n      }\n    }\n    if (step === 4) {\n      while (valueParser!.isCont() && !input.isEmpty()) {\n        valueParser = valueParser!.feed(input);\n      }\n      if (valueParser!.isDone()) {\n        builder = builder || recon.valueBuilder();\n        builder.push(recon.item(valueParser!.bind()));\n        return Parser.done(builder.bind());\n      } else if (valueParser!.isError()) {\n        return valueParser!;\n      }\n    }\n    if (step === 5) {\n      while (valueParser!.isCont() && !input.isEmpty()) {\n        valueParser = valueParser!.feed(input);\n      }\n      if (valueParser!.isDone()) {\n        return Parser.done(builder!.bind());\n      } else if (valueParser!.isError()) {\n        return valueParser!;\n      }\n    }\n    return new InlineItemParser<I, V>(recon, builder, fieldParser, valueParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser, Diagnostic} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class RecordParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _keyParser: Parser<V> | undefined;\n  private readonly _valueParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, keyParser?: Parser<V>,\n              valueParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._keyParser = keyParser;\n    this._valueParser = valueParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return RecordParser.parse(input, this._recon, this._builder, this._keyParser,\n                              this._valueParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     keyParser?: Parser<V>, valueParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 123/*'{'*/) {\n          input = input.step();\n          step = 2;\n        } else {\n          return Parser.error(Diagnostic.expected(123/*'{'*/, input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(123/*'{'*/, input));\n      }\n    }\n    block: do {\n      if (step === 2) {\n        while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          builder = builder || recon.recordBuilder();\n          if (c === 125/*'}'*/) {\n            input = input.step();\n            return Parser.done(builder.bind());\n          } else if (c === 35/*'#'*/) {\n            input = input.step();\n            step = 8;\n          } else {\n            step = 3;\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(125/*'}'*/, input));\n        }\n      }\n      if (step === 3) {\n        if (!keyParser) {\n          keyParser = recon.parseBlockExpression(input);\n        }\n        while (keyParser.isCont() && !input.isEmpty()) {\n          keyParser = keyParser.feed(input);\n        }\n        if (keyParser.isDone()) {\n          step = 4;\n        } else if (keyParser.isError()) {\n          return keyParser;\n        }\n      }\n      if (step === 4) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 58/*':'*/) {\n            input = input.step();\n            step = 5;\n          } else {\n            builder!.push(recon.item(keyParser!.bind()));\n            keyParser = void 0;\n            step = 7;\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(125/*'}'*/, input));\n        }\n      }\n      if (step === 5) {\n        while (input.isCont() && Recon.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          step = 6;\n        } else if (input.isDone()) {\n          builder!.push(recon.slot(keyParser!.bind()));\n          return Parser.done(builder!.bind());\n        }\n      }\n      if (step === 6) {\n        if (!valueParser) {\n          valueParser = recon.parseBlockExpression(input);\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          builder!.push(recon.slot(keyParser!.bind(), valueParser.bind()));\n          keyParser = void 0;\n          valueParser = void 0;\n          step = 7;\n        } else if (valueParser.isError()) {\n          return valueParser;\n        }\n      }\n      if (step === 7) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 44/*','*/ || c === 59/*';'*/ || Recon.isNewline(c)) {\n            input = input.step();\n            step = 2;\n            continue;\n          } else if (c === 35/*'#'*/) {\n            input = input.step();\n            step = 8;\n          } else if (c === 125/*'}'*/) {\n            input = input.step();\n            return Parser.done(builder!.bind());\n          } else {\n            return Parser.error(Diagnostic.expected(\"'}', ';', ',', or newline\", input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(125/*'}'*/, input));\n        }\n      }\n      if (step === 8) {\n        while (input.isCont()) {\n          c = input.head();\n          if (!Recon.isNewline(c)) {\n            input = input.step();\n          } else {\n            step = 2;\n            continue block;\n          }\n        }\n        if (input.isDone()) {\n          step = 2;\n          continue;\n        }\n      }\n      break;\n    } while (true);\n    return new RecordParser<I, V>(recon, builder, keyParser, valueParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Output, Parser, Diagnostic} from \"@swim/codec\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class MarkupParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _textOutput: Output<V> | undefined;\n  private readonly _valueParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, textOutput?: Output<V>,\n              valueParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._textOutput = textOutput;\n    this._valueParser = valueParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return MarkupParser.parse(input, this._recon, this._builder, this._textOutput,\n                              this._valueParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     textOutput?: Output<V>, valueParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 91/*'['*/) {\n          input = input.step();\n          step = 2;\n        } else {\n          return Parser.error(Diagnostic.expected(91/*'['*/, input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(91/*'['*/, input));\n      }\n    }\n    do {\n      if (step === 2) {\n        while (input.isCont()) {\n          c = input.head();\n          if (c !== 64/*'@'*/ && c !== 91/*'['*/ && c !== 92/*'\\\\'*/ && c !== 93/*']'*/\n              && c !== 123/*'{'*/ && c !== 125/*'}'*/) {\n            input = input.step();\n            textOutput = textOutput || recon.textOutput();\n            textOutput.write(c);\n          } else {\n            break;\n          }\n        }\n        if (input.isCont()) {\n          if (c === 93/*']'*/) {\n            input = input.step();\n            builder = builder || recon.recordBuilder();\n            if (textOutput) {\n              builder.push(recon.item(textOutput.bind()));\n            }\n            return Parser.done(builder.bind());\n          } else if (c === 64/*'@'*/) {\n            builder = builder || recon.recordBuilder();\n            if (textOutput) {\n              builder.push(recon.item(textOutput.bind()));\n              textOutput = void 0;\n            }\n            valueParser = recon.parseInlineItem(input);\n            step = 3;\n          } else if (c === 123/*'{'*/) {\n            builder = builder || recon.recordBuilder();\n            if (textOutput) {\n              builder.push(recon.item(textOutput.bind()));\n              textOutput = void 0;\n            }\n            valueParser = recon.parseRecord(input, builder);\n            step = 4;\n          } else if (c === 91/*'['*/) {\n            builder = builder || recon.recordBuilder();\n            if (textOutput) {\n              builder.push(recon.item(textOutput.bind()));\n              textOutput = void 0;\n            }\n            valueParser = recon.parseMarkup(input, builder);\n            step = 4;\n          } else if (c === 92/*'\\\\'*/) {\n            input = input.step();\n            step = 5;\n          } else {\n            return Parser.error(Diagnostic.unexpected(input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.unexpected(input));\n        }\n      }\n      if (step === 3) {\n        while (valueParser!.isCont() && !input.isEmpty()) {\n          valueParser = valueParser!.feed(input);\n        }\n        if (valueParser!.isDone()) {\n          builder!.push(recon.item(valueParser!.bind()));\n          valueParser = void 0;\n          step = 2;\n          continue;\n        } else if (valueParser!.isError()) {\n          return valueParser!;\n        }\n      }\n      if (step === 4) {\n        while (valueParser!.isCont() && !input.isEmpty()) {\n          valueParser = valueParser!.feed(input);\n        }\n        if (valueParser!.isDone()) {\n          valueParser = void 0;\n          step = 2;\n          continue;\n        } else if (valueParser!.isError()) {\n          return valueParser!;\n        }\n      }\n      if (step === 5) {\n        if (input.isCont()) {\n          c = input.head();\n          textOutput = textOutput || recon.textOutput();\n          if (c === 34/*'\"'*/ || c === 36/*'$'*/ || c === 39/*'\\''*/ || c === 47/*'/'*/\n              || c === 64/*'@'*/ || c === 91/*'['*/ || c === 92/*'\\\\'*/ || c === 93/*']'*/\n              || c === 123/*'{'*/ || c === 125/*'}'*/) {\n            input = input.step();\n            textOutput.write(c);\n            step = 2;\n          } else if (c === 98/*'b'*/) {\n            input = input.step();\n            textOutput.write(8/*'\\b'*/);\n            step = 2;\n          } else if (c === 102/*'f'*/) {\n            input = input.step();\n            textOutput.write(12/*'\\f'*/);\n            step = 2;\n          } else if (c === 110/*'n'*/) {\n            input = input.step();\n            textOutput.write(10/*'\\n'*/);\n            step = 2;\n          } else if (c === 114/*'r'*/) {\n            input = input.step();\n            textOutput.write(13/*'\\r'*/);\n            step = 2;\n          } else if (c === 116/*'t'*/) {\n            input = input.step();\n            textOutput.write(9/*'\\t'*/);\n            step = 2;\n          } else {\n            return Parser.error(Diagnostic.expected(\"escape character\", input));\n          }\n          continue;\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(\"escape character\", input));\n        }\n      }\n      break;\n    } while (true);\n    return new MarkupParser<I, V>(recon, builder, textOutput, valueParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Input, Parser, Diagnostic, Base64} from \"@swim/codec\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class DataParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _base64Parser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, base64Parser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._base64Parser = base64Parser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return DataParser.parse(input, this._recon, this._base64Parser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>,\n                     base64Parser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 37/*'%'*/) {\n          input = input.step();\n          step = 2;\n        } else {\n          return Parser.error(Diagnostic.expected(37/*'%'*/, input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(37/*'%'*/, input));\n      }\n    }\n    if (step === 2) {\n      if (!base64Parser) {\n        base64Parser = Base64.standard().parse(input, recon.dataOutput());\n      }\n      while (base64Parser.isCont() && !input.isEmpty()) {\n        base64Parser = base64Parser.feed(input);\n      }\n      if (base64Parser.isDone()) {\n        return base64Parser;\n      } else if (base64Parser.isError()) {\n        return base64Parser;\n      }\n    }\n    return new DataParser<I, V>(recon, base64Parser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Input, Output, Parser, Diagnostic} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class IdentParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _output: Output<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, output?: Output<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._output = output;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return IdentParser.parse(input, this._recon, this._output, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, output?: Output<V>,\n                     step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        c = input.head();\n        if (Recon.isIdentStartChar(c)) {\n          input = input.step();\n          output = output || recon.textOutput();\n          output = output.write(c);\n          step = 2;\n        } else {\n          return Parser.error(Diagnostic.expected(\"identifier\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"identifier\", input));\n      }\n    }\n    if (step === 2) {\n      while (input.isCont() && (c = input.head(), Recon.isIdentChar(c))) {\n        input = input.step();\n        output!.write(c);\n      }\n      if (!input.isEmpty()) {\n        return Parser.done(recon.ident(output!.bind()));\n      }\n    }\n    return new IdentParser<I, V>(recon, output, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Input, Output, Parser, Diagnostic, Base16} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class StringParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _output: Output<V> | undefined;\n  private readonly _quote: number | undefined;\n  private readonly _code: number | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, output?: Output<V>, quote?: number,\n              code?: number, step?: number) {\n    super();\n    this._recon = recon;\n    this._output = output;\n    this._quote = quote;\n    this._code = code;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return StringParser.parse(input, this._recon, this._output, this._quote,\n                              this._code, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, output?: Output<V>,\n                     quote: number = 0, code: number = 0, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 34/*'\"'*/ || c === 39/*'\\''*/ && (quote === c || quote === 0)) {\n          input = input.step();\n          output = output || recon.textOutput();\n          quote = c;\n          step = 2;\n        } else {\n          return Parser.error(Diagnostic.expected(\"string\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"string\", input));\n      }\n    }\n    string: do {\n      if (step === 2) {\n        while (input.isCont()) {\n          c = input.head();\n          if (c >= 0x20 && c !== quote && c !== 92/*'\\\\'*/) {\n            input = input.step();\n            output!.write(c);\n          } else {\n            break;\n          }\n        }\n        if (input.isCont()) {\n          if (c === quote) {\n            input = input.step();\n            return Parser.done(output!.bind());\n          } else if (c === 92/*'\\\\'*/) {\n            input = input.step();\n            step = 3;\n          } else {\n            return Parser.error(Diagnostic.expected(quote, input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(quote, input));\n        }\n      }\n      if (step === 3) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 34/*'\"'*/ || c === 36/*'$'*/ || c === 39/*'\\''*/ || c === 47/*'/'*/\n              || c === 64/*'@'*/ || c === 91/*'['*/ || c === 92/*'\\\\'*/ || c === 93/*']'*/\n              || c === 123/*'{'*/ || c === 125/*'}'*/) {\n            input = input.step();\n            output!.write(c);\n            step = 2;\n            continue;\n          } else if (c === 98/*'b'*/) {\n            input = input.step();\n            output!.write(8/*'\\b'*/);\n            step = 2;\n            continue;\n          } else if (c === 102/*'f'*/) {\n            input = input.step();\n            output!.write(12/*'\\f'*/);\n            step = 2;\n            continue;\n          } else if (c === 110/*'n'*/) {\n            input = input.step();\n            output!.write(10/*'\\n'*/);\n            step = 2;\n            continue;\n          } else if (c === 114/*'r'*/) {\n            input = input.step();\n            output!.write(13/*'\\r'*/);\n            step = 2;\n            continue;\n          } else if (c === 116/*'t'*/) {\n            input = input.step();\n            output!.write(9/*'\\t'*/);\n            step = 2;\n            continue;\n          } else if (c === 117/*'u'*/) {\n            input = input.step();\n            step = 4;\n          } else {\n            return Parser.error(Diagnostic.expected(\"escape character\", input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(\"escape character\", input));\n        }\n      }\n      if (step >= 4) {\n        do {\n          if (input.isCont()) {\n            c = input.head();\n            if (Base16.isDigit(c)) {\n              input = input.step();\n              code = 16 * code + Base16.decodeDigit(c);\n              if (step <= 6) {\n                step += 1;\n                continue;\n              } else {\n                output!.write(code);\n                code = 0;\n                step = 2;\n                continue string;\n              }\n            } else {\n              return Parser.error(Diagnostic.expected(\"hex digit\", input));\n            }\n          } else if (input.isDone()) {\n            return Parser.error(Diagnostic.expected(\"hex digit\", input));\n          }\n          break;\n        } while (true);\n      }\n      break;\n    } while (true);\n    return new StringParser<I, V>(recon, output, quote, code, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Input, Output, Parser, Diagnostic, Unicode, Base16} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class NumberParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _sign: number | undefined;\n  private readonly _value: number | undefined;\n  private readonly _mode: number | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, sign?: number, value?: number, mode?: number, step?: number) {\n    super();\n    this._recon = recon;\n    this._sign = sign;\n    this._value = value;\n    this._mode = mode;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return NumberParser.parse(input, this._recon, this._sign, this._value, this._mode, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, sign: number = 1, value: number = 0,\n                     mode: number = 2, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 45/*'-'*/) {\n          input = input.step();\n          sign = -1;\n        }\n        step = 2;\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"number\", input));\n      }\n    }\n    if (step === 2) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 48/*'0'*/) {\n          input = input.step();\n          step = 4;\n        } else if (c >= 49/*'1'*/ && c <= 57/*'9'*/) {\n          input = input.step();\n          value = sign * (c - 48/*'0'*/);\n          step = 3;\n        } else {\n          return Parser.error(Diagnostic.expected(\"digit\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"digit\", input));\n      }\n    }\n    if (step === 3) {\n      while (input.isCont()) {\n        c = input.head();\n        if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          const newValue = 10 * value + sign * (c - 48/*'0'*/);\n          if (-9007199254740991 <= newValue && newValue <= 9007199254740992) {\n            value = newValue;\n            input = input.step();\n          } else {\n            return Parser.error(Diagnostic.message(\"integer overflow\", input));\n          }\n        } else {\n          break;\n        }\n      }\n      if (input.isCont()) {\n        step = 4;\n      } else if (input.isDone()) {\n        return Parser.done(recon.num(value));\n      }\n    }\n    if (step === 4) {\n      if (input.isCont()) {\n        c = input.head();\n        if (mode > 0 && c === 46/*'.'*/ || mode > 1 && (c === 69/*'E'*/ || c === 101/*'e'*/)) {\n          let output = Unicode.stringOutput();\n          if (sign < 0 && value === 0) {\n            output = output.write(45/*'-'*/).write(48/*'0'*/);\n          } else {\n            output = output.write(\"\" + value);\n          }\n          return DecimalParser.parse(input, recon, output, mode);\n        } else if (c === 120/*'x'*/ && sign > 0 && value === 0) {\n          input = input.step();\n          return HexadecimalParser.parse(input, recon);\n        } else {\n          return Parser.done(recon.num(value));\n        }\n      } else if (input.isDone()) {\n        return Parser.done(recon.num(value));\n      }\n    }\n    return new NumberParser<I, V>(recon, sign, value, mode, step);\n  }\n\n  static parseInteger<I, V>(input: Input, recon: ReconParser<I, V>): Parser<V> {\n    return NumberParser.parse(input, recon, void 0, void 0, 0);\n  }\n\n  static parseDecimal<I, V>(input: Input, recon: ReconParser<I, V>): Parser<V> {\n    return NumberParser.parse(input, recon, void 0, void 0, 1);\n  }\n}\n\n/** @hidden */\nclass DecimalParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _output: Output<string>;\n  private readonly _mode: number | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, output: Output<string>, mode?: number, step?: number) {\n    super();\n    this._recon = recon;\n    this._output = output;\n    this._mode = mode;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return DecimalParser.parse(input, this._recon, this._output, this._mode, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, output: Output<string>,\n                     mode: number = 2, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 46/*'.'*/) {\n          input = input.step();\n          output = output.write(c);\n          step = 2;\n        } else if (mode > 1 && (c === 69/*'E'*/ || c === 101/*'e'*/)) {\n          input = input.step();\n          output = output.write(c);\n          step = 5;\n        } else {\n          return Parser.error(Diagnostic.expected(\"decimal or exponent\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"decimal or exponent\", input));\n      }\n    }\n    if (step === 2) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          input = input.step();\n          output = output.write(c);\n          step = 3;\n        } else {\n          return Parser.error(Diagnostic.expected(\"digit\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"digit\", input));\n      }\n    }\n    if (step === 3) {\n      while (input.isCont()) {\n        c = input.head();\n        if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          input = input.step();\n          output = output.write(c);\n        } else {\n          break;\n        }\n      }\n      if (input.isCont()) {\n        if (mode > 1) {\n          step = 4;\n        } else {\n          return Parser.done(recon.num(output.bind()));\n        }\n      } else if (input.isDone()) {\n        return Parser.done(recon.num(output.bind()));\n      }\n    }\n    if (step === 4) {\n      c = input.head();\n      if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n        input = input.step();\n        output = output.write(c);\n        step = 5;\n      } else {\n        return Parser.done(recon.num(output.bind()));\n      }\n    }\n    if (step === 5) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 43/*'+'*/ || c === 45/*'-'*/) {\n          input = input.step();\n          output = output.write(c);\n        }\n        step = 6;\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 6) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          input = input.step();\n          output = output.write(c);\n          step = 7;\n        } else {\n          return Parser.error(Diagnostic.expected(\"digit\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"digit\", input));\n      }\n    }\n    if (step === 7) {\n      while (input.isCont()) {\n        c = input.head();\n        if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          input = input.step();\n          output = output.write(c);\n        } else {\n          break;\n        }\n      }\n      if (!input.isEmpty()) {\n        return Parser.done(recon.num(output.bind()));\n      }\n    }\n    return new DecimalParser<I, V>(recon, output, mode, step);\n  }\n}\n\n/** @hidden */\nclass HexadecimalParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _value: number | undefined;\n  private readonly _size: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, value?: number, size?: number) {\n    super();\n    this._recon = recon;\n    this._value = value;\n    this._size = size;\n  }\n\n  feed(input: Input): Parser<V> {\n    return HexadecimalParser.parse(input, this._recon, this._value, this._size);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>,\n                     value: number = 0, size: number = 0): Parser<V> {\n    let c = 0;\n    while (input.isCont()) {\n      c = input.head();\n      if (Base16.isDigit(c)) {\n        input = input.step();\n        value = 16 * value + Base16.decodeDigit(c);\n        size += 1;\n      } else {\n        break;\n      }\n    }\n    if (!input.isEmpty()) {\n      if (size > 0) {\n        if (size <= 8) {\n          return Parser.done(recon.uint32(value));\n        } else {\n          return Parser.done(recon.uint64(value));\n        }\n      } else {\n        return Parser.error(Diagnostic.expected(\"hex digit\", input));\n      }\n    }\n    return new HexadecimalParser<I, V>(recon, value, size);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser} from \"@swim/codec\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class LambdaFuncParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _bindingsParser: Parser<V> | undefined;\n  private readonly _templateParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, bindingsParser?: Parser<V>,\n              templateParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._bindingsParser = bindingsParser;\n    this._templateParser = templateParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return LambdaFuncParser.parse(input, this._recon, this._builder, this._bindingsParser,\n                                  this._templateParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     bindingsParser?: Parser<V>, templateParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (!bindingsParser) {\n        bindingsParser = recon.parseConditionalOperator(input, builder);\n      }\n      while (bindingsParser.isCont() && !input.isEmpty()) {\n        bindingsParser = bindingsParser.feed(input);\n      }\n      if (bindingsParser.isDone()) {\n        step = 2;\n      } else if (bindingsParser.isError()) {\n        return bindingsParser.asError();\n      }\n    }\n    if (step === 2) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 62/*'>'*/) {\n          // leading '=' consumed by ComparisonOperatorParser\n          input = input.step();\n          step = 3;\n        } else {\n          return bindingsParser!;\n        }\n      } else if (input.isDone()) {\n        return bindingsParser!;\n      }\n    }\n    if (step === 3) {\n      if (!templateParser) {\n        templateParser = recon.parseConditionalOperator(input);\n      }\n      while (templateParser.isCont() && !input.isEmpty()) {\n        templateParser = templateParser.feed(input);\n      }\n      if (templateParser.isDone()) {\n        const bindings = bindingsParser!.bind();\n        const template = templateParser.bind();\n        return Parser.done(recon.lambda(bindings, template));\n      } else if (templateParser.isError()) {\n        return templateParser.asError();\n      }\n    }\n    return new LambdaFuncParser<I, V>(recon, builder, bindingsParser, templateParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser, Diagnostic} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class ConditionalOperatorParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _ifParser: Parser<V> | undefined;\n  private readonly _thenParser: Parser<V> | undefined;\n  private readonly _elseParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, ifParser?: Parser<V>,\n              thenParser?: Parser<V>, elseParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._ifParser = ifParser;\n    this._thenParser = thenParser;\n    this._elseParser = elseParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return ConditionalOperatorParser.parse(input, this._recon, this._builder, this._ifParser,\n                                           this._thenParser, this._elseParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     ifParser?: Parser<V>, thenParser?: Parser<V>,\n                     elseParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (!ifParser) {\n        ifParser = recon.parseOrOperator(input, builder);\n      }\n      while (ifParser.isCont() && !input.isEmpty()) {\n        ifParser = ifParser.feed(input);\n      }\n      if (ifParser.isDone()) {\n        step = 2;\n      } else if (ifParser.isError()) {\n        return ifParser.asError();\n      }\n    }\n    if (step === 2) {\n      while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 63/*'?'*/) {\n          input = input.step();\n          step = 3;\n        } else {\n          return ifParser!;\n        }\n      } else if (input.isDone()) {\n        return ifParser!;\n      }\n    }\n    if (step === 3) {\n      if (!thenParser) {\n        thenParser = recon.parseConditionalOperator(input, builder);\n      }\n      while (thenParser.isCont() && !input.isEmpty()) {\n        thenParser = thenParser.feed(input);\n      }\n      if (thenParser.isDone()) {\n        step = 4;\n      } else if (thenParser.isError()) {\n        return thenParser.asError();\n      }\n    }\n    if (step === 4) {\n      while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 58/*':'*/) {\n          input = input.step();\n          step = 5;\n        } else {\n          return Parser.error(Diagnostic.expected(58/*':'*/, input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(58/*':'*/, input));\n      }\n    }\n    if (step === 5) {\n      if (!elseParser) {\n        elseParser = recon.parseConditionalOperator(input, builder);\n      }\n      while (elseParser.isCont() && !input.isEmpty()) {\n        elseParser = elseParser.feed(input);\n      }\n      if (elseParser.isDone()) {\n        const ifTerm = ifParser!.bind();\n        const thenTerm = thenParser!.bind();\n        const elseTerm = elseParser.bind();\n        return Parser.done(recon.conditional(ifTerm, thenTerm, elseTerm));\n      } else if (elseParser.isError()) {\n        return elseParser.asError();\n      }\n    }\n    return new ConditionalOperatorParser<I, V>(recon, builder, ifParser, thenParser, elseParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser} from \"@swim/codec\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class OrOperatorParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _lhsParser: Parser<V> | undefined;\n  private readonly _rhsParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              lhsParser?: Parser<V>, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._lhsParser = lhsParser;\n    this._rhsParser = rhsParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return OrOperatorParser.parse(input, this._recon, this._builder, this._lhsParser,\n                                  this._rhsParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     lhsParser?: Parser<V>, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (!lhsParser) {\n          lhsParser = recon.parseAndOperator(input, builder);\n        }\n        while (lhsParser.isCont() && !input.isEmpty()) {\n          lhsParser = lhsParser.feed(input);\n        }\n        if (lhsParser.isDone()) {\n          step = 2;\n        } else if (lhsParser.isError()) {\n          return lhsParser.asError();\n        }\n      }\n      if (step === 2) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 124/*'|'*/) {\n            // first '|' consumed by BitwiseOrOperatorParser\n            input = input.step();\n            step = 3;\n          } else {\n            return lhsParser!;\n          }\n        } else if (input.isDone()) {\n          return lhsParser!;\n        }\n      }\n      if (step === 3) {\n        if (!rhsParser) {\n          rhsParser = recon.parseAndOperator(input, builder);\n        }\n        while (rhsParser.isCont() && !input.isEmpty()) {\n          rhsParser = rhsParser.feed(input);\n        }\n        if (rhsParser.isDone()) {\n          const lhs = lhsParser!.bind();\n          const rhs = rhsParser.bind();\n          lhsParser = Parser.done(recon.or(lhs, rhs));\n          rhsParser = void 0;\n          step = 2;\n          continue;\n        } else if (rhsParser.isError()) {\n          return rhsParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new OrOperatorParser<I, V>(recon, builder, lhsParser, rhsParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser} from \"@swim/codec\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class AndOperatorParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _lhsParser: Parser<V> | undefined;\n  private readonly _rhsParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              lhsParser?: Parser<V>, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._lhsParser = lhsParser;\n    this._rhsParser = rhsParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return AndOperatorParser.parse(input, this._recon, this._builder, this._lhsParser,\n                                   this._rhsParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     lhsParser?: Parser<V>, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (!lhsParser) {\n          lhsParser = recon.parseBitwiseOrOperator(input, builder);\n        }\n        while (lhsParser.isCont() && !input.isEmpty()) {\n          lhsParser = lhsParser.feed(input);\n        }\n        if (lhsParser.isDone()) {\n          step = 2;\n        } else if (lhsParser.isError()) {\n          return lhsParser.asError();\n        }\n      }\n      if (step === 2) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 38/*'&'*/) {\n            // first '&' consumed by BitwiseAndOperatorParser\n            input = input.step();\n            step = 3;\n          } else {\n            return lhsParser!;\n          }\n        } else if (input.isDone()) {\n          return lhsParser!;\n        }\n      }\n      if (step === 3) {\n        if (!rhsParser) {\n          rhsParser = recon.parseBitwiseOrOperator(input, builder);\n        }\n        while (rhsParser.isCont() && !input.isEmpty()) {\n          rhsParser = rhsParser.feed(input);\n        }\n        if (rhsParser.isDone()) {\n          const lhs = lhsParser!.bind();\n          const rhs = rhsParser.bind();\n          lhsParser = Parser.done(recon.and(lhs, rhs));\n          rhsParser = void 0;\n          step = 2;\n          continue;\n        } else if (rhsParser.isError()) {\n          return rhsParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new AndOperatorParser<I, V>(recon, builder, lhsParser, rhsParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser, Diagnostic} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class BitwiseOrOperatorParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _lhsParser: Parser<V> | undefined;\n  private readonly _rhsParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              lhsParser?: Parser<V>, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._lhsParser = lhsParser;\n    this._rhsParser = rhsParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return BitwiseOrOperatorParser.parse(input, this._recon, this._builder,\n                                         this._lhsParser, this._rhsParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     lhsParser?: Parser<V>, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (!lhsParser) {\n          lhsParser = recon.parseBitwiseXorOperator(input, builder);\n        }\n        while (lhsParser.isCont() && !input.isEmpty()) {\n          lhsParser = lhsParser.feed(input);\n        }\n        if (lhsParser.isDone()) {\n          step = 2;\n        } else if (lhsParser.isError()) {\n          return lhsParser.asError();\n        }\n      }\n      if (step === 2) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 124/*'|'*/) {\n            input = input.step();\n            step = 3;\n          } else {\n            return lhsParser!;\n          }\n        } else if (input.isDone()) {\n          return lhsParser!;\n        }\n      }\n      if (step === 3) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 124/*'|'*/) {\n            return lhsParser!;\n          } else {\n            step = 4;\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.unexpected(input));\n        }\n      }\n      if (step === 4) {\n        if (!rhsParser) {\n          rhsParser = recon.parseBitwiseXorOperator(input, builder);\n        }\n        while (rhsParser.isCont() && !input.isEmpty()) {\n          rhsParser = rhsParser.feed(input);\n        }\n        if (rhsParser.isDone()) {\n          const lhs = lhsParser!.bind();\n          const rhs = rhsParser.bind();\n          lhsParser = Parser.done(recon.bitwiseOr(lhs, rhs));\n          rhsParser = void 0;\n          step = 2;\n          continue;\n        } else if (rhsParser.isError()) {\n          return rhsParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new BitwiseOrOperatorParser<I, V>(recon, builder, lhsParser, rhsParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class BitwiseXorOperatorParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _lhsParser: Parser<V> | undefined;\n  private readonly _rhsParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              lhsParser?: Parser<V>, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._lhsParser = lhsParser;\n    this._rhsParser = rhsParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return BitwiseXorOperatorParser.parse(input, this._recon, this._builder,\n                                          this._lhsParser, this._rhsParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     lhsParser?: Parser<V>, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (!lhsParser) {\n          lhsParser = recon.parseBitwiseAndOperator(input, builder);\n        }\n        while (lhsParser.isCont() && !input.isEmpty()) {\n          lhsParser = lhsParser.feed(input);\n        }\n        if (lhsParser.isDone()) {\n          step = 2;\n        } else if (lhsParser.isError()) {\n          return lhsParser.asError();\n        }\n      }\n      if (step === 2) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 94/*'^'*/) {\n            input = input.step();\n            step = 3;\n          } else {\n            return lhsParser!;\n          }\n        } else if (input.isDone()) {\n          return lhsParser!;\n        }\n      }\n      if (step === 3) {\n        if (!rhsParser) {\n          rhsParser = recon.parseBitwiseAndOperator(input, builder);\n        }\n        while (rhsParser.isCont() && !input.isEmpty()) {\n          rhsParser = rhsParser.feed(input);\n        }\n        if (rhsParser.isDone()) {\n          const lhs = lhsParser!.bind();\n          const rhs = rhsParser.bind();\n          lhsParser = Parser.done(recon.bitwiseXor(lhs, rhs));\n          rhsParser = void 0;\n          step = 2;\n          continue;\n        } else if (rhsParser.isError()) {\n          return rhsParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new BitwiseXorOperatorParser<I, V>(recon, builder, lhsParser, rhsParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser, Diagnostic} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class BitwiseAndOperatorParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _lhsParser: Parser<V> | undefined;\n  private readonly _rhsParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              lhsParser?: Parser<V>, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._lhsParser = lhsParser;\n    this._rhsParser = rhsParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return BitwiseAndOperatorParser.parse(input, this._recon, this._builder,\n                                          this._lhsParser, this._rhsParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     lhsParser?: Parser<V>, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (!lhsParser) {\n          lhsParser = recon.parseComparisonOperator(input, builder);\n        }\n        while (lhsParser.isCont() && !input.isEmpty()) {\n          lhsParser = lhsParser.feed(input);\n        }\n        if (lhsParser.isDone()) {\n          step = 2;\n        } else if (lhsParser.isError()) {\n          return lhsParser.asError();\n        }\n      }\n      if (step === 2) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 38/*'&'*/) {\n            input = input.step();\n            step = 3;\n          } else {\n            return lhsParser!;\n          }\n        } else if (input.isDone()) {\n          return lhsParser!;\n        }\n      }\n      if (step === 3) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 38/*'&'*/) {\n            return lhsParser!;\n          } else {\n            step = 4;\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.unexpected(input));\n        }\n      }\n      if (step === 4) {\n        if (!rhsParser) {\n          rhsParser = recon.parseComparisonOperator(input, builder);\n        }\n        while (rhsParser.isCont() && !input.isEmpty()) {\n          rhsParser = rhsParser.feed(input);\n        }\n        if (rhsParser.isDone()) {\n          const lhs = lhsParser!.bind();\n          const rhs = rhsParser.bind();\n          lhsParser = Parser.done(recon.bitwiseAnd(lhs, rhs));\n          rhsParser = void 0;\n          step = 2;\n          continue;\n        } else if (rhsParser.isError()) {\n          return rhsParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new BitwiseAndOperatorParser<I, V>(recon, builder, lhsParser, rhsParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser, Diagnostic} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class ComparisonOperatorParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _lhsParser: Parser<V> | undefined;\n  private readonly _operator: string | undefined;\n  private readonly _rhsParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, lhsParser?: Parser<V>,\n              operator?: string, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._lhsParser = lhsParser;\n    this._operator = operator;\n    this._rhsParser = rhsParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return ComparisonOperatorParser.parse(input, this._recon, this._builder, this._lhsParser,\n                                          this._operator, this._rhsParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>, lhsParser?: Parser<V>,\n                     operator?: string, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (!lhsParser) {\n        lhsParser = recon.parseAttrExpression(input, builder);\n      }\n      while (lhsParser.isCont() && !input.isEmpty()) {\n        lhsParser = lhsParser.feed(input);\n      }\n      if (lhsParser.isDone()) {\n        step = 2;\n      } else if (lhsParser.isError()) {\n        return lhsParser.asError();\n      }\n    }\n    if (step === 2) {\n      while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 33/*'!'*/) {\n          input = input.step();\n          step = 3;\n        } else if (c === 60/*'<'*/) {\n          input = input.step();\n          step = 4;\n        } else if (c === 62/*'>'*/) {\n          input = input.step();\n          step = 5;\n        } else if (c === 61/*'='*/) {\n          input = input.step();\n          step = 6;\n        } else {\n          return lhsParser!;\n        }\n      } else if (input.isDone()) {\n        return lhsParser!;\n      }\n    }\n    if (step === 3) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 61/*'='*/) {\n          input = input.step();\n          operator = \"!=\";\n          step = 7;\n        } else {\n          operator = \"!\";\n          step = 7;\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 4) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 61/*'='*/) {\n          input = input.step();\n          operator = \"<=\";\n          step = 7;\n        } else {\n          operator = \"<\";\n          step = 7;\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 5) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 61/*'='*/) {\n          input = input.step();\n          operator = \">=\";\n          step = 7;\n        } else {\n          operator = \">\";\n          step = 7;\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 6) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 61/*'='*/) {\n          input = input.step();\n          operator = \"==\";\n          step = 7;\n        } else if (c === 62/*'>'*/) {\n          return lhsParser!;\n        } else {\n          operator = \"=\";\n          step = 7;\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 7) {\n      if (!rhsParser) {\n        rhsParser = recon.parseAttrExpression(input, builder);\n      }\n      while (rhsParser.isCont() && !input.isEmpty()) {\n        rhsParser = rhsParser.feed(input);\n      }\n      if (rhsParser.isDone()) {\n        const lhs = lhsParser!.bind();\n        const rhs = rhsParser.bind();\n        if (operator === \"<\") {\n          return Parser.done(recon.lt(lhs, rhs));\n        } else if (operator === \"<=\") {\n          return Parser.done(recon.le(lhs, rhs));\n        } else if (operator === \"==\") {\n          return Parser.done(recon.eq(lhs, rhs));\n        } else if (operator === \"!=\") {\n          return Parser.done(recon.ne(lhs, rhs));\n        } else if (operator === \">=\") {\n          return Parser.done(recon.ge(lhs, rhs));\n        } else if (operator === \">\") {\n          return Parser.done(recon.gt(lhs, rhs));\n        } else {\n          return Parser.error(Diagnostic.message(operator!, input));\n        }\n      } else if (rhsParser.isError()) {\n        return rhsParser.asError();\n      }\n    }\n    return new ComparisonOperatorParser<I, V>(recon, builder, lhsParser, operator, rhsParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class AttrExpressionParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _fieldParser: Parser<I> | undefined;\n  private readonly _valueParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              fieldParser?: Parser<I>, valueParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._fieldParser = fieldParser;\n    this._valueParser = valueParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return AttrExpressionParser.parse(input, this._recon, this._builder,\n                                      this._fieldParser, this._valueParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     fieldParser?: Parser<I>, valueParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 64/*'@'*/) {\n            step = 2;\n          } else if (c === 123/*'{'*/ || c === 91/*'['*/) {\n            builder = builder || recon.recordBuilder();\n            step = 5;\n          } else if (c === 40/*'('*/) {\n            step = 4;\n          } else if (c === 33/*'!'*/ || c === 34/*'\"'*/ || c === 36/*'$'*/ || c === 37/*'%'*/\n                  || c === 39/*'\\''*/ || c === 43/*'+'*/ || c === 45/*'-'*/\n                  || c >= 48/*'0'*/ && c <= 57/*'9'*/ || c === 126/*'~'*/\n                  || Recon.isIdentStartChar(c)) {\n            step = 3;\n          } else if (!builder) {\n            return Parser.done(recon.extant());\n          } else {\n            return Parser.done(builder.bind());\n          }\n        } else if (input.isDone()) {\n          if (!builder) {\n            return Parser.done(recon.extant());\n          } else {\n            return Parser.done(builder.bind());\n          }\n        }\n      }\n      if (step === 2) {\n        if (!fieldParser) {\n          fieldParser = recon.parseAttr(input);\n        }\n        while (fieldParser.isCont() && !input.isEmpty()) {\n          fieldParser = fieldParser.feed(input);\n        }\n        if (fieldParser.isDone()) {\n          builder = builder || recon.recordBuilder();\n          builder.push(fieldParser.bind());\n          fieldParser = void 0;\n          step = 1;\n          continue;\n        } else if (fieldParser.isError()) {\n          return fieldParser.asError();\n        }\n      }\n      if (step === 3) {\n        if (!valueParser) {\n          valueParser = recon.parseAdditiveOperator(input);\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          builder = builder || recon.valueBuilder();\n          builder.push(recon.item(valueParser.bind()));\n          valueParser = void 0;\n          step = 6;\n        } else if (valueParser.isError()) {\n          return valueParser.asError();\n        }\n      }\n      if (step === 4) {\n        if (!valueParser) {\n          valueParser = recon.parseAdditiveOperator(input, builder);\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          if (!builder) {\n            builder = recon.valueBuilder();\n            builder.push(recon.item(valueParser.bind()));\n          }\n          valueParser = void 0;\n          step = 6;\n        } else if (valueParser.isError()) {\n          return valueParser.asError();\n        }\n      }\n      if (step === 5) {\n        if (!valueParser) {\n          valueParser = recon.parseAdditiveOperator(input, builder);\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          valueParser = void 0;\n          step = 6;\n        } else if (valueParser.isError()) {\n          return valueParser.asError();\n        }\n      }\n      if (step === 6) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 64/*'@'*/) {\n            step = 1;\n            continue;\n          } else {\n            return Parser.done(builder!.bind());\n          }\n        } else if (input.isDone()) {\n          return Parser.done(builder!.bind());\n        }\n      }\n      break;\n    } while (true);\n    return new AttrExpressionParser<I, V>(recon, builder, fieldParser, valueParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser, Diagnostic} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class AdditiveOperatorParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _lhsParser: Parser<V> | undefined;\n  private readonly _operator: string | undefined;\n  private readonly _rhsParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, lhsParser?: Parser<V>,\n              operator?: string, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._lhsParser = lhsParser;\n    this._operator = operator;\n    this._rhsParser = rhsParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return AdditiveOperatorParser.parse(input, this._recon, this._builder, this._lhsParser,\n                                        this._operator, this._rhsParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>, lhsParser?: Parser<V>,\n                     operator?: string, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (!lhsParser) {\n          lhsParser = recon.parseMultiplicativeOperator(input, builder);\n        }\n        while (lhsParser.isCont() && !input.isEmpty()) {\n          lhsParser = lhsParser.feed(input);\n        }\n        if (lhsParser.isDone()) {\n          step = 2;\n        } else if (lhsParser.isError()) {\n          return lhsParser.asError();\n        }\n      }\n      if (step === 2) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 43/*'+'*/) {\n            input = input.step();\n            operator = \"+\";\n            step = 3;\n          } else if (c === 45/*'-'*/) {\n            input = input.step();\n            operator = \"-\";\n            step = 3;\n          } else {\n            return lhsParser!;\n          }\n        } else if (input.isDone()) {\n          return lhsParser!;\n        }\n      }\n      if (step === 3) {\n        if (!rhsParser) {\n          rhsParser = recon.parseMultiplicativeOperator(input, builder);\n        }\n        while (rhsParser.isCont() && !input.isEmpty()) {\n          rhsParser = rhsParser.feed(input);\n        }\n        if (rhsParser.isDone()) {\n          const lhs = lhsParser!.bind();\n          const rhs = rhsParser.bind();\n          if (operator === \"+\") {\n            lhsParser = Parser.done(recon.plus(lhs, rhs));\n          } else if (operator === \"-\") {\n            lhsParser = Parser.done(recon.minus(lhs, rhs));\n          } else {\n            return Parser.error(Diagnostic.message(operator!, input));\n          }\n          rhsParser = void 0;\n          operator = void 0;\n          step = 2;\n          continue;\n        } else if (rhsParser.isError()) {\n          return rhsParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new AdditiveOperatorParser<I, V>(recon, builder, lhsParser, operator, rhsParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser, Diagnostic} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class MultiplicativeOperatorParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _lhsParser: Parser<V> | undefined;\n  private readonly _operator: string | undefined;\n  private readonly _rhsParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, lhsParser?: Parser<V>,\n              operator?: string, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._lhsParser = lhsParser;\n    this._operator = operator;\n    this._rhsParser = rhsParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return MultiplicativeOperatorParser.parse(input, this._recon, this._builder, this._lhsParser,\n                                              this._operator, this._rhsParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>, lhsParser?: Parser<V>,\n                     operator?: string, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (!lhsParser) {\n          lhsParser = recon.parsePrefixOperator(input, builder);\n        }\n        while (lhsParser.isCont() && !input.isEmpty()) {\n          lhsParser = lhsParser.feed(input);\n        }\n        if (lhsParser.isDone()) {\n          step = 2;\n        } else if (lhsParser.isError()) {\n          return lhsParser.asError();\n        }\n      }\n      if (step === 2) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 42/*'*'*/) {\n            input = input.step();\n            operator = \"*\";\n            step = 3;\n          } else if (c === 47/*'/'*/) {\n            input = input.step();\n            operator = \"/\";\n            step = 3;\n          } else if (c === 37/*'%'*/) {\n            input = input.step();\n            operator = \"%\";\n            step = 3;\n          } else {\n            return lhsParser!;\n          }\n        } else if (input.isDone()) {\n          return lhsParser!;\n        }\n      }\n      if (step === 3) {\n        if (!rhsParser) {\n          rhsParser = recon.parsePrefixOperator(input, builder);\n        }\n        while (rhsParser.isCont() && !input.isEmpty()) {\n          rhsParser = rhsParser.feed(input);\n        }\n        if (rhsParser.isDone()) {\n          const lhs = lhsParser!.bind();\n          const rhs = rhsParser.bind();\n          if (operator === \"*\") {\n            lhsParser = Parser.done(recon.times(lhs, rhs));\n          } else if (operator === \"/\") {\n            lhsParser = Parser.done(recon.divide(lhs, rhs));\n          } else if (operator === \"%\") {\n            lhsParser = Parser.done(recon.modulo(lhs, rhs));\n          } else {\n            return Parser.error(Diagnostic.message(operator!, input));\n          }\n          rhsParser = void 0;\n          operator = void 0;\n          step = 2;\n          continue;\n        } else if (rhsParser.isError()) {\n          return rhsParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new MultiplicativeOperatorParser<I, V>(recon, builder, lhsParser, operator, rhsParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser, Diagnostic} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class PrefixOperatorParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _operator: string | undefined;\n  private readonly _operandParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              operator?: string, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._operator = operator;\n    this._operandParser = rhsParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return PrefixOperatorParser.parse(input, this._recon, this._builder,\n                                      this._operator, this._operandParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     operator?: string, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 33/*'!'*/) {\n          input = input.step();\n          operator = \"!\";\n        } else if (c === 126/*'~'*/) {\n          input = input.step();\n          operator = \"~\";\n        } else if (c === 45/*'-'*/) {\n          input = input.step();\n          operator = \"-\";\n        } else if (c === 43/*'+'*/) {\n          input = input.step();\n          operator = \"+\";\n        } else {\n          return recon.parseInvokeOperator(input, builder);\n        }\n        step = 2;\n      } else if (input.isDone()) {\n        return recon.parseInvokeOperator(input, builder);\n      }\n    }\n    if (step === 2) {\n      if (!rhsParser) {\n        rhsParser = recon.parsePrefixOperator(input, builder);\n      }\n      while (rhsParser.isCont() && !input.isEmpty()) {\n        rhsParser = rhsParser.feed(input);\n      }\n      if (rhsParser.isDone()) {\n        const operand = rhsParser.bind();\n        if (!recon.isDistinct(operand)) {\n          return Parser.error(Diagnostic.expected(\"value\", input));\n        } else if (operator === \"!\") {\n          return Parser.done(recon.not(operand));\n        } else if (operator === \"~\") {\n          return Parser.done(recon.bitwiseNot(operand));\n        } else if (operator === \"-\") {\n          return Parser.done(recon.negative(operand));\n        } else if (operator === \"+\") {\n          return Parser.done(recon.positive(operand));\n        } else {\n          return Parser.error(Diagnostic.message(operator!, input));\n        }\n      } else if (rhsParser.isError()) {\n        return rhsParser.asError();\n      }\n    }\n    return new PrefixOperatorParser<I, V>(recon, builder, operator, rhsParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser, Diagnostic} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class InvokeOperatorParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _exprParser: Parser<V> | undefined;\n  private readonly _argsParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              exprParser?: Parser<V>, argsParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._exprParser = exprParser;\n    this._argsParser = argsParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return InvokeOperatorParser.parse(input, this._recon, this._builder,\n                                      this._exprParser, this._argsParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     exprParser?: Parser<V>, argsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (!exprParser) {\n        exprParser = recon.parsePrimary(input, builder);\n      }\n      while (exprParser.isCont() && !input.isEmpty()) {\n        exprParser = exprParser.feed(input);\n      }\n      if (exprParser.isDone()) {\n        step = 2;\n      } else if (exprParser.isError()) {\n        return exprParser.asError();\n      }\n    }\n    do {\n      if (step === 2) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 40/*'('*/) {\n            input = input.step();\n            step = 3;\n          } else {\n            return exprParser!;\n          }\n        } else if (input.isDone()) {\n          return exprParser!;\n        }\n      }\n      if (step === 3) {\n        while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 41/*')'*/) {\n            input = input.step();\n            const expr = exprParser!.bind();\n            exprParser = Parser.done(recon.invoke(expr, recon.extant()));\n            step = 2;\n            continue;\n          } else {\n            step = 4;\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(41/*')'*/, input));\n        }\n      }\n      if (step === 4) {\n        if (!argsParser) {\n          argsParser = recon.parseBlock(input);\n        }\n        while (argsParser.isCont() && !input.isEmpty()) {\n          argsParser = argsParser.feed(input);\n        }\n        if (argsParser.isDone()) {\n          step = 5;\n        } else if (argsParser.isError()) {\n          return argsParser.asError();\n        }\n      }\n      if (step === 5) {\n        while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n        if (c === 41/*')'*/) {\n            input = input.step();\n            const expr = exprParser!.bind();\n            const args = argsParser!.bind();\n            exprParser = Parser.done(recon.invoke(expr, args));\n            argsParser = void 0;\n            step = 2;\n            continue;\n          } else {\n            return Parser.error(Diagnostic.expected(41/*')'*/, input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(41/*')'*/, input));\n        }\n      }\n      break;\n    } while (true);\n    return new InvokeOperatorParser<I, V>(recon, builder, exprParser, argsParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser, Diagnostic} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class PrimaryParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _exprParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              exprParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._exprParser = exprParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return PrimaryParser.parse(input, this._recon, this._builder,\n                               this._exprParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     exprParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 40/*'('*/) {\n          input = input.step();\n          step = 3;\n        } else {\n          step = 2;\n        }\n      } else if (input.isDone()) {\n        step = 2;\n      }\n    }\n    if (step === 2) {\n      if (!exprParser) {\n        exprParser = recon.parseLiteral(input, builder);\n      }\n      while (exprParser.isCont() && !input.isEmpty()) {\n        exprParser = exprParser.feed(input);\n      }\n      if (exprParser.isDone()) {\n        return exprParser;\n      } else if (exprParser.isError()) {\n        return exprParser.asError();\n      }\n    }\n    if (step === 3) {\n      if (!exprParser) {\n        exprParser = recon.parseBlockExpression(input, builder);\n      }\n      while (exprParser.isCont() && !input.isEmpty()) {\n        exprParser = exprParser.feed(input);\n      }\n      if (exprParser.isDone()) {\n        step = 4;\n      } else if (exprParser.isError()) {\n        return exprParser.asError();\n      }\n    }\n    do {\n      if (step === 4) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 44/*','*/) {\n            input = input.step();\n            if (exprParser) {\n              if (!builder) {\n                builder = recon.recordBuilder();\n                builder.push(recon.item(exprParser.bind()));\n              }\n              exprParser = void 0;\n            }\n            step = 5;\n          } else if (c === 41/*')'*/) {\n            input = input.step();\n            if (exprParser) {\n              return exprParser;\n            } else {\n              return Parser.done(builder!.bind());\n            }\n          } else {\n            return Parser.error(Diagnostic.expected(41/*')'*/, input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(41/*')'*/, input));\n        }\n      }\n      if (step === 5) {\n        if (!exprParser) {\n          exprParser = recon.parseBlockExpression(input, builder);\n        }\n        while (exprParser.isCont() && !input.isEmpty()) {\n          exprParser = exprParser.feed(input);\n        }\n        if (exprParser.isDone()) {\n          exprParser = void 0;\n          step = 4;\n          continue;\n        } else if (exprParser.isError()) {\n          return exprParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new PrimaryParser<I, V>(recon, builder, exprParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser, Diagnostic} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class LiteralParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _valueParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              valueParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._valueParser = valueParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return LiteralParser.parse(input, this._recon, this._builder, this._valueParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     valueParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 40/*'('*/) {\n          input = input.step();\n          step = 4;\n        } else if (c === 123/*'{'*/) {\n          builder = builder || recon.recordBuilder();\n          valueParser = recon.parseRecord(input, builder);\n          step = 3;\n        } else if (c === 91/*'['*/) {\n          builder = builder || recon.recordBuilder();\n          valueParser = recon.parseMarkup(input, builder);\n          step = 3;\n        } else if (Recon.isIdentStartChar(c)) {\n          valueParser = recon.parseIdent(input);\n          step = 2;\n        } else if (c === 34/*'\"'*/ || c === 39/*'\\''*/) {\n          valueParser = recon.parseString(input);\n          step = 2;\n        } else if (c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          valueParser = recon.parseNumber(input);\n          step = 2;\n        } else if (c === 37/*'%'*/) {\n          valueParser = recon.parseData(input);\n          step = 2;\n        } else if (c === 36/*'$'*/) {\n          valueParser = recon.parseSelector(input);\n          step = 2;\n        } else if (!builder) {\n          return Parser.done(recon.extant());\n        } else {\n          return Parser.done(builder.bind());\n        }\n      } else if (input.isDone()) {\n        if (!builder) {\n          return Parser.done(recon.extant());\n        } else {\n          return Parser.done(builder.bind());\n        }\n      }\n    }\n    if (step === 2) {\n      while (valueParser!.isCont() && !input.isEmpty()) {\n        valueParser = valueParser!.feed(input);\n      }\n      if (valueParser!.isDone()) {\n        builder = builder || recon.valueBuilder();\n        builder.push(recon.item(valueParser!.bind()));\n        return Parser.done(builder.bind());\n      } else if (valueParser!.isError()) {\n        return valueParser!.asError();\n      }\n    }\n    if (step === 3) {\n      while (valueParser!.isCont() && !input.isEmpty()) {\n        valueParser = valueParser!.feed(input);\n      }\n      if (valueParser!.isDone()) {\n        return Parser.done(builder!.bind());\n      } else if (valueParser!.isError()) {\n        return valueParser!.asError();\n      }\n    }\n    if (step === 4) {\n      if (!valueParser) {\n        valueParser = recon.parseBlockExpression(input);\n      }\n      while (valueParser.isCont() && !input.isEmpty()) {\n        valueParser = valueParser.feed(input);\n      }\n      if (valueParser.isDone()) {\n        step = 5;\n      } else if (valueParser.isError()) {\n        return valueParser.asError();\n      }\n    }\n    if (step === 5) {\n      while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 41/*')'*/) {\n          input = input.step();\n          builder = builder || recon.valueBuilder();\n          builder.push(recon.item(valueParser!.bind()));\n          return Parser.done(builder.bind());\n        } else {\n          return Parser.error(Diagnostic.expected(41/*')'*/, input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(41/*')'*/, input));\n      }\n    }\n    return new LiteralParser<I, V>(recon, builder, valueParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Parser, Diagnostic} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @hidden */\nexport class SelectorParser<I, V> extends Parser<V> {\n  private readonly _recon: ReconParser<I, V>;\n  private readonly _builder: Builder<I, V> | undefined;\n  private readonly _selector: V | undefined;\n  private readonly _valueParser: Parser<V> | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              selector?: V, valueParser?: Parser<V>, step?: number) {\n    super();\n    this._recon = recon;\n    this._builder = builder;\n    this._selector = selector;\n    this._valueParser = valueParser;\n    this._step = step;\n  }\n\n  feed(input: Input): Parser<V> {\n    return SelectorParser.parse(input, this._recon, this._builder,\n                                this._selector, this._valueParser, this._step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     selector?: V, valueParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont() && c === 36/*'$'*/) {\n        input = input.step();\n        selector = selector || recon.selector();\n        step = 2;\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(36/*'$'*/, input));\n      }\n    }\n    if (step === 2) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 91/*'['*/) {\n          input = input.step();\n          step = 8;\n        } else if (c === 64/*'@'*/) {\n          input = input.step();\n          step = 7;\n        } else if (c === 58/*':'*/) {\n          input = input.step();\n          step = 6;\n        } else if (c === 42/*'*'*/) {\n          input = input.step();\n          step = 5;\n        } else if (c === 35/*'#'*/) {\n          input = input.step();\n          step = 4;\n        } else {\n          step = 3;\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    do {\n      if (step === 3) {\n        if (!valueParser) {\n          valueParser = recon.parseLiteral(input, recon.valueBuilder());\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          selector = recon.get(selector!, valueParser.bind());\n          valueParser = void 0;\n          step = 10;\n        } else if (valueParser.isError()) {\n          return valueParser.asError();\n        }\n      }\n      if (step === 4) {\n        if (!valueParser) {\n          valueParser = recon.parseInteger(input);\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          selector = recon.value(recon.getItem(selector!, valueParser.bind()));\n          valueParser = void 0;\n          step = 10;\n        } else if (valueParser.isError()) {\n          return valueParser.asError();\n        }\n      }\n      if (step === 5) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 58/*':'*/) {\n            input = input.step();\n            selector = recon.keys(selector!);\n            step = 10;\n          } else if (c === 42/*'*'*/) {\n            input = input.step();\n            selector = recon.descendants(selector!);\n            step = 10;\n          } else {\n            selector = recon.children(selector!);\n            step = 10;\n          }\n        } else if (input.isDone()) {\n          selector = recon.children(selector!);\n          step = 10;\n        }\n      }\n      if (step === 6) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 42/*'*'*/) {\n            input = input.step();\n            selector = recon.values(selector!);\n            step = 10;\n          } else {\n            return Parser.error(Diagnostic.expected(42/*'*'*/, input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(42/*'*'*/, input));\n        }\n      }\n      if (step === 7) {\n        if (!valueParser) {\n          valueParser = recon.parseIdent(input);\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          selector = recon.getAttr(selector!, valueParser.bind());\n          valueParser = void 0;\n          step = 10;\n        } else if (valueParser.isError()) {\n          return valueParser.asError();\n        }\n      }\n      if (step === 8) {\n        if (!valueParser) {\n          valueParser = recon.parseBlockExpression(input);\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          step = 9;\n        } else if (valueParser.isError()) {\n          return valueParser.asError();\n        }\n      }\n      if (step === 9) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 93/*']'*/) {\n            input = input.step();\n            selector = recon.filter(selector!, valueParser!.bind());\n            valueParser = void 0;\n            step = 10;\n          } else {\n            return Parser.error(Diagnostic.expected(93/*']'*/, input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(93/*']'*/, input));\n        }\n      }\n      if (step === 10) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 91/*'['*/) {\n            input = input.step();\n            step = 8;\n            continue;\n          } else if (c === 35/*'#'*/) {\n            input = input.step();\n            step = 4;\n            continue;\n          } else if (c === 46/*'.'*/) {\n            input = input.step();\n            step = 11;\n          } else if (builder) {\n            builder.push(recon.item(selector!));\n            return Parser.done(builder.bind());\n          } else {\n            return Parser.done(selector!);\n          }\n        } else if (input.isDone()) {\n          if (builder) {\n            builder.push(recon.item(selector!));\n            return Parser.done(builder.bind());\n          } else {\n            return Parser.done(selector!);\n          }\n        }\n      }\n      if (step === 11) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 64/*'@'*/) {\n            input = input.step();\n            step = 7;\n            continue;\n          } else if (c === 58/*':'*/) {\n            input = input.step();\n            step = 6;\n            continue;\n          } else if (c === 42/*'*'*/) {\n            input = input.step();\n            step = 5;\n            continue;\n          } else {\n            step = 3;\n            continue;\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.unexpected(input));\n        }\n      }\n      break;\n    } while (true);\n    return new SelectorParser<I, V>(recon, builder, selector, valueParser, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Input, Output, Parser, Diagnostic, Unicode} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {BlockParser} from \"./BlockParser\";\nimport {AttrParser} from \"./AttrParser\";\nimport {BlockItemParser} from \"./BlockItemParser\";\nimport {InlineItemParser} from \"./InlineItemParser\";\nimport {RecordParser} from \"./RecordParser\";\nimport {MarkupParser} from \"./MarkupParser\";\nimport {DataParser} from \"./DataParser\";\nimport {IdentParser} from \"./IdentParser\";\nimport {StringParser} from \"./StringParser\";\nimport {NumberParser} from \"./NumberParser\";\nimport {LambdaFuncParser} from \"./LambdaFuncParser\";\nimport {ConditionalOperatorParser} from \"./ConditionalOperatorParser\";\nimport {OrOperatorParser} from \"./OrOperatorParser\";\nimport {AndOperatorParser} from \"./AndOperatorParser\";\nimport {BitwiseOrOperatorParser} from \"./BitwiseOrOperatorParser\";\nimport {BitwiseXorOperatorParser} from \"./BitwiseXorOperatorParser\";\nimport {BitwiseAndOperatorParser} from \"./BitwiseAndOperatorParser\";\nimport {ComparisonOperatorParser} from \"./ComparisonOperatorParser\";\nimport {AttrExpressionParser} from \"./AttrExpressionParser\";\nimport {AdditiveOperatorParser} from \"./AdditiveOperatorParser\";\nimport {MultiplicativeOperatorParser} from \"./MultiplicativeOperatorParser\";\nimport {PrefixOperatorParser} from \"./PrefixOperatorParser\";\nimport {InvokeOperatorParser} from \"./InvokeOperatorParser\";\nimport {PrimaryParser} from \"./PrimaryParser\";\nimport {LiteralParser} from \"./LiteralParser\";\nimport {SelectorParser} from \"./SelectorParser\";\n\n/**\n * Factory for constructing Recon parsers and parse trees.\n */\nexport abstract class ReconParser<I, V> {\n  abstract isDistinct(value: V): boolean;\n\n  abstract item(value: V): I;\n\n  abstract value(item: I): V;\n\n  abstract attr(key: V, value: V): I;\n\n  abstract attr(key: V): I;\n\n  abstract slot(key: V, value: V): I;\n\n  abstract slot(key: V): I;\n\n  abstract valueBuilder(): Builder<I, V>;\n\n  abstract recordBuilder(): Builder<I, V>;\n\n  abstract dataOutput(): Output<V>;\n\n  abstract textOutput(): Output<V>;\n\n  abstract ident(value: V): V;\n\n  abstract num(value: number | string): V;\n\n  abstract uint32(value: number): V;\n\n  abstract uint64(value: number): V;\n\n  abstract bool(value: boolean): V;\n\n  abstract selector(): V;\n\n  abstract extant(): V;\n\n  abstract absent(): V;\n\n  abstract conditional(ifTerm: V, thenTerm: V, elseTerm: V): V;\n\n  abstract or(lhs: V, rhs: V): V;\n\n  abstract and(lhs: V, rhs: V): V;\n\n  abstract bitwiseOr(lhs: V, rhs: V): V;\n\n  abstract bitwiseXor(lhs: V, rhs: V): V;\n\n  abstract bitwiseAnd(lhs: V, rhs: V): V;\n\n  abstract lt(lhs: V, rhs: V): V;\n\n  abstract le(lhs: V, rhs: V): V;\n\n  abstract eq(lhs: V, rhs: V): V;\n\n  abstract ne(lhs: V, rhs: V): V;\n\n  abstract ge(lhs: V, rhs: V): V;\n\n  abstract gt(lhs: V, rhs: V): V;\n\n  abstract plus(lhs: V, rhs: V): V;\n\n  abstract minus(lhs: V, rhs: V): V;\n\n  abstract times(lhs: V, rhs: V): V;\n\n  abstract divide(lhs: V, rhs: V): V;\n\n  abstract modulo(lhs: V, rhs: V): V;\n\n  abstract not(rhs: V): V;\n\n  abstract bitwiseNot(rhs: V): V;\n\n  abstract negative(rhs: V): V;\n\n  abstract positive(rhs: V): V;\n\n  abstract invoke(func: V, args: V): V;\n\n  abstract lambda(bindings: V, template: V): V;\n\n  abstract get(selector: V, key: V): V;\n\n  abstract getAttr(selector: V, key: V): V;\n\n  abstract getItem(selector: V, index: V): I;\n\n  abstract children(selector: V): V;\n\n  abstract descendants(selector: V): V;\n\n  abstract keys(selector: V): V;\n\n  abstract values(selector: V): V;\n\n  abstract filter(selector: V, predicate: V): V;\n\n  parseBlock(input: Input): Parser<V> {\n    return BlockParser.parse(input, this);\n  }\n\n  parseAttr(input: Input): Parser<I> {\n    return AttrParser.parse(input, this);\n  }\n\n  parseBlockItem(input: Input): Parser<V> {\n    return BlockItemParser.parse(input, this);\n  }\n\n  parseInlineItem(input: Input): Parser<V> {\n    return InlineItemParser.parse(input, this);\n  }\n\n  parseRecord(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return RecordParser.parse(input, this, builder);\n  }\n\n  parseMarkup(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return MarkupParser.parse(input, this, builder);\n  }\n\n  parseData(input: Input): Parser<V> {\n    return DataParser.parse(input, this);\n  }\n\n  parseIdent(input: Input): Parser<V> {\n    return IdentParser.parse(input, this);\n  }\n\n  parseString(input: Input): Parser<V> {\n    return StringParser.parse(input, this);\n  }\n\n  parseNumber(input: Input): Parser<V> {\n    return NumberParser.parse(input, this);\n  }\n\n  parseInteger(input: Input): Parser<V> {\n    return NumberParser.parseInteger(input, this);\n  }\n\n  parseBlockExpression(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return this.parseLambdaFunc(input, builder);\n  }\n\n  parseLambdaFunc(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return LambdaFuncParser.parse(input, this, builder);\n  }\n\n  parseConditionalOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return ConditionalOperatorParser.parse(input, this, builder);\n  }\n\n  parseOrOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return OrOperatorParser.parse(input, this, builder);\n  }\n\n  parseAndOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return AndOperatorParser.parse(input, this, builder);\n  }\n\n  parseBitwiseOrOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return BitwiseOrOperatorParser.parse(input, this, builder);\n  }\n\n  parseBitwiseXorOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return BitwiseXorOperatorParser.parse(input, this, builder);\n  }\n\n  parseBitwiseAndOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return BitwiseAndOperatorParser.parse(input, this, builder);\n  }\n\n  parseComparisonOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return ComparisonOperatorParser.parse(input, this, builder);\n  }\n\n  parseAttrExpression(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return AttrExpressionParser.parse(input, this, builder);\n  }\n\n  parseAdditiveOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return AdditiveOperatorParser.parse(input, this, builder);\n  }\n\n  parseMultiplicativeOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return MultiplicativeOperatorParser.parse(input, this, builder);\n  }\n\n  parsePrefixOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return PrefixOperatorParser.parse(input, this, builder);\n  }\n\n  parseInvokeOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return InvokeOperatorParser.parse(input, this, builder);\n  }\n\n  parsePrimary(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return PrimaryParser.parse(input, this, builder);\n  }\n\n  parseLiteral(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return LiteralParser.parse(input, this, builder);\n  }\n\n  parseSelector(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return SelectorParser.parse(input, this, builder);\n  }\n\n  blockParser(): Parser<V> {\n    return new BlockParser<I, V>(this);\n  }\n\n  parseBlockString(string: string): V {\n    let input = Unicode.stringInput(string);\n    while (input.isCont() && Recon.isWhitespace(input.head())) {\n      input = input.step();\n    }\n    let parser = this.parseBlock(input);\n    if (parser.isDone()) {\n      while (input.isCont() && Recon.isWhitespace(input.head())) {\n        input = input.step();\n      }\n    }\n    if (input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return parser.bind();\n  }\n\n  /** @hidden */\n  parseNumberString(string: string): V {\n    let input = Unicode.stringInput(string);\n    while (input.isCont() && Recon.isWhitespace(input.head())) {\n      input = input.step();\n    }\n    let parser = this.parseNumber(input);\n    if (parser.isDone()) {\n      while (input.isCont() && Recon.isWhitespace(input.head())) {\n        input = input.step();\n      }\n    }\n    if (input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return parser.bind();\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Builder} from \"@swim/util\";\nimport {Output} from \"@swim/codec\";\nimport {\n  Item,\n  Attr,\n  Slot,\n  Value,\n  Record,\n  Data,\n  Text,\n  Num,\n  Bool,\n  Selector,\n  AndOperator,\n  BitwiseAndOperator,\n  BitwiseNotOperator,\n  BitwiseOrOperator,\n  BitwiseXorOperator,\n  DivideOperator,\n  EqOperator,\n  GeOperator,\n  GtOperator,\n  InvokeOperator,\n  LeOperator,\n  LtOperator,\n  MinusOperator,\n  ModuloOperator,\n  NeOperator,\n  NegativeOperator,\n  NotOperator,\n  OrOperator,\n  PlusOperator,\n  PositiveOperator,\n  TimesOperator,\n} from \"@swim/structure\";\nimport {ReconParser} from \"./ReconParser\";\n\nexport class ReconStructureParser extends ReconParser<Item, Value> {\n  isDistinct(value: Value): boolean {\n    return value.isDistinct();\n  }\n\n  item(value: Value): Item {\n    return value;\n  }\n\n  value(item: Item): Value {\n    return item.toValue();\n  }\n\n  attr(key: Value, value?: Value): Item {\n    return Attr.of.apply(Attr, arguments);\n  }\n\n  slot(key: Value, value?: Value): Item {\n    return Slot.of.apply(Slot, arguments);\n  }\n\n  valueBuilder(): Builder<Item, Value> {\n    return Value.builder();\n  }\n\n  recordBuilder(): Builder<Item, Value> {\n    return Record.create();\n  }\n\n  dataOutput(): Output<Value> {\n    return Data.output();\n  }\n\n  textOutput(): Output<Value> {\n    return Text.output();\n  }\n\n  ident(value: Value): Value {\n    if (value instanceof Text) {\n      const string = value.stringValue();\n      if (string === \"true\") {\n        return Bool.from(true);\n      } else if (string === \"false\") {\n        return Bool.from(false);\n      }\n    }\n    return value;\n  }\n\n  num(value: number | string): Value {\n    if (typeof value === \"number\") {\n      return Num.from(value);\n    } else if (typeof value === \"string\") {\n      return Num.from(+value);\n    } else {\n      throw new TypeError(\"\" + value);\n    }\n  }\n\n  uint32(value: number): Value {\n    return Num.uint32(value);\n  }\n\n  uint64(value: number): Value {\n    return Num.uint64(value);\n  }\n\n  bool(value: boolean): Value {\n    return Bool.from(value);\n  }\n\n  selector(): Value {\n    return Selector.identity();\n  }\n\n  extant(): Value {\n    return Value.extant();\n  }\n\n  absent(): Value {\n    return Value.absent();\n  }\n\n  conditional(ifTerm: Value, thenTerm: Value, elseTerm: Value): Value {\n    return ifTerm.conditional(thenTerm, elseTerm);\n  }\n\n  or(lhs: Value, rhs: Value): Value {\n    return new OrOperator(lhs, rhs);\n  }\n\n  and(lhs: Value, rhs: Value): Value {\n    return new AndOperator(lhs, rhs);\n  }\n\n  bitwiseOr(lhs: Value, rhs: Value): Value {\n    return new BitwiseOrOperator(lhs, rhs);\n  }\n\n  bitwiseXor(lhs: Value, rhs: Value): Value {\n    return new BitwiseXorOperator(lhs, rhs);\n  }\n\n  bitwiseAnd(lhs: Value, rhs: Value): Value {\n    return new BitwiseAndOperator(lhs, rhs);\n  }\n\n  lt(lhs: Value, rhs: Value): Value {\n    return new LtOperator(lhs, rhs);\n  }\n\n  le(lhs: Value, rhs: Value): Value {\n    return new LeOperator(lhs, rhs);\n  }\n\n  eq(lhs: Value, rhs: Value): Value {\n    return new EqOperator(lhs, rhs);\n  }\n\n  ne(lhs: Value, rhs: Value): Value {\n    return new NeOperator(lhs, rhs);\n  }\n\n  ge(lhs: Value, rhs: Value): Value {\n    return new GeOperator(lhs, rhs);\n  }\n\n  gt(lhs: Value, rhs: Value): Value {\n    return new GtOperator(lhs, rhs);\n  }\n\n  plus(lhs: Value, rhs: Value): Value {\n    return new PlusOperator(lhs, rhs);\n  }\n\n  minus(lhs: Value, rhs: Value): Value {\n    return new MinusOperator(lhs, rhs);\n  }\n\n  times(lhs: Value, rhs: Value): Value {\n    return new TimesOperator(lhs, rhs);\n  }\n\n  divide(lhs: Value, rhs: Value): Value {\n    return new DivideOperator(lhs, rhs);\n  }\n\n  modulo(lhs: Value, rhs: Value): Value {\n    return new ModuloOperator(lhs, rhs);\n  }\n\n  not(rhs: Value): Value {\n    return new NotOperator(rhs);\n  }\n\n  bitwiseNot(rhs: Value): Value {\n    return new BitwiseNotOperator(rhs);\n  }\n\n  negative(rhs: Value): Value {\n    if (rhs instanceof Num) {\n      return rhs.negative();\n    } else {\n      return new NegativeOperator(rhs);\n    }\n  }\n\n  positive(rhs: Value): Value {\n    return new PositiveOperator(rhs);\n  }\n\n  invoke(func: Value, args: Value): Value {\n    return new InvokeOperator(func, args);\n  }\n\n  lambda(bindings: Value, template: Value): Value {\n    return bindings.lambda(template);\n  }\n\n  get(selector: Value, key: Value): Value {\n    return selector.get(key);\n  }\n\n  getAttr(selector: Value, key: Value): Value {\n    return selector.getAttr(key as Text);\n  }\n\n  getItem(selector: Value, index: Value): Item {\n    return selector.getItem(index as Num);\n  }\n\n  children(selector: Value): Value {\n    return Selector.literal(selector).children();\n  }\n\n  descendants(selector: Value): Value {\n    return Selector.literal(selector).descendants();\n  }\n\n  keys(selector: Value): Value {\n    return Selector.literal(selector).keys();\n  }\n\n  values(selector: Value): Value {\n    return Selector.literal(selector).values();\n  }\n\n  filter(selector: Value, predicate: Value): Value {\n    return selector.filter(predicate);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class AttrWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _key: V;\n  private readonly _value: V;\n  private readonly _part: Writer | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, key: V, value: V, part?: Writer, step?: number) {\n    super();\n    this._recon = recon;\n    this._key = key;\n    this._value = value;\n    this._part = part;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return AttrWriter.write(output, this._recon, this._key, this._value, this._part, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, key: V, value: V): number {\n    let size = 0;\n    size += 1; // '@'\n    size += recon.sizeOfValue(key);\n    if (!recon.isExtant(recon.item(value))) {\n      size += 1; // '(';\n      size += recon.sizeOfBlockValue(value);\n      size += 1; // ')';\n    }\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, key: V, value: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(64/*'@'*/);\n      step = 2;\n    }\n    if (step === 2) {\n      if (!part) {\n        part = recon.writeValue(key, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        if (recon.isExtant(recon.item(value))) {\n          return Writer.done();\n        } else {\n          step = 3;\n        }\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 3 && output.isCont()) {\n      output = output.write(40/*'('*/);\n      step = 4;\n    }\n    if (step === 4) {\n      if (!part) {\n        part = recon.writeBlockValue(value, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 5;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 5 && output.isCont()) {\n      output = output.write(41/*')'*/);\n      return Writer.done();\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new AttrWriter<I, V>(recon, key, value, part, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class SlotWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _key: V;\n  private readonly _value: V;\n  private readonly _part: Writer | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, key: V, value: V, part?: Writer, step?: number) {\n    super();\n    this._recon = recon;\n    this._key = key;\n    this._value = value;\n    this._part = part;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return SlotWriter.write(output, this._recon, this._key, this._value, this._part, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, key: V, value: V): number {\n    let size = 0;\n    size += recon.sizeOfValue(key);\n    size += 1; // ':'\n    if (!recon.isExtant(recon.item(value))) {\n      size += recon.sizeOfValue(value);\n    }\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, key: V, value: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1) {\n      if (!part) {\n        part = recon.writeValue(key, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 2;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 2 && output.isCont()) {\n      output = output.write(58/*':'*/);\n      if (recon.isExtant(recon.item(value))) {\n        return Writer.done();\n      } else {\n        step = 3;\n      }\n    }\n    if (step === 3) {\n      if (!part) {\n        part = recon.writeValue(value, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        return Writer.done();\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new SlotWriter<I, V>(recon, key, value, part, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Cursor} from \"@swim/util\";\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class BlockWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _items: Cursor<I>;\n  private readonly _inBlock: boolean;\n  private readonly _inMarkup: boolean;\n  private readonly _inBraces: boolean | undefined;\n  private readonly _inBrackets: boolean | undefined;\n  private readonly _first: boolean | undefined;\n  private readonly _markupSafe: boolean | undefined;\n  private readonly _item: I | undefined;\n  private readonly _next: I | undefined;\n  private readonly _part: Writer | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, items: Cursor<I>, inBlock: boolean, inMarkup: boolean,\n              inBraces?: boolean, inBrackets?: boolean, first?: boolean, markupSafe?: boolean,\n              item?: I, next?: I, part?: Writer, step?: number) {\n    super();\n    this._recon = recon;\n    this._items = items;\n    this._inBlock = inBlock;\n    this._inMarkup = inMarkup;\n    this._inBraces = inBraces;\n    this._inBrackets = inBrackets;\n    this._first = first;\n    this._markupSafe = markupSafe;\n    this._item = item;\n    this._next = next;\n    this._part = part;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return BlockWriter.write(output, this._recon, this._items, this._inBlock, this._inMarkup,\n                             this._inBraces, this._inBrackets, this._first, this._markupSafe,\n                             this._item, this._next, this._part, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, items: Cursor<I>,\n                      inBlock: boolean, inMarkup: boolean): number {\n    let size = 0;\n    let inBraces = false;\n    let inBrackets = false;\n    let first = true;\n    let markupSafe = true;\n    let next: I | undefined;\n    while (next || items.hasNext()) {\n      let item: I | undefined;\n      if (!next ) {\n        item = items.next().value!;\n      } else {\n        item = next;\n        next = void 0;\n      }\n      if (items.hasNext()) {\n        next = items.next().value!;\n      }\n      if (recon.isExpression(item)) {\n        markupSafe = false;\n      }\n      if (inBrackets && recon.isAttr(item)) {\n        if (inBraces) {\n          size += 1; // '}'\n          inBraces = false;\n        }\n        size += 1; // ']'\n        inBrackets = false;\n      }\n      if (recon.isAttr(item)) {\n        if (inBraces) {\n          size += 1; // '}'\n          inBraces = false;\n        } else if (inBrackets) { // FIXME: case already covered?\n          size += 1; // ']'\n          inBrackets = false;\n        }\n        size += recon.sizeOfItem(item);\n        first = false;\n      } else if (inBrackets && recon.isText(item)) {\n        if (inBraces) {\n          size += 1; // '}'\n          inBraces = false;\n        }\n        size += recon.sizeOfMarkupText(item);\n      } else if (inBraces) {\n        if (!first) {\n          size += 1; // ','\n        } else {\n          first = false;\n        }\n        size += BlockWriter.sizeOfBlockItem(recon, item);\n      } else if (inBrackets) {\n        if (recon.isRecord(item) && recon.isMarkupSafe(recon.items(item))) {\n          size += recon.sizeOfBlock(recon.items(item), false, true);\n          if (next && recon.isText(next)) {\n            size += recon.sizeOfMarkupText(next);\n            next = void 0;\n          } else if (next && !recon.isAttr(next)) {\n            size += 1; // '{'\n            inBraces = true;\n            first = true;\n          } else {\n            size += 1; // ']'\n            inBrackets = false;\n          }\n        } else {\n          size += 1; // '{'\n          size += recon.sizeOfItem(item);\n          inBraces = true;\n          first = false;\n        }\n      } else if (markupSafe && recon.isText(item) && next && !recon.isField(next)\n              && !recon.isText(next) && !recon.isBool(next)) {\n        size += 1; // '['\n        size += recon.sizeOfMarkupText(item);\n        inBrackets = true;\n      } else if (inBlock && !inBraces) {\n        if (!first) {\n          size += 1; // ','\n        } else {\n          first = false;\n        }\n        size += BlockWriter.sizeOfBlockItem(recon, item);\n      } else if (inMarkup && recon.isText(item) && !next) {\n        size += 1; // '['\n        size += recon.sizeOfMarkupText(item);\n        size += 1; // ']'\n      } else if (!inMarkup && recon.isValue(item) && !recon.isRecord(item)\n             && (!first && !next || next && recon.isAttr(next))) {\n        if (!first && (recon.isText(item) && recon.isIdent(item)\n                    || recon.isNum(item) || recon.isBool(item))) {\n          size += 1; // ' '\n        }\n        size += recon.sizeOfItem(item);\n      } else {\n        size += 1; // '{'\n        size += recon.sizeOfItem(item);\n        inBraces = true;\n        first = false;\n      }\n    }\n    if (inBraces) {\n      size += 1; // '}'\n    }\n    if (inBrackets) {\n      size += 1; // ']'\n    }\n    return size;\n  }\n\n  static sizeOfBlockItem<I, V>(recon: ReconWriter<I, V>, item: I): number {\n    let size = 0;\n    if (recon.isField(item)) {\n      size += recon.sizeOfSlot(recon.key(item), recon.value(item));\n    } else {\n      size += recon.sizeOfItem(item);\n    }\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, items: Cursor<I>,\n                     inBlock: boolean, inMarkup: boolean, inBraces: boolean = false,\n                     inBrackets: boolean = false, first: boolean = true, markupSafe: boolean = true,\n                     item?: I, next?: I, part?: Writer, step: number = 1): Writer {\n    do {\n      if (step === 1) {\n        if (!next && !items.hasNext()) {\n          step = 10;\n          break;\n        } else {\n          if (!next) {\n            item = items.next().value!;\n          } else {\n            item = next;\n            next = void 0;\n          }\n          if (items.hasNext()) {\n            next = items.next().value!;\n          }\n          if (recon.isExpression(item)) {\n            markupSafe = false;\n          }\n          step = 2;\n        }\n      }\n      if (step === 2 && output.isCont()) {\n        if (inBrackets && recon.isAttr(item!)) {\n          if (inBraces) {\n            output = output.write(125/*'}'*/);\n            inBraces = false;\n          }\n          step = 3;\n        } else {\n          step = 4;\n        }\n      }\n      if (step === 3 && output.isCont()) {\n        output = output.write(93/*']'*/);\n        inBrackets = false;\n        step = 4;\n      }\n      if (step === 4 && output.isCont()) {\n        if (recon.isAttr(item!)) {\n          if (inBraces) {\n            output = output.write(125/*'}'*/);\n            inBraces = false;\n          } else if (inBrackets) {\n            output = output.write(93/*']'*/);\n            inBrackets = false;\n          }\n          part = recon.writeItem(item!, output);\n          first = false;\n          step = 7;\n        } else if (inBrackets && recon.isText(item!)) {\n          if (inBraces) {\n            output = output.write(125/*'}'*/);\n            inBraces = false;\n          }\n          part = recon.writeMarkupText(item!, output);\n          step = 7;\n        } else if (inBraces) {\n          if (!first) {\n            output = output.write(44/*','*/);\n          } else {\n            first = false;\n          }\n          part = BlockWriter.writeBlockItem(output, recon, item!);\n          step = 7;\n        } else if (inBrackets) {\n          if (recon.isRecord(item!) && recon.isMarkupSafe(recon.items(item!))) {\n            part = recon.writeBlock(recon.items(item!), output, false, true);\n            step = 5;\n          } else {\n            output = output.write(123/*'{'*/);\n            part = recon.writeItem(item!, output);\n            inBraces = true;\n            first = false;\n            step = 7;\n          }\n        } else if (markupSafe && recon.isText(item!) && next && !recon.isField(next)\n                && !recon.isText(next) && !recon.isBool(next)) {\n          output = output.write(91/*'['*/);\n          part = recon.writeMarkupText(item!, output);\n          inBrackets = true;\n          step = 7;\n        } else if (inBlock && !inBraces) {\n          if (!first) {\n            output = output.write(44/*','*/);\n          } else {\n            first = false;\n          }\n          part = BlockWriter.writeBlockItem(output, recon, item!);\n          step = 7;\n        } else if (inMarkup && recon.isText(item!) && !next) {\n          output = output.write(91/*'['*/);\n          part = recon.writeMarkupText(item!, output);\n          step = 8;\n        } else if (!inMarkup && recon.isValue(item!) && !recon.isRecord(item!)\n               && (!first && !next || next && recon.isAttr(next))) {\n          if (!first && (recon.isText(item!) && recon.isIdent(item!)\n                      || recon.isNum(item!) || recon.isBool(item!))) {\n            output = output.write(32/*' '*/);\n          }\n          part = recon.writeItem(item!, output);\n          step = 7;\n        } else {\n          output = output.write(123/*'{'*/);\n          part = recon.writeItem(item!, output);\n          inBraces = true;\n          first = false;\n          step = 7;\n        }\n      }\n      if (step === 5) {\n        part = part!.pull(output);\n        if (part.isDone()) {\n          part = void 0;\n          step = 6;\n        } else if (part.isError()) {\n          return part.asError();\n        }\n      }\n      if (step === 6 && output.isCont()) {\n        if (next && recon.isText(next)) {\n          part = recon.writeMarkupText(next, output);\n          next = void 0;\n          step = 7;\n        } else if (next && !recon.isAttr(next)) {\n          output = output.write(123/*'{'*/);\n          inBraces = true;\n          first = true;\n          step = 1;\n          continue;\n        } else {\n          output = output.write(93/*']'*/);\n          inBrackets = false;\n          step = 1;\n          continue;\n        }\n      }\n      if (step === 7) {\n        part = part!.pull(output);\n        if (part.isDone()) {\n          part = void 0;\n          step = 1;\n          continue;\n        } else if (part.isError()) {\n          return part.asError();\n        }\n      }\n      if (step === 8) {\n        part = part!.pull(output);\n        if (part.isDone()) {\n          part = void 0;\n          step = 9;\n        } else if (part.isError()) {\n          return part.asError();\n        }\n      }\n      if (step === 9 && output.isCont()) {\n        output = output.write(93/*']'*/);\n        step = 1;\n        continue;\n      }\n      break;\n    } while (true);\n    if (step === 10) {\n      if (inBraces) {\n        if (output.isCont()) {\n          output = output.write(125/*'}'*/);\n          step = 11;\n        }\n      } else {\n        step = 11;\n      }\n    }\n    if (step === 11) {\n      if (inBrackets) {\n        if (output.isCont()) {\n          output = output.write(93/*']'*/);\n          return Writer.done();\n        }\n      } else {\n        return Writer.done();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new BlockWriter<I, V>(recon, items, inBlock, inMarkup, inBraces, inBrackets,\n                                 first, markupSafe, item, next, part, step);\n  }\n\n  static writeBlockItem<I, V>(output: Output, recon: ReconWriter<I, V>, item: I): Writer {\n    if (recon.isField(item)) {\n      return recon.writeSlot(recon.key(item), recon.value(item), output);\n    } else {\n      return recon.writeItem(item, output);\n    }\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Cursor} from \"@swim/util\";\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class PrimaryWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _items: Cursor<I>;\n  private readonly _inParens: boolean | undefined;\n  private readonly _first: boolean | undefined;\n  private readonly _item: I | undefined;\n  private readonly _next: I | undefined;\n  private readonly _part: Writer | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, items: Cursor<I>, inParens?: boolean,\n              first?: boolean, item?: I, next?: I, part?: Writer, step?: number) {\n    super();\n    this._recon = recon;\n    this._items = items;\n    this._inParens = inParens;\n    this._first = first;\n    this._item = item;\n    this._next = next;\n    this._part = part;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return PrimaryWriter.write(output, this._recon, this._items, this._inParens, this._first,\n                               this._item, this._next, this._part, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, items: Cursor<I>): number {\n    let size = 0;\n    let inParens = false;\n    let first = true;\n    let next: I | undefined;\n    while (next || items.hasNext()) {\n      let item: I | undefined;\n      if (!next) {\n        item = items.next().value!;\n      } else {\n        item = next;\n        next = void 0;\n      }\n      if (items.hasNext()) {\n        next = items.next().value!;\n      }\n      if (!inParens && !first) {\n        size += 1; // ' '\n      }\n      if (recon.isAttr(item)) {\n        if (inParens) {\n          size += 1; // ')'\n          inParens = false;\n        }\n        size += recon.sizeOfItem(item);\n        first = false;\n      } else if (inParens) {\n        if (!first) {\n          size += 1; // ','\n        } else {\n          first = false;\n        }\n        size += recon.sizeOfBlockItem(item);\n      } else if (recon.isValue(item) && !recon.isRecord(item)\n             && (!first && !next || next && recon.isAttr(next))) {\n        size += recon.sizeOfItem(item);\n      } else {\n        size += 1; // '('\n        size += recon.sizeOfItem(item);\n        inParens = true;\n        first = false;\n      }\n    }\n    if (inParens) {\n      size += 1; // ')'\n    }\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, items: Cursor<I>,\n                     inParens: boolean = false, first: boolean = true, item?: I,\n                     next?: I, part?: Writer, step: number = 1): Writer {\n    do {\n      if (step === 1) {\n        if (!next && !items.hasNext()) {\n          step = 5;\n          break;\n        } else {\n          if (!next) {\n            item = items.next().value!;\n          } else {\n            item = next;\n            next = void 0;\n          }\n          if (items.hasNext()) {\n            next = items.next().value!;\n          }\n          step = 2;\n        }\n      }\n      if (step === 2 && output.isCont()) {\n        if (!inParens && !first) {\n          output = output.write(32/*' '*/);\n        }\n        step = 3;\n      }\n      if (step === 3 && output.isCont()) {\n        if (recon.isAttr(item!)) {\n          if (inParens) {\n            output = output.write(41/*')'*/);\n            inParens = false;\n          }\n          part = recon.writeItem(item!, output);\n          first = false;\n          step = 4;\n        } else if (inParens) {\n          if (!first) {\n            output = output.write(44/*','*/);\n          } else {\n            first = false;\n          }\n          part = recon.writeBlockItem(item!, output);\n          step = 4;\n        } else if (recon.isValue(item!) && !recon.isRecord(item!)\n               && (!first && !next || next && recon.isAttr(next))) {\n          part = recon.writeItem(item!, output);\n          step = 4;\n        } else {\n          output = output.write(40/*'('*/);\n          part = recon.writeItem(item!, output);\n          inParens = true;\n          first = false;\n          step = 4;\n        }\n      }\n      if (step === 4) {\n        part = part!.pull(output);\n        if (part.isDone()) {\n          part = void 0;\n          step = 1;\n          continue;\n        } else if (part.isError()) {\n          return part.asError();\n        }\n      }\n      break;\n    } while (true);\n    if (step === 5) {\n      if (inParens) {\n        if (output.isCont()) {\n          output = output.write(41/*')'*/);\n          return Writer.done();\n        }\n      } else {\n        return Writer.done();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new PrimaryWriter<I, V>(recon, items, inParens, first, item, next, part, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer, Utf8, Base16} from \"@swim/codec\";\n\n/** @hidden */\nexport class MarkupTextWriter extends Writer {\n  private readonly _text: string;\n  private readonly _index: number | undefined;\n  private readonly _escape: number | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(text: string, index?: number, escape?: number, step?: number) {\n    super();\n    this._text = text;\n    this._index = index;\n    this._escape = escape;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return MarkupTextWriter.write(output, this._text, this._index, this._escape, this._step);\n  }\n\n  static sizeOf(text: string): number {\n    let size = 0;\n    for (let i = 0, n = text.length; i < n; i = text.offsetByCodePoints(i, 1)) {\n      let c = text.codePointAt(i);\n      if (c === void 0) {\n        c = text.charCodeAt(i);\n      }\n      if (c === 36/*'$'*/ || c === 64/*'@'*/ || c === 91/*'['*/ || c === 92/*'\\\\'*/\n          || c === 93/*']'*/ || c === 123/*'{'*/ || c === 125/*'}'*/ || c === 8/*'\\b'*/\n          || c === 12/*'\\f'*/ || c === 10/*'\\n'*/ || c === 13/*'\\r'*/ || c === 9/*'\\t'*/) {\n        size += 2;\n      } else if (c < 0x20) {\n        size += 6;\n      } else {\n        size += Utf8.sizeOf(c);\n      }\n    }\n    return size;\n  }\n\n  static write(output: Output, text: string, index: number = 0,\n               escape: number = 0, step: number = 1): Writer {\n    const length = text.length;\n    while (output.isCont()) {\n      if (step === 1) {\n        if (index < length) {\n          let c = text.codePointAt(index);\n          if (c === void 0) {\n            c = text.charCodeAt(index);\n          }\n          index = text.offsetByCodePoints(index, 1);\n          if (c === 36/*'$'*/ || c === 64/*'@'*/ || c === 91/*'['*/ || c === 92/*'\\\\'*/\n              || c === 93/*']'*/ || c === 123/*'{'*/ || c === 125/*'}'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = c;\n            step = 2;\n          } else if (c === 8/*'\\b'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 98/*'b'*/;\n            step = 2;\n          } else if (c === 12/*'\\f'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 102/*'f'*/;\n            step = 2;\n          } else if (c === 10/*'\\n'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 110/*'n'*/;\n            step = 2;\n          } else if (c === 13/*'\\r'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 114/*'r'*/;\n            step = 2;\n          } else if (c === 9/*'\\t'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 116/*'t'*/;\n            step = 2;\n          } else if (c < 0x20) {\n            output = output.write(92/*'\\\\'*/);\n            escape = c;\n            step = 3;\n          } else {\n            output = output.write(c);\n          }\n        } else {\n          return Writer.done();\n        }\n      } else if (step === 2) {\n        output = output.write(escape);\n        escape = 0;\n        step = 1;\n      } else if (step === 3) {\n        output = output.write(117/*'u'*/);\n        step = 4;\n      } else if (step === 4) {\n        output = output.write(Base16.uppercase().encodeDigit((escape >>> 12) & 0xf));\n        step = 5;\n      } else if (step === 5) {\n        output = output.write(Base16.uppercase().encodeDigit((escape >>> 8) & 0xf));\n        step = 6;\n      } else if (step === 6) {\n        output = output.write(Base16.uppercase().encodeDigit((escape >>> 4) & 0xf));\n        step = 7;\n      } else if (step === 7) {\n        output = output.write(Base16.uppercase().encodeDigit(escape & 0xf));\n        escape = 0;\n        step = 1;\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new MarkupTextWriter(text, index, escape, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer, Base64} from \"@swim/codec\";\n\n/** @hidden */\nexport class DataWriter extends Writer {\n  private readonly _array: Uint8Array;\n  private readonly _part: Writer | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(array: Uint8Array, part?: Writer, step?: number) {\n    super();\n    this._array = array;\n    this._part = part;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return DataWriter.write(output, this._array, this._part, this._step);\n  }\n\n  static sizeOf(length: number): number {\n    return 1 + ((Math.floor(length * 4 / 3) + 3) & ~3);\n  }\n\n  static write(output: Output, array: Uint8Array, part?: Writer,\n               step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(37/*'%'*/);\n      step = 2;\n    }\n    if (step === 2) {\n      if (!part) {\n        part = Base64.standard().writeUint8Array(array, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        return Writer.done();\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new DataWriter(array, part, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer, Utf8} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\n\n/** @hidden */\nexport class IdentWriter extends Writer {\n  private readonly _ident: string;\n  private readonly _index: number | undefined;\n\n  constructor(ident: string, index?: number) {\n    super();\n    this._ident = ident;\n    this._index = index;\n  }\n\n  pull(output: Output): Writer {\n    return IdentWriter.write(output, this._ident, this._index);\n  }\n\n  static sizeOf(ident: string): number {\n    return Utf8.sizeOf(ident);\n  }\n\n  static write(output: Output, ident: string, index: number = 0): Writer {\n    let c: number | undefined;\n    const length = ident.length;\n    if (length === 0) {\n      return Writer.error(new WriterException(\"empty identifier\"));\n    }\n    if (index === 0 && output.isCont()) {\n      c = ident.codePointAt(0);\n      if (c === void 0) {\n        c = ident.charCodeAt(0);\n      }\n      if (Recon.isIdentStartChar(c)) {\n        output = output.write(c);\n        index = ident.offsetByCodePoints(0, 1);\n      }\n    }\n    while (index < length && output.isCont()) {\n      c = ident.codePointAt(index);\n      if (c === void 0) {\n        c = ident.charCodeAt(index);\n      }\n      if (Recon.isIdentChar(c)) {\n        output = output.write(c);\n        index = ident.offsetByCodePoints(index, 1);\n      } else {\n        return Writer.error(new WriterException(\"invalid identifier\"));\n      }\n    }\n    if (index >= length) {\n      return Writer.done();\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new IdentWriter(ident, index);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer, Utf8, Base16} from \"@swim/codec\";\n\n/** @hidden */\nexport class StringWriter extends Writer {\n  private readonly _string: string;\n  private readonly _index: number | undefined;\n  private readonly _escape: number | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(string: string, index?: number, escape?: number, step?: number) {\n    super();\n    this._string = string;\n    this._index = index;\n    this._escape = escape;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return StringWriter.write(output, this._string, this._index, this._escape, this._step);\n  }\n\n  static sizeOf(string: string): number {\n    let size = 0;\n    size += 1; // '\"';\n    for (let i = 0, n = string.length; i < n; i = string.offsetByCodePoints(i, 1)) {\n      let c = string.codePointAt(i);\n      if (c === void 0) {\n        c = string.charCodeAt(i);\n      }\n      if (c === 34/*'\"'*/ || c === 92/*'\\\\'*/ || c === 8/*'\\b'*/ || c === 12/*'\\f'*/\n          || c === 10/*'\\n'*/ || c === 13/*'\\r'*/ || c === 9/*'\\t'*/) {\n        size += 2;\n      } else if (c < 0x20) {\n        size += 6;\n      } else {\n        size += Utf8.sizeOf(c);\n      }\n    }\n    size += 1; // '\"';\n    return size;\n  }\n\n  static write(output: Output, string: string, index: number = 0, escape: number = 0,\n               step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(34/*'\"'*/);\n      step = 2;\n    }\n    const length = string.length;\n    while (step >= 2 && step <= 8 && output.isCont()) {\n      if (step === 2) {\n        if (index < length) {\n          let c = string.codePointAt(index);\n          if (c === void 0) {\n            c = string.charCodeAt(index);\n          }\n          index = string.offsetByCodePoints(index, 1);\n          if (c === 34/*'\"'*/ || c === 92/*'\\\\'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = c;\n            step = 3;\n          } else if (c === 8/*'\\b'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 98/*'b'*/;\n            step = 3;\n          } else if (c === 12/*'\\f'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 102/*'f'*/;\n            step = 3;\n          } else if (c === 10/*'\\n'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 110/*'n'*/;\n            step = 3;\n          } else if (c === 13/*'\\r'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 114/*'r'*/;\n            step = 3;\n          } else if (c === 9/*'\\t'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 116/*'t'*/;\n            step = 3;\n          } else if (c < 0x20) {\n            output = output.write('\\\\');\n            escape = c;\n            step = 4;\n          } else {\n            output = output.write(c);\n          }\n        } else {\n          step = 9;\n          break;\n        }\n      } else if (step === 3) {\n        output = output.write(escape);\n        escape = 0;\n        step = 2;\n      } else if (step === 4) {\n        output = output.write(117/*'u'*/);\n        step = 5;\n      } else if (step === 5) {\n        output = output.write(Base16.uppercase().encodeDigit((escape >>> 12) & 0xf));\n        step = 6;\n      } else if (step === 6) {\n        output = output.write(Base16.uppercase().encodeDigit((escape >>> 8) & 0xf));\n        step = 7;\n      } else if (step === 7) {\n        output = output.write(Base16.uppercase().encodeDigit((escape >>> 4) & 0xf));\n        step = 8;\n      } else if (step === 8) {\n        output = output.write(Base16.uppercase().encodeDigit(escape & 0xf));\n        escape = 0;\n        step = 2;\n      }\n    }\n    if (step === 9 && output.isCont()) {\n      output = output.write(34/*'\"'*/);\n      return Writer.done();\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new StringWriter(string, index, escape, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class LambdaFuncWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _bindings: V;\n  private readonly _template: V;\n  private readonly _part: Writer | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, bindings: V, template: V,\n              part?: Writer, step?: number) {\n    super();\n    this._recon = recon;\n    this._bindings = bindings;\n    this._template = template;\n    this._part = part;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return LambdaFuncWriter.write(output, this._recon, this._bindings, this._template,\n                                  this._part, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, bindings: V, template: V): number {\n    let size = 0;\n    size += recon.sizeOfPrimary(bindings);\n    size += 4; // \" => \"\n    size += recon.sizeOfValue(template);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, bindings: V, template: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1) {\n      if (!part) {\n        part = recon.writePrimary(bindings, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 2;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 2 && output.isCont()) {\n      output = output.write(32/*' '*/);\n      step = 3;\n    }\n    if (step === 3 && output.isCont()) {\n      output = output.write(61/*'='*/);\n      step = 4;\n    }\n    if (step === 4 && output.isCont()) {\n      output = output.write(62/*'>'*/);\n      step = 5;\n    }\n    if (step === 5 && output.isCont()) {\n      output = output.write(32/*' '*/);\n      step = 6;\n    }\n    if (step === 6) {\n      if (part == null) {\n        part = recon.writeValue(template, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        return Writer.done();\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new LambdaFuncWriter<I, V>(recon, bindings, template, part, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class ConditionalOperatorWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _ifTerm: I;\n  private readonly _thenTerm: I;\n  private readonly _elseTerm: I;\n  private readonly _precedence: number;\n  private readonly _part: Writer | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, ifTerm: I, thenTerm: I, elseTerm: I,\n              precedence: number, part?: Writer, step?: number) {\n    super();\n    this._recon = recon;\n    this._ifTerm = ifTerm;\n    this._thenTerm = thenTerm;\n    this._elseTerm = elseTerm;\n    this._precedence = precedence;\n    this._part = part;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return ConditionalOperatorWriter.write(output, this._recon, this._ifTerm, this._thenTerm,\n                                           this._elseTerm, this._precedence, this._part, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, ifTerm: I, thenTerm: I,\n                      elseTerm: I, precedence: number): number {\n    let size = 0;\n    if (recon.precedence(ifTerm) > 0 && recon.precedence(ifTerm) <= precedence) {\n      size += 1; // '('\n      size += recon.sizeOfItem(ifTerm);\n      size += 1; // ')'\n    } else {\n      size += recon.sizeOfItem(ifTerm);\n    }\n    size += 3; // \" ? \"\n    size += recon.sizeOfItem(thenTerm);\n    size += 3; // \" : \"\n    size += recon.sizeOfItem(elseTerm);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, ifTerm: I, thenTerm: I, elseTerm: I,\n                     precedence: number, part?: Writer, step: number = 1): Writer {\n    if (step === 1) {\n      if (recon.precedence(ifTerm) > 0 && recon.precedence(ifTerm) <= precedence) {\n        if (output.isCont()) {\n          output = output.write(40/*'('*/);\n          step = 2;\n        }\n      } else {\n        step = 2;\n      }\n    }\n    if (step === 2) {\n      if (!part) {\n        part = recon.writeItem(ifTerm, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 3;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 3) {\n      if (recon.precedence(ifTerm) > 0 && recon.precedence(ifTerm) <= precedence) {\n        if (output.isCont()) {\n          output = output.write(41/*')'*/);\n          step = 4;\n        }\n      } else {\n        step = 4;\n      }\n    }\n    if (step === 4 && output.isCont()) {\n      output = output.write(32/*' '*/);\n      step = 5;\n    }\n    if (step === 5 && output.isCont()) {\n      output = output.write(63/*'?'*/);\n      step = 6;\n    }\n    if (step === 6 && output.isCont()) {\n      output = output.write(32/*' '*/);\n      step = 7;\n    }\n    if (step === 7) {\n      if (!part) {\n        part = recon.writeItem(thenTerm, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 8;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 8 && output.isCont()) {\n      output = output.write(32/*' '*/);\n      step = 9;\n    }\n    if (step === 9 && output.isCont()) {\n      output = output.write(58/*':'*/);\n      step = 10;\n    }\n    if (step === 10 && output.isCont()) {\n      output = output.write(32/*' '*/);\n      step = 11;\n    }\n    if (step === 11) {\n      if (!part) {\n        part = recon.writeItem(elseTerm, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        return Writer.done();\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new ConditionalOperatorWriter<I, V>(recon, ifTerm, thenTerm, elseTerm,\n                                               precedence, part, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer, Unicode, Utf8} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class InfixOperatorWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _lhs: I;\n  private readonly _operator: string;\n  private readonly _rhs: I;\n  private readonly _precedence: number;\n  private readonly _part: Writer | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, lhs: I, operator: string, rhs: I,\n              precedence: number, part?: Writer, step?: number) {\n    super();\n    this._recon = recon;\n    this._lhs = lhs;\n    this._operator = operator;\n    this._rhs = rhs;\n    this._precedence = precedence;\n    this._part = part;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return InfixOperatorWriter.write(output, this._recon, this._lhs, this._operator, this._rhs,\n                                     this._precedence, this._part, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, lhs: I, operator: string, rhs: I, precedence: number): number {\n    let size = 0;\n    if (recon.precedence(lhs) < precedence) {\n      size += 1; // '('\n      size += recon.sizeOfItem(lhs);\n      size += 1; // ')'\n    } else {\n      size += recon.sizeOfItem(lhs);\n    }\n    size += 1; // ' '\n    size += Utf8.sizeOf(operator);\n    size += 1; // ' '\n    if (recon.precedence(rhs) < precedence) {\n      size += 1; // '('\n      size += recon.sizeOfItem(rhs);\n      size += 1; // ')'\n    } else {\n      size += recon.sizeOfItem(rhs);\n    }\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, lhs: I, operator: string, rhs: I,\n                     precedence: number, part?: Writer, step: number = 1): Writer {\n    if (step === 1) {\n      if (recon.precedence(lhs) < precedence) {\n        if (output.isCont()) {\n          output = output.write(40/*'('*/);\n          step = 2;\n        }\n      } else {\n        step = 2;\n      }\n    }\n    if (step === 2) {\n      if (!part) {\n        part = recon.writeItem(lhs, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 3;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 3) {\n      if (recon.precedence(lhs) < precedence) {\n        if (output.isCont()) {\n          output = output.write(41/*')'*/);\n          step = 4;\n        }\n      } else {\n        step = 4;\n      }\n    }\n    if (step === 4 && output.isCont()) {\n      output = output.write(32/*' '*/);\n      step = 5;\n    }\n    if (step === 5) {\n      if (!part) {\n        part = Unicode.writeString(operator, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 6;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 6 && output.isCont()) {\n      output = output.write(32/*' '*/);\n      step = 7;\n    }\n    if (step === 7) {\n      if (recon.precedence(rhs) < precedence) {\n        if (output.isCont()) {\n          output = output.write(40/*'('*/);\n          step = 8;\n        }\n      } else {\n        step = 8;\n      }\n    }\n    if (step === 8) {\n      if (!part) {\n        part = recon.writeItem(rhs, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 9;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 9) {\n      if (recon.precedence(rhs) < precedence) {\n        if (output.isCont()) {\n          output = output.write(41/*')'*/);\n          return Writer.done();\n        }\n      } else {\n        return Writer.done();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new InfixOperatorWriter<I, V>(recon, lhs, operator, rhs, precedence, part, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer, Unicode, Utf8} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class PrefixOperatorWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _operator: string;\n  private readonly _rhs: I;\n  private readonly _precedence: number;\n  private readonly _part: Writer | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, operator: string, rhs: I,\n              precedence: number, part?: Writer, step?: number) {\n    super();\n    this._recon = recon;\n    this._operator = operator;\n    this._rhs = rhs;\n    this._precedence = precedence;\n    this._part = part;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return PrefixOperatorWriter.write(output, this._recon, this._operator, this._rhs,\n                                      this._precedence, this._part, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, operator: string, rhs: I, precedence: number): number {\n    let size = 0;\n    size += Utf8.sizeOf(operator);\n    if (recon.precedence(rhs) < precedence) {\n      size += 1; // '('\n      size += recon.sizeOfItem(rhs);\n      size += 1; // ')'\n    } else {\n      size += recon.sizeOfItem(rhs);\n    }\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, operator: string, rhs: I,\n                     precedence: number, part?: Writer, step: number = 1): Writer {\n    if (step === 1) {\n      if (!part) {\n        part = Unicode.writeString(operator, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 2;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 2) {\n      if (recon.precedence(rhs) < precedence) {\n        if (output.isCont()) {\n          output = output.write(40/*'('*/);\n          step = 3;\n        }\n      } else {\n        step = 3;\n      }\n    }\n    if (step === 3) {\n      if (!part) {\n        part = recon.writeItem(rhs, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 4;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 4) {\n      if (recon.precedence(rhs) < precedence) {\n        if (output.isCont()) {\n          output = output.write(41/*')'*/);\n          return Writer.done();\n        }\n      } else {\n        return Writer.done();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new PrefixOperatorWriter<I, V>(recon, operator, rhs, precedence, part, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class InvokeOperatorWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _func: V;\n  private readonly _args: V;\n  private readonly _part: Writer | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, func: V, args: V, part?: Writer, step?: number) {\n    super();\n    this._recon = recon;\n    this._func = func;\n    this._args = args;\n    this._part = part;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return InvokeOperatorWriter.write(output, this._recon, this._func, this._args,\n                                      this._part, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, func: V, args: V): number {\n    let size = 0;\n    size += recon.sizeOfValue(func);\n    size += 1; // '('\n    size += recon.sizeOfBlockValue(args);\n    size += 1; // ')'\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, func: V, args: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1) {\n      if (!part) {\n        part = recon.writeValue(func, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 2;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 2 && output.isCont()) {\n      output = output.write(40/*'('*/);\n      step = 3;\n    }\n    if (step === 3) {\n      if (!part) {\n        part = recon.writeBlockValue(args, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 4;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 4 && output.isCont()) {\n      output = output.write(41/*')'*/);\n      return Writer.done();\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new InvokeOperatorWriter<I, V>(recon, func, args, part, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class LiteralSelectorWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _item: I;\n  private readonly _then: V;\n  private readonly _part: Writer | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, item: I, then: V, part?: Writer, step?: number) {\n    super();\n    this._recon = recon;\n    this._item = item;\n    this._then = then;\n    this._part = part;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return LiteralSelectorWriter.write(output, this._recon, this._item, this._then,\n                                       this._part, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, item: I, then: V): number {\n    let size = 0;\n    if (recon.precedence(item) < recon.precedence(recon.item(then))) {\n      size += 1; // '('\n      size += recon.sizeOfItem(item);\n      size += 1; // ')'\n    } else {\n      size += recon.sizeOfItem(item);\n    }\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, item: I, then: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1) {\n      if (recon.precedence(item) < recon.precedence(recon.item(then))) {\n        if (output.isCont()) {\n          output = output.write(40/*'('*/);\n          step = 2;\n        }\n      } else {\n        step = 2;\n      }\n    }\n    if (step === 2) {\n      if (!part) {\n        part = recon.writeItem(item, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 3;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 3) {\n      if (recon.precedence(item) < recon.precedence(recon.item(then))) {\n        if (output.isCont()) {\n          output = output.write(41/*')'*/);\n          step = 4;\n        }\n      } else {\n        step = 4;\n      }\n    }\n    if (step === 4) {\n      return recon.writeThen(then, output);\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new LiteralSelectorWriter<I, V>(recon, item, then, part, step);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class GetSelectorWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _key: V;\n  private readonly _then: V;\n  private readonly _part: Writer | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, key: V, then: V, part?: Writer, step?: number) {\n    super();\n    this._recon = recon;\n    this._key = key;\n    this._then = then;\n    this._part = part;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return GetSelectorWriter.write(output, this._recon, this._key, this._then, this._part, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, key: V, then: V): number {\n    let size = 1; // '$' | '.'\n    if (recon.isRecord(recon.item(key))) {\n      size += 1; // '{'\n      size += recon.sizeOfBlockValue(key);\n      size += 1; // '}'\n    } else {\n      size += recon.sizeOfValue(key);\n    }\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, key: V, then: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(36/*'$'*/);\n      step = 3;\n    } else if (step === 2 && output.isCont()) {\n      output = output.write(46/*'.'*/);\n      step = 3;\n    }\n    if (step === 3) {\n      if (recon.isRecord(recon.item(key))) {\n        if (output.isCont()) {\n          output = output.write(123/*'{'*/);\n          step = 4;\n        }\n      } else {\n        step = 4;\n      }\n    }\n    if (step === 4) {\n      if (!part) {\n        if (recon.isRecord(recon.item(key))) {\n          part = recon.writeBlockValue(key, output);\n        } else {\n          part = recon.writeValue(key, output);\n        }\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 5;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 5) {\n      if (recon.isRecord(recon.item(key))) {\n        if (output.isCont()) {\n          output = output.write(125/*'}'*/);\n          step = 6;\n        }\n      } else {\n        step = 6;\n      }\n    }\n    if (step === 6) {\n      return recon.writeThen(then, output);\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new GetSelectorWriter<I, V>(recon, key, then, part, step);\n  }\n\n  static writeThen<I, V>(output: Output, recon: ReconWriter<I, V>, key: V, then: V): Writer {\n    return GetSelectorWriter.write(output, recon, key, then, void 0, 2);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class GetAttrSelectorWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _key: V;\n  private readonly _then: V;\n  private readonly _part: Writer | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, key: V, then: V, part?: Writer, step?: number) {\n    super();\n    this._recon  = recon;\n    this._key = key;\n    this._then = then;\n    this._part = part;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return GetAttrSelectorWriter.write(output, this._recon, this._key, this._then,\n                                       this._part, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, key: V, then: V): number {\n    let size = 2; // ('$' | '.') '@'\n    size += recon.sizeOfValue(key);\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, key: V, then: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(36/*'$'*/);\n      step = 3;\n    } else if (step === 2 && output.isCont()) {\n      output = output.write(46/*'.'*/);\n      step = 3;\n    }\n    if (step === 3 && output.isCont()) {\n      output = output.write(64/*'@'*/);\n      step = 4;\n    }\n    if (step === 4) {\n      if (!part) {\n        part = recon.writeValue(key, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        return recon.writeThen(then, output);\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new GetAttrSelectorWriter<I, V>(recon, key, then, part, step);\n  }\n\n  static writeThen<I, V>(output: Output, recon: ReconWriter<I, V>, key: V, then: V): Writer {\n    return GetAttrSelectorWriter.write(output, recon, key, then, void 0, 2);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class GetItemSelectorWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _index: V;\n  private readonly _then: V;\n  private readonly _part: Writer | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, index: V, then: V, part?: Writer, step?: number) {\n    super();\n    this._recon = recon;\n    this._index = index;\n    this._then = then;\n    this._part = part;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return GetItemSelectorWriter.write(output, this._recon, this._index, this._then,\n                                       this._part, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, index: V, then: V): number {\n    let size = 2; // \"$#\"\n    size += recon.sizeOfValue(index);\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static sizeOfThen<I, V>(recon: ReconWriter<I, V>, index: V, then: V): number {\n    let size = 1; // '#'\n    size += recon.sizeOfValue(index);\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, index: V, then: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(36/*'$'*/);\n      step = 2;\n    }\n    if (step === 2 && output.isCont()) {\n      output = output.write(35/*'#'*/);\n      step = 3;\n    }\n    if (step === 3) {\n      if (!part) {\n        part = recon.writeValue(index, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        return recon.writeThen(then, output);\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new GetItemSelectorWriter<I, V>(recon, index, then, part, step);\n  }\n\n  static writeThen<I, V>(output: Output, recon: ReconWriter<I, V>, index: V, then: V): Writer {\n    return GetItemSelectorWriter.write(output, recon, index, then, void 0, 2);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class KeysSelectorWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _then: V;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, then: V, step?: number) {\n    super();\n    this._recon = recon;\n    this._then = then;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return KeysSelectorWriter.write(output, this._recon, this._then, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, then: V): number {\n    let size = 3; // ('$' | '.') '*' ':'\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, then: V,\n                     step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(36/*'$'*/);\n      step = 3;\n    } else if (step === 2 && output.isCont()) {\n      output = output.write(46/*'.'*/);\n      step = 3;\n    }\n    if (step === 3 && output.isCont()) {\n      output = output.write(42/*'*'*/);\n      step = 4;\n    }\n    if (step === 4 && output.isCont()) {\n      output = output.write(58/*':'*/);\n      return recon.writeThen(then, output);\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new KeysSelectorWriter<I, V>(recon, then, step);\n  }\n\n  static writeThen<I, V>(output: Output, recon: ReconWriter<I, V>, then: V): Writer {\n    return KeysSelectorWriter.write(output, recon, then, 2);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class ValuesSelectorWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _then: V;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, then: V, step?: number) {\n    super();\n    this._recon = recon;\n    this._then = then;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return ValuesSelectorWriter.write(output, this._recon, this._then, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, then: V): number {\n    let size = 3; // ('$' | '.') ':' '*'\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, then: V,\n                     step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(36/*'$'*/);\n      step = 3;\n    } else if (step === 2 && output.isCont()) {\n      output = output.write(46/*'.'*/);\n      step = 3;\n    }\n    if (step === 3 && output.isCont()) {\n      output = output.write(58/*':'*/);\n      step = 4;\n    }\n    if (step === 4 && output.isCont()) {\n      output = output.write(42/*'*'*/);\n      return recon.writeThen(then, output);\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new ValuesSelectorWriter<I, V>(recon, then, step);\n  }\n\n  static writeThen<I, V>(output: Output, recon: ReconWriter<I, V>, then: V): Writer {\n    return ValuesSelectorWriter.write(output, recon, then, 2);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class ChildrenSelectorWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _then: V;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, then: V, step?: number) {\n    super();\n    this._recon = recon;\n    this._then = then;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return ChildrenSelectorWriter.write(output, this._recon, this._then, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, then: V): number {\n    let size = 2; // ('$' | '.') '*'\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, then: V,\n                     step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(36/*'$'*/);\n      step = 3;\n    } else if (step === 2 && output.isCont()) {\n      output = output.write(46/*'.'*/);\n      step = 3;\n    }\n    if (step === 3 && output.isCont()) {\n      output = output.write(42/*'*'*/);\n      return recon.writeThen(then, output);\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new ChildrenSelectorWriter<I, V>(recon, then, step);\n  }\n\n  static writeThen<I, V>(output: Output, recon: ReconWriter<I, V>, then: V): Writer {\n    return ChildrenSelectorWriter.write(output, recon, then, 2);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class DescendantsSelectorWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _then: V;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, then: V, step?: number) {\n    super();\n    this._recon = recon;\n    this._then = then;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return DescendantsSelectorWriter.write(output, this._recon, this._then, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, then: V): number {\n    let size = 3; // ('$' | '.') '*' '*'\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, then: V,\n                     step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(36/*'$'*/);\n      step = 3;\n    } else if (step === 2 && output.isCont()) {\n      output = output.write(46/*'.'*/);\n      step = 3;\n    }\n    if (step === 3 && output.isCont()) {\n      output = output.write(42/*'*'*/);\n      step = 4;\n    }\n    if (step === 4 && output.isCont()) {\n      output = output.write(42/*'*'*/);\n      return recon.writeThen(then, output);\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new DescendantsSelectorWriter<I, V>(recon, then, step);\n  }\n\n  static writeThen<I, V>(output: Output, recon: ReconWriter<I, V>, then: V): Writer {\n    return DescendantsSelectorWriter.write(output, recon, then, 2);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @hidden */\nexport class FilterSelectorWriter<I, V> extends Writer {\n  private readonly _recon: ReconWriter<I, V>;\n  private readonly _predicate: V;\n  private readonly _then: V;\n  private readonly _part: Writer | undefined;\n  private readonly _step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, predicate: V, then: V,\n              part?: Writer, step?: number) {\n    super();\n    this._recon = recon;\n    this._predicate = predicate;\n    this._then = then;\n    this._part = part;\n    this._step = step;\n  }\n\n  pull(output: Output): Writer {\n    return FilterSelectorWriter.write(output, this._recon, this._predicate,\n                                      this._then, this._part, this._step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, predicate: V, then: V): number {\n    let size = 2; // '$' '['\n    size += recon.sizeOfValue(predicate);\n    size += 1; // ']'\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static sizeOfThen<I, V>(recon: ReconWriter<I, V>, predicate: V, then: V): number {\n    let size = 1; // '['\n    size += recon.sizeOfValue(predicate);\n    size += 1; // ']'\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, predicate: V, then: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(36/*'$'*/);\n      step = 2;\n    }\n    if (step === 2 && output.isCont()) {\n      output = output.write(91/*'['*/);\n      step = 3;\n    }\n    if (step === 3) {\n      if (!part) {\n        part = recon.writeValue(predicate, output);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 4;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 4 && output.isCont()) {\n      output = output.write(93/*']'*/);\n      return recon.writeThen(then, output);\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new FilterSelectorWriter<I, V>(recon, predicate, then, part, step);\n  }\n\n  static writeThen<I, V>(output: Output, recon: ReconWriter<I, V>,\n                         predicate: V, then: V): Writer {\n    return FilterSelectorWriter.write(output, recon, predicate, then, void 0, 2);\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Cursor} from \"@swim/util\";\nimport {Output, Writer, Unicode, Base10, Base16} from \"@swim/codec\";\nimport {Recon} from \"./Recon\";\nimport {AttrWriter} from \"./AttrWriter\";\nimport {SlotWriter} from \"./SlotWriter\";\nimport {BlockWriter} from \"./BlockWriter\";\nimport {PrimaryWriter} from \"./PrimaryWriter\";\nimport {MarkupTextWriter} from \"./MarkupTextWriter\";\nimport {DataWriter} from \"./DataWriter\";\nimport {IdentWriter} from \"./IdentWriter\";\nimport {StringWriter} from \"./StringWriter\";\nimport {LambdaFuncWriter} from \"./LambdaFuncWriter\";\nimport {ConditionalOperatorWriter} from \"./ConditionalOperatorWriter\";\nimport {InfixOperatorWriter} from \"./InfixOperatorWriter\";\nimport {PrefixOperatorWriter} from \"./PrefixOperatorWriter\";\nimport {InvokeOperatorWriter} from \"./InvokeOperatorWriter\";\nimport {LiteralSelectorWriter} from \"./LiteralSelectorWriter\";\nimport {GetSelectorWriter} from \"./GetSelectorWriter\";\nimport {GetAttrSelectorWriter} from \"./GetAttrSelectorWriter\";\nimport {GetItemSelectorWriter} from \"./GetItemSelectorWriter\";\nimport {KeysSelectorWriter} from \"./KeysSelectorWriter\";\nimport {ValuesSelectorWriter} from \"./ValuesSelectorWriter\";\nimport {ChildrenSelectorWriter} from \"./ChildrenSelectorWriter\";\nimport {DescendantsSelectorWriter} from \"./DescendantsSelectorWriter\";\nimport {FilterSelectorWriter} from \"./FilterSelectorWriter\";\n\n/**\n * Factory for constructing Recon writers.\n */\nexport abstract class ReconWriter<I, V> {\n  abstract isField(item: I): boolean;\n\n  abstract isAttr(item: I): boolean;\n\n  abstract isSlot(item: I): boolean;\n\n  abstract isValue(item: I): boolean;\n\n  abstract isRecord(item: I): boolean;\n\n  abstract isText(item: I): boolean;\n\n  abstract isNum(item: I): boolean;\n\n  abstract isBool(item: I): boolean;\n\n  abstract isExpression(item: I): boolean;\n\n  abstract isExtant(item: I): boolean;\n\n  abstract items(item: I): Cursor<I>;\n\n  abstract item(value: V): I;\n\n  abstract key(item: I): V;\n\n  abstract value(item: I): V;\n\n  abstract string(item: I): string;\n\n  abstract precedence(item: I): number;\n\n  abstract sizeOfItem(item: I): number;\n\n  abstract writeItem(item: I, output: Output): Writer;\n\n  abstract sizeOfValue(value: V): number;\n\n  abstract writeValue(value: V, output: Output): Writer;\n\n  abstract sizeOfBlockValue(value: V): number;\n\n  abstract writeBlockValue(value: V, output: Output): Writer;\n\n  sizeOfAttr(key: V, value: V): number {\n    return AttrWriter.sizeOf(this, key, value);\n  }\n\n  writeAttr(key: V, value: V, output: Output): Writer {\n    return AttrWriter.write(output, this, key, value);\n  }\n\n  sizeOfSlot(key: V, value: V): number {\n    return SlotWriter.sizeOf(this, key, value);\n  }\n\n  writeSlot(key: V, value: V, output: Output): Writer {\n    return SlotWriter.write(output, this, key, value);\n  }\n\n  abstract sizeOfBlockItem(item: I): number;\n\n  abstract writeBlockItem(item: I, output: Output): Writer;\n\n  sizeOfBlock(item: I): number;\n  sizeOfBlock(items: Cursor<I>, inBlock: boolean, inMarkup: boolean): number;\n  sizeOfBlock(item: I | Cursor<I>, inBlock?: boolean, inMarkup?: boolean): number {\n    if (arguments.length === 3) {\n      return BlockWriter.sizeOf(this, item as Cursor<I>, inBlock!, inMarkup!);\n    } else {\n      const items = this.items(item as I);\n      if (items.hasNext()) {\n        return BlockWriter.sizeOf(this, items, this.isBlockSafe(this.items(item as I)), false);\n      } else {\n        return 2; // \"{}\"\n      }\n    }\n  }\n\n  writeBlock(item: I, output: Output): Writer;\n  writeBlock(items: Cursor<I>, output: Output, inBlock: boolean, inMarkup: boolean): Writer;\n  writeBlock(item: I | Cursor<I>, output: Output, inBlock?: boolean, inMarkup?: boolean): Writer {\n    if (arguments.length === 4) {\n      return BlockWriter.write(output, this, item as Cursor<I>, inBlock!, inMarkup!);\n    } else {\n      const items = this.items(item as I);\n      if (items.hasNext()) {\n        return BlockWriter.write(output, this, items, this.isBlockSafe(this.items(item as I)), false);\n      } else {\n        return Unicode.writeString(\"{}\", output);\n      }\n    }\n  }\n\n  sizeOfRecord(item: I): number {\n    const items = this.items(item);\n    if (items.hasNext()) {\n      return BlockWriter.sizeOf(this, items, false, false);\n    } else {\n      return 2; // \"{}\"\n    }\n  }\n\n  writeRecord(item: I, output: Output): Writer {\n    const items = this.items(item);\n    if (items.hasNext()) {\n      return BlockWriter.write(output, this, items, false, false);\n    } else {\n      return Unicode.writeString(\"{}\", output);\n    }\n  }\n\n  sizeOfPrimary(value: V): number {\n    if (this.isRecord(this.item(value))) {\n      const items = this.items(this.item(value));\n      if (items.hasNext()) {\n        return PrimaryWriter.sizeOf(this, items);\n      }\n    } else if (!this.isExtant(this.item(value))) {\n      return this.sizeOfValue(value);\n    }\n    return 2; // \"()\"\n  }\n\n  writePrimary(value: V, output: Output): Writer {\n    if (this.isRecord(this.item(value))) {\n      const items = this.items(this.item(value));\n      if (items.hasNext()) {\n        return PrimaryWriter.write(output, this, items);\n      }\n    } else if (!this.isExtant(this.item(value))) {\n      return this.writeValue(value, output);\n    }\n    return Unicode.writeString(\"()\", output);\n  }\n\n  isBlockSafe(items: Cursor<I>): boolean {\n    while (items.hasNext()) {\n      if (this.isAttr(items.next().value!)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  isMarkupSafe(items: Cursor<I>): boolean {\n    if (!items.hasNext() || !this.isAttr(items.next().value!)) {\n      return false;\n    }\n    while (items.hasNext()) {\n      if (this.isAttr(items.next().value!)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  sizeOfMarkupText(item: I | string): number {\n    if (typeof item !== \"string\") {\n      item = this.string(item);\n    }\n    return MarkupTextWriter.sizeOf(item);\n  }\n\n  writeMarkupText(item: I | string, output: Output): Writer {\n    if (typeof item !== \"string\") {\n      item = this.string(item);\n    }\n    return MarkupTextWriter.write(output, item);\n  }\n\n  sizeOfData(length: number): number {\n    return DataWriter.sizeOf(length);\n  }\n\n  writeData(value: Uint8Array | undefined, output: Output): Writer {\n    if (value) {\n      return DataWriter.write(output, value);\n    } else {\n      return Unicode.writeString(\"%\", output);\n    }\n  }\n\n  isIdent(value: I | string): boolean {\n    if (typeof value !== \"string\") {\n      value = this.string(value);\n    }\n    const n = value.length;\n    let c: number | undefined;\n    if (n === 0 || (c = value.codePointAt(0), c !== void 0 && !Recon.isIdentStartChar(c))) {\n      return false;\n    }\n    for (let i = value.offsetByCodePoints(0, 1); i < n; i = value.offsetByCodePoints(i, 1)) {\n      c = value.codePointAt(i);\n      if (c === void 0 || !Recon.isIdentChar(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  sizeOfText(value: string): number {\n    if (this.isIdent(value)) {\n      return IdentWriter.sizeOf(value);\n    } else {\n      return StringWriter.sizeOf(value);\n    }\n  }\n\n  writeText(value: string, output: Output): Writer {\n    if (this.isIdent(value)) {\n      return IdentWriter.write(output, value);\n    } else {\n      return StringWriter.write(output, value);\n    }\n  }\n\n  sizeOfNum(value: number): number {\n    if (isFinite(value) && Math.floor(value) === value && Math.abs(value) < 2147483648) {\n      let size = Base10.countDigits(value);\n      if (value < 0) {\n        size += 1;\n      }\n      return size;\n    } else {\n      return (\"\" + value).length;\n    }\n  }\n\n  writeNum(value: number, output: Output): Writer {\n    if (isFinite(value) && Math.floor(value) === value && Math.abs(value) < 2147483648) {\n      return Base10.writeInteger(value, output);\n    } else {\n      return Unicode.writeString(\"\" + value, output);\n    }\n  }\n\n  sizeOfUint32(value: number): number {\n    return 10;\n  }\n\n  writeUint32(value: number, output: Output): Writer {\n    return Base16.lowercase().writeIntegerLiteral(value, output, 8);\n  }\n\n  sizeOfUint64(value: number): number {\n    return 18;\n  }\n\n  writeUint64(value: number, output: Output): Writer {\n    return Base16.lowercase().writeIntegerLiteral(value, output, 16);\n  }\n\n  sizeOfBool(value: boolean): number {\n    return value ? 4 : 5;\n  }\n\n  writeBool(value: boolean, output: Output): Writer {\n    return Unicode.writeString(value ? \"true\" : \"false\", output);\n  }\n\n  sizeOfLambdaFunc(bindings: V, template: V): number {\n    return LambdaFuncWriter.sizeOf(this, bindings, template);\n  }\n\n  writeLambdaFunc(bindings: V, template: V, output: Output): Writer {\n    return LambdaFuncWriter.write(output, this, bindings, template);\n  }\n\n  sizeOfConditionalOperator(ifTerm: I, thenTerm: I, elseTerm: I, precedence: number): number {\n    return ConditionalOperatorWriter.sizeOf(this, ifTerm, thenTerm, elseTerm, precedence);\n  }\n\n  writeConditionalOperator(ifTerm: I, thenTerm: I, elseTerm: I, precedence: number, output: Output): Writer {\n    return ConditionalOperatorWriter.write(output, this, ifTerm, thenTerm, elseTerm, precedence);\n  }\n\n  sizeOfInfixOperator(lhs: I, operator: string, rhs: I, precedence: number): number {\n    return InfixOperatorWriter.sizeOf(this, lhs, operator, rhs, precedence);\n  }\n\n  writeInfixOperator(lhs: I, operator: string, rhs: I, precedence: number, output: Output): Writer {\n    return InfixOperatorWriter.write(output, this, lhs, operator, rhs, precedence);\n  }\n\n  sizeOfPrefixOperator(operator: string, rhs: I, precedence: number): number {\n    return PrefixOperatorWriter.sizeOf(this, operator, rhs, precedence);\n  }\n\n  writePrefixOperator(operator: string, rhs: I, precedence: number, output: Output): Writer {\n    return PrefixOperatorWriter.write(output, this, operator, rhs, precedence);\n  }\n\n  sizeOfInvokeOperator(func: V, args: V): number {\n    return InvokeOperatorWriter.sizeOf(this, func, args);\n  }\n\n  writeInvokeOperator(func: V, args: V, output: Output): Writer {\n    return InvokeOperatorWriter.write(output, this, func, args);\n  }\n\n  abstract sizeOfThen(then: V): number;\n\n  abstract writeThen(then: V, output: Output): Writer;\n\n  sizeOfIdentitySelector(): number {\n    return 0;\n  }\n\n  writeIdentitySelector(output: Output): Writer {\n    return Writer.done();\n  }\n\n  sizeOfThenIdentitySelector(): number {\n    return 0;\n  }\n\n  writeThenIdentitySelector(output: Output): Writer {\n    return Writer.done();\n  }\n\n  sizeOfLiteralSelector(item: I, then: V): number {\n    return LiteralSelectorWriter.sizeOf(this, item, then);\n  }\n\n  writeLiteralSelector(item: I, then: V, output: Output): Writer {\n    return LiteralSelectorWriter.write(output, this, item, then);\n  }\n\n  sizeOfThenLiteralSelector(item: I, then: V): number {\n    return 0;\n  }\n\n  writeThenLiteralSelector(item: I, then: V, output: Output): Writer {\n    return Writer.done();\n  }\n\n  sizeOfGetSelector(key: V, then: V): number {\n    return GetSelectorWriter.sizeOf(this, key, then);\n  }\n\n  writeGetSelector(key: V, then: V, output: Output): Writer {\n    return GetSelectorWriter.write(output, this, key, then);\n  }\n\n  sizeOfThenGetSelector(key: V, then: V): number {\n    return GetSelectorWriter.sizeOf(this, key, then);\n  }\n\n  writeThenGetSelector(key: V, then: V, output: Output): Writer {\n    return GetSelectorWriter.writeThen(output, this, key, then);\n  }\n\n  sizeOfGetAttrSelector(key: V, then: V): number {\n    return GetAttrSelectorWriter.sizeOf(this, key, then);\n  }\n\n  writeGetAttrSelector(key: V, then: V, output: Output): Writer {\n    return GetAttrSelectorWriter.write(output, this, key, then);\n  }\n\n  sizeOfThenGetAttrSelector(key: V, then: V): number {\n    return GetAttrSelectorWriter.sizeOf(this, key, then);\n  }\n\n  writeThenGetAttrSelector(key: V, then: V, output: Output): Writer {\n    return GetAttrSelectorWriter.writeThen(output, this, key, then);\n  }\n\n  sizeOfGetItemSelector(index: V, then: V): number {\n    return GetItemSelectorWriter.sizeOf(this, index, then);\n  }\n\n  writeGetItemSelector(index: V, then: V, output: Output): Writer {\n    return GetItemSelectorWriter.write(output, this, index, then);\n  }\n\n  sizeOfThenGetItemSelector(index: V, then: V): number {\n    return GetItemSelectorWriter.sizeOfThen(this, index, then);\n  }\n\n  writeThenGetItemSelector(index: V, then: V, output: Output): Writer {\n    return GetItemSelectorWriter.writeThen(output, this, index, then);\n  }\n\n  sizeOfKeysSelector(then: V): number {\n    return KeysSelectorWriter.sizeOf(this, then);\n  }\n\n  writeKeysSelector(then: V, output: Output): Writer {\n    return KeysSelectorWriter.write(output, this, then);\n  }\n\n  sizeOfThenKeysSelector(then: V): number {\n    return KeysSelectorWriter.sizeOf(this, then);\n  }\n\n  writeThenKeysSelector(then: V, output: Output): Writer {\n    return KeysSelectorWriter.writeThen(output, this, then);\n  }\n\n  sizeOfValuesSelector(then: V): number {\n    return ValuesSelectorWriter.sizeOf(this, then);\n  }\n\n  writeValuesSelector(then: V, output: Output): Writer {\n    return ValuesSelectorWriter.write(output, this, then);\n  }\n\n  sizeOfThenValuesSelector(then: V): number {\n    return ValuesSelectorWriter.sizeOf(this, then);\n  }\n\n  writeThenValuesSelector(then: V, output: Output): Writer {\n    return ValuesSelectorWriter.writeThen(output, this, then);\n  }\n\n  sizeOfChildrenSelector(then: V): number {\n    return ChildrenSelectorWriter.sizeOf(this, then);\n  }\n\n  writeChildrenSelector(then: V, output: Output): Writer {\n    return ChildrenSelectorWriter.write(output, this, then);\n  }\n\n  sizeOfThenChildrenSelector(then: V): number {\n    return ChildrenSelectorWriter.sizeOf(this, then);\n  }\n\n  writeThenChildrenSelector(then: V, output: Output): Writer {\n    return ChildrenSelectorWriter.writeThen(output, this, then);\n  }\n\n  sizeOfDescendantsSelector(then: V): number {\n    return DescendantsSelectorWriter.sizeOf(this, then);\n  }\n\n  writeDescendantsSelector(then: V, output: Output): Writer {\n    return DescendantsSelectorWriter.write(output, this, then);\n  }\n\n  sizeOfThenDescendantsSelector(then: V): number {\n    return DescendantsSelectorWriter.sizeOf(this, then);\n  }\n\n  writeThenDescendantsSelector(then: V, output: Output): Writer {\n    return DescendantsSelectorWriter.writeThen(output, this, then);\n  }\n\n  sizeOfFilterSelector(predicate: V, then: V): number {\n    return FilterSelectorWriter.sizeOf(this, predicate, then);\n  }\n\n  writeFilterSelector(predicate: V, then: V, output: Output): Writer {\n    return FilterSelectorWriter.write(output, this, predicate, then);\n  }\n\n  sizeOfThenFilterSelector(predicate: V, then: V): number {\n    return FilterSelectorWriter.sizeOfThen(this, predicate, then);\n  }\n\n  writeThenFilterSelector(predicate: V, then: V, output: Output): Writer {\n    return FilterSelectorWriter.writeThen(output, this, predicate, then);\n  }\n\n  sizeOfExtant(): number {\n    return 0;\n  }\n\n  writeExtant(output: Output): Writer {\n    return Writer.done();\n  }\n\n  sizeOfAbsent(): number {\n    return 0;\n  }\n\n  writeAbsent(output: Output): Writer {\n    return Writer.done();\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Cursor} from \"@swim/util\";\nimport {Output, WriterException, Writer} from \"@swim/codec\";\nimport {\n  Item,\n  Field,\n  Attr,\n  Slot,\n  Value,\n  Record,\n  Data,\n  Text,\n  Num,\n  Bool,\n  Expression,\n  Operator,\n  Selector,\n  Func,\n  Extant,\n  Absent,\n  ChildrenSelector,\n  DescendantsSelector,\n  FilterSelector,\n  GetAttrSelector,\n  GetItemSelector,\n  GetSelector,\n  IdentitySelector,\n  KeysSelector,\n  LiteralSelector,\n  ValuesSelector,\n  BinaryOperator,\n  ConditionalOperator,\n  InvokeOperator,\n  UnaryOperator,\n  BridgeFunc,\n  LambdaFunc,\n} from \"@swim/structure\";\nimport {ReconWriter} from \"./ReconWriter\";\n\nexport class ReconStructureWriter extends ReconWriter<Item, Value> {\n  isField(item: Item): boolean {\n    return item instanceof Field;\n  }\n\n  isAttr(item: Item): boolean {\n    return item instanceof Attr;\n  }\n\n  isSlot(item: Item): boolean {\n    return item instanceof Slot;\n  }\n\n  isValue(item: Item): boolean {\n    return item instanceof Value;\n  }\n\n  isRecord(item: Item): boolean {\n    return item instanceof Record;\n  }\n\n  isText(item: Item): boolean {\n    return item instanceof Text;\n  }\n\n  isNum(item: Item): boolean {\n    return item instanceof Num;\n  }\n\n  isBool(item: Item): boolean {\n    return item instanceof Bool;\n  }\n\n  isExpression(item: Item): boolean {\n    return item instanceof Expression;\n  }\n\n  isExtant(item: Item): boolean {\n    return item instanceof Extant;\n  }\n\n  items(item: Item): Cursor<Item> {\n    return item.iterator();\n  }\n\n  item(value: Value): Item {\n    return value;\n  }\n\n  key(item: Item): Value {\n    return item.key;\n  }\n\n  value(item: Item): Value {\n    return item.toValue();\n  }\n\n  string(item: Item): string {\n    return item.stringValue(\"\");\n  }\n\n  precedence(item: Item): number {\n    return item.precedence();\n  }\n\n  sizeOfItem(item: Item): number {\n    if (item instanceof Field) {\n      if (item instanceof Attr) {\n        return this.sizeOfAttr(item.key, item.value);\n      } else if (item instanceof Slot) {\n        return this.sizeOfSlot(item.key, item.value);\n      }\n    } else if (item instanceof Value) {\n      return this.sizeOfValue(item);\n    }\n    throw new WriterException(\"No Recon serialization for \" + item);\n  }\n\n  writeItem(item: Item, output: Output): Writer {\n    if (item instanceof Field) {\n      if (item instanceof Attr) {\n        return this.writeAttr(item.key, item.value, output);\n      } else if (item instanceof Slot) {\n        return this.writeSlot(item.key, item.value, output);\n      }\n    } else if (item instanceof Value) {\n      return this.writeValue(item, output);\n    }\n    return Writer.error(new WriterException(\"No Recon serialization for \" + item));\n  }\n\n  sizeOfValue(value: Value): number {\n    if (value instanceof Record) {\n      return this.sizeOfRecord(value);\n    } else if (value instanceof Data) {\n      return this.sizeOfData(value.size);\n    } else if (value instanceof Text) {\n      return this.sizeOfText(value.value);\n    } else if (value instanceof Num) {\n      if (value.isUint32()) {\n        return this.sizeOfUint32(value.value);\n      } else if (value.isUint64()) {\n        return this.sizeOfUint64(value.value);\n      } else {\n        return this.sizeOfNum(value.value);\n      }\n    } else if (value instanceof Bool) {\n      return this.sizeOfBool(value.value);\n    } else if (value instanceof Selector) {\n      return this.sizeOfSelector(value);\n    } else if (value instanceof Operator) {\n      return this.sizeOfOperator(value);\n    } else if (value instanceof Func) {\n      return this.sizeOfFunc(value);\n    } else if (value instanceof Extant) {\n      return this.sizeOfExtant();\n    } else if (value instanceof Absent) {\n      return this.sizeOfAbsent();\n    }\n    throw new WriterException(\"No Recon serialization for \" + value);\n  }\n\n  writeValue(value: Value, output: Output): Writer {\n    if (value instanceof Record) {\n      return this.writeRecord(value, output);\n    } else if (value instanceof Data) {\n      return this.writeData(value.asUint8Array(), output);\n    } else if (value instanceof Text) {\n      return this.writeText(value.value, output);\n    } else if (value instanceof Num) {\n      if (value.isUint32()) {\n        return this.writeUint32(value.value, output);\n      } else if (value.isUint64()) {\n        return this.writeUint64(value.value, output);\n      } else {\n        return this.writeNum(value.value, output);\n      }\n    } else if (value instanceof Bool) {\n      return this.writeBool(value.value, output);\n    } else if (value instanceof Selector) {\n      return this.writeSelector(value, output);\n    } else if (value instanceof Operator) {\n      return this.writeOperator(value, output);\n    } else if (value instanceof Func) {\n      return this.writeFunc(value, output);\n    } else if (value instanceof Extant) {\n      return this.writeExtant(output);\n    } else if (value instanceof Absent) {\n      return this.writeAbsent(output);\n    }\n    return Writer.error(new WriterException(\"No Recon serialization for \" + value));\n  }\n\n  sizeOfSelector(selector: Selector): number {\n    if (selector instanceof IdentitySelector) {\n      return this.sizeOfIdentitySelector();\n    } else if (selector instanceof LiteralSelector) {\n      return this.sizeOfLiteralSelector(selector.item(), selector.then());\n    } else if (selector instanceof GetSelector) {\n      return this.sizeOfGetSelector(selector.accessor(), selector.then());\n    } else if (selector instanceof GetAttrSelector) {\n      return this.sizeOfGetAttrSelector(selector.accessor(), selector.then());\n    } else if (selector instanceof GetItemSelector) {\n      return this.sizeOfGetItemSelector(selector.accessor(), selector.then());\n    } else if (selector instanceof KeysSelector) {\n      return this.sizeOfKeysSelector(selector.then());\n    } else if (selector instanceof ValuesSelector) {\n      return this.sizeOfValuesSelector(selector.then());\n    } else if (selector instanceof ChildrenSelector) {\n      return this.sizeOfChildrenSelector(selector.then());\n    } else if (selector instanceof DescendantsSelector) {\n      return this.sizeOfDescendantsSelector(selector.then());\n    } else if (selector instanceof FilterSelector) {\n      return this.sizeOfFilterSelector(selector.predicate(), selector.then());\n    }\n    throw new WriterException(\"No Recon serialization for \" + selector);\n  }\n\n  writeSelector(selector: Selector, output: Output): Writer {\n    if (selector instanceof IdentitySelector) {\n      return this.writeIdentitySelector(output);\n    } else if (selector instanceof LiteralSelector) {\n      return this.writeLiteralSelector(selector.item(), selector.then(), output);\n    } else if (selector instanceof GetSelector) {\n      return this.writeGetSelector(selector.accessor(), selector.then(), output);\n    } else if (selector instanceof GetAttrSelector) {\n      return this.writeGetAttrSelector(selector.accessor(), selector.then(), output);\n    } else if (selector instanceof GetItemSelector) {\n      return this.writeGetItemSelector(selector.accessor(), selector.then(), output);\n    } else if (selector instanceof KeysSelector) {\n      return this.writeKeysSelector(selector.then(), output);\n    } else if (selector instanceof ValuesSelector) {\n      return this.writeValuesSelector(selector.then(), output);\n    } else if (selector instanceof ChildrenSelector) {\n      return this.writeChildrenSelector(selector.then(), output);\n    } else if (selector instanceof DescendantsSelector) {\n      return this.writeDescendantsSelector(selector.then(), output);\n    } else if (selector instanceof FilterSelector) {\n      return this.writeFilterSelector(selector.predicate(), selector.then(), output);\n    }\n    return Writer.error(new WriterException(\"No Recon serialization for \" + selector));\n  }\n\n  sizeOfOperator(operator: Operator): number {\n    if (operator instanceof BinaryOperator) {\n      return this.sizeOfInfixOperator(operator.operand1(), operator.operator(), operator.operand2(), operator.precedence());\n    } else if (operator instanceof UnaryOperator) {\n      return this.sizeOfPrefixOperator(operator.operator(), operator.operand(), operator.precedence());\n    } else if (operator instanceof InvokeOperator) {\n      return this.sizeOfInvokeOperator(operator.func(), operator.args());\n    } else if (operator instanceof ConditionalOperator) {\n      return this.sizeOfConditionalOperator(operator.ifTerm(), operator.thenTerm(), operator.elseTerm(), operator.precedence());\n    }\n    throw new WriterException(\"No Recon serialization for \" + operator);\n  }\n\n  writeOperator(operator: Operator, output: Output): Writer {\n    if (operator instanceof BinaryOperator) {\n      return this.writeInfixOperator(operator.operand1(), operator.operator(), operator.operand2(), operator.precedence(), output);\n    } else if (operator instanceof UnaryOperator) {\n      return this.writePrefixOperator(operator.operator(), operator.operand(), operator.precedence(), output);\n    } else if (operator instanceof InvokeOperator) {\n      return this.writeInvokeOperator(operator.func(), operator.args(), output);\n    } else if (operator instanceof ConditionalOperator) {\n      return this.writeConditionalOperator(operator.ifTerm(), operator.thenTerm(), operator.elseTerm(), operator.precedence(), output);\n    }\n    return Writer.error(new WriterException(\"No Recon serialization for \" + operator));\n  }\n\n  sizeOfFunc(func: Func): number {\n    if (func instanceof LambdaFunc) {\n      return this.sizeOfLambdaFunc(func.bindings(), func.template());\n    } else if (func instanceof BridgeFunc) {\n      return 0;\n    }\n    throw new WriterException(\"No Recon serialization for \" + func);\n  }\n\n  writeFunc(func: Func, output: Output): Writer {\n    if (func instanceof LambdaFunc) {\n      return this.writeLambdaFunc(func.bindings(), func.template(), output);\n    } else if (func instanceof BridgeFunc) {\n      return Writer.done();\n    }\n    return Writer.error(new WriterException(\"No Recon serialization for \" + func));\n  }\n\n  sizeOfBlockItem(item: Item): number {\n    if (item instanceof Field) {\n      return this.sizeOfItem(item);\n    } else if (item instanceof Value) {\n      return this.sizeOfBlockValue(item);\n    }\n    throw new WriterException(\"No Recon serialization for \" + item);\n  }\n\n  writeBlockItem(item: Item, output: Output): Writer {\n    if (item instanceof Field) {\n      return this.writeItem(item, output);\n    } else if (item instanceof Value) {\n      return this.writeBlockValue(item, output);\n    }\n    return Writer.error(new WriterException(\"No Recon serialization for \" + item));\n  }\n\n  sizeOfBlockValue(value: Value): number {\n    if (value instanceof Record) {\n      return this.sizeOfBlock(value);\n    }\n    return this.sizeOfValue(value);\n  }\n\n  writeBlockValue(value: Value, output: Output): Writer {\n    if (value instanceof Record) {\n      return this.writeBlock(value, output);\n    }\n    return this.writeValue(value, output);\n  }\n\n  sizeOfThen(then: Value): number {\n    if (then instanceof Selector) {\n      if (then instanceof IdentitySelector) {\n        return this.sizeOfThenIdentitySelector();\n      } else if (then instanceof LiteralSelector) {\n        return this.sizeOfThenLiteralSelector(then.item(), then.then());\n      } else if (then instanceof GetSelector) {\n        return this.sizeOfThenGetSelector(then.accessor(), then.then());\n      } else if (then instanceof GetAttrSelector) {\n        return this.sizeOfThenGetAttrSelector(then.accessor(), then.then());\n      } else if (then instanceof GetItemSelector) {\n        return this.sizeOfThenGetItemSelector(then.accessor(), then.then());\n      } else if (then instanceof KeysSelector) {\n        return this.sizeOfThenKeysSelector(then.then());\n      } else if (then instanceof ValuesSelector) {\n        return this.sizeOfThenValuesSelector(then.then());\n      } else if (then instanceof ChildrenSelector) {\n        return this.sizeOfThenChildrenSelector(then.then());\n      } else if (then instanceof DescendantsSelector) {\n        return this.sizeOfThenDescendantsSelector(then.then());\n      } else if (then instanceof FilterSelector) {\n        return this.sizeOfThenFilterSelector(then.predicate(), then.then());\n      }\n    }\n    throw new WriterException(\"No Recon serialization for \" + then);\n  }\n\n  writeThen(then: Value, output: Output): Writer {\n    if (then instanceof Selector) {\n      if (then instanceof IdentitySelector) {\n        return this.writeThenIdentitySelector(output);\n      } else if (then instanceof LiteralSelector) {\n        return this.writeThenLiteralSelector(then.item(), then.then(), output);\n      } else if (then instanceof GetSelector) {\n        return this.writeThenGetSelector(then.accessor(), then.then(), output);\n      } else if (then instanceof GetAttrSelector) {\n        return this.writeThenGetAttrSelector(then.accessor(), then.then(), output);\n      } else if (then instanceof GetItemSelector) {\n        return this.writeThenGetItemSelector(then.accessor(), then.then(), output);\n      } else if (then instanceof KeysSelector) {\n        return this.writeThenKeysSelector(then.then(), output);\n      } else if (then instanceof ValuesSelector) {\n        return this.writeThenValuesSelector(then.then(), output);\n      } else if (then instanceof ChildrenSelector) {\n        return this.writeThenChildrenSelector(then.then(), output);\n      } else if (then instanceof DescendantsSelector) {\n        return this.writeThenDescendantsSelector(then.then(), output);\n      } else if (then instanceof FilterSelector) {\n        return this.writeThenFilterSelector(then.predicate(), then.then(), output);\n      }\n    }\n    return Writer.error(new WriterException(\"No Recon serialization for \" + then));\n  }\n}\n","// Copyright 2015-2020 SWIM.AI inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output, Parser, Writer, Unicode, Utf8} from \"@swim/codec\";\nimport {Item, Value, Data} from \"@swim/structure\";\nimport {ReconParser} from \"./ReconParser\";\nimport {ReconStructureParser} from \"./ReconStructureParser\";\nimport {ReconWriter} from \"./ReconWriter\";\nimport {ReconStructureWriter} from \"./ReconStructureWriter\";\n\n/**\n * Factory for constructing Recon parsers and writers.\n */\nexport class Recon {\n  private constructor() {\n    // stub\n  }\n\n  /** @hidden */\n  static isSpace(c: number): boolean {\n    return c === 0x20 || c === 0x9;\n  }\n\n  /** @hidden */\n  static isNewline(c: number): boolean {\n    return c === 0xa || c === 0xd;\n  }\n\n  /** @hidden */\n  static isWhitespace(c: number): boolean {\n    return Recon.isSpace(c) || Recon.isNewline(c);\n  }\n\n  /** @hidden */\n  static isIdentStartChar(c: number): boolean {\n    return c >= 65/*'A'*/ && c <= 90/*'Z'*/\n        || c === 95/*'_'*/\n        || c >= 97/*'a'*/ && c <= 122/*'z'*/\n        || c >= 0xc0 && c <= 0xd6\n        || c >= 0xd8 && c <= 0xf6\n        || c >= 0xf8 && c <= 0x2ff\n        || c >= 0x370 && c <= 0x37d\n        || c >= 0x37f && c <= 0x1fff\n        || c >= 0x200c && c <= 0x200d\n        || c >= 0x2070 && c <= 0x218f\n        || c >= 0x2c00 && c <= 0x2fef\n        || c >= 0x3001 && c <= 0xd7ff\n        || c >= 0xf900 && c <= 0xfdcf\n        || c >= 0xfdf0 && c <= 0xfffd\n        || c >= 0x10000 && c <= 0xeffff;\n  }\n\n  /** @hidden */\n  static isIdentChar(c: number): boolean {\n    return c === 45/*'-'*/\n        || c >= 48/*'0'*/ && c <= 57/*'9'*/\n        || c >= 65/*'A'*/ && c <= 90/*'Z'*/\n        || c === 95/*'_'*/\n        || c >= 97/*'a'*/ && c <= 122/*'z'*/\n        || c === 0xb7\n        || c >= 0xc0 && c <= 0xd6\n        || c >= 0xd8 && c <= 0xf6\n        || c >= 0xf8 && c <= 0x37d\n        || c >= 0x37f && c <= 0x1fff\n        || c >= 0x200c && c <= 0x200d\n        || c >= 0x203f && c <= 0x2040\n        || c >= 0x2070 && c <= 0x218f\n        || c >= 0x2c00 && c <= 0x2fef\n        || c >= 0x3001 && c <= 0xd7ff\n        || c >= 0xf900 && c <= 0xfdcf\n        || c >= 0xfdf0 && c <= 0xfffd\n        || c >= 0x10000 && c <= 0xeffff;\n  }\n\n  private static _structureParser: ReconParser<Item, Value>;\n  private static _structureWriter: ReconWriter<Item, Value>;\n\n  static structureParser(): ReconParser<Item, Value> {\n    if (!Recon._structureParser) {\n      Recon._structureParser = new ReconStructureParser();\n    }\n    return Recon._structureParser;\n  }\n\n  static structureWriter(): ReconWriter<Item, Value> {\n    if (!Recon._structureWriter) {\n      Recon._structureWriter = new ReconStructureWriter();\n    }\n    return Recon._structureWriter;\n  }\n\n  static parse(recon: string): Value {\n    return Recon.structureParser().parseBlockString(recon);\n  }\n\n  static parser(): Parser<Value> {\n    return Recon.structureParser().blockParser();\n  }\n\n  static sizeOf(item: Item): number {\n    return Recon.structureWriter().sizeOfItem(item);\n  }\n\n  static sizeOfBlock(item: Item): number {\n    return Recon.structureWriter().sizeOfBlockItem(item);\n  }\n\n  static write(item: Item, output: Output): Writer {\n    return Recon.structureWriter().writeItem(item, output);\n  }\n\n  static writeBlock(item: Item, output: Output): Writer {\n    return Recon.structureWriter().writeBlockItem(item, output);\n  }\n\n  static toString(item: Item): string {\n    const output = Unicode.stringOutput();\n    Recon.write(item, output);\n    return output.bind();\n  }\n\n  static toBlockString(item: Item): string {\n    const output = Unicode.stringOutput();\n    Recon.writeBlock(item, output);\n    return output.bind();\n  }\n\n  static toData(item: Item): Data {\n    const output = Utf8.encodedOutput(Data.output());\n    Recon.write(item, output);\n    return output.bind();\n  }\n\n  static toBlockData(item: Item): Data {\n    const output = Utf8.encodedOutput(Data.output());\n    Recon.writeBlock(item, output);\n    return output.bind();\n  }\n}\n\nItem.prototype.toRecon = function (): string {\n  return Recon.toString(this);\n};\n\nItem.prototype.toReconBlock = function (): string {\n  return Recon.toBlockString(this);\n};\n\nValue.parseRecon = function (recon: string): Value {\n  return Recon.parse(recon);\n};\n"],"names":["Parser","Diagnostic","Base64","Base16","Unicode","Attr","Slot","Value","Record","Data","Text","Bool","Num","Selector","OrOperator","AndOperator","BitwiseOrOperator","BitwiseXorOperator","BitwiseAndOperator","LtOperator","LeOperator","EqOperator","NeOperator","GeOperator","GtOperator","PlusOperator","MinusOperator","TimesOperator","DivideOperator","ModuloOperator","NotOperator","BitwiseNotOperator","NegativeOperator","PositiveOperator","InvokeOperator","Writer","WriterException","Utf8","Base10","Field","Expression","Extant","Operator","Func","Absent","IdentitySelector","LiteralSelector","GetSelector","GetAttrSelector","GetItemSelector","KeysSelector","ValuesSelector","ChildrenSelector","DescendantsSelector","FilterSelector","BinaryOperator","UnaryOperator","ConditionalOperator","LambdaFunc","BridgeFunc","Item"],"mappings":"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"}