import { __extends } from "tslib";
import { WriterException, Writer } from "@swim/codec";
var AttrWriter = (function (_super) {
    __extends(AttrWriter, _super);
    function AttrWriter(recon, key, value, part, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._key = key;
        _this._value = value;
        _this._part = part;
        _this._step = step;
        return _this;
    }
    AttrWriter.prototype.pull = function (output) {
        return AttrWriter.write(output, this._recon, this._key, this._value, this._part, this._step);
    };
    AttrWriter.sizeOf = function (recon, key, value) {
        var size = 0;
        size += 1;
        size += recon.sizeOfValue(key);
        if (!recon.isExtant(recon.item(value))) {
            size += 1;
            size += recon.sizeOfBlockValue(value);
            size += 1;
        }
        return size;
    };
    AttrWriter.write = function (output, recon, key, value, part, step) {
        if (step === void 0) { step = 1; }
        if (step === 1 && output.isCont()) {
            output = output.write(64);
            step = 2;
        }
        if (step === 2) {
            if (!part) {
                part = recon.writeValue(key, output);
            }
            else {
                part = part.pull(output);
            }
            if (part.isDone()) {
                part = void 0;
                if (recon.isExtant(recon.item(value))) {
                    return Writer.done();
                }
                else {
                    step = 3;
                }
            }
            else if (part.isError()) {
                return part.asError();
            }
        }
        if (step === 3 && output.isCont()) {
            output = output.write(40);
            step = 4;
        }
        if (step === 4) {
            if (!part) {
                part = recon.writeBlockValue(value, output);
            }
            else {
                part = part.pull(output);
            }
            if (part.isDone()) {
                part = void 0;
                step = 5;
            }
            else if (part.isError()) {
                return part.asError();
            }
        }
        if (step === 5 && output.isCont()) {
            output = output.write(41);
            return Writer.done();
        }
        if (output.isDone()) {
            return Writer.error(new WriterException("truncated"));
        }
        else if (output.isError()) {
            return Writer.error(output.trap());
        }
        return new AttrWriter(recon, key, value, part, step);
    };
    return AttrWriter;
}(Writer));
export { AttrWriter };
//# sourceMappingURL=AttrWriter.js.map