import { __extends } from "tslib";
import { WriterException, Writer } from "@swim/codec";
var ConditionalOperatorWriter = (function (_super) {
    __extends(ConditionalOperatorWriter, _super);
    function ConditionalOperatorWriter(recon, ifTerm, thenTerm, elseTerm, precedence, part, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._ifTerm = ifTerm;
        _this._thenTerm = thenTerm;
        _this._elseTerm = elseTerm;
        _this._precedence = precedence;
        _this._part = part;
        _this._step = step;
        return _this;
    }
    ConditionalOperatorWriter.prototype.pull = function (output) {
        return ConditionalOperatorWriter.write(output, this._recon, this._ifTerm, this._thenTerm, this._elseTerm, this._precedence, this._part, this._step);
    };
    ConditionalOperatorWriter.sizeOf = function (recon, ifTerm, thenTerm, elseTerm, precedence) {
        var size = 0;
        if (recon.precedence(ifTerm) > 0 && recon.precedence(ifTerm) <= precedence) {
            size += 1;
            size += recon.sizeOfItem(ifTerm);
            size += 1;
        }
        else {
            size += recon.sizeOfItem(ifTerm);
        }
        size += 3;
        size += recon.sizeOfItem(thenTerm);
        size += 3;
        size += recon.sizeOfItem(elseTerm);
        return size;
    };
    ConditionalOperatorWriter.write = function (output, recon, ifTerm, thenTerm, elseTerm, precedence, part, step) {
        if (step === void 0) { step = 1; }
        if (step === 1) {
            if (recon.precedence(ifTerm) > 0 && recon.precedence(ifTerm) <= precedence) {
                if (output.isCont()) {
                    output = output.write(40);
                    step = 2;
                }
            }
            else {
                step = 2;
            }
        }
        if (step === 2) {
            if (!part) {
                part = recon.writeItem(ifTerm, output);
            }
            else {
                part = part.pull(output);
            }
            if (part.isDone()) {
                part = void 0;
                step = 3;
            }
            else if (part.isError()) {
                return part.asError();
            }
        }
        if (step === 3) {
            if (recon.precedence(ifTerm) > 0 && recon.precedence(ifTerm) <= precedence) {
                if (output.isCont()) {
                    output = output.write(41);
                    step = 4;
                }
            }
            else {
                step = 4;
            }
        }
        if (step === 4 && output.isCont()) {
            output = output.write(32);
            step = 5;
        }
        if (step === 5 && output.isCont()) {
            output = output.write(63);
            step = 6;
        }
        if (step === 6 && output.isCont()) {
            output = output.write(32);
            step = 7;
        }
        if (step === 7) {
            if (!part) {
                part = recon.writeItem(thenTerm, output);
            }
            else {
                part = part.pull(output);
            }
            if (part.isDone()) {
                part = void 0;
                step = 8;
            }
            else if (part.isError()) {
                return part.asError();
            }
        }
        if (step === 8 && output.isCont()) {
            output = output.write(32);
            step = 9;
        }
        if (step === 9 && output.isCont()) {
            output = output.write(58);
            step = 10;
        }
        if (step === 10 && output.isCont()) {
            output = output.write(32);
            step = 11;
        }
        if (step === 11) {
            if (!part) {
                part = recon.writeItem(elseTerm, output);
            }
            else {
                part = part.pull(output);
            }
            if (part.isDone()) {
                return Writer.done();
            }
            else if (part.isError()) {
                return part.asError();
            }
        }
        if (output.isDone()) {
            return Writer.error(new WriterException("truncated"));
        }
        else if (output.isError()) {
            return Writer.error(output.trap());
        }
        return new ConditionalOperatorWriter(recon, ifTerm, thenTerm, elseTerm, precedence, part, step);
    };
    return ConditionalOperatorWriter;
}(Writer));
export { ConditionalOperatorWriter };
//# sourceMappingURL=ConditionalOperatorWriter.js.map