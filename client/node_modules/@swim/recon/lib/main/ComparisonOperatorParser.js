import { __extends } from "tslib";
import { Parser, Diagnostic } from "@swim/codec";
import { Recon } from "./Recon";
var ComparisonOperatorParser = (function (_super) {
    __extends(ComparisonOperatorParser, _super);
    function ComparisonOperatorParser(recon, builder, lhsParser, operator, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._builder = builder;
        _this._lhsParser = lhsParser;
        _this._operator = operator;
        _this._rhsParser = rhsParser;
        _this._step = step;
        return _this;
    }
    ComparisonOperatorParser.prototype.feed = function (input) {
        return ComparisonOperatorParser.parse(input, this._recon, this._builder, this._lhsParser, this._operator, this._rhsParser, this._step);
    };
    ComparisonOperatorParser.parse = function (input, recon, builder, lhsParser, operator, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!lhsParser) {
                lhsParser = recon.parseAttrExpression(input, builder);
            }
            while (lhsParser.isCont() && !input.isEmpty()) {
                lhsParser = lhsParser.feed(input);
            }
            if (lhsParser.isDone()) {
                step = 2;
            }
            else if (lhsParser.isError()) {
                return lhsParser.asError();
            }
        }
        if (step === 2) {
            while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                input = input.step();
            }
            if (input.isCont()) {
                if (c === 33) {
                    input = input.step();
                    step = 3;
                }
                else if (c === 60) {
                    input = input.step();
                    step = 4;
                }
                else if (c === 62) {
                    input = input.step();
                    step = 5;
                }
                else if (c === 61) {
                    input = input.step();
                    step = 6;
                }
                else {
                    return lhsParser;
                }
            }
            else if (input.isDone()) {
                return lhsParser;
            }
        }
        if (step === 3) {
            if (input.isCont()) {
                c = input.head();
                if (c === 61) {
                    input = input.step();
                    operator = "!=";
                    step = 7;
                }
                else {
                    operator = "!";
                    step = 7;
                }
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.unexpected(input));
            }
        }
        if (step === 4) {
            if (input.isCont()) {
                c = input.head();
                if (c === 61) {
                    input = input.step();
                    operator = "<=";
                    step = 7;
                }
                else {
                    operator = "<";
                    step = 7;
                }
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.unexpected(input));
            }
        }
        if (step === 5) {
            if (input.isCont()) {
                c = input.head();
                if (c === 61) {
                    input = input.step();
                    operator = ">=";
                    step = 7;
                }
                else {
                    operator = ">";
                    step = 7;
                }
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.unexpected(input));
            }
        }
        if (step === 6) {
            if (input.isCont()) {
                c = input.head();
                if (c === 61) {
                    input = input.step();
                    operator = "==";
                    step = 7;
                }
                else if (c === 62) {
                    return lhsParser;
                }
                else {
                    operator = "=";
                    step = 7;
                }
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.unexpected(input));
            }
        }
        if (step === 7) {
            if (!rhsParser) {
                rhsParser = recon.parseAttrExpression(input, builder);
            }
            while (rhsParser.isCont() && !input.isEmpty()) {
                rhsParser = rhsParser.feed(input);
            }
            if (rhsParser.isDone()) {
                var lhs = lhsParser.bind();
                var rhs = rhsParser.bind();
                if (operator === "<") {
                    return Parser.done(recon.lt(lhs, rhs));
                }
                else if (operator === "<=") {
                    return Parser.done(recon.le(lhs, rhs));
                }
                else if (operator === "==") {
                    return Parser.done(recon.eq(lhs, rhs));
                }
                else if (operator === "!=") {
                    return Parser.done(recon.ne(lhs, rhs));
                }
                else if (operator === ">=") {
                    return Parser.done(recon.ge(lhs, rhs));
                }
                else if (operator === ">") {
                    return Parser.done(recon.gt(lhs, rhs));
                }
                else {
                    return Parser.error(Diagnostic.message(operator, input));
                }
            }
            else if (rhsParser.isError()) {
                return rhsParser.asError();
            }
        }
        return new ComparisonOperatorParser(recon, builder, lhsParser, operator, rhsParser, step);
    };
    return ComparisonOperatorParser;
}(Parser));
export { ComparisonOperatorParser };
//# sourceMappingURL=ComparisonOperatorParser.js.map