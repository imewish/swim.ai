import { __extends } from "tslib";
import { Parser } from "@swim/codec";
var InlineItemParser = (function (_super) {
    __extends(InlineItemParser, _super);
    function InlineItemParser(recon, builder, fieldParser, valueParser, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._builder = builder;
        _this._fieldParser = fieldParser;
        _this._valueParser = valueParser;
        _this._step = step;
        return _this;
    }
    InlineItemParser.prototype.feed = function (input) {
        return InlineItemParser.parse(input, this._recon, this._builder, this._fieldParser, this._valueParser, this._step);
    };
    InlineItemParser.parse = function (input, recon, builder, fieldParser, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (input.isCont()) {
                c = input.head();
                if (c === 64) {
                    fieldParser = recon.parseAttr(input);
                    step = 2;
                }
                else if (c === 123) {
                    if (builder) {
                        valueParser = recon.parseRecord(input, builder);
                        step = 5;
                    }
                    else {
                        valueParser = recon.parseRecord(input);
                        step = 4;
                    }
                }
                else if (c === 91) {
                    if (builder) {
                        valueParser = recon.parseMarkup(input, builder);
                        step = 5;
                    }
                    else {
                        valueParser = recon.parseMarkup(input);
                        step = 4;
                    }
                }
                else if (!builder) {
                    return Parser.done(recon.extant());
                }
                else {
                    return Parser.done(builder.bind());
                }
            }
            else if (input.isDone()) {
                if (!builder) {
                    return Parser.done(recon.extant());
                }
                else {
                    return Parser.done(builder.bind());
                }
            }
        }
        if (step === 2) {
            while (fieldParser.isCont() && !input.isEmpty()) {
                fieldParser = fieldParser.feed(input);
            }
            if (fieldParser.isDone()) {
                builder = builder || recon.valueBuilder();
                builder.push(fieldParser.bind());
                fieldParser = void 0;
                step = 3;
            }
            else if (fieldParser.isError()) {
                return fieldParser.asError();
            }
        }
        if (step === 3) {
            if (input.isCont()) {
                c = input.head();
                if (c === 123) {
                    valueParser = recon.parseRecord(input, builder);
                    step = 5;
                }
                else if (c === 91) {
                    valueParser = recon.parseMarkup(input, builder);
                    step = 5;
                }
                else {
                    return Parser.done(builder.bind());
                }
            }
            else if (input.isDone()) {
                return Parser.done(builder.bind());
            }
        }
        if (step === 4) {
            while (valueParser.isCont() && !input.isEmpty()) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                builder = builder || recon.valueBuilder();
                builder.push(recon.item(valueParser.bind()));
                return Parser.done(builder.bind());
            }
            else if (valueParser.isError()) {
                return valueParser;
            }
        }
        if (step === 5) {
            while (valueParser.isCont() && !input.isEmpty()) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                return Parser.done(builder.bind());
            }
            else if (valueParser.isError()) {
                return valueParser;
            }
        }
        return new InlineItemParser(recon, builder, fieldParser, valueParser, step);
    };
    return InlineItemParser;
}(Parser));
export { InlineItemParser };
//# sourceMappingURL=InlineItemParser.js.map