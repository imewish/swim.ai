import { __extends } from "tslib";
import { Parser, Diagnostic, Base16 } from "@swim/codec";
import { Recon } from "./Recon";
var StringParser = (function (_super) {
    __extends(StringParser, _super);
    function StringParser(recon, output, quote, code, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._output = output;
        _this._quote = quote;
        _this._code = code;
        _this._step = step;
        return _this;
    }
    StringParser.prototype.feed = function (input) {
        return StringParser.parse(input, this._recon, this._output, this._quote, this._code, this._step);
    };
    StringParser.parse = function (input, recon, output, quote, code, step) {
        if (quote === void 0) { quote = 0; }
        if (code === void 0) { code = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {
                input = input.step();
            }
            if (input.isCont()) {
                if (c === 34 || c === 39 && (quote === c || quote === 0)) {
                    input = input.step();
                    output = output || recon.textOutput();
                    quote = c;
                    step = 2;
                }
                else {
                    return Parser.error(Diagnostic.expected("string", input));
                }
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.expected("string", input));
            }
        }
        string: do {
            if (step === 2) {
                while (input.isCont()) {
                    c = input.head();
                    if (c >= 0x20 && c !== quote && c !== 92) {
                        input = input.step();
                        output.write(c);
                    }
                    else {
                        break;
                    }
                }
                if (input.isCont()) {
                    if (c === quote) {
                        input = input.step();
                        return Parser.done(output.bind());
                    }
                    else if (c === 92) {
                        input = input.step();
                        step = 3;
                    }
                    else {
                        return Parser.error(Diagnostic.expected(quote, input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected(quote, input));
                }
            }
            if (step === 3) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 34 || c === 36 || c === 39 || c === 47
                        || c === 64 || c === 91 || c === 92 || c === 93
                        || c === 123 || c === 125) {
                        input = input.step();
                        output.write(c);
                        step = 2;
                        continue;
                    }
                    else if (c === 98) {
                        input = input.step();
                        output.write(8);
                        step = 2;
                        continue;
                    }
                    else if (c === 102) {
                        input = input.step();
                        output.write(12);
                        step = 2;
                        continue;
                    }
                    else if (c === 110) {
                        input = input.step();
                        output.write(10);
                        step = 2;
                        continue;
                    }
                    else if (c === 114) {
                        input = input.step();
                        output.write(13);
                        step = 2;
                        continue;
                    }
                    else if (c === 116) {
                        input = input.step();
                        output.write(9);
                        step = 2;
                        continue;
                    }
                    else if (c === 117) {
                        input = input.step();
                        step = 4;
                    }
                    else {
                        return Parser.error(Diagnostic.expected("escape character", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("escape character", input));
                }
            }
            if (step >= 4) {
                do {
                    if (input.isCont()) {
                        c = input.head();
                        if (Base16.isDigit(c)) {
                            input = input.step();
                            code = 16 * code + Base16.decodeDigit(c);
                            if (step <= 6) {
                                step += 1;
                                continue;
                            }
                            else {
                                output.write(code);
                                code = 0;
                                step = 2;
                                continue string;
                            }
                        }
                        else {
                            return Parser.error(Diagnostic.expected("hex digit", input));
                        }
                    }
                    else if (input.isDone()) {
                        return Parser.error(Diagnostic.expected("hex digit", input));
                    }
                    break;
                } while (true);
            }
            break;
        } while (true);
        return new StringParser(recon, output, quote, code, step);
    };
    return StringParser;
}(Parser));
export { StringParser };
//# sourceMappingURL=StringParser.js.map