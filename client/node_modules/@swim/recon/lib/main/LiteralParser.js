import { __extends } from "tslib";
import { Parser, Diagnostic } from "@swim/codec";
import { Recon } from "./Recon";
var LiteralParser = (function (_super) {
    __extends(LiteralParser, _super);
    function LiteralParser(recon, builder, valueParser, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._builder = builder;
        _this._valueParser = valueParser;
        _this._step = step;
        return _this;
    }
    LiteralParser.prototype.feed = function (input) {
        return LiteralParser.parse(input, this._recon, this._builder, this._valueParser, this._step);
    };
    LiteralParser.parse = function (input, recon, builder, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                input = input.step();
            }
            if (input.isCont()) {
                if (c === 40) {
                    input = input.step();
                    step = 4;
                }
                else if (c === 123) {
                    builder = builder || recon.recordBuilder();
                    valueParser = recon.parseRecord(input, builder);
                    step = 3;
                }
                else if (c === 91) {
                    builder = builder || recon.recordBuilder();
                    valueParser = recon.parseMarkup(input, builder);
                    step = 3;
                }
                else if (Recon.isIdentStartChar(c)) {
                    valueParser = recon.parseIdent(input);
                    step = 2;
                }
                else if (c === 34 || c === 39) {
                    valueParser = recon.parseString(input);
                    step = 2;
                }
                else if (c === 45 || c >= 48 && c <= 57) {
                    valueParser = recon.parseNumber(input);
                    step = 2;
                }
                else if (c === 37) {
                    valueParser = recon.parseData(input);
                    step = 2;
                }
                else if (c === 36) {
                    valueParser = recon.parseSelector(input);
                    step = 2;
                }
                else if (!builder) {
                    return Parser.done(recon.extant());
                }
                else {
                    return Parser.done(builder.bind());
                }
            }
            else if (input.isDone()) {
                if (!builder) {
                    return Parser.done(recon.extant());
                }
                else {
                    return Parser.done(builder.bind());
                }
            }
        }
        if (step === 2) {
            while (valueParser.isCont() && !input.isEmpty()) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                builder = builder || recon.valueBuilder();
                builder.push(recon.item(valueParser.bind()));
                return Parser.done(builder.bind());
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 3) {
            while (valueParser.isCont() && !input.isEmpty()) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                return Parser.done(builder.bind());
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 4) {
            if (!valueParser) {
                valueParser = recon.parseBlockExpression(input);
            }
            while (valueParser.isCont() && !input.isEmpty()) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                step = 5;
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 5) {
            while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {
                input = input.step();
            }
            if (input.isCont()) {
                if (c === 41) {
                    input = input.step();
                    builder = builder || recon.valueBuilder();
                    builder.push(recon.item(valueParser.bind()));
                    return Parser.done(builder.bind());
                }
                else {
                    return Parser.error(Diagnostic.expected(41, input));
                }
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.expected(41, input));
            }
        }
        return new LiteralParser(recon, builder, valueParser, step);
    };
    return LiteralParser;
}(Parser));
export { LiteralParser };
//# sourceMappingURL=LiteralParser.js.map