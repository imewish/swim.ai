import { __extends } from "tslib";
import { Parser } from "@swim/codec";
import { Recon } from "./Recon";
var BlockItemParser = (function (_super) {
    __extends(BlockItemParser, _super);
    function BlockItemParser(recon, builder, fieldParser, valueParser, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._builder = builder;
        _this._fieldParser = fieldParser;
        _this._valueParser = valueParser;
        _this._step = step;
        return _this;
    }
    BlockItemParser.prototype.feed = function (input) {
        return BlockItemParser.parse(input, this._recon, this._builder, this._fieldParser, this._valueParser, this._step);
    };
    BlockItemParser.parse = function (input, recon, builder, fieldParser, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 64) {
                        fieldParser = recon.parseAttr(input);
                        step = 2;
                    }
                    else if (c === 123) {
                        builder = builder || recon.recordBuilder();
                        valueParser = recon.parseRecord(input, builder);
                        step = 5;
                    }
                    else if (c === 91) {
                        builder = builder || recon.recordBuilder();
                        valueParser = recon.parseMarkup(input, builder);
                        step = 5;
                    }
                    else if (Recon.isIdentStartChar(c)) {
                        valueParser = recon.parseIdent(input);
                        step = 4;
                    }
                    else if (c === 34 || c === 39) {
                        valueParser = recon.parseString(input);
                        step = 4;
                    }
                    else if (c === 45 || c >= 48 && c <= 57) {
                        valueParser = recon.parseNumber(input);
                        step = 4;
                    }
                    else if (c === 37) {
                        valueParser = recon.parseData(input);
                        step = 4;
                    }
                    else if (c === 36) {
                        valueParser = recon.parseSelector(input);
                        step = 4;
                    }
                    else if (!builder) {
                        return Parser.done(recon.extant());
                    }
                    else {
                        return Parser.done(builder.bind());
                    }
                }
                else if (input.isDone()) {
                    if (!builder) {
                        return Parser.done(recon.extant());
                    }
                    else {
                        return Parser.done(builder.bind());
                    }
                }
            }
            if (step === 2) {
                while (fieldParser.isCont() && !input.isEmpty()) {
                    fieldParser = fieldParser.feed(input);
                }
                if (fieldParser.isDone()) {
                    builder = builder || recon.valueBuilder();
                    builder.push(fieldParser.bind());
                    fieldParser = void 0;
                    step = 3;
                }
                else if (fieldParser.isError()) {
                    return fieldParser.asError();
                }
            }
            if (step === 3) {
                while (input.isCont() && Recon.isSpace(input.head())) {
                    input = input.step();
                }
                if (input.isCont()) {
                    step = 1;
                    continue;
                }
                else if (input.isDone()) {
                    return Parser.done(builder.bind());
                }
            }
            if (step === 4) {
                while (valueParser.isCont() && !input.isEmpty()) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    builder = builder || recon.valueBuilder();
                    builder.push(recon.item(valueParser.bind()));
                    valueParser = void 0;
                    step = 6;
                }
                else if (valueParser.isError()) {
                    return valueParser;
                }
            }
            if (step === 5) {
                while (valueParser.isCont() && !input.isEmpty()) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    valueParser = void 0;
                    step = 6;
                }
                else if (valueParser.isError()) {
                    return valueParser;
                }
            }
            if (step === 6) {
                while (input.isCont() && Recon.isSpace(input.head())) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (input.head() === 64) {
                        step = 1;
                    }
                    else {
                        return Parser.done(builder.bind());
                    }
                }
                else if (input.isDone()) {
                    return Parser.done(builder.bind());
                }
            }
            break;
        } while (true);
        return new BlockItemParser(recon, builder, fieldParser, valueParser, step);
    };
    return BlockItemParser;
}(Parser));
export { BlockItemParser };
//# sourceMappingURL=BlockItemParser.js.map