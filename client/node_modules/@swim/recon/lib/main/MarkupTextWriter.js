import { __extends } from "tslib";
import { WriterException, Writer, Utf8, Base16 } from "@swim/codec";
var MarkupTextWriter = (function (_super) {
    __extends(MarkupTextWriter, _super);
    function MarkupTextWriter(text, index, escape, step) {
        var _this = _super.call(this) || this;
        _this._text = text;
        _this._index = index;
        _this._escape = escape;
        _this._step = step;
        return _this;
    }
    MarkupTextWriter.prototype.pull = function (output) {
        return MarkupTextWriter.write(output, this._text, this._index, this._escape, this._step);
    };
    MarkupTextWriter.sizeOf = function (text) {
        var size = 0;
        for (var i = 0, n = text.length; i < n; i = text.offsetByCodePoints(i, 1)) {
            var c = text.codePointAt(i);
            if (c === void 0) {
                c = text.charCodeAt(i);
            }
            if (c === 36 || c === 64 || c === 91 || c === 92
                || c === 93 || c === 123 || c === 125 || c === 8
                || c === 12 || c === 10 || c === 13 || c === 9) {
                size += 2;
            }
            else if (c < 0x20) {
                size += 6;
            }
            else {
                size += Utf8.sizeOf(c);
            }
        }
        return size;
    };
    MarkupTextWriter.write = function (output, text, index, escape, step) {
        if (index === void 0) { index = 0; }
        if (escape === void 0) { escape = 0; }
        if (step === void 0) { step = 1; }
        var length = text.length;
        while (output.isCont()) {
            if (step === 1) {
                if (index < length) {
                    var c = text.codePointAt(index);
                    if (c === void 0) {
                        c = text.charCodeAt(index);
                    }
                    index = text.offsetByCodePoints(index, 1);
                    if (c === 36 || c === 64 || c === 91 || c === 92
                        || c === 93 || c === 123 || c === 125) {
                        output = output.write(92);
                        escape = c;
                        step = 2;
                    }
                    else if (c === 8) {
                        output = output.write(92);
                        escape = 98;
                        step = 2;
                    }
                    else if (c === 12) {
                        output = output.write(92);
                        escape = 102;
                        step = 2;
                    }
                    else if (c === 10) {
                        output = output.write(92);
                        escape = 110;
                        step = 2;
                    }
                    else if (c === 13) {
                        output = output.write(92);
                        escape = 114;
                        step = 2;
                    }
                    else if (c === 9) {
                        output = output.write(92);
                        escape = 116;
                        step = 2;
                    }
                    else if (c < 0x20) {
                        output = output.write(92);
                        escape = c;
                        step = 3;
                    }
                    else {
                        output = output.write(c);
                    }
                }
                else {
                    return Writer.done();
                }
            }
            else if (step === 2) {
                output = output.write(escape);
                escape = 0;
                step = 1;
            }
            else if (step === 3) {
                output = output.write(117);
                step = 4;
            }
            else if (step === 4) {
                output = output.write(Base16.uppercase().encodeDigit((escape >>> 12) & 0xf));
                step = 5;
            }
            else if (step === 5) {
                output = output.write(Base16.uppercase().encodeDigit((escape >>> 8) & 0xf));
                step = 6;
            }
            else if (step === 6) {
                output = output.write(Base16.uppercase().encodeDigit((escape >>> 4) & 0xf));
                step = 7;
            }
            else if (step === 7) {
                output = output.write(Base16.uppercase().encodeDigit(escape & 0xf));
                escape = 0;
                step = 1;
            }
        }
        if (output.isDone()) {
            return Writer.error(new WriterException("truncated"));
        }
        else if (output.isError()) {
            return Writer.error(output.trap());
        }
        return new MarkupTextWriter(text, index, escape, step);
    };
    return MarkupTextWriter;
}(Writer));
export { MarkupTextWriter };
//# sourceMappingURL=MarkupTextWriter.js.map