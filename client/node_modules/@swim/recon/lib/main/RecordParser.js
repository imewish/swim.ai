import { __extends } from "tslib";
import { Parser, Diagnostic } from "@swim/codec";
import { Recon } from "./Recon";
var RecordParser = (function (_super) {
    __extends(RecordParser, _super);
    function RecordParser(recon, builder, keyParser, valueParser, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._builder = builder;
        _this._keyParser = keyParser;
        _this._valueParser = valueParser;
        _this._step = step;
        return _this;
    }
    RecordParser.prototype.feed = function (input) {
        return RecordParser.parse(input, this._recon, this._builder, this._keyParser, this._valueParser, this._step);
    };
    RecordParser.parse = function (input, recon, builder, keyParser, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (input.isCont()) {
                c = input.head();
                if (c === 123) {
                    input = input.step();
                    step = 2;
                }
                else {
                    return Parser.error(Diagnostic.expected(123, input));
                }
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.expected(123, input));
            }
        }
        block: do {
            if (step === 2) {
                while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    builder = builder || recon.recordBuilder();
                    if (c === 125) {
                        input = input.step();
                        return Parser.done(builder.bind());
                    }
                    else if (c === 35) {
                        input = input.step();
                        step = 8;
                    }
                    else {
                        step = 3;
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected(125, input));
                }
            }
            if (step === 3) {
                if (!keyParser) {
                    keyParser = recon.parseBlockExpression(input);
                }
                while (keyParser.isCont() && !input.isEmpty()) {
                    keyParser = keyParser.feed(input);
                }
                if (keyParser.isDone()) {
                    step = 4;
                }
                else if (keyParser.isError()) {
                    return keyParser;
                }
            }
            if (step === 4) {
                while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 58) {
                        input = input.step();
                        step = 5;
                    }
                    else {
                        builder.push(recon.item(keyParser.bind()));
                        keyParser = void 0;
                        step = 7;
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected(125, input));
                }
            }
            if (step === 5) {
                while (input.isCont() && Recon.isSpace(input.head())) {
                    input = input.step();
                }
                if (input.isCont()) {
                    step = 6;
                }
                else if (input.isDone()) {
                    builder.push(recon.slot(keyParser.bind()));
                    return Parser.done(builder.bind());
                }
            }
            if (step === 6) {
                if (!valueParser) {
                    valueParser = recon.parseBlockExpression(input);
                }
                while (valueParser.isCont() && !input.isEmpty()) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    builder.push(recon.slot(keyParser.bind(), valueParser.bind()));
                    keyParser = void 0;
                    valueParser = void 0;
                    step = 7;
                }
                else if (valueParser.isError()) {
                    return valueParser;
                }
            }
            if (step === 7) {
                while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 44 || c === 59 || Recon.isNewline(c)) {
                        input = input.step();
                        step = 2;
                        continue;
                    }
                    else if (c === 35) {
                        input = input.step();
                        step = 8;
                    }
                    else if (c === 125) {
                        input = input.step();
                        return Parser.done(builder.bind());
                    }
                    else {
                        return Parser.error(Diagnostic.expected("'}', ';', ',', or newline", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected(125, input));
                }
            }
            if (step === 8) {
                while (input.isCont()) {
                    c = input.head();
                    if (!Recon.isNewline(c)) {
                        input = input.step();
                    }
                    else {
                        step = 2;
                        continue block;
                    }
                }
                if (input.isDone()) {
                    step = 2;
                    continue;
                }
            }
            break;
        } while (true);
        return new RecordParser(recon, builder, keyParser, valueParser, step);
    };
    return RecordParser;
}(Parser));
export { RecordParser };
//# sourceMappingURL=RecordParser.js.map