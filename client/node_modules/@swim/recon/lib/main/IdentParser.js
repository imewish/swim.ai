import { __extends } from "tslib";
import { Parser, Diagnostic } from "@swim/codec";
import { Recon } from "./Recon";
var IdentParser = (function (_super) {
    __extends(IdentParser, _super);
    function IdentParser(recon, output, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._output = output;
        _this._step = step;
        return _this;
    }
    IdentParser.prototype.feed = function (input) {
        return IdentParser.parse(input, this._recon, this._output, this._step);
    };
    IdentParser.parse = function (input, recon, output, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (input.isCont()) {
                c = input.head();
                if (Recon.isIdentStartChar(c)) {
                    input = input.step();
                    output = output || recon.textOutput();
                    output = output.write(c);
                    step = 2;
                }
                else {
                    return Parser.error(Diagnostic.expected("identifier", input));
                }
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.expected("identifier", input));
            }
        }
        if (step === 2) {
            while (input.isCont() && (c = input.head(), Recon.isIdentChar(c))) {
                input = input.step();
                output.write(c);
            }
            if (!input.isEmpty()) {
                return Parser.done(recon.ident(output.bind()));
            }
        }
        return new IdentParser(recon, output, step);
    };
    return IdentParser;
}(Parser));
export { IdentParser };
//# sourceMappingURL=IdentParser.js.map