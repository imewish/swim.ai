import { __extends } from "tslib";
import { WriterException, Writer } from "@swim/codec";
var GetSelectorWriter = (function (_super) {
    __extends(GetSelectorWriter, _super);
    function GetSelectorWriter(recon, key, then, part, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._key = key;
        _this._then = then;
        _this._part = part;
        _this._step = step;
        return _this;
    }
    GetSelectorWriter.prototype.pull = function (output) {
        return GetSelectorWriter.write(output, this._recon, this._key, this._then, this._part, this._step);
    };
    GetSelectorWriter.sizeOf = function (recon, key, then) {
        var size = 1;
        if (recon.isRecord(recon.item(key))) {
            size += 1;
            size += recon.sizeOfBlockValue(key);
            size += 1;
        }
        else {
            size += recon.sizeOfValue(key);
        }
        size += recon.sizeOfThen(then);
        return size;
    };
    GetSelectorWriter.write = function (output, recon, key, then, part, step) {
        if (step === void 0) { step = 1; }
        if (step === 1 && output.isCont()) {
            output = output.write(36);
            step = 3;
        }
        else if (step === 2 && output.isCont()) {
            output = output.write(46);
            step = 3;
        }
        if (step === 3) {
            if (recon.isRecord(recon.item(key))) {
                if (output.isCont()) {
                    output = output.write(123);
                    step = 4;
                }
            }
            else {
                step = 4;
            }
        }
        if (step === 4) {
            if (!part) {
                if (recon.isRecord(recon.item(key))) {
                    part = recon.writeBlockValue(key, output);
                }
                else {
                    part = recon.writeValue(key, output);
                }
            }
            else {
                part = part.pull(output);
            }
            if (part.isDone()) {
                part = void 0;
                step = 5;
            }
            else if (part.isError()) {
                return part.asError();
            }
        }
        if (step === 5) {
            if (recon.isRecord(recon.item(key))) {
                if (output.isCont()) {
                    output = output.write(125);
                    step = 6;
                }
            }
            else {
                step = 6;
            }
        }
        if (step === 6) {
            return recon.writeThen(then, output);
        }
        if (output.isDone()) {
            return Writer.error(new WriterException("truncated"));
        }
        else if (output.isError()) {
            return Writer.error(output.trap());
        }
        return new GetSelectorWriter(recon, key, then, part, step);
    };
    GetSelectorWriter.writeThen = function (output, recon, key, then) {
        return GetSelectorWriter.write(output, recon, key, then, void 0, 2);
    };
    return GetSelectorWriter;
}(Writer));
export { GetSelectorWriter };
//# sourceMappingURL=GetSelectorWriter.js.map