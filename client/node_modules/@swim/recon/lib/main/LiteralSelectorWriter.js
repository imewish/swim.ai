import { __extends } from "tslib";
import { WriterException, Writer } from "@swim/codec";
var LiteralSelectorWriter = (function (_super) {
    __extends(LiteralSelectorWriter, _super);
    function LiteralSelectorWriter(recon, item, then, part, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._item = item;
        _this._then = then;
        _this._part = part;
        _this._step = step;
        return _this;
    }
    LiteralSelectorWriter.prototype.pull = function (output) {
        return LiteralSelectorWriter.write(output, this._recon, this._item, this._then, this._part, this._step);
    };
    LiteralSelectorWriter.sizeOf = function (recon, item, then) {
        var size = 0;
        if (recon.precedence(item) < recon.precedence(recon.item(then))) {
            size += 1;
            size += recon.sizeOfItem(item);
            size += 1;
        }
        else {
            size += recon.sizeOfItem(item);
        }
        size += recon.sizeOfThen(then);
        return size;
    };
    LiteralSelectorWriter.write = function (output, recon, item, then, part, step) {
        if (step === void 0) { step = 1; }
        if (step === 1) {
            if (recon.precedence(item) < recon.precedence(recon.item(then))) {
                if (output.isCont()) {
                    output = output.write(40);
                    step = 2;
                }
            }
            else {
                step = 2;
            }
        }
        if (step === 2) {
            if (!part) {
                part = recon.writeItem(item, output);
            }
            else {
                part = part.pull(output);
            }
            if (part.isDone()) {
                part = void 0;
                step = 3;
            }
            else if (part.isError()) {
                return part.asError();
            }
        }
        if (step === 3) {
            if (recon.precedence(item) < recon.precedence(recon.item(then))) {
                if (output.isCont()) {
                    output = output.write(41);
                    step = 4;
                }
            }
            else {
                step = 4;
            }
        }
        if (step === 4) {
            return recon.writeThen(then, output);
        }
        if (output.isDone()) {
            return Writer.error(new WriterException("truncated"));
        }
        else if (output.isError()) {
            return Writer.error(output.trap());
        }
        return new LiteralSelectorWriter(recon, item, then, part, step);
    };
    return LiteralSelectorWriter;
}(Writer));
export { LiteralSelectorWriter };
//# sourceMappingURL=LiteralSelectorWriter.js.map