import { Cursor } from "@swim/util";
import { Output, Writer } from "@swim/codec";
import { ReconWriter } from "./ReconWriter";
export declare class BlockWriter<I, V> extends Writer {
    private readonly _recon;
    private readonly _items;
    private readonly _inBlock;
    private readonly _inMarkup;
    private readonly _inBraces;
    private readonly _inBrackets;
    private readonly _first;
    private readonly _markupSafe;
    private readonly _item;
    private readonly _next;
    private readonly _part;
    private readonly _step;
    constructor(recon: ReconWriter<I, V>, items: Cursor<I>, inBlock: boolean, inMarkup: boolean, inBraces?: boolean, inBrackets?: boolean, first?: boolean, markupSafe?: boolean, item?: I, next?: I, part?: Writer, step?: number);
    pull(output: Output): Writer;
    static sizeOf<I, V>(recon: ReconWriter<I, V>, items: Cursor<I>, inBlock: boolean, inMarkup: boolean): number;
    static sizeOfBlockItem<I, V>(recon: ReconWriter<I, V>, item: I): number;
    static write<I, V>(output: Output, recon: ReconWriter<I, V>, items: Cursor<I>, inBlock: boolean, inMarkup: boolean, inBraces?: boolean, inBrackets?: boolean, first?: boolean, markupSafe?: boolean, item?: I, next?: I, part?: Writer, step?: number): Writer;
    static writeBlockItem<I, V>(output: Output, recon: ReconWriter<I, V>, item: I): Writer;
}
//# sourceMappingURL=BlockWriter.d.ts.map