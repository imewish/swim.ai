import { __extends } from "tslib";
import { WriterException, Writer } from "@swim/codec";
var BlockWriter = (function (_super) {
    __extends(BlockWriter, _super);
    function BlockWriter(recon, items, inBlock, inMarkup, inBraces, inBrackets, first, markupSafe, item, next, part, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._items = items;
        _this._inBlock = inBlock;
        _this._inMarkup = inMarkup;
        _this._inBraces = inBraces;
        _this._inBrackets = inBrackets;
        _this._first = first;
        _this._markupSafe = markupSafe;
        _this._item = item;
        _this._next = next;
        _this._part = part;
        _this._step = step;
        return _this;
    }
    BlockWriter.prototype.pull = function (output) {
        return BlockWriter.write(output, this._recon, this._items, this._inBlock, this._inMarkup, this._inBraces, this._inBrackets, this._first, this._markupSafe, this._item, this._next, this._part, this._step);
    };
    BlockWriter.sizeOf = function (recon, items, inBlock, inMarkup) {
        var size = 0;
        var inBraces = false;
        var inBrackets = false;
        var first = true;
        var markupSafe = true;
        var next;
        while (next || items.hasNext()) {
            var item = void 0;
            if (!next) {
                item = items.next().value;
            }
            else {
                item = next;
                next = void 0;
            }
            if (items.hasNext()) {
                next = items.next().value;
            }
            if (recon.isExpression(item)) {
                markupSafe = false;
            }
            if (inBrackets && recon.isAttr(item)) {
                if (inBraces) {
                    size += 1;
                    inBraces = false;
                }
                size += 1;
                inBrackets = false;
            }
            if (recon.isAttr(item)) {
                if (inBraces) {
                    size += 1;
                    inBraces = false;
                }
                else if (inBrackets) {
                    size += 1;
                    inBrackets = false;
                }
                size += recon.sizeOfItem(item);
                first = false;
            }
            else if (inBrackets && recon.isText(item)) {
                if (inBraces) {
                    size += 1;
                    inBraces = false;
                }
                size += recon.sizeOfMarkupText(item);
            }
            else if (inBraces) {
                if (!first) {
                    size += 1;
                }
                else {
                    first = false;
                }
                size += BlockWriter.sizeOfBlockItem(recon, item);
            }
            else if (inBrackets) {
                if (recon.isRecord(item) && recon.isMarkupSafe(recon.items(item))) {
                    size += recon.sizeOfBlock(recon.items(item), false, true);
                    if (next && recon.isText(next)) {
                        size += recon.sizeOfMarkupText(next);
                        next = void 0;
                    }
                    else if (next && !recon.isAttr(next)) {
                        size += 1;
                        inBraces = true;
                        first = true;
                    }
                    else {
                        size += 1;
                        inBrackets = false;
                    }
                }
                else {
                    size += 1;
                    size += recon.sizeOfItem(item);
                    inBraces = true;
                    first = false;
                }
            }
            else if (markupSafe && recon.isText(item) && next && !recon.isField(next)
                && !recon.isText(next) && !recon.isBool(next)) {
                size += 1;
                size += recon.sizeOfMarkupText(item);
                inBrackets = true;
            }
            else if (inBlock && !inBraces) {
                if (!first) {
                    size += 1;
                }
                else {
                    first = false;
                }
                size += BlockWriter.sizeOfBlockItem(recon, item);
            }
            else if (inMarkup && recon.isText(item) && !next) {
                size += 1;
                size += recon.sizeOfMarkupText(item);
                size += 1;
            }
            else if (!inMarkup && recon.isValue(item) && !recon.isRecord(item)
                && (!first && !next || next && recon.isAttr(next))) {
                if (!first && (recon.isText(item) && recon.isIdent(item)
                    || recon.isNum(item) || recon.isBool(item))) {
                    size += 1;
                }
                size += recon.sizeOfItem(item);
            }
            else {
                size += 1;
                size += recon.sizeOfItem(item);
                inBraces = true;
                first = false;
            }
        }
        if (inBraces) {
            size += 1;
        }
        if (inBrackets) {
            size += 1;
        }
        return size;
    };
    BlockWriter.sizeOfBlockItem = function (recon, item) {
        var size = 0;
        if (recon.isField(item)) {
            size += recon.sizeOfSlot(recon.key(item), recon.value(item));
        }
        else {
            size += recon.sizeOfItem(item);
        }
        return size;
    };
    BlockWriter.write = function (output, recon, items, inBlock, inMarkup, inBraces, inBrackets, first, markupSafe, item, next, part, step) {
        if (inBraces === void 0) { inBraces = false; }
        if (inBrackets === void 0) { inBrackets = false; }
        if (first === void 0) { first = true; }
        if (markupSafe === void 0) { markupSafe = true; }
        if (step === void 0) { step = 1; }
        do {
            if (step === 1) {
                if (!next && !items.hasNext()) {
                    step = 10;
                    break;
                }
                else {
                    if (!next) {
                        item = items.next().value;
                    }
                    else {
                        item = next;
                        next = void 0;
                    }
                    if (items.hasNext()) {
                        next = items.next().value;
                    }
                    if (recon.isExpression(item)) {
                        markupSafe = false;
                    }
                    step = 2;
                }
            }
            if (step === 2 && output.isCont()) {
                if (inBrackets && recon.isAttr(item)) {
                    if (inBraces) {
                        output = output.write(125);
                        inBraces = false;
                    }
                    step = 3;
                }
                else {
                    step = 4;
                }
            }
            if (step === 3 && output.isCont()) {
                output = output.write(93);
                inBrackets = false;
                step = 4;
            }
            if (step === 4 && output.isCont()) {
                if (recon.isAttr(item)) {
                    if (inBraces) {
                        output = output.write(125);
                        inBraces = false;
                    }
                    else if (inBrackets) {
                        output = output.write(93);
                        inBrackets = false;
                    }
                    part = recon.writeItem(item, output);
                    first = false;
                    step = 7;
                }
                else if (inBrackets && recon.isText(item)) {
                    if (inBraces) {
                        output = output.write(125);
                        inBraces = false;
                    }
                    part = recon.writeMarkupText(item, output);
                    step = 7;
                }
                else if (inBraces) {
                    if (!first) {
                        output = output.write(44);
                    }
                    else {
                        first = false;
                    }
                    part = BlockWriter.writeBlockItem(output, recon, item);
                    step = 7;
                }
                else if (inBrackets) {
                    if (recon.isRecord(item) && recon.isMarkupSafe(recon.items(item))) {
                        part = recon.writeBlock(recon.items(item), output, false, true);
                        step = 5;
                    }
                    else {
                        output = output.write(123);
                        part = recon.writeItem(item, output);
                        inBraces = true;
                        first = false;
                        step = 7;
                    }
                }
                else if (markupSafe && recon.isText(item) && next && !recon.isField(next)
                    && !recon.isText(next) && !recon.isBool(next)) {
                    output = output.write(91);
                    part = recon.writeMarkupText(item, output);
                    inBrackets = true;
                    step = 7;
                }
                else if (inBlock && !inBraces) {
                    if (!first) {
                        output = output.write(44);
                    }
                    else {
                        first = false;
                    }
                    part = BlockWriter.writeBlockItem(output, recon, item);
                    step = 7;
                }
                else if (inMarkup && recon.isText(item) && !next) {
                    output = output.write(91);
                    part = recon.writeMarkupText(item, output);
                    step = 8;
                }
                else if (!inMarkup && recon.isValue(item) && !recon.isRecord(item)
                    && (!first && !next || next && recon.isAttr(next))) {
                    if (!first && (recon.isText(item) && recon.isIdent(item)
                        || recon.isNum(item) || recon.isBool(item))) {
                        output = output.write(32);
                    }
                    part = recon.writeItem(item, output);
                    step = 7;
                }
                else {
                    output = output.write(123);
                    part = recon.writeItem(item, output);
                    inBraces = true;
                    first = false;
                    step = 7;
                }
            }
            if (step === 5) {
                part = part.pull(output);
                if (part.isDone()) {
                    part = void 0;
                    step = 6;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 6 && output.isCont()) {
                if (next && recon.isText(next)) {
                    part = recon.writeMarkupText(next, output);
                    next = void 0;
                    step = 7;
                }
                else if (next && !recon.isAttr(next)) {
                    output = output.write(123);
                    inBraces = true;
                    first = true;
                    step = 1;
                    continue;
                }
                else {
                    output = output.write(93);
                    inBrackets = false;
                    step = 1;
                    continue;
                }
            }
            if (step === 7) {
                part = part.pull(output);
                if (part.isDone()) {
                    part = void 0;
                    step = 1;
                    continue;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 8) {
                part = part.pull(output);
                if (part.isDone()) {
                    part = void 0;
                    step = 9;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            if (step === 9 && output.isCont()) {
                output = output.write(93);
                step = 1;
                continue;
            }
            break;
        } while (true);
        if (step === 10) {
            if (inBraces) {
                if (output.isCont()) {
                    output = output.write(125);
                    step = 11;
                }
            }
            else {
                step = 11;
            }
        }
        if (step === 11) {
            if (inBrackets) {
                if (output.isCont()) {
                    output = output.write(93);
                    return Writer.done();
                }
            }
            else {
                return Writer.done();
            }
        }
        if (output.isDone()) {
            return Writer.error(new WriterException("truncated"));
        }
        else if (output.isError()) {
            return Writer.error(output.trap());
        }
        return new BlockWriter(recon, items, inBlock, inMarkup, inBraces, inBrackets, first, markupSafe, item, next, part, step);
    };
    BlockWriter.writeBlockItem = function (output, recon, item) {
        if (recon.isField(item)) {
            return recon.writeSlot(recon.key(item), recon.value(item), output);
        }
        else {
            return recon.writeItem(item, output);
        }
    };
    return BlockWriter;
}(Writer));
export { BlockWriter };
//# sourceMappingURL=BlockWriter.js.map