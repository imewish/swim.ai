import { Writer, Unicode, Base10, Base16 } from "@swim/codec";
import { Recon } from "./Recon";
import { AttrWriter } from "./AttrWriter";
import { SlotWriter } from "./SlotWriter";
import { BlockWriter } from "./BlockWriter";
import { PrimaryWriter } from "./PrimaryWriter";
import { MarkupTextWriter } from "./MarkupTextWriter";
import { DataWriter } from "./DataWriter";
import { IdentWriter } from "./IdentWriter";
import { StringWriter } from "./StringWriter";
import { LambdaFuncWriter } from "./LambdaFuncWriter";
import { ConditionalOperatorWriter } from "./ConditionalOperatorWriter";
import { InfixOperatorWriter } from "./InfixOperatorWriter";
import { PrefixOperatorWriter } from "./PrefixOperatorWriter";
import { InvokeOperatorWriter } from "./InvokeOperatorWriter";
import { LiteralSelectorWriter } from "./LiteralSelectorWriter";
import { GetSelectorWriter } from "./GetSelectorWriter";
import { GetAttrSelectorWriter } from "./GetAttrSelectorWriter";
import { GetItemSelectorWriter } from "./GetItemSelectorWriter";
import { KeysSelectorWriter } from "./KeysSelectorWriter";
import { ValuesSelectorWriter } from "./ValuesSelectorWriter";
import { ChildrenSelectorWriter } from "./ChildrenSelectorWriter";
import { DescendantsSelectorWriter } from "./DescendantsSelectorWriter";
import { FilterSelectorWriter } from "./FilterSelectorWriter";
var ReconWriter = (function () {
    function ReconWriter() {
    }
    ReconWriter.prototype.sizeOfAttr = function (key, value) {
        return AttrWriter.sizeOf(this, key, value);
    };
    ReconWriter.prototype.writeAttr = function (key, value, output) {
        return AttrWriter.write(output, this, key, value);
    };
    ReconWriter.prototype.sizeOfSlot = function (key, value) {
        return SlotWriter.sizeOf(this, key, value);
    };
    ReconWriter.prototype.writeSlot = function (key, value, output) {
        return SlotWriter.write(output, this, key, value);
    };
    ReconWriter.prototype.sizeOfBlock = function (item, inBlock, inMarkup) {
        if (arguments.length === 3) {
            return BlockWriter.sizeOf(this, item, inBlock, inMarkup);
        }
        else {
            var items = this.items(item);
            if (items.hasNext()) {
                return BlockWriter.sizeOf(this, items, this.isBlockSafe(this.items(item)), false);
            }
            else {
                return 2;
            }
        }
    };
    ReconWriter.prototype.writeBlock = function (item, output, inBlock, inMarkup) {
        if (arguments.length === 4) {
            return BlockWriter.write(output, this, item, inBlock, inMarkup);
        }
        else {
            var items = this.items(item);
            if (items.hasNext()) {
                return BlockWriter.write(output, this, items, this.isBlockSafe(this.items(item)), false);
            }
            else {
                return Unicode.writeString("{}", output);
            }
        }
    };
    ReconWriter.prototype.sizeOfRecord = function (item) {
        var items = this.items(item);
        if (items.hasNext()) {
            return BlockWriter.sizeOf(this, items, false, false);
        }
        else {
            return 2;
        }
    };
    ReconWriter.prototype.writeRecord = function (item, output) {
        var items = this.items(item);
        if (items.hasNext()) {
            return BlockWriter.write(output, this, items, false, false);
        }
        else {
            return Unicode.writeString("{}", output);
        }
    };
    ReconWriter.prototype.sizeOfPrimary = function (value) {
        if (this.isRecord(this.item(value))) {
            var items = this.items(this.item(value));
            if (items.hasNext()) {
                return PrimaryWriter.sizeOf(this, items);
            }
        }
        else if (!this.isExtant(this.item(value))) {
            return this.sizeOfValue(value);
        }
        return 2;
    };
    ReconWriter.prototype.writePrimary = function (value, output) {
        if (this.isRecord(this.item(value))) {
            var items = this.items(this.item(value));
            if (items.hasNext()) {
                return PrimaryWriter.write(output, this, items);
            }
        }
        else if (!this.isExtant(this.item(value))) {
            return this.writeValue(value, output);
        }
        return Unicode.writeString("()", output);
    };
    ReconWriter.prototype.isBlockSafe = function (items) {
        while (items.hasNext()) {
            if (this.isAttr(items.next().value)) {
                return false;
            }
        }
        return true;
    };
    ReconWriter.prototype.isMarkupSafe = function (items) {
        if (!items.hasNext() || !this.isAttr(items.next().value)) {
            return false;
        }
        while (items.hasNext()) {
            if (this.isAttr(items.next().value)) {
                return false;
            }
        }
        return true;
    };
    ReconWriter.prototype.sizeOfMarkupText = function (item) {
        if (typeof item !== "string") {
            item = this.string(item);
        }
        return MarkupTextWriter.sizeOf(item);
    };
    ReconWriter.prototype.writeMarkupText = function (item, output) {
        if (typeof item !== "string") {
            item = this.string(item);
        }
        return MarkupTextWriter.write(output, item);
    };
    ReconWriter.prototype.sizeOfData = function (length) {
        return DataWriter.sizeOf(length);
    };
    ReconWriter.prototype.writeData = function (value, output) {
        if (value) {
            return DataWriter.write(output, value);
        }
        else {
            return Unicode.writeString("%", output);
        }
    };
    ReconWriter.prototype.isIdent = function (value) {
        if (typeof value !== "string") {
            value = this.string(value);
        }
        var n = value.length;
        var c;
        if (n === 0 || (c = value.codePointAt(0), c !== void 0 && !Recon.isIdentStartChar(c))) {
            return false;
        }
        for (var i = value.offsetByCodePoints(0, 1); i < n; i = value.offsetByCodePoints(i, 1)) {
            c = value.codePointAt(i);
            if (c === void 0 || !Recon.isIdentChar(c)) {
                return false;
            }
        }
        return true;
    };
    ReconWriter.prototype.sizeOfText = function (value) {
        if (this.isIdent(value)) {
            return IdentWriter.sizeOf(value);
        }
        else {
            return StringWriter.sizeOf(value);
        }
    };
    ReconWriter.prototype.writeText = function (value, output) {
        if (this.isIdent(value)) {
            return IdentWriter.write(output, value);
        }
        else {
            return StringWriter.write(output, value);
        }
    };
    ReconWriter.prototype.sizeOfNum = function (value) {
        if (isFinite(value) && Math.floor(value) === value && Math.abs(value) < 2147483648) {
            var size = Base10.countDigits(value);
            if (value < 0) {
                size += 1;
            }
            return size;
        }
        else {
            return ("" + value).length;
        }
    };
    ReconWriter.prototype.writeNum = function (value, output) {
        if (isFinite(value) && Math.floor(value) === value && Math.abs(value) < 2147483648) {
            return Base10.writeInteger(value, output);
        }
        else {
            return Unicode.writeString("" + value, output);
        }
    };
    ReconWriter.prototype.sizeOfUint32 = function (value) {
        return 10;
    };
    ReconWriter.prototype.writeUint32 = function (value, output) {
        return Base16.lowercase().writeIntegerLiteral(value, output, 8);
    };
    ReconWriter.prototype.sizeOfUint64 = function (value) {
        return 18;
    };
    ReconWriter.prototype.writeUint64 = function (value, output) {
        return Base16.lowercase().writeIntegerLiteral(value, output, 16);
    };
    ReconWriter.prototype.sizeOfBool = function (value) {
        return value ? 4 : 5;
    };
    ReconWriter.prototype.writeBool = function (value, output) {
        return Unicode.writeString(value ? "true" : "false", output);
    };
    ReconWriter.prototype.sizeOfLambdaFunc = function (bindings, template) {
        return LambdaFuncWriter.sizeOf(this, bindings, template);
    };
    ReconWriter.prototype.writeLambdaFunc = function (bindings, template, output) {
        return LambdaFuncWriter.write(output, this, bindings, template);
    };
    ReconWriter.prototype.sizeOfConditionalOperator = function (ifTerm, thenTerm, elseTerm, precedence) {
        return ConditionalOperatorWriter.sizeOf(this, ifTerm, thenTerm, elseTerm, precedence);
    };
    ReconWriter.prototype.writeConditionalOperator = function (ifTerm, thenTerm, elseTerm, precedence, output) {
        return ConditionalOperatorWriter.write(output, this, ifTerm, thenTerm, elseTerm, precedence);
    };
    ReconWriter.prototype.sizeOfInfixOperator = function (lhs, operator, rhs, precedence) {
        return InfixOperatorWriter.sizeOf(this, lhs, operator, rhs, precedence);
    };
    ReconWriter.prototype.writeInfixOperator = function (lhs, operator, rhs, precedence, output) {
        return InfixOperatorWriter.write(output, this, lhs, operator, rhs, precedence);
    };
    ReconWriter.prototype.sizeOfPrefixOperator = function (operator, rhs, precedence) {
        return PrefixOperatorWriter.sizeOf(this, operator, rhs, precedence);
    };
    ReconWriter.prototype.writePrefixOperator = function (operator, rhs, precedence, output) {
        return PrefixOperatorWriter.write(output, this, operator, rhs, precedence);
    };
    ReconWriter.prototype.sizeOfInvokeOperator = function (func, args) {
        return InvokeOperatorWriter.sizeOf(this, func, args);
    };
    ReconWriter.prototype.writeInvokeOperator = function (func, args, output) {
        return InvokeOperatorWriter.write(output, this, func, args);
    };
    ReconWriter.prototype.sizeOfIdentitySelector = function () {
        return 0;
    };
    ReconWriter.prototype.writeIdentitySelector = function (output) {
        return Writer.done();
    };
    ReconWriter.prototype.sizeOfThenIdentitySelector = function () {
        return 0;
    };
    ReconWriter.prototype.writeThenIdentitySelector = function (output) {
        return Writer.done();
    };
    ReconWriter.prototype.sizeOfLiteralSelector = function (item, then) {
        return LiteralSelectorWriter.sizeOf(this, item, then);
    };
    ReconWriter.prototype.writeLiteralSelector = function (item, then, output) {
        return LiteralSelectorWriter.write(output, this, item, then);
    };
    ReconWriter.prototype.sizeOfThenLiteralSelector = function (item, then) {
        return 0;
    };
    ReconWriter.prototype.writeThenLiteralSelector = function (item, then, output) {
        return Writer.done();
    };
    ReconWriter.prototype.sizeOfGetSelector = function (key, then) {
        return GetSelectorWriter.sizeOf(this, key, then);
    };
    ReconWriter.prototype.writeGetSelector = function (key, then, output) {
        return GetSelectorWriter.write(output, this, key, then);
    };
    ReconWriter.prototype.sizeOfThenGetSelector = function (key, then) {
        return GetSelectorWriter.sizeOf(this, key, then);
    };
    ReconWriter.prototype.writeThenGetSelector = function (key, then, output) {
        return GetSelectorWriter.writeThen(output, this, key, then);
    };
    ReconWriter.prototype.sizeOfGetAttrSelector = function (key, then) {
        return GetAttrSelectorWriter.sizeOf(this, key, then);
    };
    ReconWriter.prototype.writeGetAttrSelector = function (key, then, output) {
        return GetAttrSelectorWriter.write(output, this, key, then);
    };
    ReconWriter.prototype.sizeOfThenGetAttrSelector = function (key, then) {
        return GetAttrSelectorWriter.sizeOf(this, key, then);
    };
    ReconWriter.prototype.writeThenGetAttrSelector = function (key, then, output) {
        return GetAttrSelectorWriter.writeThen(output, this, key, then);
    };
    ReconWriter.prototype.sizeOfGetItemSelector = function (index, then) {
        return GetItemSelectorWriter.sizeOf(this, index, then);
    };
    ReconWriter.prototype.writeGetItemSelector = function (index, then, output) {
        return GetItemSelectorWriter.write(output, this, index, then);
    };
    ReconWriter.prototype.sizeOfThenGetItemSelector = function (index, then) {
        return GetItemSelectorWriter.sizeOfThen(this, index, then);
    };
    ReconWriter.prototype.writeThenGetItemSelector = function (index, then, output) {
        return GetItemSelectorWriter.writeThen(output, this, index, then);
    };
    ReconWriter.prototype.sizeOfKeysSelector = function (then) {
        return KeysSelectorWriter.sizeOf(this, then);
    };
    ReconWriter.prototype.writeKeysSelector = function (then, output) {
        return KeysSelectorWriter.write(output, this, then);
    };
    ReconWriter.prototype.sizeOfThenKeysSelector = function (then) {
        return KeysSelectorWriter.sizeOf(this, then);
    };
    ReconWriter.prototype.writeThenKeysSelector = function (then, output) {
        return KeysSelectorWriter.writeThen(output, this, then);
    };
    ReconWriter.prototype.sizeOfValuesSelector = function (then) {
        return ValuesSelectorWriter.sizeOf(this, then);
    };
    ReconWriter.prototype.writeValuesSelector = function (then, output) {
        return ValuesSelectorWriter.write(output, this, then);
    };
    ReconWriter.prototype.sizeOfThenValuesSelector = function (then) {
        return ValuesSelectorWriter.sizeOf(this, then);
    };
    ReconWriter.prototype.writeThenValuesSelector = function (then, output) {
        return ValuesSelectorWriter.writeThen(output, this, then);
    };
    ReconWriter.prototype.sizeOfChildrenSelector = function (then) {
        return ChildrenSelectorWriter.sizeOf(this, then);
    };
    ReconWriter.prototype.writeChildrenSelector = function (then, output) {
        return ChildrenSelectorWriter.write(output, this, then);
    };
    ReconWriter.prototype.sizeOfThenChildrenSelector = function (then) {
        return ChildrenSelectorWriter.sizeOf(this, then);
    };
    ReconWriter.prototype.writeThenChildrenSelector = function (then, output) {
        return ChildrenSelectorWriter.writeThen(output, this, then);
    };
    ReconWriter.prototype.sizeOfDescendantsSelector = function (then) {
        return DescendantsSelectorWriter.sizeOf(this, then);
    };
    ReconWriter.prototype.writeDescendantsSelector = function (then, output) {
        return DescendantsSelectorWriter.write(output, this, then);
    };
    ReconWriter.prototype.sizeOfThenDescendantsSelector = function (then) {
        return DescendantsSelectorWriter.sizeOf(this, then);
    };
    ReconWriter.prototype.writeThenDescendantsSelector = function (then, output) {
        return DescendantsSelectorWriter.writeThen(output, this, then);
    };
    ReconWriter.prototype.sizeOfFilterSelector = function (predicate, then) {
        return FilterSelectorWriter.sizeOf(this, predicate, then);
    };
    ReconWriter.prototype.writeFilterSelector = function (predicate, then, output) {
        return FilterSelectorWriter.write(output, this, predicate, then);
    };
    ReconWriter.prototype.sizeOfThenFilterSelector = function (predicate, then) {
        return FilterSelectorWriter.sizeOfThen(this, predicate, then);
    };
    ReconWriter.prototype.writeThenFilterSelector = function (predicate, then, output) {
        return FilterSelectorWriter.writeThen(output, this, predicate, then);
    };
    ReconWriter.prototype.sizeOfExtant = function () {
        return 0;
    };
    ReconWriter.prototype.writeExtant = function (output) {
        return Writer.done();
    };
    ReconWriter.prototype.sizeOfAbsent = function () {
        return 0;
    };
    ReconWriter.prototype.writeAbsent = function (output) {
        return Writer.done();
    };
    return ReconWriter;
}());
export { ReconWriter };
//# sourceMappingURL=ReconWriter.js.map