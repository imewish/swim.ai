import { __extends } from "tslib";
import { Parser, Diagnostic } from "@swim/codec";
import { Recon } from "./Recon";
var PrefixOperatorParser = (function (_super) {
    __extends(PrefixOperatorParser, _super);
    function PrefixOperatorParser(recon, builder, operator, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._builder = builder;
        _this._operator = operator;
        _this._operandParser = rhsParser;
        _this._step = step;
        return _this;
    }
    PrefixOperatorParser.prototype.feed = function (input) {
        return PrefixOperatorParser.parse(input, this._recon, this._builder, this._operator, this._operandParser, this._step);
    };
    PrefixOperatorParser.parse = function (input, recon, builder, operator, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                input = input.step();
            }
            if (input.isCont()) {
                if (c === 33) {
                    input = input.step();
                    operator = "!";
                }
                else if (c === 126) {
                    input = input.step();
                    operator = "~";
                }
                else if (c === 45) {
                    input = input.step();
                    operator = "-";
                }
                else if (c === 43) {
                    input = input.step();
                    operator = "+";
                }
                else {
                    return recon.parseInvokeOperator(input, builder);
                }
                step = 2;
            }
            else if (input.isDone()) {
                return recon.parseInvokeOperator(input, builder);
            }
        }
        if (step === 2) {
            if (!rhsParser) {
                rhsParser = recon.parsePrefixOperator(input, builder);
            }
            while (rhsParser.isCont() && !input.isEmpty()) {
                rhsParser = rhsParser.feed(input);
            }
            if (rhsParser.isDone()) {
                var operand = rhsParser.bind();
                if (!recon.isDistinct(operand)) {
                    return Parser.error(Diagnostic.expected("value", input));
                }
                else if (operator === "!") {
                    return Parser.done(recon.not(operand));
                }
                else if (operator === "~") {
                    return Parser.done(recon.bitwiseNot(operand));
                }
                else if (operator === "-") {
                    return Parser.done(recon.negative(operand));
                }
                else if (operator === "+") {
                    return Parser.done(recon.positive(operand));
                }
                else {
                    return Parser.error(Diagnostic.message(operator, input));
                }
            }
            else if (rhsParser.isError()) {
                return rhsParser.asError();
            }
        }
        return new PrefixOperatorParser(recon, builder, operator, rhsParser, step);
    };
    return PrefixOperatorParser;
}(Parser));
export { PrefixOperatorParser };
//# sourceMappingURL=PrefixOperatorParser.js.map