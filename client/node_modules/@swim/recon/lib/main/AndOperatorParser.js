import { __extends } from "tslib";
import { Parser } from "@swim/codec";
var AndOperatorParser = (function (_super) {
    __extends(AndOperatorParser, _super);
    function AndOperatorParser(recon, builder, lhsParser, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._builder = builder;
        _this._lhsParser = lhsParser;
        _this._rhsParser = rhsParser;
        _this._step = step;
        return _this;
    }
    AndOperatorParser.prototype.feed = function (input) {
        return AndOperatorParser.parse(input, this._recon, this._builder, this._lhsParser, this._rhsParser, this._step);
    };
    AndOperatorParser.parse = function (input, recon, builder, lhsParser, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!lhsParser) {
                    lhsParser = recon.parseBitwiseOrOperator(input, builder);
                }
                while (lhsParser.isCont() && !input.isEmpty()) {
                    lhsParser = lhsParser.feed(input);
                }
                if (lhsParser.isDone()) {
                    step = 2;
                }
                else if (lhsParser.isError()) {
                    return lhsParser.asError();
                }
            }
            if (step === 2) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 38) {
                        input = input.step();
                        step = 3;
                    }
                    else {
                        return lhsParser;
                    }
                }
                else if (input.isDone()) {
                    return lhsParser;
                }
            }
            if (step === 3) {
                if (!rhsParser) {
                    rhsParser = recon.parseBitwiseOrOperator(input, builder);
                }
                while (rhsParser.isCont() && !input.isEmpty()) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var lhs = lhsParser.bind();
                    var rhs = rhsParser.bind();
                    lhsParser = Parser.done(recon.and(lhs, rhs));
                    rhsParser = void 0;
                    step = 2;
                    continue;
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            break;
        } while (true);
        return new AndOperatorParser(recon, builder, lhsParser, rhsParser, step);
    };
    return AndOperatorParser;
}(Parser));
export { AndOperatorParser };
//# sourceMappingURL=AndOperatorParser.js.map