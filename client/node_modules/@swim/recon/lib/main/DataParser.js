import { __extends } from "tslib";
import { Parser, Diagnostic, Base64 } from "@swim/codec";
var DataParser = (function (_super) {
    __extends(DataParser, _super);
    function DataParser(recon, base64Parser, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._base64Parser = base64Parser;
        _this._step = step;
        return _this;
    }
    DataParser.prototype.feed = function (input) {
        return DataParser.parse(input, this._recon, this._base64Parser, this._step);
    };
    DataParser.parse = function (input, recon, base64Parser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (input.isCont()) {
                c = input.head();
                if (c === 37) {
                    input = input.step();
                    step = 2;
                }
                else {
                    return Parser.error(Diagnostic.expected(37, input));
                }
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.expected(37, input));
            }
        }
        if (step === 2) {
            if (!base64Parser) {
                base64Parser = Base64.standard().parse(input, recon.dataOutput());
            }
            while (base64Parser.isCont() && !input.isEmpty()) {
                base64Parser = base64Parser.feed(input);
            }
            if (base64Parser.isDone()) {
                return base64Parser;
            }
            else if (base64Parser.isError()) {
                return base64Parser;
            }
        }
        return new DataParser(recon, base64Parser, step);
    };
    return DataParser;
}(Parser));
export { DataParser };
//# sourceMappingURL=DataParser.js.map