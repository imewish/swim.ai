import { Builder } from "@swim/util";
import { Output } from "@swim/codec";
import { Item, Value } from "@swim/structure";
import { ReconParser } from "./ReconParser";
export declare class ReconStructureParser extends ReconParser<Item, Value> {
    isDistinct(value: Value): boolean;
    item(value: Value): Item;
    value(item: Item): Value;
    attr(key: Value, value?: Value): Item;
    slot(key: Value, value?: Value): Item;
    valueBuilder(): Builder<Item, Value>;
    recordBuilder(): Builder<Item, Value>;
    dataOutput(): Output<Value>;
    textOutput(): Output<Value>;
    ident(value: Value): Value;
    num(value: number | string): Value;
    uint32(value: number): Value;
    uint64(value: number): Value;
    bool(value: boolean): Value;
    selector(): Value;
    extant(): Value;
    absent(): Value;
    conditional(ifTerm: Value, thenTerm: Value, elseTerm: Value): Value;
    or(lhs: Value, rhs: Value): Value;
    and(lhs: Value, rhs: Value): Value;
    bitwiseOr(lhs: Value, rhs: Value): Value;
    bitwiseXor(lhs: Value, rhs: Value): Value;
    bitwiseAnd(lhs: Value, rhs: Value): Value;
    lt(lhs: Value, rhs: Value): Value;
    le(lhs: Value, rhs: Value): Value;
    eq(lhs: Value, rhs: Value): Value;
    ne(lhs: Value, rhs: Value): Value;
    ge(lhs: Value, rhs: Value): Value;
    gt(lhs: Value, rhs: Value): Value;
    plus(lhs: Value, rhs: Value): Value;
    minus(lhs: Value, rhs: Value): Value;
    times(lhs: Value, rhs: Value): Value;
    divide(lhs: Value, rhs: Value): Value;
    modulo(lhs: Value, rhs: Value): Value;
    not(rhs: Value): Value;
    bitwiseNot(rhs: Value): Value;
    negative(rhs: Value): Value;
    positive(rhs: Value): Value;
    invoke(func: Value, args: Value): Value;
    lambda(bindings: Value, template: Value): Value;
    get(selector: Value, key: Value): Value;
    getAttr(selector: Value, key: Value): Value;
    getItem(selector: Value, index: Value): Item;
    children(selector: Value): Value;
    descendants(selector: Value): Value;
    keys(selector: Value): Value;
    values(selector: Value): Value;
    filter(selector: Value, predicate: Value): Value;
}
//# sourceMappingURL=ReconStructureParser.d.ts.map