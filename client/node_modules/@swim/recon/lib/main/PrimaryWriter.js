import { __extends } from "tslib";
import { WriterException, Writer } from "@swim/codec";
var PrimaryWriter = (function (_super) {
    __extends(PrimaryWriter, _super);
    function PrimaryWriter(recon, items, inParens, first, item, next, part, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._items = items;
        _this._inParens = inParens;
        _this._first = first;
        _this._item = item;
        _this._next = next;
        _this._part = part;
        _this._step = step;
        return _this;
    }
    PrimaryWriter.prototype.pull = function (output) {
        return PrimaryWriter.write(output, this._recon, this._items, this._inParens, this._first, this._item, this._next, this._part, this._step);
    };
    PrimaryWriter.sizeOf = function (recon, items) {
        var size = 0;
        var inParens = false;
        var first = true;
        var next;
        while (next || items.hasNext()) {
            var item = void 0;
            if (!next) {
                item = items.next().value;
            }
            else {
                item = next;
                next = void 0;
            }
            if (items.hasNext()) {
                next = items.next().value;
            }
            if (!inParens && !first) {
                size += 1;
            }
            if (recon.isAttr(item)) {
                if (inParens) {
                    size += 1;
                    inParens = false;
                }
                size += recon.sizeOfItem(item);
                first = false;
            }
            else if (inParens) {
                if (!first) {
                    size += 1;
                }
                else {
                    first = false;
                }
                size += recon.sizeOfBlockItem(item);
            }
            else if (recon.isValue(item) && !recon.isRecord(item)
                && (!first && !next || next && recon.isAttr(next))) {
                size += recon.sizeOfItem(item);
            }
            else {
                size += 1;
                size += recon.sizeOfItem(item);
                inParens = true;
                first = false;
            }
        }
        if (inParens) {
            size += 1;
        }
        return size;
    };
    PrimaryWriter.write = function (output, recon, items, inParens, first, item, next, part, step) {
        if (inParens === void 0) { inParens = false; }
        if (first === void 0) { first = true; }
        if (step === void 0) { step = 1; }
        do {
            if (step === 1) {
                if (!next && !items.hasNext()) {
                    step = 5;
                    break;
                }
                else {
                    if (!next) {
                        item = items.next().value;
                    }
                    else {
                        item = next;
                        next = void 0;
                    }
                    if (items.hasNext()) {
                        next = items.next().value;
                    }
                    step = 2;
                }
            }
            if (step === 2 && output.isCont()) {
                if (!inParens && !first) {
                    output = output.write(32);
                }
                step = 3;
            }
            if (step === 3 && output.isCont()) {
                if (recon.isAttr(item)) {
                    if (inParens) {
                        output = output.write(41);
                        inParens = false;
                    }
                    part = recon.writeItem(item, output);
                    first = false;
                    step = 4;
                }
                else if (inParens) {
                    if (!first) {
                        output = output.write(44);
                    }
                    else {
                        first = false;
                    }
                    part = recon.writeBlockItem(item, output);
                    step = 4;
                }
                else if (recon.isValue(item) && !recon.isRecord(item)
                    && (!first && !next || next && recon.isAttr(next))) {
                    part = recon.writeItem(item, output);
                    step = 4;
                }
                else {
                    output = output.write(40);
                    part = recon.writeItem(item, output);
                    inParens = true;
                    first = false;
                    step = 4;
                }
            }
            if (step === 4) {
                part = part.pull(output);
                if (part.isDone()) {
                    part = void 0;
                    step = 1;
                    continue;
                }
                else if (part.isError()) {
                    return part.asError();
                }
            }
            break;
        } while (true);
        if (step === 5) {
            if (inParens) {
                if (output.isCont()) {
                    output = output.write(41);
                    return Writer.done();
                }
            }
            else {
                return Writer.done();
            }
        }
        if (output.isDone()) {
            return Writer.error(new WriterException("truncated"));
        }
        else if (output.isError()) {
            return Writer.error(output.trap());
        }
        return new PrimaryWriter(recon, items, inParens, first, item, next, part, step);
    };
    return PrimaryWriter;
}(Writer));
export { PrimaryWriter };
//# sourceMappingURL=PrimaryWriter.js.map