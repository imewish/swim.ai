import { __extends } from "tslib";
import { Parser, Diagnostic } from "@swim/codec";
import { Recon } from "./Recon";
var SelectorParser = (function (_super) {
    __extends(SelectorParser, _super);
    function SelectorParser(recon, builder, selector, valueParser, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._builder = builder;
        _this._selector = selector;
        _this._valueParser = valueParser;
        _this._step = step;
        return _this;
    }
    SelectorParser.prototype.feed = function (input) {
        return SelectorParser.parse(input, this._recon, this._builder, this._selector, this._valueParser, this._step);
    };
    SelectorParser.parse = function (input, recon, builder, selector, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                input = input.step();
            }
            if (input.isCont() && c === 36) {
                input = input.step();
                selector = selector || recon.selector();
                step = 2;
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.expected(36, input));
            }
        }
        if (step === 2) {
            if (input.isCont()) {
                c = input.head();
                if (c === 91) {
                    input = input.step();
                    step = 8;
                }
                else if (c === 64) {
                    input = input.step();
                    step = 7;
                }
                else if (c === 58) {
                    input = input.step();
                    step = 6;
                }
                else if (c === 42) {
                    input = input.step();
                    step = 5;
                }
                else if (c === 35) {
                    input = input.step();
                    step = 4;
                }
                else {
                    step = 3;
                }
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.unexpected(input));
            }
        }
        do {
            if (step === 3) {
                if (!valueParser) {
                    valueParser = recon.parseLiteral(input, recon.valueBuilder());
                }
                while (valueParser.isCont() && !input.isEmpty()) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    selector = recon.get(selector, valueParser.bind());
                    valueParser = void 0;
                    step = 10;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 4) {
                if (!valueParser) {
                    valueParser = recon.parseInteger(input);
                }
                while (valueParser.isCont() && !input.isEmpty()) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    selector = recon.value(recon.getItem(selector, valueParser.bind()));
                    valueParser = void 0;
                    step = 10;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 5) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 58) {
                        input = input.step();
                        selector = recon.keys(selector);
                        step = 10;
                    }
                    else if (c === 42) {
                        input = input.step();
                        selector = recon.descendants(selector);
                        step = 10;
                    }
                    else {
                        selector = recon.children(selector);
                        step = 10;
                    }
                }
                else if (input.isDone()) {
                    selector = recon.children(selector);
                    step = 10;
                }
            }
            if (step === 6) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 42) {
                        input = input.step();
                        selector = recon.values(selector);
                        step = 10;
                    }
                    else {
                        return Parser.error(Diagnostic.expected(42, input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected(42, input));
                }
            }
            if (step === 7) {
                if (!valueParser) {
                    valueParser = recon.parseIdent(input);
                }
                while (valueParser.isCont() && !input.isEmpty()) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    selector = recon.getAttr(selector, valueParser.bind());
                    valueParser = void 0;
                    step = 10;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 8) {
                if (!valueParser) {
                    valueParser = recon.parseBlockExpression(input);
                }
                while (valueParser.isCont() && !input.isEmpty()) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    step = 9;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 9) {
                while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {
                    input = input.step();
                }
                if (input.isCont()) {
                    if (c === 93) {
                        input = input.step();
                        selector = recon.filter(selector, valueParser.bind());
                        valueParser = void 0;
                        step = 10;
                    }
                    else {
                        return Parser.error(Diagnostic.expected(93, input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected(93, input));
                }
            }
            if (step === 10) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 91) {
                        input = input.step();
                        step = 8;
                        continue;
                    }
                    else if (c === 35) {
                        input = input.step();
                        step = 4;
                        continue;
                    }
                    else if (c === 46) {
                        input = input.step();
                        step = 11;
                    }
                    else if (builder) {
                        builder.push(recon.item(selector));
                        return Parser.done(builder.bind());
                    }
                    else {
                        return Parser.done(selector);
                    }
                }
                else if (input.isDone()) {
                    if (builder) {
                        builder.push(recon.item(selector));
                        return Parser.done(builder.bind());
                    }
                    else {
                        return Parser.done(selector);
                    }
                }
            }
            if (step === 11) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 64) {
                        input = input.step();
                        step = 7;
                        continue;
                    }
                    else if (c === 58) {
                        input = input.step();
                        step = 6;
                        continue;
                    }
                    else if (c === 42) {
                        input = input.step();
                        step = 5;
                        continue;
                    }
                    else {
                        step = 3;
                        continue;
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            break;
        } while (true);
        return new SelectorParser(recon, builder, selector, valueParser, step);
    };
    return SelectorParser;
}(Parser));
export { SelectorParser };
//# sourceMappingURL=SelectorParser.js.map