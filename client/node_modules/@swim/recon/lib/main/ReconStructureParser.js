import { __extends } from "tslib";
import { Attr, Slot, Value, Record, Data, Text, Num, Bool, Selector, AndOperator, BitwiseAndOperator, BitwiseNotOperator, BitwiseOrOperator, BitwiseXorOperator, DivideOperator, EqOperator, GeOperator, GtOperator, InvokeOperator, LeOperator, LtOperator, MinusOperator, ModuloOperator, NeOperator, NegativeOperator, NotOperator, OrOperator, PlusOperator, PositiveOperator, TimesOperator, } from "@swim/structure";
import { ReconParser } from "./ReconParser";
var ReconStructureParser = (function (_super) {
    __extends(ReconStructureParser, _super);
    function ReconStructureParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ReconStructureParser.prototype.isDistinct = function (value) {
        return value.isDistinct();
    };
    ReconStructureParser.prototype.item = function (value) {
        return value;
    };
    ReconStructureParser.prototype.value = function (item) {
        return item.toValue();
    };
    ReconStructureParser.prototype.attr = function (key, value) {
        return Attr.of.apply(Attr, arguments);
    };
    ReconStructureParser.prototype.slot = function (key, value) {
        return Slot.of.apply(Slot, arguments);
    };
    ReconStructureParser.prototype.valueBuilder = function () {
        return Value.builder();
    };
    ReconStructureParser.prototype.recordBuilder = function () {
        return Record.create();
    };
    ReconStructureParser.prototype.dataOutput = function () {
        return Data.output();
    };
    ReconStructureParser.prototype.textOutput = function () {
        return Text.output();
    };
    ReconStructureParser.prototype.ident = function (value) {
        if (value instanceof Text) {
            var string = value.stringValue();
            if (string === "true") {
                return Bool.from(true);
            }
            else if (string === "false") {
                return Bool.from(false);
            }
        }
        return value;
    };
    ReconStructureParser.prototype.num = function (value) {
        if (typeof value === "number") {
            return Num.from(value);
        }
        else if (typeof value === "string") {
            return Num.from(+value);
        }
        else {
            throw new TypeError("" + value);
        }
    };
    ReconStructureParser.prototype.uint32 = function (value) {
        return Num.uint32(value);
    };
    ReconStructureParser.prototype.uint64 = function (value) {
        return Num.uint64(value);
    };
    ReconStructureParser.prototype.bool = function (value) {
        return Bool.from(value);
    };
    ReconStructureParser.prototype.selector = function () {
        return Selector.identity();
    };
    ReconStructureParser.prototype.extant = function () {
        return Value.extant();
    };
    ReconStructureParser.prototype.absent = function () {
        return Value.absent();
    };
    ReconStructureParser.prototype.conditional = function (ifTerm, thenTerm, elseTerm) {
        return ifTerm.conditional(thenTerm, elseTerm);
    };
    ReconStructureParser.prototype.or = function (lhs, rhs) {
        return new OrOperator(lhs, rhs);
    };
    ReconStructureParser.prototype.and = function (lhs, rhs) {
        return new AndOperator(lhs, rhs);
    };
    ReconStructureParser.prototype.bitwiseOr = function (lhs, rhs) {
        return new BitwiseOrOperator(lhs, rhs);
    };
    ReconStructureParser.prototype.bitwiseXor = function (lhs, rhs) {
        return new BitwiseXorOperator(lhs, rhs);
    };
    ReconStructureParser.prototype.bitwiseAnd = function (lhs, rhs) {
        return new BitwiseAndOperator(lhs, rhs);
    };
    ReconStructureParser.prototype.lt = function (lhs, rhs) {
        return new LtOperator(lhs, rhs);
    };
    ReconStructureParser.prototype.le = function (lhs, rhs) {
        return new LeOperator(lhs, rhs);
    };
    ReconStructureParser.prototype.eq = function (lhs, rhs) {
        return new EqOperator(lhs, rhs);
    };
    ReconStructureParser.prototype.ne = function (lhs, rhs) {
        return new NeOperator(lhs, rhs);
    };
    ReconStructureParser.prototype.ge = function (lhs, rhs) {
        return new GeOperator(lhs, rhs);
    };
    ReconStructureParser.prototype.gt = function (lhs, rhs) {
        return new GtOperator(lhs, rhs);
    };
    ReconStructureParser.prototype.plus = function (lhs, rhs) {
        return new PlusOperator(lhs, rhs);
    };
    ReconStructureParser.prototype.minus = function (lhs, rhs) {
        return new MinusOperator(lhs, rhs);
    };
    ReconStructureParser.prototype.times = function (lhs, rhs) {
        return new TimesOperator(lhs, rhs);
    };
    ReconStructureParser.prototype.divide = function (lhs, rhs) {
        return new DivideOperator(lhs, rhs);
    };
    ReconStructureParser.prototype.modulo = function (lhs, rhs) {
        return new ModuloOperator(lhs, rhs);
    };
    ReconStructureParser.prototype.not = function (rhs) {
        return new NotOperator(rhs);
    };
    ReconStructureParser.prototype.bitwiseNot = function (rhs) {
        return new BitwiseNotOperator(rhs);
    };
    ReconStructureParser.prototype.negative = function (rhs) {
        if (rhs instanceof Num) {
            return rhs.negative();
        }
        else {
            return new NegativeOperator(rhs);
        }
    };
    ReconStructureParser.prototype.positive = function (rhs) {
        return new PositiveOperator(rhs);
    };
    ReconStructureParser.prototype.invoke = function (func, args) {
        return new InvokeOperator(func, args);
    };
    ReconStructureParser.prototype.lambda = function (bindings, template) {
        return bindings.lambda(template);
    };
    ReconStructureParser.prototype.get = function (selector, key) {
        return selector.get(key);
    };
    ReconStructureParser.prototype.getAttr = function (selector, key) {
        return selector.getAttr(key);
    };
    ReconStructureParser.prototype.getItem = function (selector, index) {
        return selector.getItem(index);
    };
    ReconStructureParser.prototype.children = function (selector) {
        return Selector.literal(selector).children();
    };
    ReconStructureParser.prototype.descendants = function (selector) {
        return Selector.literal(selector).descendants();
    };
    ReconStructureParser.prototype.keys = function (selector) {
        return Selector.literal(selector).keys();
    };
    ReconStructureParser.prototype.values = function (selector) {
        return Selector.literal(selector).values();
    };
    ReconStructureParser.prototype.filter = function (selector, predicate) {
        return selector.filter(predicate);
    };
    return ReconStructureParser;
}(ReconParser));
export { ReconStructureParser };
//# sourceMappingURL=ReconStructureParser.js.map