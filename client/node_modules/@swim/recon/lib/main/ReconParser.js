import { Parser, Diagnostic, Unicode } from "@swim/codec";
import { Recon } from "./Recon";
import { BlockParser } from "./BlockParser";
import { AttrParser } from "./AttrParser";
import { BlockItemParser } from "./BlockItemParser";
import { InlineItemParser } from "./InlineItemParser";
import { RecordParser } from "./RecordParser";
import { MarkupParser } from "./MarkupParser";
import { DataParser } from "./DataParser";
import { IdentParser } from "./IdentParser";
import { StringParser } from "./StringParser";
import { NumberParser } from "./NumberParser";
import { LambdaFuncParser } from "./LambdaFuncParser";
import { ConditionalOperatorParser } from "./ConditionalOperatorParser";
import { OrOperatorParser } from "./OrOperatorParser";
import { AndOperatorParser } from "./AndOperatorParser";
import { BitwiseOrOperatorParser } from "./BitwiseOrOperatorParser";
import { BitwiseXorOperatorParser } from "./BitwiseXorOperatorParser";
import { BitwiseAndOperatorParser } from "./BitwiseAndOperatorParser";
import { ComparisonOperatorParser } from "./ComparisonOperatorParser";
import { AttrExpressionParser } from "./AttrExpressionParser";
import { AdditiveOperatorParser } from "./AdditiveOperatorParser";
import { MultiplicativeOperatorParser } from "./MultiplicativeOperatorParser";
import { PrefixOperatorParser } from "./PrefixOperatorParser";
import { InvokeOperatorParser } from "./InvokeOperatorParser";
import { PrimaryParser } from "./PrimaryParser";
import { LiteralParser } from "./LiteralParser";
import { SelectorParser } from "./SelectorParser";
var ReconParser = (function () {
    function ReconParser() {
    }
    ReconParser.prototype.parseBlock = function (input) {
        return BlockParser.parse(input, this);
    };
    ReconParser.prototype.parseAttr = function (input) {
        return AttrParser.parse(input, this);
    };
    ReconParser.prototype.parseBlockItem = function (input) {
        return BlockItemParser.parse(input, this);
    };
    ReconParser.prototype.parseInlineItem = function (input) {
        return InlineItemParser.parse(input, this);
    };
    ReconParser.prototype.parseRecord = function (input, builder) {
        return RecordParser.parse(input, this, builder);
    };
    ReconParser.prototype.parseMarkup = function (input, builder) {
        return MarkupParser.parse(input, this, builder);
    };
    ReconParser.prototype.parseData = function (input) {
        return DataParser.parse(input, this);
    };
    ReconParser.prototype.parseIdent = function (input) {
        return IdentParser.parse(input, this);
    };
    ReconParser.prototype.parseString = function (input) {
        return StringParser.parse(input, this);
    };
    ReconParser.prototype.parseNumber = function (input) {
        return NumberParser.parse(input, this);
    };
    ReconParser.prototype.parseInteger = function (input) {
        return NumberParser.parseInteger(input, this);
    };
    ReconParser.prototype.parseBlockExpression = function (input, builder) {
        return this.parseLambdaFunc(input, builder);
    };
    ReconParser.prototype.parseLambdaFunc = function (input, builder) {
        return LambdaFuncParser.parse(input, this, builder);
    };
    ReconParser.prototype.parseConditionalOperator = function (input, builder) {
        return ConditionalOperatorParser.parse(input, this, builder);
    };
    ReconParser.prototype.parseOrOperator = function (input, builder) {
        return OrOperatorParser.parse(input, this, builder);
    };
    ReconParser.prototype.parseAndOperator = function (input, builder) {
        return AndOperatorParser.parse(input, this, builder);
    };
    ReconParser.prototype.parseBitwiseOrOperator = function (input, builder) {
        return BitwiseOrOperatorParser.parse(input, this, builder);
    };
    ReconParser.prototype.parseBitwiseXorOperator = function (input, builder) {
        return BitwiseXorOperatorParser.parse(input, this, builder);
    };
    ReconParser.prototype.parseBitwiseAndOperator = function (input, builder) {
        return BitwiseAndOperatorParser.parse(input, this, builder);
    };
    ReconParser.prototype.parseComparisonOperator = function (input, builder) {
        return ComparisonOperatorParser.parse(input, this, builder);
    };
    ReconParser.prototype.parseAttrExpression = function (input, builder) {
        return AttrExpressionParser.parse(input, this, builder);
    };
    ReconParser.prototype.parseAdditiveOperator = function (input, builder) {
        return AdditiveOperatorParser.parse(input, this, builder);
    };
    ReconParser.prototype.parseMultiplicativeOperator = function (input, builder) {
        return MultiplicativeOperatorParser.parse(input, this, builder);
    };
    ReconParser.prototype.parsePrefixOperator = function (input, builder) {
        return PrefixOperatorParser.parse(input, this, builder);
    };
    ReconParser.prototype.parseInvokeOperator = function (input, builder) {
        return InvokeOperatorParser.parse(input, this, builder);
    };
    ReconParser.prototype.parsePrimary = function (input, builder) {
        return PrimaryParser.parse(input, this, builder);
    };
    ReconParser.prototype.parseLiteral = function (input, builder) {
        return LiteralParser.parse(input, this, builder);
    };
    ReconParser.prototype.parseSelector = function (input, builder) {
        return SelectorParser.parse(input, this, builder);
    };
    ReconParser.prototype.blockParser = function () {
        return new BlockParser(this);
    };
    ReconParser.prototype.parseBlockString = function (string) {
        var input = Unicode.stringInput(string);
        while (input.isCont() && Recon.isWhitespace(input.head())) {
            input = input.step();
        }
        var parser = this.parseBlock(input);
        if (parser.isDone()) {
            while (input.isCont() && Recon.isWhitespace(input.head())) {
                input = input.step();
            }
        }
        if (input.isCont() && !parser.isError()) {
            parser = Parser.error(Diagnostic.unexpected(input));
        }
        return parser.bind();
    };
    ReconParser.prototype.parseNumberString = function (string) {
        var input = Unicode.stringInput(string);
        while (input.isCont() && Recon.isWhitespace(input.head())) {
            input = input.step();
        }
        var parser = this.parseNumber(input);
        if (parser.isDone()) {
            while (input.isCont() && Recon.isWhitespace(input.head())) {
                input = input.step();
            }
        }
        if (input.isCont() && !parser.isError()) {
            parser = Parser.error(Diagnostic.unexpected(input));
        }
        return parser.bind();
    };
    return ReconParser;
}());
export { ReconParser };
//# sourceMappingURL=ReconParser.js.map