import { __extends } from "tslib";
import { Parser, Diagnostic } from "@swim/codec";
var MarkupParser = (function (_super) {
    __extends(MarkupParser, _super);
    function MarkupParser(recon, builder, textOutput, valueParser, step) {
        var _this = _super.call(this) || this;
        _this._recon = recon;
        _this._builder = builder;
        _this._textOutput = textOutput;
        _this._valueParser = valueParser;
        _this._step = step;
        return _this;
    }
    MarkupParser.prototype.feed = function (input) {
        return MarkupParser.parse(input, this._recon, this._builder, this._textOutput, this._valueParser, this._step);
    };
    MarkupParser.parse = function (input, recon, builder, textOutput, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (input.isCont()) {
                c = input.head();
                if (c === 91) {
                    input = input.step();
                    step = 2;
                }
                else {
                    return Parser.error(Diagnostic.expected(91, input));
                }
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.expected(91, input));
            }
        }
        do {
            if (step === 2) {
                while (input.isCont()) {
                    c = input.head();
                    if (c !== 64 && c !== 91 && c !== 92 && c !== 93
                        && c !== 123 && c !== 125) {
                        input = input.step();
                        textOutput = textOutput || recon.textOutput();
                        textOutput.write(c);
                    }
                    else {
                        break;
                    }
                }
                if (input.isCont()) {
                    if (c === 93) {
                        input = input.step();
                        builder = builder || recon.recordBuilder();
                        if (textOutput) {
                            builder.push(recon.item(textOutput.bind()));
                        }
                        return Parser.done(builder.bind());
                    }
                    else if (c === 64) {
                        builder = builder || recon.recordBuilder();
                        if (textOutput) {
                            builder.push(recon.item(textOutput.bind()));
                            textOutput = void 0;
                        }
                        valueParser = recon.parseInlineItem(input);
                        step = 3;
                    }
                    else if (c === 123) {
                        builder = builder || recon.recordBuilder();
                        if (textOutput) {
                            builder.push(recon.item(textOutput.bind()));
                            textOutput = void 0;
                        }
                        valueParser = recon.parseRecord(input, builder);
                        step = 4;
                    }
                    else if (c === 91) {
                        builder = builder || recon.recordBuilder();
                        if (textOutput) {
                            builder.push(recon.item(textOutput.bind()));
                            textOutput = void 0;
                        }
                        valueParser = recon.parseMarkup(input, builder);
                        step = 4;
                    }
                    else if (c === 92) {
                        input = input.step();
                        step = 5;
                    }
                    else {
                        return Parser.error(Diagnostic.unexpected(input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 3) {
                while (valueParser.isCont() && !input.isEmpty()) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    builder.push(recon.item(valueParser.bind()));
                    valueParser = void 0;
                    step = 2;
                    continue;
                }
                else if (valueParser.isError()) {
                    return valueParser;
                }
            }
            if (step === 4) {
                while (valueParser.isCont() && !input.isEmpty()) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    valueParser = void 0;
                    step = 2;
                    continue;
                }
                else if (valueParser.isError()) {
                    return valueParser;
                }
            }
            if (step === 5) {
                if (input.isCont()) {
                    c = input.head();
                    textOutput = textOutput || recon.textOutput();
                    if (c === 34 || c === 36 || c === 39 || c === 47
                        || c === 64 || c === 91 || c === 92 || c === 93
                        || c === 123 || c === 125) {
                        input = input.step();
                        textOutput.write(c);
                        step = 2;
                    }
                    else if (c === 98) {
                        input = input.step();
                        textOutput.write(8);
                        step = 2;
                    }
                    else if (c === 102) {
                        input = input.step();
                        textOutput.write(12);
                        step = 2;
                    }
                    else if (c === 110) {
                        input = input.step();
                        textOutput.write(10);
                        step = 2;
                    }
                    else if (c === 114) {
                        input = input.step();
                        textOutput.write(13);
                        step = 2;
                    }
                    else if (c === 116) {
                        input = input.step();
                        textOutput.write(9);
                        step = 2;
                    }
                    else {
                        return Parser.error(Diagnostic.expected("escape character", input));
                    }
                    continue;
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("escape character", input));
                }
            }
            break;
        } while (true);
        return new MarkupParser(recon, builder, textOutput, valueParser, step);
    };
    return MarkupParser;
}(Parser));
export { MarkupParser };
//# sourceMappingURL=MarkupParser.js.map