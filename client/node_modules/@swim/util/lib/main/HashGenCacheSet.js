import { Objects } from "./Objects";
var HashGenCacheSet = (function () {
    function HashGenCacheSet(size) {
        this._buckets = new Array(size);
        this._gen4Hits = 0;
        this._gen3Hits = 0;
        this._gen2Hits = 0;
        this._gen1Hits = 0;
        this._misses = 0;
    }
    HashGenCacheSet.prototype.put = function (value) {
        if (this._buckets.length === 0) {
            return value;
        }
        var index = Math.abs(Objects.hash(value)) % this._buckets.length;
        var bucket = this._buckets[index] || new HashGenCacheSetBucket();
        var gen4Val = bucket._gen4Val;
        if (gen4Val !== void 0 && Objects.equal(value, gen4Val)) {
            this._gen4Hits += 1;
            bucket._gen4Weight++;
            return gen4Val;
        }
        var gen3Val = bucket._gen3Val;
        if (gen3Val !== void 0 && Objects.equal(value, gen3Val)) {
            this._gen3Hits += 1;
            if (bucket._gen3Weight++ > bucket._gen4Weight) {
                this._buckets[index] = new HashGenCacheSetBucket(bucket._gen3Val, bucket._gen3Weight, bucket._gen4Val, bucket._gen4Weight, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Val, bucket._gen1Weight);
            }
            return gen3Val;
        }
        var gen2Val = bucket._gen2Val;
        if (gen2Val !== void 0 && Objects.equal(value, gen2Val)) {
            this._gen2Hits += 1;
            if (bucket._gen2Weight++ > bucket._gen3Weight) {
                this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight, bucket._gen2Val, bucket._gen2Weight, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Val, bucket._gen1Weight);
            }
            return gen2Val;
        }
        var gen1Val = bucket._gen1Val;
        if (gen1Val !== void 0 && Objects.equal(value, gen1Val)) {
            this._gen1Hits += 1;
            if (bucket._gen1Weight++ > bucket._gen2Weight) {
                this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Val, bucket._gen1Weight, bucket._gen2Val, bucket._gen2Weight);
            }
            return gen1Val;
        }
        this._misses += 1;
        if (gen4Val === void 0) {
            this._buckets[index] = new HashGenCacheSetBucket(bucket._gen3Val, bucket._gen3Weight, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Val, bucket._gen1Weight, value, 1);
        }
        else if (gen3Val === void 0) {
            this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Val, bucket._gen1Weight, value, 1);
        }
        else if (gen2Val === void 0) {
            this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Val, bucket._gen1Weight, value, 1);
        }
        else if (gen1Val === void 0) {
            this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight, bucket._gen3Val, bucket._gen3Weight, bucket._gen2Val, bucket._gen2Weight, value, 1);
        }
        else {
            this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight - 1, bucket._gen3Val, bucket._gen3Weight - 1, bucket._gen1Val, bucket._gen1Weight, value, 1);
        }
        return value;
    };
    HashGenCacheSet.prototype.remove = function (value) {
        if (this._buckets.length === 0) {
            return false;
        }
        var index = Math.abs(Objects.hash(value)) % this._buckets.length;
        var bucket = this._buckets[index];
        if (!bucket) {
            return false;
        }
        var gen4Val = bucket._gen4Val;
        if (gen4Val !== void 0 && Objects.equal(value, gen4Val)) {
            this._buckets[index] = new HashGenCacheSetBucket(bucket._gen3Val, bucket._gen3Weight, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Val, bucket._gen1Weight, void 0, 0);
            return true;
        }
        var gen3Val = bucket._gen3Val;
        if (gen3Val !== void 0 && Objects.equal(value, gen3Val)) {
            this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Val, bucket._gen1Weight, void 0, 0);
            return true;
        }
        var gen2Val = bucket._gen2Val;
        if (gen2Val !== void 0 && Objects.equal(value, gen2Val)) {
            this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Val, bucket._gen1Weight, void 0, 0);
            return true;
        }
        var gen1Val = bucket._gen1Val;
        if (gen1Val !== void 0 && Objects.equal(value, gen1Val)) {
            this._buckets[index] = new HashGenCacheSetBucket(bucket._gen4Val, bucket._gen4Weight, bucket._gen3Val, bucket._gen3Weight, bucket._gen2Val, bucket._gen2Weight, void 0, 0);
            return true;
        }
        return false;
    };
    HashGenCacheSet.prototype.clear = function () {
        for (var i = 0; i < this._buckets.length; i += 1) {
            this._buckets[i] = void 0;
        }
    };
    HashGenCacheSet.prototype.hits = function () {
        return this._gen4Hits + this._gen3Hits + this._gen2Hits + this._gen1Hits;
    };
    HashGenCacheSet.prototype.hitRatio = function () {
        var hits = this.hits();
        return hits / (hits + this._misses);
    };
    return HashGenCacheSet;
}());
export { HashGenCacheSet };
var HashGenCacheSetBucket = (function () {
    function HashGenCacheSetBucket(gen4Val, gen4Weight, gen3Val, gen3Weight, gen2Val, gen2Weight, gen1Val, gen1Weight) {
        if (gen4Weight === void 0) { gen4Weight = 0; }
        if (gen3Weight === void 0) { gen3Weight = 0; }
        if (gen2Weight === void 0) { gen2Weight = 0; }
        if (gen1Weight === void 0) { gen1Weight = 0; }
        this._gen4Val = gen4Val;
        this._gen4Weight = gen4Weight;
        this._gen3Val = gen3Val;
        this._gen3Weight = gen3Weight;
        this._gen2Val = gen2Val;
        this._gen2Weight = gen2Weight;
        this._gen1Val = gen1Val;
        this._gen1Weight = gen1Weight;
    }
    return HashGenCacheSetBucket;
}());
export { HashGenCacheSetBucket };
//# sourceMappingURL=HashGenCacheSet.js.map