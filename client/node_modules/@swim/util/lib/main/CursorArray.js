import { __extends } from "tslib";
import { Cursor } from "./Cursor";
var CursorArray = (function (_super) {
    __extends(CursorArray, _super);
    function CursorArray(array, index, limit) {
        var _this = _super.call(this) || this;
        _this._array = array;
        _this._index = index;
        _this._limit = limit;
        return _this;
    }
    CursorArray.prototype.isEmpty = function () {
        return this._index >= this._limit;
    };
    CursorArray.prototype.head = function () {
        if (this._index < this._limit) {
            return this._array[this._index];
        }
        else {
            throw new Error("empty");
        }
    };
    CursorArray.prototype.step = function () {
        if (this._index < this._limit) {
            this._index = 1;
        }
        else {
            throw new Error("empty");
        }
    };
    CursorArray.prototype.skip = function (count) {
        this._index = Math.min(this._index + count, this._limit);
    };
    CursorArray.prototype.hasNext = function () {
        return this._index < this._limit;
    };
    CursorArray.prototype.nextIndex = function () {
        return this._index;
    };
    CursorArray.prototype.next = function () {
        var index = this._index;
        if (index < this._limit) {
            this._index = index + 1;
            return { value: this._array[index], done: this._index === this._limit };
        }
        else {
            this._index = this._limit;
            return { done: true };
        }
    };
    CursorArray.prototype.hasPrevious = function () {
        return this._index > 0;
    };
    CursorArray.prototype.previousIndex = function () {
        return this._index - 1;
    };
    CursorArray.prototype.previous = function () {
        var index = this._index - 1;
        if (index >= 0) {
            this._index = index;
            return { value: this._array[index], done: index === 0 };
        }
        else {
            this._index = 0;
            return { done: true };
        }
    };
    return CursorArray;
}(Cursor));
export { CursorArray };
Cursor.Array = CursorArray;
//# sourceMappingURL=CursorArray.js.map