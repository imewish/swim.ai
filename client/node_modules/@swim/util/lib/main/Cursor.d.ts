import { Iterator } from "./Iterator";
import { CursorEmpty } from "./CursorEmpty";
import { CursorUnary } from "./CursorUnary";
import { CursorArray } from "./CursorArray";
export declare abstract class Cursor<T> implements Iterator<T> {
    abstract isEmpty(): boolean;
    abstract head(): T;
    abstract step(): void;
    abstract skip(count: number): void;
    abstract hasNext(): boolean;
    abstract nextIndex(): number;
    abstract next(): {
        value?: T;
        done: boolean;
    };
    abstract hasPrevious(): boolean;
    abstract previousIndex(): number;
    abstract previous(): {
        value?: T;
        done: boolean;
    };
    set(newValue: T): void;
    delete(): void;
    private static _empty?;
    static empty<T>(): Cursor<T>;
    static unary<T>(value: T): Cursor<T>;
    static array<T>(array: ReadonlyArray<T>, index?: number, limit?: number): Cursor<T>;
    static Empty: typeof CursorEmpty;
    static Unary: typeof CursorUnary;
    static Array: typeof CursorArray;
}
//# sourceMappingURL=Cursor.d.ts.map