import { Murmur3 } from "./Murmur3";
var Severity = (function () {
    function Severity(level, label) {
        this._level = level;
        this._label = label;
    }
    Severity.prototype.level = function () {
        return this._level;
    };
    Severity.prototype.label = function (label) {
        if (label === void 0) {
            return this._label;
        }
        else {
            return Severity.create(this._level, label);
        }
    };
    Severity.prototype.isTrace = function () {
        return this._level === Severity.TRACE_LEVEL;
    };
    Severity.prototype.isDebug = function () {
        return this._level === Severity.DEBUG_LEVEL;
    };
    Severity.prototype.isInfo = function () {
        return this._level === Severity.INFO_LEVEL;
    };
    Severity.prototype.isNote = function () {
        return this._level === Severity.NOTE_LEVEL;
    };
    Severity.prototype.isWarning = function () {
        return this._level === Severity.WARNING_LEVEL;
    };
    Severity.prototype.isError = function () {
        return this._level === Severity.ERROR_LEVEL;
    };
    Severity.prototype.isAlert = function () {
        return this._level === Severity.ALERT_LEVEL;
    };
    Severity.prototype.isFatal = function () {
        return this._level === Severity.FATAL_LEVEL;
    };
    Severity.prototype.compareTo = function (that) {
        if (this === that) {
            return 0;
        }
        else if (this._level < that._level) {
            return -1;
        }
        else if (this._level > that._level) {
            return 1;
        }
        else {
            return this._label.localeCompare(that._label);
        }
    };
    Severity.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Severity) {
            return this._level === that._level && this._label === that._label;
        }
        return false;
    };
    Severity.prototype.hashCode = function () {
        if (Severity._hashSeed === void 0) {
            Severity._hashSeed = Murmur3.seed(Severity);
        }
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(Severity._hashSeed, this._level), Murmur3.hash(this._label)));
    };
    Severity.prototype.toString = function () {
        return this._label;
    };
    Severity.create = function (level, label) {
        switch (level) {
            case Severity.TRACE_LEVEL: return Severity.trace(label);
            case Severity.DEBUG_LEVEL: return Severity.debug(label);
            case Severity.INFO_LEVEL: return Severity.info(label);
            case Severity.NOTE_LEVEL: return Severity.note(label);
            case Severity.WARNING_LEVEL: return Severity.warning(label);
            case Severity.ERROR_LEVEL: return Severity.error(label);
            case Severity.ALERT_LEVEL: return Severity.alert(label);
            case Severity.FATAL_LEVEL: return Severity.fatal(label);
            default: throw new Error("" + level);
        }
    };
    Severity.trace = function (label) {
        if (label === void 0) { label = "trace"; }
        if (label === "trace") {
            if (!Severity._trace) {
                Severity._trace = new Severity(Severity.TRACE_LEVEL, label);
            }
            return Severity._trace;
        }
        else {
            return new Severity(Severity.TRACE_LEVEL, label);
        }
    };
    Severity.debug = function (label) {
        if (label === void 0) { label = "debug"; }
        if (label === "debug") {
            if (!Severity._debug) {
                Severity._debug = new Severity(Severity.DEBUG_LEVEL, label);
            }
            return Severity._debug;
        }
        else {
            return new Severity(Severity.DEBUG_LEVEL, label);
        }
    };
    Severity.info = function (label) {
        if (label === void 0) { label = "info"; }
        if (label === "info") {
            if (!Severity._info) {
                Severity._info = new Severity(Severity.INFO_LEVEL, label);
            }
            return Severity._info;
        }
        else {
            return new Severity(Severity.INFO_LEVEL, label);
        }
    };
    Severity.note = function (label) {
        if (label === void 0) { label = "note"; }
        if (label === "note") {
            if (!Severity._note) {
                Severity._note = new Severity(Severity.NOTE_LEVEL, label);
            }
            return Severity._note;
        }
        else {
            return new Severity(Severity.NOTE_LEVEL, label);
        }
    };
    Severity.warning = function (label) {
        if (label === void 0) { label = "warning"; }
        if (label === "warning") {
            if (!Severity._warning) {
                Severity._warning = new Severity(Severity.WARNING_LEVEL, label);
            }
            return Severity._warning;
        }
        else {
            return new Severity(Severity.WARNING_LEVEL, label);
        }
    };
    Severity.error = function (label) {
        if (label === void 0) { label = "error"; }
        if (label === "error") {
            if (!Severity._error) {
                Severity._error = new Severity(Severity.ERROR_LEVEL, label);
            }
            return Severity._error;
        }
        else {
            return new Severity(Severity.ERROR_LEVEL, label);
        }
    };
    Severity.alert = function (label) {
        if (label === void 0) { label = "alert"; }
        if (label === "alert") {
            if (!Severity._alert) {
                Severity._alert = new Severity(Severity.ALERT_LEVEL, label);
            }
            return Severity._alert;
        }
        else {
            return new Severity(Severity.ALERT_LEVEL, label);
        }
    };
    Severity.fatal = function (label) {
        if (label === void 0) { label = "fatal"; }
        if (label === "fatal") {
            if (!Severity._fatal) {
                Severity._fatal = new Severity(Severity.FATAL_LEVEL, label);
            }
            return Severity._fatal;
        }
        else {
            return new Severity(Severity.FATAL_LEVEL, label);
        }
    };
    Severity.TRACE_LEVEL = 0;
    Severity.DEBUG_LEVEL = 1;
    Severity.INFO_LEVEL = 2;
    Severity.NOTE_LEVEL = 3;
    Severity.WARNING_LEVEL = 4;
    Severity.ERROR_LEVEL = 5;
    Severity.ALERT_LEVEL = 6;
    Severity.FATAL_LEVEL = 7;
    return Severity;
}());
export { Severity };
//# sourceMappingURL=Severity.js.map