import { Objects } from "./Objects";
var HashGenCacheMap = (function () {
    function HashGenCacheMap(size) {
        this._buckets = new Array(size);
        this._gen4Hits = 0;
        this._gen3Hits = 0;
        this._gen2Hits = 0;
        this._gen1Hits = 0;
        this._misses = 0;
    }
    HashGenCacheMap.prototype.get = function (key) {
        if (this._buckets.length === 0) {
            return void 0;
        }
        var index = Math.abs(Objects.hash(key)) % this._buckets.length;
        var bucket = this._buckets[index];
        if (!bucket) {
            return void 0;
        }
        var gen4Key = bucket._gen4Key;
        if (gen4Key !== void 0 && Objects.equal(key, gen4Key)) {
            var gen4Val = bucket._gen4Val;
            if (gen4Val !== void 0) {
                this._gen4Hits += 1;
                bucket._gen4Weight++;
                return gen4Val;
            }
            else {
                bucket._gen4Key = void 0;
            }
        }
        var gen3Key = bucket._gen3Key;
        if (gen3Key !== void 0 && Objects.equal(key, gen3Key)) {
            var gen3Val = bucket._gen3Val;
            if (gen3Val !== void 0) {
                this._gen3Hits += 1;
                if (bucket._gen3Weight++ > bucket._gen4Weight) {
                    this._buckets[index] = new HashGenCacheMapBucket(bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight);
                }
                return gen3Val;
            }
            else {
                bucket._gen3Key = void 0;
            }
        }
        var gen2Key = bucket._gen2Key;
        if (gen2Key !== void 0 && Objects.equal(key, gen2Key)) {
            var gen2Val = bucket._gen2Val;
            if (gen2Val !== void 0) {
                this._gen2Hits += 1;
                if (bucket._gen2Weight++ > bucket._gen3Weight) {
                    this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight);
                }
                return gen2Val;
            }
            else {
                bucket._gen2Key = void 0;
            }
        }
        var gen1Key = bucket._gen1Key;
        if (gen1Key !== void 0 && Objects.equal(key, gen1Key)) {
            var gen1Val = bucket._gen1Val;
            if (gen1Val !== void 0) {
                this._gen1Hits += 1;
                if (bucket._gen1Weight++ > bucket._gen2Weight) {
                    this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight);
                }
                return gen1Val;
            }
            else {
                bucket._gen1Key = void 0;
            }
        }
        this._misses += 1;
        return void 0;
    };
    HashGenCacheMap.prototype.put = function (key, value) {
        if (this._buckets.length === 0) {
            return value;
        }
        var index = Math.abs(Objects.hash(key)) % this._buckets.length;
        var bucket = this._buckets[index] || new HashGenCacheMapBucket();
        var gen4Key = bucket._gen4Key;
        if (gen4Key !== void 0 && Objects.equal(key, gen4Key)) {
            var gen4Val = bucket._gen4Val;
            if (gen4Val !== void 0) {
                this._gen4Hits += 1;
                bucket._gen4Weight++;
                return gen4Val;
            }
            else {
                bucket._gen4Key = void 0;
                gen4Key = void 0;
            }
        }
        var gen3Key = bucket._gen3Key;
        if (gen3Key !== void 0 && Objects.equal(key, gen3Key)) {
            var gen3Val = bucket._gen3Val;
            if (gen3Val !== void 0) {
                this._gen3Hits += 1;
                if (bucket._gen3Weight++ > bucket._gen4Weight) {
                    this._buckets[index] = new HashGenCacheMapBucket(bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight);
                }
                return gen3Val;
            }
            else {
                bucket._gen3Key = void 0;
                gen3Key = void 0;
            }
        }
        var gen2Key = bucket._gen2Key;
        if (gen2Key !== void 0 && Objects.equal(key, gen2Key)) {
            var gen2Val = bucket._gen2Val;
            if (gen2Val !== void 0) {
                this._gen2Hits += 1;
                if (bucket._gen2Weight++ > bucket._gen3Weight) {
                    this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight);
                }
                return gen2Val;
            }
            else {
                bucket._gen2Key = void 0;
                gen2Key = void 0;
            }
        }
        var gen1Key = bucket._gen1Key;
        if (gen1Key !== void 0 && Objects.equal(key, gen1Key)) {
            var gen1Val = bucket._gen1Val;
            if (gen1Val !== void 0) {
                this._gen1Hits += 1;
                if (bucket._gen1Weight++ > bucket._gen2Weight) {
                    this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight);
                }
                return gen1Val;
            }
            else {
                bucket._gen1Key = void 0;
                gen1Key = void 0;
            }
        }
        this._misses += 1;
        if (gen4Key === void 0) {
            this._buckets[index] = new HashGenCacheMapBucket(bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, key, value, 1);
        }
        else if (gen3Key === void 0) {
            this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, key, value, 1);
        }
        else if (gen2Key === void 0) {
            this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, key, value, 1);
        }
        else if (gen1Key === void 0) {
            this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, key, value, 1);
        }
        else {
            this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight - 1, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight - 1, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, key, value, 1);
        }
        return value;
    };
    HashGenCacheMap.prototype.remove = function (key) {
        if (this._buckets.length === 0) {
            return void 0;
        }
        var index = Math.abs(Objects.hash(key)) % this._buckets.length;
        var bucket = this._buckets[index];
        if (!bucket) {
            return void 0;
        }
        var gen4Key = bucket._gen4Key;
        if (gen4Key !== void 0 && Objects.equal(key, gen4Key)) {
            var gen4Val = bucket._gen4Val;
            this._buckets[index] = new HashGenCacheMapBucket(bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, void 0, void 0, 0);
            return gen4Val;
        }
        var gen3Key = bucket._gen3Key;
        if (gen3Key !== void 0 && Objects.equal(key, gen3Key)) {
            var gen3Val = bucket._gen3Val;
            this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, void 0, void 0, 0);
            return gen3Val;
        }
        var gen2Key = bucket._gen2Key;
        if (gen2Key !== void 0 && Objects.equal(key, gen2Key)) {
            var gen2Val = bucket._gen2Val;
            this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen1Key, bucket._gen1Val, bucket._gen1Weight, void 0, void 0, 0);
            return gen2Val;
        }
        var gen1Key = bucket._gen1Key;
        if (gen1Key !== void 0 && Objects.equal(key, gen1Key)) {
            var gen1Val = bucket._gen1Val;
            this._buckets[index] = new HashGenCacheMapBucket(bucket._gen4Key, bucket._gen4Val, bucket._gen4Weight, bucket._gen3Key, bucket._gen3Val, bucket._gen3Weight, bucket._gen2Key, bucket._gen2Val, bucket._gen2Weight, void 0, void 0, 0);
            return gen1Val;
        }
        return void 0;
    };
    HashGenCacheMap.prototype.clear = function () {
        for (var i = 0; i < this._buckets.length; i += 1) {
            this._buckets[i] = void 0;
        }
    };
    HashGenCacheMap.prototype.hits = function () {
        return this._gen4Hits + this._gen3Hits + this._gen2Hits + this._gen1Hits;
    };
    HashGenCacheMap.prototype.hitRatio = function () {
        var hits = this.hits();
        return hits / (hits + this._misses);
    };
    return HashGenCacheMap;
}());
export { HashGenCacheMap };
var HashGenCacheMapBucket = (function () {
    function HashGenCacheMapBucket(gen4Key, gen4Val, gen4Weight, gen3Key, gen3Val, gen3Weight, gen2Key, gen2Val, gen2Weight, gen1Key, gen1Val, gen1Weight) {
        if (gen4Weight === void 0) { gen4Weight = 0; }
        if (gen3Weight === void 0) { gen3Weight = 0; }
        if (gen2Weight === void 0) { gen2Weight = 0; }
        if (gen1Weight === void 0) { gen1Weight = 0; }
        this._gen4Key = gen4Key;
        this._gen4Val = gen4Val;
        this._gen4Weight = gen4Weight;
        this._gen3Key = gen3Key;
        this._gen3Val = gen3Val;
        this._gen3Weight = gen3Weight;
        this._gen2Key = gen2Key;
        this._gen2Val = gen2Val;
        this._gen2Weight = gen2Weight;
        this._gen1Key = gen1Key;
        this._gen1Val = gen1Val;
        this._gen1Weight = gen1Weight;
    }
    return HashGenCacheMapBucket;
}());
export { HashGenCacheMapBucket };
//# sourceMappingURL=HashGenCacheMap.js.map