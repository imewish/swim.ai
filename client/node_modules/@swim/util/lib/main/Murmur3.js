import { NativeOrder } from "./ByteOrder";
var hashArrayBuffer = new ArrayBuffer(8);
var hashFloat64Array = new Float64Array(hashArrayBuffer);
var hashInt32Array = new Int32Array(hashArrayBuffer);
function rotl(value, distance) {
    return (value << distance) | (value >>> (32 - distance));
}
var Murmur3 = (function () {
    function Murmur3() {
    }
    Murmur3.seed = function (value) {
        if (typeof value === "object" && value) {
            if (value.constructor && typeof value.constructor.name === "string") {
                value = value.constructor.name;
            }
            else {
                value = value.toString();
            }
        }
        return Murmur3.hash(value);
    };
    Murmur3.hash = function (value) {
        if (value instanceof Uint8Array || typeof value === "string") {
            return Murmur3.mash(Murmur3.mix(0, value));
        }
        else if (typeof value === "number") {
            if (~~value === value) {
                return ~~value;
            }
            hashFloat64Array[0] = value;
            return hashInt32Array[0] ^ hashInt32Array[1];
        }
        else if (typeof value === "boolean") {
            return value ? 3 : 2;
        }
        else if (value === null) {
            return 1;
        }
        else if (value === undefined) {
            return 0;
        }
        else {
            throw new TypeError("" + value);
        }
    };
    Murmur3.mixUint8ArrayBE = function (code, array) {
        var offset = 0;
        var limit = array.length;
        while (offset + 3 < limit) {
            var word = (array[offset] & 0xff) << 24 | (array[offset + 1] & 0xff) << 16
                | (array[offset + 2] & 0xff) << 8 | array[offset + 3] & 0xff;
            code = Murmur3.mix(code, word);
            offset += 4;
        }
        if (offset < limit) {
            var word = (array[offset] & 0xff) << 24;
            if (offset + 1 < limit) {
                word |= (array[offset + 1] & 0xff) << 16;
                if (offset + 2 < limit) {
                    word |= (array[offset + 2] & 0xff) << 8;
                }
            }
            word = ((word & 0xffff) * 0xcc9e2d51) + (((word >>> 16) * 0xcc9e2d51 & 0xffff) << 16) & 0xffffffff;
            word = rotl(word, 15);
            word = ((word & 0xffff) * 0x1b873593) + (((word >>> 16) * 0x1b873593 & 0xffff) << 16) & 0xffffffff;
            code ^= word;
        }
        return code ^ limit;
    };
    Murmur3.mixUInt8ArrayLE = function (code, array) {
        var offset = 0;
        var limit = array.length;
        while (offset + 3 < limit) {
            var word = array[offset] & 0xff | (array[offset + 1] & 0xff) << 8
                | (array[offset + 2] & 0xff) << 16 | (array[offset + 3] & 0xff) << 24;
            code = Murmur3.mix(code, word);
            offset += 4;
        }
        if (offset < limit) {
            var word = array[offset] & 0xff;
            if (offset + 1 < limit) {
                word |= (array[offset + 1] & 0xff) << 8;
                if (offset + 2 < limit) {
                    word |= (array[offset + 2] & 0xff) << 16;
                }
            }
            word = ((word & 0xffff) * 0xcc9e2d51) + (((word >>> 16) * 0xcc9e2d51 & 0xffff) << 16) & 0xffffffff;
            word = rotl(word, 15);
            word = ((word & 0xffff) * 0x1b873593) + (((word >>> 16) * 0x1b873593 & 0xffff) << 16) & 0xffffffff;
            code ^= word;
        }
        return code ^ limit;
    };
    Murmur3.mixStringBE = function (code, string) {
        var word = 0;
        var k = 32;
        var i = 0;
        var n = string.length;
        var utf8Length = 0;
        while (i < n) {
            var c = string.codePointAt(i);
            if (c === void 0) {
                c = string.charCodeAt(i);
            }
            if (c >= 0 && c <= 0x7f) {
                k -= 8;
                word |= c << k;
                if (k === 0) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 32;
                }
                utf8Length += 1;
            }
            else if (c >= 0x80 && c <= 0x7ff) {
                k -= 8;
                word |= (0xc0 | (c >>> 6)) << k;
                if (k === 0) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 32;
                }
                k -= 8;
                word |= (0x80 | (c & 0x3f)) << k;
                if (k === 0) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 32;
                }
                utf8Length += 2;
            }
            else if (c >= 0x0800 && c <= 0xffff ||
                c >= 0xe000 && c <= 0xffff) {
                k -= 8;
                word |= (0xe0 | (c >>> 12)) << k;
                if (k === 0) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 32;
                }
                k -= 8;
                word |= (0x80 | ((c >>> 6) & 0x3f)) << k;
                if (k === 0) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 32;
                }
                k -= 8;
                word |= (0x80 | (c & 0x3f)) << k;
                if (k === 0) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 32;
                }
                utf8Length += 3;
            }
            else if (c >= 0x10000 && c <= 0x10ffff) {
                k -= 8;
                word |= (0xf0 | (c >>> 18)) << k;
                if (k === 0) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 32;
                }
                k -= 8;
                word |= (0x80 | ((c >>> 12) & 0x3f)) << k;
                if (k === 0) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 32;
                }
                k -= 8;
                word |= (0x80 | ((c >>> 6) & 0x3f)) << k;
                if (k === 0) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 32;
                }
                k -= 8;
                word |= (0x80 | (c & 0x3f)) << k;
                if (k === 0) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 32;
                }
                utf8Length += 4;
            }
            else {
                k -= 8;
                word |= 0xef << k;
                if (k === 0) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 32;
                }
                k -= 8;
                word |= 0xbf << k;
                if (k === 0) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 32;
                }
                k -= 8;
                word |= 0xbd << k;
                if (k === 0) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 32;
                }
                utf8Length += 3;
            }
            i = string.offsetByCodePoints(i, 1);
        }
        if (k !== 32) {
            word = ((word & 0xffff) * 0xcc9e2d51) + (((word >>> 16) * 0xcc9e2d51 & 0xffff) << 16) & 0xffffffff;
            word = rotl(word, 15);
            word = ((word & 0xffff) * 0x1b873593) + (((word >>> 16) * 0x1b873593 & 0xffff) << 16) & 0xffffffff;
            code ^= word;
        }
        return code ^ utf8Length;
    };
    Murmur3.mixStringLE = function (code, string) {
        var word = 0;
        var k = 0;
        var i = 0;
        var n = string.length;
        var utf8Length = 0;
        while (i < n) {
            var c = string.codePointAt(i);
            if (c === void 0) {
                c = string.charCodeAt(i);
            }
            if (c >= 0 && c <= 0x7f) {
                word |= c << k;
                k += 8;
                if (k === 32) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 0;
                }
                utf8Length += 1;
            }
            else if (c >= 0x80 && c <= 0x7ff) {
                word |= (0xc0 | (c >>> 6)) << k;
                k += 8;
                if (k === 32) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 0;
                }
                word |= (0x80 | (c & 0x3f)) << k;
                k += 8;
                if (k === 32) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 0;
                }
                utf8Length += 2;
            }
            else if (c >= 0x0800 && c <= 0xffff ||
                c >= 0xe000 && c <= 0xffff) {
                word |= (0xe0 | (c >>> 12)) << k;
                k += 8;
                if (k === 32) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 0;
                }
                word |= (0x80 | ((c >>> 6) & 0x3f)) << k;
                k += 8;
                if (k === 32) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 0;
                }
                word |= (0x80 | (c & 0x3f)) << k;
                k += 8;
                if (k === 32) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 0;
                }
                utf8Length += 3;
            }
            else if (c >= 0x10000 && c <= 0x10ffff) {
                word |= (0xf0 | (c >>> 18)) << k;
                k += 8;
                if (k === 32) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 0;
                }
                word |= (0x80 | ((c >>> 12) & 0x3f)) << k;
                k += 8;
                if (k === 32) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 0;
                }
                word |= (0x80 | ((c >>> 6) & 0x3f)) << k;
                k += 8;
                if (k === 32) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 0;
                }
                word |= (0x80 | (c & 0x3f)) << k;
                k += 8;
                if (k === 32) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 0;
                }
                utf8Length += 4;
            }
            else {
                word |= 0xef << k;
                k += 8;
                if (k === 32) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 0;
                }
                word |= 0xbf << k;
                k += 8;
                if (k === 32) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 0;
                }
                word |= 0xbd << k;
                k += 8;
                if (k === 32) {
                    code = Murmur3.mix(code, word);
                    word = 0;
                    k = 0;
                }
                utf8Length += 3;
            }
            i = string.offsetByCodePoints(i, 1);
        }
        if (k !== 32) {
            word = ((word & 0xffff) * 0xcc9e2d51) + (((word >>> 16) * 0xcc9e2d51 & 0xffff) << 16) & 0xffffffff;
            word = rotl(word, 15);
            word = ((word & 0xffff) * 0x1b873593) + (((word >>> 16) * 0x1b873593 & 0xffff) << 16) & 0xffffffff;
            code ^= word;
        }
        return code ^ utf8Length;
    };
    Murmur3.mix = function (code, value) {
        if (typeof value === "number") {
            value = ((value & 0xffff) * 0xcc9e2d51) + (((value >>> 16) * 0xcc9e2d51 & 0xffff) << 16) & 0xffffffff;
            value = rotl(value, 15);
            value = ((value & 0xffff) * 0x1b873593) + (((value >>> 16) * 0x1b873593 & 0xffff) << 16) & 0xffffffff;
            code ^= value;
            code = rotl(code, 13);
            code = ((code & 0xffff) * 5) + (((code >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;
            code = ((code & 0xffff) + 0x6b64) + (((code >>> 16) + 0xe654 & 0xffff) << 16);
            return code;
        }
        else if (typeof value === "string") {
            if (NativeOrder === "BE") {
                return Murmur3.mixStringBE(code, value);
            }
            else if (NativeOrder === "LE") {
                return Murmur3.mixStringLE(code, value);
            }
        }
        else if (value instanceof Uint8Array) {
            if (NativeOrder === "BE") {
                return Murmur3.mixUint8ArrayBE(code, value);
            }
            else if (NativeOrder === "LE") {
                return Murmur3.mixUInt8ArrayLE(code, value);
            }
        }
        throw new TypeError("" + value);
    };
    Murmur3.mash = function (code) {
        code ^= code >>> 16;
        code = ((code & 0xffff) * 0x85ebca6b) + (((code >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;
        code ^= code >>> 13;
        code = ((code & 0xffff) * 0xc2b2ae35) + (((code >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;
        code ^= code >>> 16;
        return code >>> 0;
    };
    return Murmur3;
}());
export { Murmur3 };
//# sourceMappingURL=Murmur3.js.map