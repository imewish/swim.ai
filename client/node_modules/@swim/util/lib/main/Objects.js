import { Murmur3 } from "./Murmur3";
var Objects = (function () {
    function Objects() {
    }
    Objects.compare = function (x, y) {
        if (x instanceof Date) {
            x = x.getTime();
        }
        if (y instanceof Date) {
            y = y.getTime();
        }
        if (x === void 0) {
            if (y === void 0) {
                return 0;
            }
            else {
                return 1;
            }
        }
        else if (x === null) {
            if (y === void 0) {
                return -1;
            }
            else if (y === null) {
                return 0;
            }
            else {
                return 1;
            }
        }
        else if (typeof x === "number") {
            if (y === void 0 || y === null) {
                return -1;
            }
            else if (typeof y === "number") {
                return x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0;
            }
            else {
                return 1;
            }
        }
        else if (typeof x === "string") {
            if (y === void 0 || y === null || typeof y === "number") {
                return -1;
            }
            else if (typeof y === "string") {
                return x < y ? -1 : x > y ? 1 : 0;
            }
            else {
                return 1;
            }
        }
        else if (typeof x === "object" && typeof x.compareTo === "function") {
            var order = x.compareTo(y);
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        }
        else if (Array.isArray(x)) {
            if (y === void 0 || y === null || typeof y === "number" || typeof y === "string") {
                return -1;
            }
            else if (Array.isArray(y)) {
                return Objects.compareArray(x, y);
            }
            else {
                return 1;
            }
        }
        else {
            if (y === void 0 || y === null || typeof y === "number" || typeof y === "string" || Array.isArray(y)) {
                return -1;
            }
            else {
                return Objects.compareObject(x, y);
            }
        }
    };
    Objects.compareArray = function (x, y) {
        var p = x.length;
        var q = y.length;
        var order = 0;
        for (var i = 0, n = Math.min(p, q); i < n && order === 0; i += 1) {
            order = Objects.compare(x[i], y[i]);
        }
        return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;
    };
    Objects.compareObject = function (x, y) {
        var xKeys = Object.keys(x);
        var yKeys = Object.keys(y);
        var p = xKeys.length;
        var q = yKeys.length;
        var n = Math.min(p, q);
        var order = 0;
        for (var i = 0; i < n && order === 0; i += 1) {
            var xKey = xKeys[i];
            var yKey = yKeys[i];
            order = Objects.compare(xKey, yKey);
            if (order === 0) {
                order = Objects.compare(x[xKey], y[yKey]);
            }
        }
        return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;
    };
    Objects.equal = function (x, y) {
        if (x instanceof Date) {
            x = x.getTime();
        }
        if (y instanceof Date) {
            y = y.getTime();
        }
        if (x === y) {
            return true;
        }
        else if (typeof x === "number") {
            if (typeof y === "number") {
                return isNaN(x) && isNaN(y);
            }
        }
        else if (typeof x === "object" && x && typeof x.equals === "function") {
            return x.equals(y);
        }
        else if (Array.isArray(x)) {
            if (Array.isArray(y)) {
                return Objects.equalArray(x, y);
            }
        }
        else if (typeof x === "object" && x) {
            if (typeof y === "object" && y) {
                return Objects.equalObject(x, y);
            }
        }
        return false;
    };
    Objects.equalArray = function (x, y) {
        var n = x.length;
        if (n !== y.length) {
            return false;
        }
        for (var i = 0; i < n; i += 1) {
            if (!Objects.equal(x[i], y[i])) {
                return false;
            }
        }
        return true;
    };
    Objects.equalObject = function (x, y) {
        var xKeys = Object.keys(x);
        var yKeys = Object.keys(y);
        var n = xKeys.length;
        if (n !== yKeys.length) {
            return false;
        }
        for (var i = 0; i < n; i += 1) {
            var key = xKeys[i];
            if (key !== yKeys[i] || !Objects.equal(x[key], y[key])) {
                return false;
            }
        }
        return true;
    };
    Objects.hash = function (x) {
        if (x === void 0 || x === null || typeof x === "boolean"
            || typeof x === "number" || typeof x === "string") {
            return Murmur3.hash(x);
        }
        else if (typeof x === "object" && typeof x.hashCode === "function") {
            return x.hashCode();
        }
        else if (Array.isArray(x)) {
            return Objects.hashArray(x);
        }
        else if (typeof x === "object") {
            return Objects.hashObject(x);
        }
        else {
            throw new TypeError("" + x);
        }
    };
    Objects.hashArray = function (x) {
        var h = 0;
        var n = x.length;
        for (var i = 0; i < n; i += 1) {
            h = Murmur3.mix(h, Objects.hash(x[i]));
        }
        return Murmur3.mash(h);
    };
    Objects.hashObject = function (x) {
        var h = 0;
        var keys = Object.keys(x);
        var n = keys.length;
        for (var i = 0; i < n; i += 1) {
            var key = keys[i];
            h = Murmur3.mix(Murmur3.mix(h, Murmur3.hash(key)), x[key]);
        }
        return Murmur3.mash(h);
    };
    return Objects;
}());
export { Objects };
//# sourceMappingURL=Objects.js.map