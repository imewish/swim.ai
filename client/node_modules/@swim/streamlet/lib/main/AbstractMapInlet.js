import { BTree } from "@swim/collections";
import { MapOutlet } from "./MapOutlet";
var AbstractMapInlet = (function () {
    function AbstractMapInlet() {
        this._input = null;
        this._effects = new BTree();
        this._version = -1;
    }
    AbstractMapInlet.prototype.input = function () {
        return this._input;
    };
    AbstractMapInlet.prototype.bindInput = function (input) {
        if (!MapOutlet.is(input)) {
            throw new TypeError("" + input);
        }
        if (this._input !== null) {
            this._input.unbindOutput(this);
        }
        this._input = input;
        if (this._input !== null) {
            this._input.bindOutput(this);
        }
    };
    AbstractMapInlet.prototype.unbindInput = function () {
        if (this._input != null) {
            this._input.unbindOutput(this);
        }
        this._input = null;
    };
    AbstractMapInlet.prototype.disconnectInputs = function () {
        var input = this._input;
        if (input !== null) {
            input.unbindOutput(this);
            this._input = null;
            input.disconnectInputs();
        }
    };
    AbstractMapInlet.prototype.disconnectOutputs = function () {
    };
    AbstractMapInlet.prototype.invalidateOutputKey = function (key, effect) {
        var oldEffects = this._effects;
        if (oldEffects.get(key) !== effect) {
            this.willInvalidateOutputKey(key, effect);
            this._effects = oldEffects.updated(key, effect);
            this._version = -1;
            this.onInvalidateOutputKey(key, effect);
            this.didInvalidateOutputKey(key, effect);
        }
    };
    AbstractMapInlet.prototype.invalidateOutput = function () {
        if (this._version >= 0) {
            this.willInvalidateOutput();
            this._version = -1;
            this.onInvalidateOutput();
            this.didInvalidateOutput();
        }
    };
    AbstractMapInlet.prototype.reconcileOutputKey = function (key, version) {
        if (this._version < 0) {
            var oldEffects = this._effects;
            var effect = oldEffects.get(key);
            if (effect !== void 0) {
                this.willReconcileOutputKey(key, effect, version);
                this._effects = oldEffects.removed(key);
                if (this._input !== null) {
                    this._input.reconcileInputKey(key, version);
                }
                this.onReconcileOutputKey(key, effect, version);
                this.didReconcileOutputKey(key, effect, version);
            }
        }
    };
    AbstractMapInlet.prototype.reconcileOutput = function (version) {
        if (this._version < 0) {
            this.willReconcileOutput(version);
            this._effects.forEach(function (key) {
                this.reconcileOutputKey(key, version);
            }, this);
            this._version = version;
            this.onReconcileOutput(version);
            this.didReconcileOutput(version);
        }
    };
    AbstractMapInlet.prototype.willInvalidateOutputKey = function (key, effect) {
    };
    AbstractMapInlet.prototype.onInvalidateOutputKey = function (key, effect) {
    };
    AbstractMapInlet.prototype.didInvalidateOutputKey = function (key, effect) {
    };
    AbstractMapInlet.prototype.willInvalidateOutput = function () {
    };
    AbstractMapInlet.prototype.onInvalidateOutput = function () {
    };
    AbstractMapInlet.prototype.didInvalidateOutput = function () {
    };
    AbstractMapInlet.prototype.willReconcileOutputKey = function (key, effect, version) {
    };
    AbstractMapInlet.prototype.onReconcileOutputKey = function (key, effect, version) {
    };
    AbstractMapInlet.prototype.didReconcileOutputKey = function (key, effect, version) {
    };
    AbstractMapInlet.prototype.willReconcileOutput = function (version) {
    };
    AbstractMapInlet.prototype.onReconcileOutput = function (version) {
    };
    AbstractMapInlet.prototype.didReconcileOutput = function (version) {
    };
    return AbstractMapInlet;
}());
export { AbstractMapInlet };
//# sourceMappingURL=AbstractMapInlet.js.map