import { InletType, InletOptions, Inlet } from "./Inlet";
import { OutletType, OutletOptions, Outlet } from "./Outlet";
import { InoutletType, InoutletOptions, Inoutlet } from "./Inoutlet";
import { StreamletContext } from "./StreamletContext";
import { StreamletScope } from "./StreamletScope";
import { Streamlet } from "./Streamlet";
import { GenericStreamlet } from "./GenericStreamlet";
export declare class InletDescriptor {
    readonly key: string;
    readonly name: string;
    readonly type: InletType;
    constructor(key: string, name: string, type: InletType);
}
export declare class OutletDescriptor {
    readonly key: string;
    readonly name: string;
    readonly type: OutletType;
    constructor(key: string, name: string, type: OutletType);
}
export declare class InoutletDescriptor {
    readonly key: string;
    readonly name: string;
    readonly type: InoutletType;
    constructor(key: string, name: string, type: InoutletType);
}
export interface StreamletClass {
    _inlets?: {
        [name: string]: InletDescriptor | InoutletDescriptor | undefined;
    };
    _outlets?: {
        [name: string]: OutletDescriptor | InoutletDescriptor | undefined;
    };
    _inoutlets?: {
        [name: string]: InoutletDescriptor | undefined;
    };
}
export declare abstract class AbstractStreamlet<I = unknown, O = I> implements GenericStreamlet<I, O> {
    protected scope: StreamletScope<O> | null;
    protected context: StreamletContext | null;
    protected _version: number;
    constructor(scope?: StreamletScope<O> | null);
    protected streamletClass(): StreamletClass;
    streamletScope(): StreamletScope<O> | null;
    setStreamletScope(scope: StreamletScope<O> | null): void;
    streamletContext(): StreamletContext | null;
    setStreamletContext(context: StreamletContext | null): void;
    inlet(key: string): Inlet<I> | null;
    inlet<I2 extends I>(): Inlet<I2>;
    bindInput(key: string, input: Outlet<I>): void;
    unbindInput(key: string): void;
    outlet(key: string | Outlet<O>): Outlet<O> | null;
    outlet<O2>(): Outlet<O2>;
    inoutlet<I2 extends I, O2>(): Inoutlet<I2, O2>;
    invalidate(): void;
    reconcile(version: number): void;
    getInput<I2 extends I>(inlet: Inlet<I2> | string): I2 | undefined;
    getInput<I2 extends I, E = I2>(inlet: Inlet<I2> | string, orElse: E): I2 | E;
    getOutput(outlet: Outlet<O> | string): O | undefined;
    disconnectInputs(): void;
    static disconnectInputs<I, O>(streamlet: Streamlet<I, O>, streamletClass: StreamletClass | null): void;
    disconnectOutputs(): void;
    static disconnectOutputs<I, O>(streamlet: Streamlet<I, O>, streamletClass: StreamletClass | null): void;
    willInvalidateInlet(inlet: Inlet<I>): void;
    didInvalidateInlet(inlet: Inlet<I>): void;
    willReconcileInlet(inlet: Inlet<I>, version: number): void;
    didReconcileInlet(inlet: Inlet<I>, version: number): void;
    willInvalidateOutlet(outlet: Outlet<O>): void;
    didInvalidateOutlet(outlet: Outlet<O>): void;
    willReconcileOutlet(outlet: Outlet<O>, version: number): void;
    didReconcileOutlet(outlet: Outlet<O>, version: number): void;
    protected willInvalidate(): void;
    protected onInvalidate(): void;
    protected onInvalidateOutlets(): void;
    static invalidateOutlets<I, O>(streamlet: Streamlet<I, O>, streamletClass: StreamletClass | null): void;
    protected didInvalidate(): void;
    protected willReconcile(version: number): void;
    protected onReconcileInlets(version: number): void;
    static reconcileInlets<I, O>(version: number, streamlet: Streamlet<I, O>, streamletClass: StreamletClass | null): void;
    protected onReconcile(version: number): void;
    protected onReconcileOutlets(version: number): void;
    static reconcileOutlets<I, O>(version: number, streamlet: Streamlet<I, O>, streamletClass: StreamletClass | null): void;
    protected didReconcile(version: number): void;
    static reflectEachInlet<I, O, T, S>(streamlet: Streamlet<I, O>, streamletClass: StreamletClass | null, callback: (this: S, inlet: Inlet<I>, name: string, index: number) => T | void, thisArg?: S): T | undefined;
    static reflectEachOutlet<I, O, T, S>(streamlet: Streamlet<I, O>, streamletClass: StreamletClass | null, callback: (this: S, outlet: Outlet<O>, name: string, index: number) => T | void, thisArg?: S): T | undefined;
    static reflectInletCount(streamletClass: StreamletClass | null): number;
    static reflectOutletCount(streamletClass: StreamletClass | null): number;
    static reflectInletIndex<I, O>(index: number, streamlet: Streamlet<I, O>, streamletClass: StreamletClass | null): [string, Inlet<I>] | null;
    static reflectOutletIndex<I, O>(index: number, streamlet: Streamlet<I, O>, streamletClass: StreamletClass | null): [string, Outlet<O>] | null;
    static reflectInletKey<I, O>(key: string, streamlet: Streamlet<I, O>, streamletClass: StreamletClass | null): Inlet<I> | null;
    static reflectOutletKey<I, O>(key: string, streamlet: Streamlet<I, O>, streamletClass: StreamletClass | null): Outlet<O> | null;
    static reflectInletField<I, O>(streamlet: Streamlet<I, O>, inletDescriptor: InletDescriptor): Inlet<I>;
    static reflectValueInletField<I, O>(streamlet: Streamlet<I, O>, key: string): Inlet<I>;
    static reflectMapInletField<I, O>(streamlet: Streamlet<I, O>, key: string): Inlet<I>;
    static reflectOutletField<I, O>(streamlet: Streamlet<I, O>, outletDescriptor: OutletDescriptor): Outlet<O>;
    static reflectValueOutletField<I, O>(streamlet: Streamlet<I, O>, key: string): Outlet<O>;
    static reflectMapOutletField<I, O>(streamlet: Streamlet<I, O>, key: string): Outlet<O>;
    static reflectInoutletField<I, O>(streamlet: Streamlet<I, O>, inoutletDescriptor: InoutletDescriptor): Inoutlet<I, O>;
    static reflectValueInoutletField<I, O>(streamlet: Streamlet<I, O>, key: string): Inoutlet<I, O>;
    static reflectMapInoutletField<I, O>(streamlet: Streamlet<I, O>, key: string): Inoutlet<I, O>;
    static init(streamletClass: StreamletClass): void;
    static decorateInlet(options: InletOptions, target: StreamletClass, key: string): void;
    static decorateOutlet(options: OutletOptions, target: StreamletClass, key: string): void;
    static decorateInoutlet(options: InoutletOptions, target: StreamletClass, key: string): void;
}
//# sourceMappingURL=AbstractStreamlet.d.ts.map