import { Cursor } from "@swim/util";
import { BTree } from "@swim/collections";
import { Outlet } from "./Outlet";
import { MapInlet } from "./MapInlet";
import { MapOutlet } from "./MapOutlet";
import { KeyOutlet } from "./KeyOutlet";
var AbstractMapOutlet = (function () {
    function AbstractMapOutlet() {
        this._effects = new BTree();
        this._outlets = new BTree();
        this._outputs = null;
        this._version = -1;
    }
    AbstractMapOutlet.prototype.outlet = function (key) {
        var outlet = this._outlets.get(key);
        if (outlet === void 0) {
            outlet = new KeyOutlet(this, key);
            this._outlets = this._outlets.updated(key, outlet);
        }
        return outlet;
    };
    AbstractMapOutlet.prototype.outputIterator = function () {
        return this._outputs !== null ? Cursor.array(this._outputs) : Cursor.empty();
    };
    AbstractMapOutlet.prototype.bindOutput = function (output) {
        var oldOutputs = this._outputs;
        var n = oldOutputs !== null ? oldOutputs.length : 0;
        var newOutputs = new Array(n + 1);
        for (var i = 0; i < n; i += 1) {
            newOutputs[i] = oldOutputs[i];
        }
        newOutputs[n] = output;
        this._outputs = newOutputs;
    };
    AbstractMapOutlet.prototype.unbindOutput = function (output) {
        var oldOutputs = this._outputs;
        var n = oldOutputs !== null ? oldOutputs.length : 0;
        for (var i = 0; i < n; i += 1) {
            if (oldOutputs[i] === output) {
                if (n > 1) {
                    var newOutputs = new Array(n - 1);
                    for (var j = 0; j < i; j += 1) {
                        newOutputs[j] = oldOutputs[j];
                    }
                    for (var j = i; j < n - 1; j += 1) {
                        newOutputs[j] = oldOutputs[j + 1];
                    }
                    this._outputs = newOutputs;
                }
                else {
                    this._outputs = null;
                }
                break;
            }
        }
    };
    AbstractMapOutlet.prototype.unbindOutputs = function () {
        var outlets = this._outlets;
        if (outlets.isEmpty()) {
            this._outlets = new BTree();
            outlets.forEach(function (key, keyOutlet) {
                keyOutlet.unbindOutputs();
            }, this);
        }
        var outputs = this._outputs;
        if (outputs !== null) {
            this._outputs = null;
            for (var i = 0, n = outputs.length; i < n; i += 1) {
                var output = outputs[i];
                output.unbindInput();
            }
        }
    };
    AbstractMapOutlet.prototype.disconnectOutputs = function () {
        var outlets = this._outlets;
        if (outlets.isEmpty()) {
            this._outlets = new BTree();
            outlets.forEach(function (key, keyOutlet) {
                keyOutlet.disconnectOutputs();
            }, this);
        }
        var outputs = this._outputs;
        if (outputs !== null) {
            this._outputs = null;
            for (var i = 0, n = outputs.length; i < n; i += 1) {
                var output = outputs[i];
                output.unbindInput();
                output.disconnectOutputs();
            }
        }
    };
    AbstractMapOutlet.prototype.disconnectInputs = function () {
    };
    AbstractMapOutlet.prototype.invalidateInputKey = function (key, effect) {
        var oldEffects = this._effects;
        if (oldEffects.get(key) !== effect) {
            this.willInvalidateInputKey(key, effect);
            this._effects = oldEffects.updated(key, effect);
            this._version = -1;
            this.onInvalidateInputKey(key, effect);
            var n = this._outputs !== null ? this._outputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                var output = this._outputs[i];
                if (MapInlet.is(output)) {
                    output.invalidateOutputKey(key, effect);
                }
                else {
                    output.invalidateOutput();
                }
            }
            var outlet = this._outlets.get(key);
            if (outlet !== void 0) {
                outlet.invalidateInput();
            }
            this.didInvalidateInputKey(key, effect);
        }
    };
    AbstractMapOutlet.prototype.invalidateInput = function () {
        if (this._version >= 0) {
            this.willInvalidateInput();
            this._version = -1;
            this.onInvalidateInput();
            var n = this._outputs !== null ? this._outputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                this._outputs[i].invalidateOutput();
            }
            this._outlets.forEach(function (key, outlet) {
                outlet.invalidateInput();
            }, this);
            this.didInvalidateInput();
        }
    };
    AbstractMapOutlet.prototype.reconcileInputKey = function (key, version) {
        if (this._version < 0) {
            var oldEffects = this._effects;
            var effect = oldEffects.get(key);
            if (effect !== void 0) {
                this.willReconcileInputKey(key, effect, version);
                this._effects = oldEffects.removed(key);
                this.onReconcileInputKey(key, effect, version);
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    var output = this._outputs[i];
                    if (MapInlet.is(output)) {
                        output.reconcileOutputKey(key, version);
                    }
                }
                var outlet = this._outlets.get(key);
                if (outlet !== void 0) {
                    outlet.reconcileInput(version);
                }
                this.didReconcileInputKey(key, effect, version);
            }
        }
    };
    AbstractMapOutlet.prototype.reconcileInput = function (version) {
        if (this._version < 0) {
            this.willReconcileInput(version);
            this._effects.forEach(function (key) {
                this.reconcileInputKey(key, version);
            }, this);
            this._version = version;
            this.onReconcileInput(version);
            for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                this._outputs[i].reconcileOutput(version);
            }
            this.didReconcileInput(version);
        }
    };
    AbstractMapOutlet.prototype.willInvalidateInputKey = function (key, effect) {
    };
    AbstractMapOutlet.prototype.onInvalidateInputKey = function (key, effect) {
    };
    AbstractMapOutlet.prototype.didInvalidateInputKey = function (key, effect) {
    };
    AbstractMapOutlet.prototype.willInvalidateInput = function () {
    };
    AbstractMapOutlet.prototype.onInvalidateInput = function () {
    };
    AbstractMapOutlet.prototype.didInvalidateInput = function () {
    };
    AbstractMapOutlet.prototype.willReconcileInputKey = function (key, effect, version) {
    };
    AbstractMapOutlet.prototype.onReconcileInputKey = function (key, effect, version) {
    };
    AbstractMapOutlet.prototype.didReconcileInputKey = function (key, effect, version) {
    };
    AbstractMapOutlet.prototype.willReconcileInput = function (version) {
    };
    AbstractMapOutlet.prototype.onReconcileInput = function (version) {
    };
    AbstractMapOutlet.prototype.didReconcileInput = function (version) {
    };
    AbstractMapOutlet.prototype.memoize = function () {
        var combinator = new MapOutlet.MemoizeMapCombinator();
        combinator.bindInput(this);
        return combinator;
    };
    AbstractMapOutlet.prototype.filter = function (func) {
        var combinator = new MapOutlet.FilterFieldsCombinator(func);
        combinator.bindInput(this);
        return combinator;
    };
    AbstractMapOutlet.prototype.map = function (func) {
        if (func.length === 1) {
            var combinator = new Outlet.MapValueCombinator(func);
            combinator.bindInput(this);
            return combinator;
        }
        else {
            var combinator = new MapOutlet.MapFieldValuesCombinator(func);
            combinator.bindInput(this);
            return combinator;
        }
    };
    AbstractMapOutlet.prototype.reduce = function (identity, accumulator, combiner) {
        var combinator = new MapOutlet.ReduceFieldsCombinator(identity, accumulator, combiner);
        combinator.bindInput(this);
        return combinator;
    };
    AbstractMapOutlet.prototype.watch = function (func) {
        if (func.length === 1) {
            var combinator = new Outlet.WatchValueCombinator(func);
            combinator.bindInput(this);
            return this;
        }
        else {
            var combinator = new MapOutlet.WatchFieldsCombinator(func);
            combinator.bindInput(this);
            return this;
        }
    };
    return AbstractMapOutlet;
}());
export { AbstractMapOutlet };
//# sourceMappingURL=AbstractMapOutlet.js.map