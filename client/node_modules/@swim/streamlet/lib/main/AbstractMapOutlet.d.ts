import { Iterator, Map } from "@swim/util";
import { BTree } from "@swim/collections";
import { Inlet } from "./Inlet";
import { Outlet } from "./Outlet";
import { KeyEffect } from "./KeyEffect";
import { MapOutlet } from "./MapOutlet";
import { KeyOutlet } from "./KeyOutlet";
import { FilterFieldsFunction } from "./function";
import { MapValueFunction, MapFieldValuesFunction } from "./function";
import { WatchValueFunction, WatchFieldsFunction } from "./function";
export declare abstract class AbstractMapOutlet<K, V, O> implements MapOutlet<K, V, O> {
    protected _effects: BTree<K, KeyEffect>;
    protected _outlets: BTree<K, KeyOutlet<K, V>>;
    protected _outputs: ReadonlyArray<Inlet<O>> | null;
    protected _version: number;
    constructor();
    abstract has(key: K): boolean;
    abstract get(): O | undefined;
    abstract get(key: K): V | undefined;
    abstract keyIterator(): Iterator<K>;
    outlet(key: K): Outlet<V>;
    outputIterator(): Iterator<Inlet<O>>;
    bindOutput(output: Inlet<O>): void;
    unbindOutput(output: Inlet<O>): void;
    unbindOutputs(): void;
    disconnectOutputs(): void;
    disconnectInputs(): void;
    invalidateInputKey(key: K, effect: KeyEffect): void;
    invalidateInput(): void;
    reconcileInputKey(key: K, version: number): void;
    reconcileInput(version: number): void;
    protected willInvalidateInputKey(key: K, effect: KeyEffect): void;
    protected onInvalidateInputKey(key: K, effect: KeyEffect): void;
    protected didInvalidateInputKey(key: K, effect: KeyEffect): void;
    protected willInvalidateInput(): void;
    protected onInvalidateInput(): void;
    protected didInvalidateInput(): void;
    protected willReconcileInputKey(key: K, effect: KeyEffect, version: number): void;
    protected onReconcileInputKey(key: K, effect: KeyEffect, version: number): void;
    protected didReconcileInputKey(key: K, effect: KeyEffect, version: number): void;
    protected willReconcileInput(version: number): void;
    protected onReconcileInput(version: number): void;
    protected didReconcileInput(version: number): void;
    memoize(): MapOutlet<K, V, O>;
    filter(func: FilterFieldsFunction<K, V>): MapOutlet<K, V, Map<K, V>>;
    map<O2>(func: MapValueFunction<O, O2>): Outlet<O2>;
    map<V2>(func: MapFieldValuesFunction<K, V, V2>): MapOutlet<K, V2, Map<K, V2>>;
    reduce<U>(identity: U, accumulator: (result: U, element: V) => U, combiner: (result: U, result2: U) => U): Outlet<U>;
    watch(func: WatchValueFunction<O>): this;
    watch(func: WatchFieldsFunction<K, V>): this;
}
//# sourceMappingURL=AbstractMapOutlet.d.ts.map