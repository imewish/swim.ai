import { __extends } from "tslib";
import { BTree } from "@swim/collections";
import { AbstractMapOutlet } from "./AbstractMapOutlet";
var MapInput = (function (_super) {
    __extends(MapInput, _super);
    function MapInput(state) {
        if (state === void 0) { state = new BTree(); }
        var _this = _super.call(this) || this;
        _this._state = state;
        state.forEach(function (key) {
            this._effects = this._effects.updated(key, 0);
        }, _this);
        return _this;
    }
    MapInput.prototype.has = function (key) {
        return this._state.has(key);
    };
    MapInput.prototype.get = function (key) {
        if (key === void 0) {
            return this._state;
        }
        else {
            return this._state.get(key);
        }
    };
    MapInput.prototype.set = function (key, newValue) {
        var oldValue = this._state.get(key);
        this._state = this._state.updated(key, newValue);
        this.invalidateInputKey(key, 0);
        return oldValue;
    };
    MapInput.prototype.delete = function (key) {
        var oldState = this._state;
        var newState = oldState.removed(key);
        if (oldState !== newState) {
            this._state = newState;
            this.invalidateInputKey(key, 1);
        }
        return this;
    };
    MapInput.prototype.keyIterator = function () {
        return this._state.keys();
    };
    return MapInput;
}(AbstractMapOutlet));
export { MapInput };
//# sourceMappingURL=MapInput.js.map