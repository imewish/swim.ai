import { Inlet } from "./Inlet";
import { Outlet } from "./Outlet";
import { StreamletContext } from "./StreamletContext";
import { StreamletScope } from "./StreamletScope";
export interface Streamlet<I = unknown, O = I> extends StreamletScope<O> {
    streamletScope(): StreamletScope<O> | null;
    setStreamletScope(scope: StreamletScope<O> | null): void;
    streamletContext(): StreamletContext | null;
    setStreamletContext(context: StreamletContext | null): void;
    inlet(key: string): Inlet<I> | null;
    bindInput(key: string, input: Outlet<I>): void;
    unbindInput(key: string): void;
    outlet(key: string): Outlet<O> | null;
    disconnectInputs(): void;
    disconnectOutputs(): void;
    invalidate(): void;
    reconcile(version: number): void;
}
export declare const Streamlet: {
    is<I, O>(object: unknown): object is Streamlet<I, O>;
};
//# sourceMappingURL=Streamlet.d.ts.map