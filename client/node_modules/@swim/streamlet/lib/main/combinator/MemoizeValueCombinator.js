import { __extends } from "tslib";
import { Outlet } from "../Outlet";
import { AbstractInoutlet } from "../AbstractInoutlet";
var MemoizeValueCombinator = (function (_super) {
    __extends(MemoizeValueCombinator, _super);
    function MemoizeValueCombinator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MemoizeValueCombinator.prototype.get = function () {
        return this._state;
    };
    MemoizeValueCombinator.prototype.onReconcile = function (version) {
        if (this._input !== null) {
            this._state = this._input.get();
        }
    };
    MemoizeValueCombinator.prototype.memoize = function () {
        return this;
    };
    return MemoizeValueCombinator;
}(AbstractInoutlet));
export { MemoizeValueCombinator };
Outlet.MemoizeValueCombinator = MemoizeValueCombinator;
//# sourceMappingURL=MemoizeValueCombinator.js.map