import { Iterator } from "@swim/util";
import { BTree } from "@swim/collections";
import { KeyEffect } from "../KeyEffect";
import { MapOutlet } from "../MapOutlet";
import { AbstractMapInoutlet } from "../AbstractMapInoutlet";
export declare class MemoizeMapCombinator<K, V, IO> extends AbstractMapInoutlet<K, V, V, IO, IO> {
    protected _state: IO | undefined;
    protected _cache: BTree<K, V>;
    constructor();
    has(key: K): boolean;
    get(): IO | undefined;
    get(key: K): V | undefined;
    keyIterator(): Iterator<K>;
    protected onReconcileKey(key: K, effect: KeyEffect, version: number): void;
    protected onReconcile(version: number): void;
    memoize(): MapOutlet<K, V, IO>;
}
//# sourceMappingURL=MemoizeMapCombinator.d.ts.map