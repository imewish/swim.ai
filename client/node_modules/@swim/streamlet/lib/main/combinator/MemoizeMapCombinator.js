import { __extends } from "tslib";
import { BTree } from "@swim/collections";
import { MapOutlet } from "../MapOutlet";
import { AbstractMapInoutlet } from "../AbstractMapInoutlet";
var MemoizeMapCombinator = (function (_super) {
    __extends(MemoizeMapCombinator, _super);
    function MemoizeMapCombinator() {
        var _this = _super.call(this) || this;
        _this._cache = new BTree();
        return _this;
    }
    MemoizeMapCombinator.prototype.has = function (key) {
        return this._cache.has(key);
    };
    MemoizeMapCombinator.prototype.get = function (key) {
        if (key === void 0) {
            if (this._state === void 0 && this._input != null) {
                this._state = this._input.get();
            }
            return this._state;
        }
        else {
            return this._cache.get(key);
        }
    };
    MemoizeMapCombinator.prototype.keyIterator = function () {
        return this._cache.keys();
    };
    MemoizeMapCombinator.prototype.onReconcileKey = function (key, effect, version) {
        if (effect === 0) {
            if (this._input !== null) {
                var value = this._input.get(key);
                if (value !== void 0) {
                    this._cache = this._cache.updated(key, value);
                }
                else {
                    this._cache = this._cache.removed(key);
                }
            }
        }
        else if (effect === 1) {
            this._cache = this._cache.removed(key);
        }
    };
    MemoizeMapCombinator.prototype.onReconcile = function (version) {
        this._state = void 0;
    };
    MemoizeMapCombinator.prototype.memoize = function () {
        return this;
    };
    return MemoizeMapCombinator;
}(AbstractMapInoutlet));
export { MemoizeMapCombinator };
MapOutlet.MemoizeMapCombinator = MemoizeMapCombinator;
//# sourceMappingURL=MemoizeMapCombinator.js.map