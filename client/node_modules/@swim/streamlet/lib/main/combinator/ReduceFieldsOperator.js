import { __extends } from "tslib";
import { BTree } from "@swim/collections";
import { AbstractMapInletOutlet } from "../AbstractMapInletOutlet";
var ReduceFieldsOperator = (function (_super) {
    __extends(ReduceFieldsOperator, _super);
    function ReduceFieldsOperator() {
        var _this = _super.call(this) || this;
        _this._state = new BTree();
        return _this;
    }
    ReduceFieldsOperator.prototype.get = function () {
        return this._state.reduced(this.identity(), this.accumulate.bind(this), this.combine.bind(this));
    };
    ReduceFieldsOperator.prototype.onReconcileOutputKey = function (key, effect, version) {
        if (effect === 0) {
            if (this._input !== null) {
                var value = this._input.get(key);
                if (value !== void 0) {
                    this._state.set(key, value);
                }
                else {
                    this._state.delete(key);
                }
            }
        }
        else if (effect === 1) {
            this._state.delete(key);
        }
    };
    return ReduceFieldsOperator;
}(AbstractMapInletOutlet));
export { ReduceFieldsOperator };
//# sourceMappingURL=ReduceFieldsOperator.js.map