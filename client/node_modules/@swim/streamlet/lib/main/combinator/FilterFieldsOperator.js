import { __extends } from "tslib";
import { Cursor } from "@swim/util";
import { BTree } from "@swim/collections";
import { AbstractMapInletMapOutlet } from "../AbstractMapInletMapOutlet";
var FilterFieldsOperator = (function (_super) {
    __extends(FilterFieldsOperator, _super);
    function FilterFieldsOperator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FilterFieldsOperator.prototype.has = function (key) {
        if (this._input !== null) {
            var value = this._input.get(key);
            return value !== void 0 && this.evaluate(key, value);
        }
        return false;
    };
    FilterFieldsOperator.prototype.get = function (key) {
        if (key === void 0) {
            var output = new BTree();
            var keys = this.keyIterator();
            do {
                var next = keys.next();
                if (!next.done) {
                    var key_1 = next.value;
                    var value = this._input.get(key_1);
                    if (value !== void 0 && this.evaluate(key_1, value)) {
                        output.set(key_1, value);
                    }
                    continue;
                }
                break;
            } while (true);
            return output;
        }
        else {
            if (this._input !== null) {
                var value = this._input.get(key);
                if (value !== void 0 && this.evaluate(key, value)) {
                    return value;
                }
            }
            return void 0;
        }
    };
    FilterFieldsOperator.prototype.keyIterator = function () {
        if (this._input !== null) {
            return this._input.keyIterator();
        }
        else {
            return Cursor.empty();
        }
    };
    FilterFieldsOperator.prototype.onInvalidateOutputKey = function (key, effect) {
        this.invalidateInputKey(key, effect);
    };
    FilterFieldsOperator.prototype.onReconcileOutputKey = function (key, effect, version) {
        this.reconcileInputKey(key, version);
    };
    FilterFieldsOperator.prototype.willReconcileInputKey = function (key, effect, version) {
        if (effect === 0) {
            if (this._input !== null) {
                var value = this._input.get(key);
                if (value === void 0 || !this.evaluate(key, value)) {
                    return 1;
                }
            }
        }
        return effect;
    };
    return FilterFieldsOperator;
}(AbstractMapInletMapOutlet));
export { FilterFieldsOperator };
//# sourceMappingURL=FilterFieldsOperator.js.map