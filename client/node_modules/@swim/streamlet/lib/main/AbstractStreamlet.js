import { StreamletInlet } from "./StreamletInlet";
import { StreamletOutlet } from "./StreamletOutlet";
import { StreamletInoutlet } from "./StreamletInoutlet";
var InletDescriptor = (function () {
    function InletDescriptor(key, name, type) {
        this.key = key;
        this.name = name;
        this.type = type;
    }
    return InletDescriptor;
}());
export { InletDescriptor };
var OutletDescriptor = (function () {
    function OutletDescriptor(key, name, type) {
        this.key = key;
        this.name = name;
        this.type = type;
    }
    return OutletDescriptor;
}());
export { OutletDescriptor };
var InoutletDescriptor = (function () {
    function InoutletDescriptor(key, name, type) {
        this.key = key;
        this.name = name;
        this.type = type;
    }
    return InoutletDescriptor;
}());
export { InoutletDescriptor };
var AbstractStreamlet = (function () {
    function AbstractStreamlet(scope) {
        if (scope === void 0) { scope = null; }
        this.scope = scope;
        this._version = -1;
    }
    AbstractStreamlet.prototype.streamletClass = function () {
        return this.__proto__;
    };
    AbstractStreamlet.prototype.streamletScope = function () {
        return this.scope;
    };
    AbstractStreamlet.prototype.setStreamletScope = function (scope) {
        this.scope = scope;
    };
    AbstractStreamlet.prototype.streamletContext = function () {
        if (this.context) {
            return this.context;
        }
        var scope = this.streamletScope();
        if (scope !== null) {
            return scope.streamletContext();
        }
        return null;
    };
    AbstractStreamlet.prototype.setStreamletContext = function (context) {
        this.context = context;
    };
    AbstractStreamlet.prototype.inlet = function (key) {
        if (key === void 0) {
            return new StreamletInlet(this);
        }
        else {
            return AbstractStreamlet.reflectInletKey(key, this, this.streamletClass());
        }
    };
    AbstractStreamlet.prototype.bindInput = function (key, input) {
        var inlet = this.inlet(key);
        if (inlet === null) {
            throw new Error("" + key);
        }
        inlet.bindInput(input);
    };
    AbstractStreamlet.prototype.unbindInput = function (key) {
        var inlet = this.inlet(key);
        if (inlet === null) {
            throw new Error("" + key);
        }
        inlet.unbindInput();
    };
    AbstractStreamlet.prototype.outlet = function (key) {
        if (key === void 0) {
            return new StreamletOutlet(this);
        }
        else if (typeof key === "string") {
            return AbstractStreamlet.reflectOutletKey(key, this, this.streamletClass());
        }
        else {
            return key;
        }
    };
    AbstractStreamlet.prototype.inoutlet = function () {
        return new StreamletInoutlet(this);
    };
    AbstractStreamlet.prototype.invalidate = function () {
        if (this._version >= 0) {
            this.willInvalidate();
            this._version = -1;
            this.onInvalidate();
            this.onInvalidateOutlets();
            this.didInvalidate();
        }
    };
    AbstractStreamlet.prototype.reconcile = function (version) {
        if (this._version < 0) {
            this.willReconcile(version);
            this._version = version;
            this.onReconcileInlets(version);
            this.onReconcile(version);
            this.onReconcileOutlets(version);
            this.didReconcile(version);
        }
    };
    AbstractStreamlet.prototype.getInput = function (inlet, orElse) {
        if (typeof inlet === "string") {
            inlet = this.inlet(inlet);
        }
        var object;
        if (inlet !== null) {
            var input = inlet.input();
            if (input !== null) {
                object = input.get();
            }
        }
        if (object === void 0) {
            object = orElse;
        }
        return object;
    };
    AbstractStreamlet.prototype.getOutput = function (outlet) {
        return void 0;
    };
    AbstractStreamlet.prototype.disconnectInputs = function () {
        AbstractStreamlet.disconnectInputs(this, this.streamletClass());
    };
    AbstractStreamlet.disconnectInputs = function (streamlet, streamletClass) {
        while (streamletClass) {
            if (streamletClass.hasOwnProperty("_inlets")) {
                for (var name_1 in streamletClass._inlets) {
                    var inletDescriptor = streamletClass._inlets[name_1];
                    if (inletDescriptor instanceof InletDescriptor) {
                        var inlet = AbstractStreamlet.reflectInletField(streamlet, inletDescriptor);
                        inlet.disconnectInputs();
                    }
                    else if (inletDescriptor instanceof InoutletDescriptor) {
                        var inoutlet = AbstractStreamlet.reflectInoutletField(streamlet, inletDescriptor);
                        inoutlet.disconnectInputs();
                    }
                }
            }
            streamletClass = streamletClass.__proto__;
        }
    };
    AbstractStreamlet.prototype.disconnectOutputs = function () {
        AbstractStreamlet.disconnectOutputs(this, this.streamletClass());
    };
    AbstractStreamlet.disconnectOutputs = function (streamlet, streamletClass) {
        while (streamletClass) {
            if (streamletClass.hasOwnProperty("_outlets")) {
                for (var name_2 in streamletClass._outlets) {
                    var outletDescriptor = streamletClass._outlets[name_2];
                    if (outletDescriptor instanceof OutletDescriptor) {
                        var outlet = AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor);
                        outlet.disconnectOutputs();
                    }
                    else if (outletDescriptor instanceof InoutletDescriptor) {
                        var inoutlet = AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor);
                        inoutlet.disconnectOutputs();
                    }
                }
            }
            streamletClass = streamletClass.__proto__;
        }
    };
    AbstractStreamlet.prototype.willInvalidateInlet = function (inlet) {
    };
    AbstractStreamlet.prototype.didInvalidateInlet = function (inlet) {
        this.invalidate();
    };
    AbstractStreamlet.prototype.willReconcileInlet = function (inlet, version) {
    };
    AbstractStreamlet.prototype.didReconcileInlet = function (inlet, version) {
        this.reconcile(version);
    };
    AbstractStreamlet.prototype.willInvalidateOutlet = function (outlet) {
    };
    AbstractStreamlet.prototype.didInvalidateOutlet = function (outlet) {
    };
    AbstractStreamlet.prototype.willReconcileOutlet = function (outlet, version) {
    };
    AbstractStreamlet.prototype.didReconcileOutlet = function (outlet, version) {
    };
    AbstractStreamlet.prototype.willInvalidate = function () {
    };
    AbstractStreamlet.prototype.onInvalidate = function () {
    };
    AbstractStreamlet.prototype.onInvalidateOutlets = function () {
        AbstractStreamlet.invalidateOutlets(this, this.streamletClass());
    };
    AbstractStreamlet.invalidateOutlets = function (streamlet, streamletClass) {
        while (streamletClass) {
            if (streamletClass.hasOwnProperty("_outlets")) {
                for (var name_3 in streamletClass._outlets) {
                    var outletDescriptor = streamletClass._outlets[name_3];
                    if (outletDescriptor instanceof OutletDescriptor) {
                        var outlet = AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor);
                        outlet.invalidateInput();
                    }
                    else if (outletDescriptor instanceof InoutletDescriptor) {
                        var inoutlet = AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor);
                        inoutlet.invalidateInput();
                    }
                }
            }
            streamletClass = streamletClass.__proto__;
        }
    };
    AbstractStreamlet.prototype.didInvalidate = function () {
    };
    AbstractStreamlet.prototype.willReconcile = function (version) {
    };
    AbstractStreamlet.prototype.onReconcileInlets = function (version) {
        AbstractStreamlet.reconcileInlets(version, this, this.streamletClass());
    };
    AbstractStreamlet.reconcileInlets = function (version, streamlet, streamletClass) {
        while (streamletClass) {
            if (streamletClass.hasOwnProperty("_inlets")) {
                for (var name_4 in streamletClass._inlets) {
                    var inletDescriptor = streamletClass._inlets[name_4];
                    if (inletDescriptor instanceof InletDescriptor) {
                        var inlet = AbstractStreamlet.reflectInletField(streamlet, inletDescriptor);
                        inlet.reconcileOutput(version);
                    }
                    else if (inletDescriptor instanceof InoutletDescriptor) {
                        var inoutlet = AbstractStreamlet.reflectInoutletField(streamlet, inletDescriptor);
                        inoutlet.reconcileOutput(version);
                    }
                }
            }
            streamletClass = streamletClass.__proto__;
        }
    };
    AbstractStreamlet.prototype.onReconcile = function (version) {
    };
    AbstractStreamlet.prototype.onReconcileOutlets = function (version) {
        AbstractStreamlet.reconcileOutlets(version, this, this.streamletClass());
    };
    AbstractStreamlet.reconcileOutlets = function (version, streamlet, streamletClass) {
        while (streamletClass) {
            if (streamletClass.hasOwnProperty("_outlets")) {
                for (var name_5 in streamletClass._outlets) {
                    var outletDescriptor = streamletClass._outlets[name_5];
                    if (outletDescriptor instanceof OutletDescriptor) {
                        var outlet = AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor);
                        outlet.reconcileInput(version);
                    }
                    else if (outletDescriptor instanceof InoutletDescriptor) {
                        var inoutlet = AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor);
                        inoutlet.reconcileInput(version);
                    }
                }
            }
            streamletClass = streamletClass.__proto__;
        }
    };
    AbstractStreamlet.prototype.didReconcile = function (version) {
    };
    AbstractStreamlet.reflectEachInlet = function (streamlet, streamletClass, callback, thisArg) {
        var index = 0;
        while (streamletClass) {
            if (streamletClass.hasOwnProperty("_inlets")) {
                for (var name_6 in streamletClass._inlets) {
                    var inletDescriptor = streamletClass._inlets[name_6];
                    var inlet = void 0;
                    if (inletDescriptor instanceof InletDescriptor) {
                        inlet = AbstractStreamlet.reflectInletField(streamlet, inletDescriptor);
                    }
                    else if (inletDescriptor instanceof InoutletDescriptor) {
                        inlet = AbstractStreamlet.reflectInoutletField(streamlet, inletDescriptor);
                    }
                    else {
                        inlet = null;
                    }
                    var result = callback.call(thisArg, inlet, inletDescriptor.name, index);
                    if (result !== void 0) {
                        return result;
                    }
                    index += 1;
                }
            }
            streamletClass = streamletClass.__proto__;
        }
        return void 0;
    };
    AbstractStreamlet.reflectEachOutlet = function (streamlet, streamletClass, callback, thisArg) {
        var index = 0;
        while (streamletClass) {
            if (streamletClass.hasOwnProperty("_outlets")) {
                for (var name_7 in streamletClass._outlets) {
                    var outletDescriptor = streamletClass._outlets[name_7];
                    var outlet = void 0;
                    if (outletDescriptor instanceof OutletDescriptor) {
                        outlet = AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor);
                    }
                    else if (outletDescriptor instanceof InoutletDescriptor) {
                        outlet = AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor);
                    }
                    else {
                        outlet = null;
                    }
                    var result = callback.call(thisArg, outlet, outletDescriptor.name, index);
                    if (result !== void 0) {
                        return result;
                    }
                    index += 1;
                }
            }
            streamletClass = streamletClass.__proto__;
        }
        return void 0;
    };
    AbstractStreamlet.reflectInletCount = function (streamletClass) {
        var count = 0;
        while (streamletClass) {
            if (streamletClass.hasOwnProperty("_inlets")) {
                for (var _ in streamletClass._inlets) {
                    count += 1;
                }
            }
            streamletClass = streamletClass.__proto__;
        }
        return count;
    };
    AbstractStreamlet.reflectOutletCount = function (streamletClass) {
        var count = 0;
        while (streamletClass) {
            if (streamletClass.hasOwnProperty("_outlets")) {
                for (var _ in streamletClass._outlets) {
                    count += 1;
                }
            }
            streamletClass = streamletClass.__proto__;
        }
        return count;
    };
    AbstractStreamlet.reflectInletIndex = function (index, streamlet, streamletClass) {
        while (streamletClass) {
            if (streamletClass.hasOwnProperty("_inlets")) {
                for (var name_8 in streamletClass._inlets) {
                    if (index === 0) {
                        var inletDescriptor = streamletClass._inlets[name_8];
                        if (inletDescriptor instanceof InletDescriptor) {
                            return [inletDescriptor.name, AbstractStreamlet.reflectInletField(streamlet, inletDescriptor)];
                        }
                        else if (inletDescriptor instanceof InoutletDescriptor) {
                            return [inletDescriptor.name, AbstractStreamlet.reflectInoutletField(streamlet, inletDescriptor)];
                        }
                        else {
                            return null;
                        }
                    }
                    index -= 1;
                }
            }
            streamletClass = streamletClass.__proto__;
        }
        return null;
    };
    AbstractStreamlet.reflectOutletIndex = function (index, streamlet, streamletClass) {
        while (streamletClass) {
            if (streamletClass.hasOwnProperty("_outlets")) {
                for (var name_9 in streamletClass._outlets) {
                    if (index === 0) {
                        var outletDescriptor = streamletClass._outlets[name_9];
                        if (outletDescriptor instanceof OutletDescriptor) {
                            return [outletDescriptor.name, AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor)];
                        }
                        else if (outletDescriptor instanceof InoutletDescriptor) {
                            return [outletDescriptor.name, AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor)];
                        }
                        else {
                            return null;
                        }
                    }
                    index -= 1;
                }
            }
            streamletClass = streamletClass.__proto__;
        }
        return null;
    };
    AbstractStreamlet.reflectInletKey = function (key, streamlet, streamletClass) {
        while (streamletClass) {
            if (streamletClass.hasOwnProperty("_inlets")) {
                var inletDescriptor = streamletClass._inlets[key];
                if (inletDescriptor !== void 0) {
                    if (inletDescriptor instanceof InletDescriptor) {
                        return AbstractStreamlet.reflectInletField(streamlet, inletDescriptor);
                    }
                    else if (inletDescriptor instanceof InoutletDescriptor) {
                        return AbstractStreamlet.reflectInoutletField(streamlet, inletDescriptor);
                    }
                    else {
                        return null;
                    }
                }
            }
            streamletClass = streamletClass.__proto__;
        }
        return null;
    };
    AbstractStreamlet.reflectOutletKey = function (key, streamlet, streamletClass) {
        while (streamletClass) {
            if (streamletClass.hasOwnProperty("_outlets")) {
                var outletDescriptor = streamletClass._outlets[key];
                if (outletDescriptor !== void 0) {
                    if (outletDescriptor instanceof OutletDescriptor) {
                        return AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor);
                    }
                    else if (outletDescriptor instanceof InoutletDescriptor) {
                        return AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor);
                    }
                    else {
                        return null;
                    }
                }
            }
            streamletClass = streamletClass.__proto__;
        }
        return null;
    };
    AbstractStreamlet.reflectInletField = function (streamlet, inletDescriptor) {
        if (inletDescriptor.type === "value") {
            return AbstractStreamlet.reflectValueInletField(streamlet, inletDescriptor.key);
        }
        else if (inletDescriptor.type === "map") {
            return AbstractStreamlet.reflectMapInletField(streamlet, inletDescriptor.key);
        }
        else {
            throw new TypeError(inletDescriptor.type);
        }
    };
    AbstractStreamlet.reflectValueInletField = function (streamlet, key) {
        var inlet = streamlet[key];
        if (!inlet) {
            if (streamlet instanceof AbstractStreamlet) {
                inlet = streamlet.inlet();
            }
            else {
                inlet = new StreamletInlet(streamlet);
            }
            streamlet[key] = inlet;
        }
        return inlet;
    };
    AbstractStreamlet.reflectMapInletField = function (streamlet, key) {
        return null;
    };
    AbstractStreamlet.reflectOutletField = function (streamlet, outletDescriptor) {
        if (outletDescriptor.type === "value") {
            return AbstractStreamlet.reflectValueOutletField(streamlet, outletDescriptor.key);
        }
        else if (outletDescriptor.type === "map") {
            return AbstractStreamlet.reflectMapOutletField(streamlet, outletDescriptor.key);
        }
        else {
            throw new TypeError(outletDescriptor.type);
        }
    };
    AbstractStreamlet.reflectValueOutletField = function (streamlet, key) {
        var outlet = streamlet[key];
        if (!outlet) {
            if (streamlet instanceof AbstractStreamlet) {
                outlet = streamlet.outlet();
            }
            else {
                outlet = new StreamletOutlet(streamlet);
            }
            streamlet[key] = outlet;
        }
        return outlet;
    };
    AbstractStreamlet.reflectMapOutletField = function (streamlet, key) {
        return null;
    };
    AbstractStreamlet.reflectInoutletField = function (streamlet, inoutletDescriptor) {
        if (inoutletDescriptor.type === "value") {
            return AbstractStreamlet.reflectValueInoutletField(streamlet, inoutletDescriptor.key);
        }
        else if (inoutletDescriptor.type === "map") {
            return AbstractStreamlet.reflectMapInoutletField(streamlet, inoutletDescriptor.key);
        }
        else {
            throw new TypeError(inoutletDescriptor.type);
        }
    };
    AbstractStreamlet.reflectValueInoutletField = function (streamlet, key) {
        var inoutlet = streamlet[key];
        if (!inoutlet) {
            if (streamlet instanceof AbstractStreamlet) {
                inoutlet = streamlet.inoutlet();
            }
            else {
                inoutlet = new StreamletInoutlet(streamlet);
            }
            streamlet[key] = inoutlet;
        }
        return inoutlet;
    };
    AbstractStreamlet.reflectMapInoutletField = function (streamlet, key) {
        return null;
    };
    AbstractStreamlet.init = function (streamletClass) {
        if (!streamletClass.hasOwnProperty("_inlets")) {
            streamletClass._inlets = {};
        }
        if (!streamletClass.hasOwnProperty("_outlets")) {
            streamletClass._outlets = {};
        }
        if (!streamletClass.hasOwnProperty("_inoutlets")) {
            streamletClass._inoutlets = {};
        }
    };
    AbstractStreamlet.decorateInlet = function (options, target, key) {
        AbstractStreamlet.init(target);
        var name = options.name !== void 0 ? options.name : key;
        var type = options.type !== void 0 ? options.type : "value";
        var inletDescriptor = new InletDescriptor(key, name, type);
        target._inlets[name] = inletDescriptor;
    };
    AbstractStreamlet.decorateOutlet = function (options, target, key) {
        AbstractStreamlet.init(target);
        var name = options.name !== void 0 ? options.name : key;
        var type = options.type !== void 0 ? options.type : "value";
        var outletDescriptor = new OutletDescriptor(key, name, type);
        target._outlets[name] = outletDescriptor;
    };
    AbstractStreamlet.decorateInoutlet = function (options, target, key) {
        AbstractStreamlet.init(target);
        var name = options.name !== void 0 ? options.name : key;
        var type = options.type !== void 0 ? options.type : "value";
        var inoutletDescriptor = new InoutletDescriptor(key, name, type);
        target._inlets[name] = inoutletDescriptor;
        target._outlets[name] = inoutletDescriptor;
        target._inoutlets[name] = inoutletDescriptor;
    };
    return AbstractStreamlet;
}());
export { AbstractStreamlet };
//# sourceMappingURL=AbstractStreamlet.js.map