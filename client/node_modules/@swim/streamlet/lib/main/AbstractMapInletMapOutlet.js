import { Cursor } from "@swim/util";
import { BTree } from "@swim/collections";
import { Outlet } from "./Outlet";
import { MapInlet } from "./MapInlet";
import { MapOutlet } from "./MapOutlet";
import { KeyOutlet } from "./KeyOutlet";
var AbstractMapInletMapOutlet = (function () {
    function AbstractMapInletMapOutlet() {
        this._input = null;
        this._outputEffects = new BTree();
        this._inputEffects = new BTree();
        this._outlets = new BTree();
        this._outputs = null;
        this._version = -1;
    }
    AbstractMapInletMapOutlet.prototype.input = function () {
        return this._input;
    };
    AbstractMapInletMapOutlet.prototype.bindInput = function (input) {
        if (!MapOutlet.is(input)) {
            throw new TypeError("" + input);
        }
        if (this._input !== null) {
            this._input.unbindOutput(this);
        }
        this._input = input;
        if (this._input !== null) {
            this._input.bindOutput(this);
        }
    };
    AbstractMapInletMapOutlet.prototype.unbindInput = function () {
        if (this._input !== null) {
            this._input.unbindOutput(this);
        }
        this._input = null;
    };
    AbstractMapInletMapOutlet.prototype.disconnectInputs = function () {
        if (this._outputs === null && this._outlets.isEmpty()) {
            var input = this._input;
            if (input !== null) {
                input.unbindOutput(this);
                this._input = null;
                input.disconnectInputs();
            }
        }
    };
    AbstractMapInletMapOutlet.prototype.outlet = function (key) {
        var outlet = this._outlets.get(key);
        if (outlet === void 0) {
            outlet = new KeyOutlet(this, key);
            this._outlets = this._outlets.updated(key, outlet);
        }
        return outlet;
    };
    AbstractMapInletMapOutlet.prototype.outputIterator = function () {
        return this._outputs !== null ? Cursor.array(this._outputs) : Cursor.empty();
    };
    AbstractMapInletMapOutlet.prototype.bindOutput = function (output) {
        var oldOutputs = this._outputs;
        var n = oldOutputs !== null ? oldOutputs.length : 0;
        var newOutputs = new Array(n + 1);
        for (var i = 0; i < n; i += 1) {
            newOutputs[i] = oldOutputs[i];
        }
        newOutputs[n] = output;
        this._outputs = newOutputs;
    };
    AbstractMapInletMapOutlet.prototype.unbindOutput = function (output) {
        var oldOutputs = this._outputs;
        var n = oldOutputs !== null ? oldOutputs.length : 0;
        for (var i = 0; i < n; i += 1) {
            if (oldOutputs[i] === output) {
                if (n > 1) {
                    var newOutputs = new Array(n - 1);
                    for (var j = 0; j < i; j += 1) {
                        newOutputs[j] = oldOutputs[j];
                    }
                    for (var j = i; j < n - 1; j += 1) {
                        newOutputs[j] = oldOutputs[j + 1];
                    }
                    this._outputs = newOutputs;
                }
                else {
                    this._outputs = null;
                }
                break;
            }
        }
    };
    AbstractMapInletMapOutlet.prototype.unbindOutputs = function () {
        var outlets = this._outlets;
        if (outlets.isEmpty()) {
            this._outlets = new BTree();
            outlets.forEach(function (key, keyOutlet) {
                keyOutlet.unbindOutputs();
            }, this);
        }
        var outputs = this._outputs;
        if (outputs !== null) {
            this._outputs = null;
            for (var i = 0, n = outputs.length; i < n; i += 1) {
                var output = outputs[i];
                output.unbindInput();
            }
        }
    };
    AbstractMapInletMapOutlet.prototype.disconnectOutputs = function () {
        if (this._input === null) {
            var outlets = this._outlets;
            if (outlets.isEmpty()) {
                this._outlets = new BTree();
                outlets.forEach(function (key, keyOutlet) {
                    keyOutlet.disconnectOutputs();
                }, this);
            }
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                    output.disconnectOutputs();
                }
            }
        }
    };
    AbstractMapInletMapOutlet.prototype.invalidateOutputKey = function (key, effect) {
        var oldOutputEffects = this._outputEffects;
        if (oldOutputEffects.get(key) !== effect) {
            this.willInvalidateOutputKey(key, effect);
            this._outputEffects = oldOutputEffects.updated(key, effect);
            this._version = -1;
            this.onInvalidateOutputKey(key, effect);
            this.didInvalidateOutputKey(key, effect);
        }
    };
    AbstractMapInletMapOutlet.prototype.invalidateInputKey = function (key, effect) {
        var oldInputEffects = this._inputEffects;
        if (oldInputEffects.get(key) !== effect) {
            this.willInvalidateInputKey(key, effect);
            this._inputEffects = oldInputEffects.updated(key, effect);
            this._version = -1;
            this.onInvalidateInputKey(key, effect);
            var n = this._outputs !== null ? this._outputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                var output = this._outputs[i];
                if (MapInlet.is(output)) {
                    output.invalidateOutputKey(key, effect);
                }
                else {
                    output.invalidateOutput();
                }
            }
            var outlet = this._outlets.get(key);
            if (outlet !== void 0) {
                outlet.invalidateInput();
            }
            this.didInvalidateInputKey(key, effect);
        }
    };
    AbstractMapInletMapOutlet.prototype.invalidateOutput = function () {
        this.invalidate();
    };
    AbstractMapInletMapOutlet.prototype.invalidateInput = function () {
        this.invalidate();
    };
    AbstractMapInletMapOutlet.prototype.invalidate = function () {
        if (this._version >= 0) {
            this.willInvalidate();
            this._version = -1;
            this.onInvalidate();
            var n = this._outputs !== null ? this._outputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                this._outputs[i].invalidateOutput();
            }
            this._outlets.forEach(function (key, outlet) {
                outlet.invalidateInput();
            }, this);
            this.didInvalidate();
        }
    };
    AbstractMapInletMapOutlet.prototype.reconcileOutputKey = function (key, version) {
        if (this._version < 0) {
            var oldOutputEffects = this._outputEffects;
            var effect = oldOutputEffects.get(key);
            if (effect !== void 0) {
                this.willReconcileOutputKey(key, effect, version);
                this._outputEffects = oldOutputEffects.removed(key);
                if (this._input !== null) {
                    this._input.reconcileInputKey(key, version);
                }
                this.onReconcileOutputKey(key, effect, version);
                this.didReconcileOutputKey(key, effect, version);
            }
        }
    };
    AbstractMapInletMapOutlet.prototype.reconcileInputKey = function (key, version) {
        if (this._version < 0) {
            var oldInputEffects = this._inputEffects;
            var oldEffect = oldInputEffects.get(key);
            if (oldEffect !== void 0) {
                var newEffect = this.willReconcileInputKey(key, oldEffect, version);
                if (oldEffect !== newEffect) {
                    this.invalidateInputKey(key, newEffect);
                }
                this._inputEffects = oldInputEffects.removed(key);
                this.onReconcileInputKey(key, newEffect, version);
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    var output = this._outputs[i];
                    if (MapInlet.is(output)) {
                        output.reconcileOutputKey(key, version);
                    }
                }
                var outlet = this._outlets.get(key);
                if (outlet !== void 0) {
                    outlet.reconcileInput(version);
                }
                this.didReconcileInputKey(key, newEffect, version);
            }
        }
    };
    AbstractMapInletMapOutlet.prototype.reconcileOutput = function (version) {
        this.reconcile(version);
    };
    AbstractMapInletMapOutlet.prototype.reconcileInput = function (version) {
        this.reconcile(version);
    };
    AbstractMapInletMapOutlet.prototype.reconcile = function (version) {
        if (this._version < 0) {
            this.willReconcile(version);
            this._outputEffects.forEach(function (key) {
                this.reconcileOutputKey(key, version);
            }, this);
            this._inputEffects.forEach(function (key) {
                this.reconcileInputKey(key, version);
            }, this);
            this._version = version;
            this.onReconcile(version);
            for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                this._outputs[i].reconcileOutput(version);
            }
            this.didReconcile(version);
        }
    };
    AbstractMapInletMapOutlet.prototype.willInvalidateOutputKey = function (key, effect) {
    };
    AbstractMapInletMapOutlet.prototype.onInvalidateOutputKey = function (key, effect) {
    };
    AbstractMapInletMapOutlet.prototype.didInvalidateOutputKey = function (key, effect) {
    };
    AbstractMapInletMapOutlet.prototype.willInvalidateInputKey = function (key, effect) {
    };
    AbstractMapInletMapOutlet.prototype.onInvalidateInputKey = function (key, effect) {
    };
    AbstractMapInletMapOutlet.prototype.didInvalidateInputKey = function (key, effect) {
    };
    AbstractMapInletMapOutlet.prototype.willInvalidate = function () {
    };
    AbstractMapInletMapOutlet.prototype.onInvalidate = function () {
    };
    AbstractMapInletMapOutlet.prototype.didInvalidate = function () {
    };
    AbstractMapInletMapOutlet.prototype.willReconcileOutputKey = function (key, effect, version) {
    };
    AbstractMapInletMapOutlet.prototype.onReconcileOutputKey = function (key, effect, version) {
    };
    AbstractMapInletMapOutlet.prototype.didReconcileOutputKey = function (key, effect, version) {
    };
    AbstractMapInletMapOutlet.prototype.willReconcileInputKey = function (key, effect, version) {
        return effect;
    };
    AbstractMapInletMapOutlet.prototype.onReconcileInputKey = function (key, effect, version) {
    };
    AbstractMapInletMapOutlet.prototype.didReconcileInputKey = function (key, effect, version) {
    };
    AbstractMapInletMapOutlet.prototype.willReconcile = function (version) {
    };
    AbstractMapInletMapOutlet.prototype.onReconcile = function (version) {
    };
    AbstractMapInletMapOutlet.prototype.didReconcile = function (version) {
    };
    AbstractMapInletMapOutlet.prototype.memoize = function () {
        var combinator = new MapOutlet.MemoizeMapCombinator();
        combinator.bindInput(this);
        return combinator;
    };
    AbstractMapInletMapOutlet.prototype.filter = function (func) {
        var combinator = new MapOutlet.FilterFieldsCombinator(func);
        combinator.bindInput(this);
        return combinator;
    };
    AbstractMapInletMapOutlet.prototype.map = function (func) {
        if (func.length === 1) {
            var combinator = new Outlet.MapValueCombinator(func);
            combinator.bindInput(this);
            return combinator;
        }
        else {
            var combinator = new MapOutlet.MapFieldValuesCombinator(func);
            combinator.bindInput(this);
            return combinator;
        }
    };
    AbstractMapInletMapOutlet.prototype.reduce = function (identity, accumulator, combiner) {
        var combinator = new MapOutlet.ReduceFieldsCombinator(identity, accumulator, combiner);
        combinator.bindInput(this);
        return combinator;
    };
    AbstractMapInletMapOutlet.prototype.watch = function (func) {
        if (func.length === 1) {
            var combinator = new Outlet.WatchValueCombinator(func);
            combinator.bindInput(this);
            return this;
        }
        else {
            var combinator = new MapOutlet.WatchFieldsCombinator(func);
            combinator.bindInput(this);
            return this;
        }
    };
    return AbstractMapInletMapOutlet;
}());
export { AbstractMapInletMapOutlet };
//# sourceMappingURL=AbstractMapInletMapOutlet.js.map