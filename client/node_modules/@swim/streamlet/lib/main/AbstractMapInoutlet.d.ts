import { Iterator, Map } from "@swim/util";
import { BTree } from "@swim/collections";
import { Inlet } from "./Inlet";
import { Outlet } from "./Outlet";
import { KeyEffect } from "./KeyEffect";
import { MapOutlet } from "./MapOutlet";
import { KeyOutlet } from "./KeyOutlet";
import { MapInoutlet } from "./MapInoutlet";
import { FilterFieldsFunction } from "./function";
import { MapValueFunction, MapFieldValuesFunction } from "./function";
import { WatchValueFunction, WatchFieldsFunction } from "./function";
export declare abstract class AbstractMapInoutlet<K, VI, VO, I, O> implements MapInoutlet<K, VI, VO, I, O> {
    protected _input: MapOutlet<K, VI, I> | null;
    protected _effects: BTree<K, KeyEffect>;
    protected _outlets: BTree<K, KeyOutlet<K, VO>>;
    protected _outputs: ReadonlyArray<Inlet<O>> | null;
    protected _version: number;
    constructor();
    abstract has(key: K): boolean;
    abstract get(): O | undefined;
    abstract get(key: K): VO | undefined;
    abstract keyIterator(): Iterator<K>;
    input(): MapOutlet<K, VI, I> | null;
    bindInput(input: MapOutlet<K, VI, I>): void;
    unbindInput(): void;
    disconnectInputs(): void;
    outlet(key: K): Outlet<VO>;
    outputIterator(): Iterator<Inlet<O>>;
    bindOutput(output: Inlet<O>): void;
    unbindOutput(output: Inlet<O>): void;
    unbindOutputs(): void;
    disconnectOutputs(): void;
    invalidateOutputKey(key: K, effect: KeyEffect): void;
    invalidateInputKey(key: K, effect: KeyEffect): void;
    invalidateKey(key: K, effect: KeyEffect): void;
    invalidateOutput(): void;
    invalidateInput(): void;
    invalidate(): void;
    reconcileOutputKey(key: K, version: number): void;
    reconcileInputKey(key: K, version: number): void;
    reconcileKey(key: K, version: number): void;
    reconcileOutput(version: number): void;
    reconcileInput(version: number): void;
    reconcile(version: number): void;
    protected willInvalidateKey(key: K, effect: KeyEffect): void;
    protected onInvalidateKey(key: K, effect: KeyEffect): void;
    protected didInvalidateKey(key: K, effect: KeyEffect): void;
    protected willInvalidate(): void;
    protected onInvalidate(): void;
    protected didInvalidate(): void;
    protected willReconcileKey(key: K, effect: KeyEffect, version: number): void;
    protected onReconcileKey(key: K, effect: KeyEffect, version: number): void;
    protected didReconcileKey(key: K, effect: KeyEffect, version: number): void;
    protected willReconcile(version: number): void;
    protected onReconcile(version: number): void;
    protected didReconcile(version: number): void;
    memoize(): MapOutlet<K, VO, O>;
    filter(func: FilterFieldsFunction<K, VO>): MapOutlet<K, VO, Map<K, VO>>;
    map<O2>(func: MapValueFunction<O, O2>): Outlet<O2>;
    map<V2>(func: MapFieldValuesFunction<K, VO, V2>): MapOutlet<K, V2, Map<K, V2>>;
    reduce<U>(identity: U, accumulator: (result: U, element: VO) => U, combiner: (result: U, result2: U) => U): Outlet<U>;
    watch(func: WatchValueFunction<O>): this;
    watch(func: WatchFieldsFunction<K, VO>): this;
}
//# sourceMappingURL=AbstractMapInoutlet.d.ts.map