import { Iterator } from "@swim/util";
import { Inlet } from "./Inlet";
import { Outlet } from "./Outlet";
import { Inoutlet } from "./Inoutlet";
import { MapValueFunction, WatchValueFunction } from "./function";
export declare abstract class AbstractInoutlet<I, O> implements Inoutlet<I, O> {
    protected _input: Outlet<I> | null;
    protected _outputs: ReadonlyArray<Inlet<O>> | null;
    protected _version: number;
    constructor();
    abstract get(): O | undefined;
    input(): Outlet<I> | null;
    bindInput(input: Outlet<I> | null): void;
    unbindInput(): void;
    disconnectInputs(): void;
    outputIterator(): Iterator<Inlet<O>>;
    bindOutput(output: Inlet<O>): void;
    unbindOutput(output: Inlet<O>): void;
    unbindOutputs(): void;
    disconnectOutputs(): void;
    invalidateOutput(): void;
    invalidateInput(): void;
    invalidate(): void;
    reconcileOutput(version: number): void;
    reconcileInput(version: number): void;
    reconcile(version: number): void;
    protected willInvalidate(): void;
    protected onInvalidate(): void;
    protected didInvalidate(): void;
    protected willReconcile(version: number): void;
    protected onReconcile(version: number): void;
    protected didReconcile(version: number): void;
    memoize(): Outlet<O>;
    map<O2>(func: MapValueFunction<O, O2>): Outlet<O2>;
    watch(func: WatchValueFunction<O>): this;
}
//# sourceMappingURL=AbstractInoutlet.d.ts.map