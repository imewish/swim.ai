import { Iterator } from "@swim/util";
import { Inlet } from "./Inlet";
import { MapValueFunction, WatchValueFunction } from "./function";
import { MemoizeValueCombinator } from "./combinator/MemoizeValueCombinator";
import { MapValueCombinator } from "./combinator/MapValueCombinator";
import { WatchValueCombinator } from "./combinator/WatchValueCombinator";
export declare type OutletType = "value" | "map";
export interface OutletOptions {
    name?: string;
    type?: OutletType;
}
export interface Outlet<O = unknown> {
    get(): O | undefined;
    outputIterator(): Iterator<Inlet<O>>;
    bindOutput(output: Inlet<O>): void;
    unbindOutput(output: Inlet<O>): void;
    unbindOutputs(): void;
    disconnectOutputs(): void;
    disconnectInputs(): void;
    invalidateInput(): void;
    reconcileInput(version: number): void;
    memoize(): Outlet<O>;
    map<O2>(func: MapValueFunction<O, O2>): Outlet<O2>;
    watch(func: WatchValueFunction<O>): this;
}
export declare const Outlet: {
    is<O>(object: unknown): object is Outlet<O>;
    MemoizeValueCombinator: typeof MemoizeValueCombinator;
    MapValueCombinator: typeof MapValueCombinator;
    WatchValueCombinator: typeof WatchValueCombinator;
};
//# sourceMappingURL=Outlet.d.ts.map