import { BTree } from "@swim/collections";
import { KeyEffect } from "./KeyEffect";
import { MapInlet } from "./MapInlet";
import { MapOutlet } from "./MapOutlet";
export declare abstract class AbstractMapInlet<K, V, O> implements MapInlet<K, V, O> {
    protected _input: MapOutlet<K, V, O> | null;
    protected _effects: BTree<K, KeyEffect>;
    protected _version: number;
    constructor();
    input(): MapOutlet<K, V, O> | null;
    bindInput(input: MapOutlet<K, V, O> | null): void;
    unbindInput(): void;
    disconnectInputs(): void;
    disconnectOutputs(): void;
    invalidateOutputKey(key: K, effect: KeyEffect): void;
    invalidateOutput(): void;
    reconcileOutputKey(key: K, version: number): void;
    reconcileOutput(version: number): void;
    protected willInvalidateOutputKey(key: K, effect: KeyEffect): void;
    protected onInvalidateOutputKey(key: K, effect: KeyEffect): void;
    protected didInvalidateOutputKey(key: K, effect: KeyEffect): void;
    protected willInvalidateOutput(): void;
    protected onInvalidateOutput(): void;
    protected didInvalidateOutput(): void;
    protected willReconcileOutputKey(key: K, effect: KeyEffect, version: number): void;
    protected onReconcileOutputKey(key: K, effect: KeyEffect, version: number): void;
    protected didReconcileOutputKey(key: K, effect: KeyEffect, version: number): void;
    protected willReconcileOutput(version: number): void;
    protected onReconcileOutput(version: number): void;
    protected didReconcileOutput(version: number): void;
}
//# sourceMappingURL=AbstractMapInlet.d.ts.map