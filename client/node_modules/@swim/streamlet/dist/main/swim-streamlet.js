(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@swim/util'), require('@swim/collections')) :
    typeof define === 'function' && define.amd ? define(['exports', '@swim/util', '@swim/collections'], factory) :
    (global = global || self, factory(global.swim = global.swim || {}, global.swim, global.swim));
}(this, (function (exports, util, collections) { 'use strict';

    var Inlet = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var inlet = object;
                return typeof inlet.input === "function"
                    && typeof inlet.bindInput === "function"
                    && typeof inlet.unbindInput === "function";
            }
            return false;
        },
    };

    var Outlet = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var outlet = object;
                return typeof outlet.outputIterator === "function"
                    && typeof outlet.bindOutput === "function"
                    && typeof outlet.unbindOutput === "function";
            }
            return false;
        },
        MemoizeValueCombinator: void 0,
        MapValueCombinator: void 0,
        WatchValueCombinator: void 0,
    };

    (function (KeyEffect) {
        KeyEffect[KeyEffect["Update"] = 0] = "Update";
        KeyEffect[KeyEffect["Remove"] = 1] = "Remove";
    })(exports.KeyEffect || (exports.KeyEffect = {}));

    var MapInlet = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var inlet = object;
                return Inlet.is(inlet)
                    && typeof inlet.invalidateOutputKey === "function"
                    && typeof inlet.reconcileOutputKey === "function";
            }
            return false;
        },
    };

    var MapOutlet = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var outlet = object;
                return Outlet.is(outlet)
                    && typeof outlet.keyIterator === "function"
                    && typeof outlet.outlet === "function";
            }
            return false;
        },
        MemoizeMapCombinator: void 0,
        FilterFieldsCombinator: void 0,
        MapFieldValuesCombinator: void 0,
        ReduceFieldsCombinator: void 0,
        WatchFieldsCombinator: void 0,
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var StreamletException = (function (_super) {
        __extends(StreamletException, _super);
        function StreamletException(message) {
            var _this = _super.call(this, message) || this;
            _this.__proto__ = StreamletException.prototype;
            return _this;
        }
        return StreamletException;
    }(Error));

    var StreamletScope = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var scope = object;
                return typeof scope.streamletScope === "function"
                    && typeof scope.streamletContext === "function"
                    && typeof scope.outlet === "function";
            }
            return false;
        },
    };

    var Streamlet = {
        is: function (object) {
            if (typeof object === "object" && object) {
                var streamlet = object;
                return typeof streamlet.streamletScope === "function"
                    && typeof streamlet.setStreamletScope === "function"
                    && typeof streamlet.streamletContext === "function"
                    && typeof streamlet.setStreamletContext === "function";
            }
            return false;
        },
    };

    var AbstractInlet = (function () {
        function AbstractInlet() {
            this._input = null;
            this._version = -1;
        }
        AbstractInlet.prototype.input = function () {
            return this._input;
        };
        AbstractInlet.prototype.bindInput = function (input) {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = input;
            if (this._input !== null) {
                this._input.bindOutput(this);
            }
        };
        AbstractInlet.prototype.unbindInput = function () {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = null;
        };
        AbstractInlet.prototype.disconnectInputs = function () {
            var input = this._input;
            if (input !== null) {
                input.unbindOutput(this);
                this._input = null;
                input.disconnectInputs();
            }
        };
        AbstractInlet.prototype.disconnectOutputs = function () {
        };
        AbstractInlet.prototype.invalidateOutput = function () {
            if (this._version >= 0) {
                this.willInvalidateOutput();
                this._version = -1;
                this.onInvalidateOutput();
                this.didInvalidateOutput();
            }
        };
        AbstractInlet.prototype.reconcileOutput = function (version) {
            if (this._version < 0) {
                this.willReconcileOutput(version);
                this._version = version;
                if (this._input !== null) {
                    this._input.reconcileInput(version);
                }
                this.onReconcileOutput(version);
                this.didReconcileOutput(version);
            }
        };
        AbstractInlet.prototype.willInvalidateOutput = function () {
        };
        AbstractInlet.prototype.onInvalidateOutput = function () {
        };
        AbstractInlet.prototype.didInvalidateOutput = function () {
        };
        AbstractInlet.prototype.willReconcileOutput = function (version) {
        };
        AbstractInlet.prototype.onReconcileOutput = function (version) {
        };
        AbstractInlet.prototype.didReconcileOutput = function (version) {
        };
        return AbstractInlet;
    }());

    var AbstractOutlet = (function () {
        function AbstractOutlet() {
            this._outputs = null;
            this._version = -1;
        }
        AbstractOutlet.prototype.outputIterator = function () {
            return this._outputs !== null ? util.Cursor.array(this._outputs) : util.Cursor.empty();
        };
        AbstractOutlet.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        AbstractOutlet.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            for (var i = 0, n = oldOutputs !== null ? oldOutputs.length : 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        AbstractOutlet.prototype.unbindOutputs = function () {
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                }
            }
        };
        AbstractOutlet.prototype.disconnectOutputs = function () {
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                    output.disconnectOutputs();
                }
            }
        };
        AbstractOutlet.prototype.disconnectInputs = function () {
        };
        AbstractOutlet.prototype.invalidateInput = function () {
            if (this._version >= 0) {
                this.willInvalidateInput();
                this._version = -1;
                this.onInvalidateInput();
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this.didInvalidateInput();
            }
        };
        AbstractOutlet.prototype.reconcileInput = function (version) {
            if (this._version < 0) {
                this.willReconcileInput(version);
                this._version = version;
                this.onReconcileInput(version);
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.didReconcileInput(version);
            }
        };
        AbstractOutlet.prototype.willInvalidateInput = function () {
        };
        AbstractOutlet.prototype.onInvalidateInput = function () {
        };
        AbstractOutlet.prototype.didInvalidateInput = function () {
        };
        AbstractOutlet.prototype.willReconcileInput = function (version) {
        };
        AbstractOutlet.prototype.onReconcileInput = function (version) {
        };
        AbstractOutlet.prototype.didReconcileInput = function (version) {
        };
        AbstractOutlet.prototype.memoize = function () {
            var combinator = new Outlet.MemoizeValueCombinator();
            combinator.bindInput(this);
            return combinator;
        };
        AbstractOutlet.prototype.map = function (func) {
            var combinator = new Outlet.MapValueCombinator(func);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractOutlet.prototype.watch = function (func) {
            var combinator = new Outlet.WatchValueCombinator(func);
            combinator.bindInput(this);
            return this;
        };
        return AbstractOutlet;
    }());

    var AbstractInoutlet = (function () {
        function AbstractInoutlet() {
            this._input = null;
            this._outputs = null;
            this._version = -1;
        }
        AbstractInoutlet.prototype.input = function () {
            return this._input;
        };
        AbstractInoutlet.prototype.bindInput = function (input) {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = input;
            if (this._input !== null) {
                this._input.bindOutput(this);
            }
        };
        AbstractInoutlet.prototype.unbindInput = function () {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = null;
        };
        AbstractInoutlet.prototype.disconnectInputs = function () {
            if (this._outputs === null) {
                var input = this._input;
                if (input !== null) {
                    input.unbindOutput(this);
                    this._input = null;
                    input.disconnectInputs();
                }
            }
        };
        AbstractInoutlet.prototype.outputIterator = function () {
            return this._outputs !== null ? util.Cursor.array(this._outputs) : util.Cursor.empty();
        };
        AbstractInoutlet.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        AbstractInoutlet.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        AbstractInoutlet.prototype.unbindOutputs = function () {
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                }
            }
        };
        AbstractInoutlet.prototype.disconnectOutputs = function () {
            if (this._input === null) {
                var outputs = this._outputs;
                if (outputs !== null) {
                    this._outputs = null;
                    for (var i = 0, n = outputs.length; i < n; i += 1) {
                        var output = outputs[i];
                        output.unbindInput();
                        output.disconnectOutputs();
                    }
                }
            }
        };
        AbstractInoutlet.prototype.invalidateOutput = function () {
            this.invalidate();
        };
        AbstractInoutlet.prototype.invalidateInput = function () {
            this.invalidate();
        };
        AbstractInoutlet.prototype.invalidate = function () {
            if (this._version >= 0) {
                this.willInvalidate();
                this._version = -1;
                this.onInvalidate();
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this.didInvalidate();
            }
        };
        AbstractInoutlet.prototype.reconcileOutput = function (version) {
            this.reconcile(version);
        };
        AbstractInoutlet.prototype.reconcileInput = function (version) {
            this.reconcile(version);
        };
        AbstractInoutlet.prototype.reconcile = function (version) {
            if (this._version < 0) {
                this.willReconcile(version);
                this._version = version;
                if (this._input !== null) {
                    this._input.reconcileInput(version);
                }
                this.onReconcile(version);
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.didReconcile(version);
            }
        };
        AbstractInoutlet.prototype.willInvalidate = function () {
        };
        AbstractInoutlet.prototype.onInvalidate = function () {
        };
        AbstractInoutlet.prototype.didInvalidate = function () {
        };
        AbstractInoutlet.prototype.willReconcile = function (version) {
        };
        AbstractInoutlet.prototype.onReconcile = function (version) {
        };
        AbstractInoutlet.prototype.didReconcile = function (version) {
        };
        AbstractInoutlet.prototype.memoize = function () {
            var combinator = new Outlet.MemoizeValueCombinator();
            combinator.bindInput(this);
            return combinator;
        };
        AbstractInoutlet.prototype.map = function (func) {
            var combinator = new Outlet.MapValueCombinator(func);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractInoutlet.prototype.watch = function (func) {
            var combinator = new Outlet.WatchValueCombinator(func);
            combinator.bindInput(this);
            return this;
        };
        return AbstractInoutlet;
    }());

    var KeyOutlet = (function (_super) {
        __extends(KeyOutlet, _super);
        function KeyOutlet(input, key) {
            var _this = _super.call(this) || this;
            _this._input = input;
            _this._key = key;
            return _this;
        }
        KeyOutlet.prototype.input = function () {
            return this._input;
        };
        KeyOutlet.prototype.key = function () {
            return this._key;
        };
        KeyOutlet.prototype.get = function () {
            return this._input.get(this._key);
        };
        return KeyOutlet;
    }(AbstractOutlet));

    var AbstractMapInlet = (function () {
        function AbstractMapInlet() {
            this._input = null;
            this._effects = new collections.BTree();
            this._version = -1;
        }
        AbstractMapInlet.prototype.input = function () {
            return this._input;
        };
        AbstractMapInlet.prototype.bindInput = function (input) {
            if (!MapOutlet.is(input)) {
                throw new TypeError("" + input);
            }
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = input;
            if (this._input !== null) {
                this._input.bindOutput(this);
            }
        };
        AbstractMapInlet.prototype.unbindInput = function () {
            if (this._input != null) {
                this._input.unbindOutput(this);
            }
            this._input = null;
        };
        AbstractMapInlet.prototype.disconnectInputs = function () {
            var input = this._input;
            if (input !== null) {
                input.unbindOutput(this);
                this._input = null;
                input.disconnectInputs();
            }
        };
        AbstractMapInlet.prototype.disconnectOutputs = function () {
        };
        AbstractMapInlet.prototype.invalidateOutputKey = function (key, effect) {
            var oldEffects = this._effects;
            if (oldEffects.get(key) !== effect) {
                this.willInvalidateOutputKey(key, effect);
                this._effects = oldEffects.updated(key, effect);
                this._version = -1;
                this.onInvalidateOutputKey(key, effect);
                this.didInvalidateOutputKey(key, effect);
            }
        };
        AbstractMapInlet.prototype.invalidateOutput = function () {
            if (this._version >= 0) {
                this.willInvalidateOutput();
                this._version = -1;
                this.onInvalidateOutput();
                this.didInvalidateOutput();
            }
        };
        AbstractMapInlet.prototype.reconcileOutputKey = function (key, version) {
            if (this._version < 0) {
                var oldEffects = this._effects;
                var effect = oldEffects.get(key);
                if (effect !== void 0) {
                    this.willReconcileOutputKey(key, effect, version);
                    this._effects = oldEffects.removed(key);
                    if (this._input !== null) {
                        this._input.reconcileInputKey(key, version);
                    }
                    this.onReconcileOutputKey(key, effect, version);
                    this.didReconcileOutputKey(key, effect, version);
                }
            }
        };
        AbstractMapInlet.prototype.reconcileOutput = function (version) {
            if (this._version < 0) {
                this.willReconcileOutput(version);
                this._effects.forEach(function (key) {
                    this.reconcileOutputKey(key, version);
                }, this);
                this._version = version;
                this.onReconcileOutput(version);
                this.didReconcileOutput(version);
            }
        };
        AbstractMapInlet.prototype.willInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInlet.prototype.onInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInlet.prototype.didInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInlet.prototype.willInvalidateOutput = function () {
        };
        AbstractMapInlet.prototype.onInvalidateOutput = function () {
        };
        AbstractMapInlet.prototype.didInvalidateOutput = function () {
        };
        AbstractMapInlet.prototype.willReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInlet.prototype.onReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInlet.prototype.didReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInlet.prototype.willReconcileOutput = function (version) {
        };
        AbstractMapInlet.prototype.onReconcileOutput = function (version) {
        };
        AbstractMapInlet.prototype.didReconcileOutput = function (version) {
        };
        return AbstractMapInlet;
    }());

    var AbstractMapOutlet = (function () {
        function AbstractMapOutlet() {
            this._effects = new collections.BTree();
            this._outlets = new collections.BTree();
            this._outputs = null;
            this._version = -1;
        }
        AbstractMapOutlet.prototype.outlet = function (key) {
            var outlet = this._outlets.get(key);
            if (outlet === void 0) {
                outlet = new KeyOutlet(this, key);
                this._outlets = this._outlets.updated(key, outlet);
            }
            return outlet;
        };
        AbstractMapOutlet.prototype.outputIterator = function () {
            return this._outputs !== null ? util.Cursor.array(this._outputs) : util.Cursor.empty();
        };
        AbstractMapOutlet.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        AbstractMapOutlet.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        AbstractMapOutlet.prototype.unbindOutputs = function () {
            var outlets = this._outlets;
            if (outlets.isEmpty()) {
                this._outlets = new collections.BTree();
                outlets.forEach(function (key, keyOutlet) {
                    keyOutlet.unbindOutputs();
                }, this);
            }
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                }
            }
        };
        AbstractMapOutlet.prototype.disconnectOutputs = function () {
            var outlets = this._outlets;
            if (outlets.isEmpty()) {
                this._outlets = new collections.BTree();
                outlets.forEach(function (key, keyOutlet) {
                    keyOutlet.disconnectOutputs();
                }, this);
            }
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                    output.disconnectOutputs();
                }
            }
        };
        AbstractMapOutlet.prototype.disconnectInputs = function () {
        };
        AbstractMapOutlet.prototype.invalidateInputKey = function (key, effect) {
            var oldEffects = this._effects;
            if (oldEffects.get(key) !== effect) {
                this.willInvalidateInputKey(key, effect);
                this._effects = oldEffects.updated(key, effect);
                this._version = -1;
                this.onInvalidateInputKey(key, effect);
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    var output = this._outputs[i];
                    if (MapInlet.is(output)) {
                        output.invalidateOutputKey(key, effect);
                    }
                    else {
                        output.invalidateOutput();
                    }
                }
                var outlet = this._outlets.get(key);
                if (outlet !== void 0) {
                    outlet.invalidateInput();
                }
                this.didInvalidateInputKey(key, effect);
            }
        };
        AbstractMapOutlet.prototype.invalidateInput = function () {
            if (this._version >= 0) {
                this.willInvalidateInput();
                this._version = -1;
                this.onInvalidateInput();
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this._outlets.forEach(function (key, outlet) {
                    outlet.invalidateInput();
                }, this);
                this.didInvalidateInput();
            }
        };
        AbstractMapOutlet.prototype.reconcileInputKey = function (key, version) {
            if (this._version < 0) {
                var oldEffects = this._effects;
                var effect = oldEffects.get(key);
                if (effect !== void 0) {
                    this.willReconcileInputKey(key, effect, version);
                    this._effects = oldEffects.removed(key);
                    this.onReconcileInputKey(key, effect, version);
                    for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                        var output = this._outputs[i];
                        if (MapInlet.is(output)) {
                            output.reconcileOutputKey(key, version);
                        }
                    }
                    var outlet = this._outlets.get(key);
                    if (outlet !== void 0) {
                        outlet.reconcileInput(version);
                    }
                    this.didReconcileInputKey(key, effect, version);
                }
            }
        };
        AbstractMapOutlet.prototype.reconcileInput = function (version) {
            if (this._version < 0) {
                this.willReconcileInput(version);
                this._effects.forEach(function (key) {
                    this.reconcileInputKey(key, version);
                }, this);
                this._version = version;
                this.onReconcileInput(version);
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.didReconcileInput(version);
            }
        };
        AbstractMapOutlet.prototype.willInvalidateInputKey = function (key, effect) {
        };
        AbstractMapOutlet.prototype.onInvalidateInputKey = function (key, effect) {
        };
        AbstractMapOutlet.prototype.didInvalidateInputKey = function (key, effect) {
        };
        AbstractMapOutlet.prototype.willInvalidateInput = function () {
        };
        AbstractMapOutlet.prototype.onInvalidateInput = function () {
        };
        AbstractMapOutlet.prototype.didInvalidateInput = function () {
        };
        AbstractMapOutlet.prototype.willReconcileInputKey = function (key, effect, version) {
        };
        AbstractMapOutlet.prototype.onReconcileInputKey = function (key, effect, version) {
        };
        AbstractMapOutlet.prototype.didReconcileInputKey = function (key, effect, version) {
        };
        AbstractMapOutlet.prototype.willReconcileInput = function (version) {
        };
        AbstractMapOutlet.prototype.onReconcileInput = function (version) {
        };
        AbstractMapOutlet.prototype.didReconcileInput = function (version) {
        };
        AbstractMapOutlet.prototype.memoize = function () {
            var combinator = new MapOutlet.MemoizeMapCombinator();
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapOutlet.prototype.filter = function (func) {
            var combinator = new MapOutlet.FilterFieldsCombinator(func);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapOutlet.prototype.map = function (func) {
            if (func.length === 1) {
                var combinator = new Outlet.MapValueCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
            else {
                var combinator = new MapOutlet.MapFieldValuesCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
        };
        AbstractMapOutlet.prototype.reduce = function (identity, accumulator, combiner) {
            var combinator = new MapOutlet.ReduceFieldsCombinator(identity, accumulator, combiner);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapOutlet.prototype.watch = function (func) {
            if (func.length === 1) {
                var combinator = new Outlet.WatchValueCombinator(func);
                combinator.bindInput(this);
                return this;
            }
            else {
                var combinator = new MapOutlet.WatchFieldsCombinator(func);
                combinator.bindInput(this);
                return this;
            }
        };
        return AbstractMapOutlet;
    }());

    var AbstractMapInoutlet = (function () {
        function AbstractMapInoutlet() {
            this._input = null;
            this._effects = new collections.BTree();
            this._outlets = new collections.BTree();
            this._outputs = null;
            this._version = -1;
        }
        AbstractMapInoutlet.prototype.input = function () {
            return this._input;
        };
        AbstractMapInoutlet.prototype.bindInput = function (input) {
            if (!MapOutlet.is(input)) {
                throw new TypeError("" + input);
            }
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = input;
            if (this._input !== null) {
                this._input.bindOutput(this);
            }
        };
        AbstractMapInoutlet.prototype.unbindInput = function () {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = null;
        };
        AbstractMapInoutlet.prototype.disconnectInputs = function () {
            if (this._outputs === null && this._outlets.isEmpty()) {
                var input = this._input;
                if (input !== null) {
                    input.unbindOutput(this);
                    this._input = null;
                    input.disconnectInputs();
                }
            }
        };
        AbstractMapInoutlet.prototype.outlet = function (key) {
            var outlet = this._outlets.get(key);
            if (outlet === void 0) {
                outlet = new KeyOutlet(this, key);
                this._outlets = this._outlets.updated(key, outlet);
            }
            return outlet;
        };
        AbstractMapInoutlet.prototype.outputIterator = function () {
            return this._outputs !== null ? util.Cursor.array(this._outputs) : util.Cursor.empty();
        };
        AbstractMapInoutlet.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        AbstractMapInoutlet.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        AbstractMapInoutlet.prototype.unbindOutputs = function () {
            var outlets = this._outlets;
            if (outlets.isEmpty()) {
                this._outlets = new collections.BTree();
                outlets.forEach(function (key, keyOutlet) {
                    keyOutlet.unbindOutputs();
                }, this);
            }
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                }
            }
        };
        AbstractMapInoutlet.prototype.disconnectOutputs = function () {
            if (this._input === null) {
                var outlets = this._outlets;
                if (outlets.isEmpty()) {
                    this._outlets = new collections.BTree();
                    outlets.forEach(function (key, keyOutlet) {
                        keyOutlet.disconnectOutputs();
                    }, this);
                }
                var outputs = this._outputs;
                if (outputs !== null) {
                    this._outputs = null;
                    for (var i = 0, n = outputs.length; i < n; i += 1) {
                        var output = outputs[i];
                        output.unbindInput();
                        output.disconnectOutputs();
                    }
                }
            }
        };
        AbstractMapInoutlet.prototype.invalidateOutputKey = function (key, effect) {
            this.invalidateKey(key, effect);
        };
        AbstractMapInoutlet.prototype.invalidateInputKey = function (key, effect) {
            this.invalidateKey(key, effect);
        };
        AbstractMapInoutlet.prototype.invalidateKey = function (key, effect) {
            var oldEffects = this._effects;
            if (oldEffects.get(key) !== effect) {
                this.willInvalidateKey(key, effect);
                this._effects = oldEffects.updated(key, effect);
                this._version = -1;
                this.onInvalidateKey(key, effect);
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    var output = this._outputs[i];
                    if (MapInlet.is(output)) {
                        output.invalidateOutputKey(key, effect);
                    }
                    else {
                        output.invalidateOutput();
                    }
                }
                var outlet = this._outlets.get(key);
                if (outlet !== void 0) {
                    outlet.invalidateInput();
                }
                this.didInvalidateKey(key, effect);
            }
        };
        AbstractMapInoutlet.prototype.invalidateOutput = function () {
            this.invalidate();
        };
        AbstractMapInoutlet.prototype.invalidateInput = function () {
            this.invalidate();
        };
        AbstractMapInoutlet.prototype.invalidate = function () {
            if (this._version >= 0) {
                this.willInvalidate();
                this._version = -1;
                this.onInvalidate();
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this._outlets.forEach(function (key, outlet) {
                    outlet.invalidateInput();
                }, this);
                this.didInvalidate();
            }
        };
        AbstractMapInoutlet.prototype.reconcileOutputKey = function (key, version) {
            this.reconcileKey(key, version);
        };
        AbstractMapInoutlet.prototype.reconcileInputKey = function (key, version) {
            this.reconcileKey(key, version);
        };
        AbstractMapInoutlet.prototype.reconcileKey = function (key, version) {
            if (this._version < 0) {
                var oldEffects = this._effects;
                var effect = oldEffects.get(key);
                if (effect !== void 0) {
                    this.willReconcileKey(key, effect, version);
                    this._effects = oldEffects.removed(key);
                    if (this._input !== null) {
                        this._input.reconcileInputKey(key, version);
                    }
                    this.onReconcileKey(key, effect, version);
                    for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                        var output = this._outputs[i];
                        if (MapInlet.is(output)) {
                            output.reconcileOutputKey(key, version);
                        }
                    }
                    var outlet = this._outlets.get(key);
                    if (outlet !== void 0) {
                        outlet.reconcileInput(version);
                    }
                    this.didReconcileKey(key, effect, version);
                }
            }
        };
        AbstractMapInoutlet.prototype.reconcileOutput = function (version) {
            this.reconcile(version);
        };
        AbstractMapInoutlet.prototype.reconcileInput = function (version) {
            this.reconcile(version);
        };
        AbstractMapInoutlet.prototype.reconcile = function (version) {
            if (this._version < 0) {
                this.willReconcile(version);
                this._effects.forEach(function (key) {
                    this.reconcileKey(key, version);
                }, this);
                this._version = version;
                this.onReconcile(version);
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.didReconcile(version);
            }
        };
        AbstractMapInoutlet.prototype.willInvalidateKey = function (key, effect) {
        };
        AbstractMapInoutlet.prototype.onInvalidateKey = function (key, effect) {
        };
        AbstractMapInoutlet.prototype.didInvalidateKey = function (key, effect) {
        };
        AbstractMapInoutlet.prototype.willInvalidate = function () {
        };
        AbstractMapInoutlet.prototype.onInvalidate = function () {
        };
        AbstractMapInoutlet.prototype.didInvalidate = function () {
        };
        AbstractMapInoutlet.prototype.willReconcileKey = function (key, effect, version) {
        };
        AbstractMapInoutlet.prototype.onReconcileKey = function (key, effect, version) {
        };
        AbstractMapInoutlet.prototype.didReconcileKey = function (key, effect, version) {
        };
        AbstractMapInoutlet.prototype.willReconcile = function (version) {
        };
        AbstractMapInoutlet.prototype.onReconcile = function (version) {
        };
        AbstractMapInoutlet.prototype.didReconcile = function (version) {
        };
        AbstractMapInoutlet.prototype.memoize = function () {
            var combinator = new MapOutlet.MemoizeMapCombinator();
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapInoutlet.prototype.filter = function (func) {
            var combinator = new MapOutlet.FilterFieldsCombinator(func);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapInoutlet.prototype.map = function (func) {
            if (func.length === 1) {
                var combinator = new Outlet.MapValueCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
            else {
                var combinator = new MapOutlet.MapFieldValuesCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
        };
        AbstractMapInoutlet.prototype.reduce = function (identity, accumulator, combiner) {
            var combinator = new MapOutlet.ReduceFieldsCombinator(identity, accumulator, combiner);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapInoutlet.prototype.watch = function (func) {
            if (func.length === 1) {
                var combinator = new Outlet.WatchValueCombinator(func);
                combinator.bindInput(this);
                return this;
            }
            else {
                var combinator = new MapOutlet.WatchFieldsCombinator(func);
                combinator.bindInput(this);
                return this;
            }
        };
        return AbstractMapInoutlet;
    }());

    var AbstractMapInletOutlet = (function () {
        function AbstractMapInletOutlet() {
            this._input = null;
            this._effects = new collections.BTree();
            this._outputs = null;
            this._version = -1;
        }
        AbstractMapInletOutlet.prototype.input = function () {
            return this._input;
        };
        AbstractMapInletOutlet.prototype.bindInput = function (input) {
            if (!MapOutlet.is(input)) {
                throw new TypeError("" + input);
            }
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = input;
            if (this._input !== null) {
                this._input.bindOutput(this);
            }
        };
        AbstractMapInletOutlet.prototype.unbindInput = function () {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = null;
        };
        AbstractMapInletOutlet.prototype.disconnectInputs = function () {
            if (this._outputs === null) {
                var input = this._input;
                if (input !== null) {
                    input.unbindOutput(this);
                    this._input = null;
                    input.disconnectInputs();
                }
            }
        };
        AbstractMapInletOutlet.prototype.outputIterator = function () {
            return this._outputs !== null ? util.Cursor.array(this._outputs) : util.Cursor.empty();
        };
        AbstractMapInletOutlet.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        AbstractMapInletOutlet.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        AbstractMapInletOutlet.prototype.unbindOutputs = function () {
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                }
            }
        };
        AbstractMapInletOutlet.prototype.disconnectOutputs = function () {
            if (this._input === null) {
                var outputs = this._outputs;
                if (outputs !== null) {
                    this._outputs = null;
                    for (var i = 0, n = outputs.length; i < n; i += 1) {
                        var output = outputs[i];
                        output.unbindInput();
                        output.disconnectOutputs();
                    }
                }
            }
        };
        AbstractMapInletOutlet.prototype.invalidateOutputKey = function (key, effect) {
            var oldEffects = this._effects;
            if (oldEffects.get(key) !== effect) {
                this.willInvalidateOutputKey(key, effect);
                this._effects = oldEffects.updated(key, effect);
                this._version = -1;
                this.onInvalidateOutputKey(key, effect);
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    var output = this._outputs[i];
                    output.invalidateOutput();
                }
                this.didInvalidateOutputKey(key, effect);
            }
        };
        AbstractMapInletOutlet.prototype.invalidateOutput = function () {
            this.invalidate();
        };
        AbstractMapInletOutlet.prototype.invalidateInput = function () {
            this.invalidate();
        };
        AbstractMapInletOutlet.prototype.invalidate = function () {
            if (this._version >= 0) {
                this.willInvalidate();
                this._version = -1;
                this.onInvalidate();
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this.didInvalidate();
            }
        };
        AbstractMapInletOutlet.prototype.reconcileOutputKey = function (key, version) {
            if (this._version < 0) {
                var oldEffects = this._effects;
                var effect = oldEffects.get(key);
                if (effect !== void 0) {
                    this.willReconcileOutputKey(key, effect, version);
                    this._effects = oldEffects.removed(key);
                    if (this._input !== null) {
                        this._input.reconcileInputKey(key, version);
                    }
                    this.onReconcileOutputKey(key, effect, version);
                    this.didReconcileOutputKey(key, effect, version);
                }
            }
        };
        AbstractMapInletOutlet.prototype.reconcileOutput = function (version) {
            this.reconcile(version);
        };
        AbstractMapInletOutlet.prototype.reconcileInput = function (version) {
            this.reconcile(version);
        };
        AbstractMapInletOutlet.prototype.reconcile = function (version) {
            if (this._version < 0) {
                this.willReconcile(version);
                this._effects.forEach(function (key) {
                    this.reconcileOutputKey(key, version);
                }, this);
                this._version = version;
                this.onReconcile(version);
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.didReconcile(version);
            }
        };
        AbstractMapInletOutlet.prototype.willInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInletOutlet.prototype.onInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInletOutlet.prototype.didInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInletOutlet.prototype.willInvalidate = function () {
        };
        AbstractMapInletOutlet.prototype.onInvalidate = function () {
        };
        AbstractMapInletOutlet.prototype.didInvalidate = function () {
        };
        AbstractMapInletOutlet.prototype.willReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInletOutlet.prototype.onReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInletOutlet.prototype.didReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInletOutlet.prototype.willReconcile = function (version) {
        };
        AbstractMapInletOutlet.prototype.onReconcile = function (version) {
        };
        AbstractMapInletOutlet.prototype.didReconcile = function (version) {
        };
        AbstractMapInletOutlet.prototype.memoize = function () {
            var combinator = new Outlet.MemoizeValueCombinator();
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapInletOutlet.prototype.map = function (func) {
            var combinator = new Outlet.MapValueCombinator(func);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapInletOutlet.prototype.watch = function (func) {
            var combinator = new Outlet.WatchValueCombinator(func);
            combinator.bindInput(this);
            return this;
        };
        return AbstractMapInletOutlet;
    }());

    var AbstractMapInletMapOutlet = (function () {
        function AbstractMapInletMapOutlet() {
            this._input = null;
            this._outputEffects = new collections.BTree();
            this._inputEffects = new collections.BTree();
            this._outlets = new collections.BTree();
            this._outputs = null;
            this._version = -1;
        }
        AbstractMapInletMapOutlet.prototype.input = function () {
            return this._input;
        };
        AbstractMapInletMapOutlet.prototype.bindInput = function (input) {
            if (!MapOutlet.is(input)) {
                throw new TypeError("" + input);
            }
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = input;
            if (this._input !== null) {
                this._input.bindOutput(this);
            }
        };
        AbstractMapInletMapOutlet.prototype.unbindInput = function () {
            if (this._input !== null) {
                this._input.unbindOutput(this);
            }
            this._input = null;
        };
        AbstractMapInletMapOutlet.prototype.disconnectInputs = function () {
            if (this._outputs === null && this._outlets.isEmpty()) {
                var input = this._input;
                if (input !== null) {
                    input.unbindOutput(this);
                    this._input = null;
                    input.disconnectInputs();
                }
            }
        };
        AbstractMapInletMapOutlet.prototype.outlet = function (key) {
            var outlet = this._outlets.get(key);
            if (outlet === void 0) {
                outlet = new KeyOutlet(this, key);
                this._outlets = this._outlets.updated(key, outlet);
            }
            return outlet;
        };
        AbstractMapInletMapOutlet.prototype.outputIterator = function () {
            return this._outputs !== null ? util.Cursor.array(this._outputs) : util.Cursor.empty();
        };
        AbstractMapInletMapOutlet.prototype.bindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            var newOutputs = new Array(n + 1);
            for (var i = 0; i < n; i += 1) {
                newOutputs[i] = oldOutputs[i];
            }
            newOutputs[n] = output;
            this._outputs = newOutputs;
        };
        AbstractMapInletMapOutlet.prototype.unbindOutput = function (output) {
            var oldOutputs = this._outputs;
            var n = oldOutputs !== null ? oldOutputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                if (oldOutputs[i] === output) {
                    if (n > 1) {
                        var newOutputs = new Array(n - 1);
                        for (var j = 0; j < i; j += 1) {
                            newOutputs[j] = oldOutputs[j];
                        }
                        for (var j = i; j < n - 1; j += 1) {
                            newOutputs[j] = oldOutputs[j + 1];
                        }
                        this._outputs = newOutputs;
                    }
                    else {
                        this._outputs = null;
                    }
                    break;
                }
            }
        };
        AbstractMapInletMapOutlet.prototype.unbindOutputs = function () {
            var outlets = this._outlets;
            if (outlets.isEmpty()) {
                this._outlets = new collections.BTree();
                outlets.forEach(function (key, keyOutlet) {
                    keyOutlet.unbindOutputs();
                }, this);
            }
            var outputs = this._outputs;
            if (outputs !== null) {
                this._outputs = null;
                for (var i = 0, n = outputs.length; i < n; i += 1) {
                    var output = outputs[i];
                    output.unbindInput();
                }
            }
        };
        AbstractMapInletMapOutlet.prototype.disconnectOutputs = function () {
            if (this._input === null) {
                var outlets = this._outlets;
                if (outlets.isEmpty()) {
                    this._outlets = new collections.BTree();
                    outlets.forEach(function (key, keyOutlet) {
                        keyOutlet.disconnectOutputs();
                    }, this);
                }
                var outputs = this._outputs;
                if (outputs !== null) {
                    this._outputs = null;
                    for (var i = 0, n = outputs.length; i < n; i += 1) {
                        var output = outputs[i];
                        output.unbindInput();
                        output.disconnectOutputs();
                    }
                }
            }
        };
        AbstractMapInletMapOutlet.prototype.invalidateOutputKey = function (key, effect) {
            var oldOutputEffects = this._outputEffects;
            if (oldOutputEffects.get(key) !== effect) {
                this.willInvalidateOutputKey(key, effect);
                this._outputEffects = oldOutputEffects.updated(key, effect);
                this._version = -1;
                this.onInvalidateOutputKey(key, effect);
                this.didInvalidateOutputKey(key, effect);
            }
        };
        AbstractMapInletMapOutlet.prototype.invalidateInputKey = function (key, effect) {
            var oldInputEffects = this._inputEffects;
            if (oldInputEffects.get(key) !== effect) {
                this.willInvalidateInputKey(key, effect);
                this._inputEffects = oldInputEffects.updated(key, effect);
                this._version = -1;
                this.onInvalidateInputKey(key, effect);
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    var output = this._outputs[i];
                    if (MapInlet.is(output)) {
                        output.invalidateOutputKey(key, effect);
                    }
                    else {
                        output.invalidateOutput();
                    }
                }
                var outlet = this._outlets.get(key);
                if (outlet !== void 0) {
                    outlet.invalidateInput();
                }
                this.didInvalidateInputKey(key, effect);
            }
        };
        AbstractMapInletMapOutlet.prototype.invalidateOutput = function () {
            this.invalidate();
        };
        AbstractMapInletMapOutlet.prototype.invalidateInput = function () {
            this.invalidate();
        };
        AbstractMapInletMapOutlet.prototype.invalidate = function () {
            if (this._version >= 0) {
                this.willInvalidate();
                this._version = -1;
                this.onInvalidate();
                var n = this._outputs !== null ? this._outputs.length : 0;
                for (var i = 0; i < n; i += 1) {
                    this._outputs[i].invalidateOutput();
                }
                this._outlets.forEach(function (key, outlet) {
                    outlet.invalidateInput();
                }, this);
                this.didInvalidate();
            }
        };
        AbstractMapInletMapOutlet.prototype.reconcileOutputKey = function (key, version) {
            if (this._version < 0) {
                var oldOutputEffects = this._outputEffects;
                var effect = oldOutputEffects.get(key);
                if (effect !== void 0) {
                    this.willReconcileOutputKey(key, effect, version);
                    this._outputEffects = oldOutputEffects.removed(key);
                    if (this._input !== null) {
                        this._input.reconcileInputKey(key, version);
                    }
                    this.onReconcileOutputKey(key, effect, version);
                    this.didReconcileOutputKey(key, effect, version);
                }
            }
        };
        AbstractMapInletMapOutlet.prototype.reconcileInputKey = function (key, version) {
            if (this._version < 0) {
                var oldInputEffects = this._inputEffects;
                var oldEffect = oldInputEffects.get(key);
                if (oldEffect !== void 0) {
                    var newEffect = this.willReconcileInputKey(key, oldEffect, version);
                    if (oldEffect !== newEffect) {
                        this.invalidateInputKey(key, newEffect);
                    }
                    this._inputEffects = oldInputEffects.removed(key);
                    this.onReconcileInputKey(key, newEffect, version);
                    for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                        var output = this._outputs[i];
                        if (MapInlet.is(output)) {
                            output.reconcileOutputKey(key, version);
                        }
                    }
                    var outlet = this._outlets.get(key);
                    if (outlet !== void 0) {
                        outlet.reconcileInput(version);
                    }
                    this.didReconcileInputKey(key, newEffect, version);
                }
            }
        };
        AbstractMapInletMapOutlet.prototype.reconcileOutput = function (version) {
            this.reconcile(version);
        };
        AbstractMapInletMapOutlet.prototype.reconcileInput = function (version) {
            this.reconcile(version);
        };
        AbstractMapInletMapOutlet.prototype.reconcile = function (version) {
            if (this._version < 0) {
                this.willReconcile(version);
                this._outputEffects.forEach(function (key) {
                    this.reconcileOutputKey(key, version);
                }, this);
                this._inputEffects.forEach(function (key) {
                    this.reconcileInputKey(key, version);
                }, this);
                this._version = version;
                this.onReconcile(version);
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    this._outputs[i].reconcileOutput(version);
                }
                this.didReconcile(version);
            }
        };
        AbstractMapInletMapOutlet.prototype.willInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInletMapOutlet.prototype.onInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInletMapOutlet.prototype.didInvalidateOutputKey = function (key, effect) {
        };
        AbstractMapInletMapOutlet.prototype.willInvalidateInputKey = function (key, effect) {
        };
        AbstractMapInletMapOutlet.prototype.onInvalidateInputKey = function (key, effect) {
        };
        AbstractMapInletMapOutlet.prototype.didInvalidateInputKey = function (key, effect) {
        };
        AbstractMapInletMapOutlet.prototype.willInvalidate = function () {
        };
        AbstractMapInletMapOutlet.prototype.onInvalidate = function () {
        };
        AbstractMapInletMapOutlet.prototype.didInvalidate = function () {
        };
        AbstractMapInletMapOutlet.prototype.willReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInletMapOutlet.prototype.onReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInletMapOutlet.prototype.didReconcileOutputKey = function (key, effect, version) {
        };
        AbstractMapInletMapOutlet.prototype.willReconcileInputKey = function (key, effect, version) {
            return effect;
        };
        AbstractMapInletMapOutlet.prototype.onReconcileInputKey = function (key, effect, version) {
        };
        AbstractMapInletMapOutlet.prototype.didReconcileInputKey = function (key, effect, version) {
        };
        AbstractMapInletMapOutlet.prototype.willReconcile = function (version) {
        };
        AbstractMapInletMapOutlet.prototype.onReconcile = function (version) {
        };
        AbstractMapInletMapOutlet.prototype.didReconcile = function (version) {
        };
        AbstractMapInletMapOutlet.prototype.memoize = function () {
            var combinator = new MapOutlet.MemoizeMapCombinator();
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapInletMapOutlet.prototype.filter = function (func) {
            var combinator = new MapOutlet.FilterFieldsCombinator(func);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapInletMapOutlet.prototype.map = function (func) {
            if (func.length === 1) {
                var combinator = new Outlet.MapValueCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
            else {
                var combinator = new MapOutlet.MapFieldValuesCombinator(func);
                combinator.bindInput(this);
                return combinator;
            }
        };
        AbstractMapInletMapOutlet.prototype.reduce = function (identity, accumulator, combiner) {
            var combinator = new MapOutlet.ReduceFieldsCombinator(identity, accumulator, combiner);
            combinator.bindInput(this);
            return combinator;
        };
        AbstractMapInletMapOutlet.prototype.watch = function (func) {
            if (func.length === 1) {
                var combinator = new Outlet.WatchValueCombinator(func);
                combinator.bindInput(this);
                return this;
            }
            else {
                var combinator = new MapOutlet.WatchFieldsCombinator(func);
                combinator.bindInput(this);
                return this;
            }
        };
        return AbstractMapInletMapOutlet;
    }());

    var OutletInlet = (function (_super) {
        __extends(OutletInlet, _super);
        function OutletInlet(outlet) {
            var _this = _super.call(this) || this;
            _this._outlet = outlet;
            return _this;
        }
        OutletInlet.prototype.outlet = function () {
            return this._outlet;
        };
        OutletInlet.prototype.onInvalidateOutput = function () {
            this._outlet.invalidateInput();
        };
        OutletInlet.prototype.onReconcileOutput = function (version) {
            this._outlet.reconcileInput(version);
        };
        return OutletInlet;
    }(AbstractInlet));

    var OutletMapInlet = (function (_super) {
        __extends(OutletMapInlet, _super);
        function OutletMapInlet(outlet) {
            var _this = _super.call(this) || this;
            _this._outlet = outlet;
            return _this;
        }
        OutletMapInlet.prototype.outlet = function () {
            return this._outlet;
        };
        OutletMapInlet.prototype.onInvalidateOutputKey = function (key, effect) {
            this._outlet.invalidateInput();
        };
        OutletMapInlet.prototype.onInvalidateOutput = function () {
            this._outlet.invalidateInput();
        };
        OutletMapInlet.prototype.onReconcileOutputKey = function (key, effect, version) {
            this._outlet.reconcileInput(version);
        };
        OutletMapInlet.prototype.onReconcileOutput = function (version) {
            this._outlet.reconcileInput(version);
        };
        return OutletMapInlet;
    }(AbstractMapInlet));

    var ValueInput = (function (_super) {
        __extends(ValueInput, _super);
        function ValueInput(state) {
            var _this = _super.call(this) || this;
            _this._state = state;
            return _this;
        }
        ValueInput.prototype.get = function () {
            return this._state;
        };
        ValueInput.prototype.set = function (newState) {
            var oldState = this._state;
            this._state = newState;
            this.invalidateInput();
            return oldState;
        };
        return ValueInput;
    }(AbstractOutlet));

    var ValueOutput = (function (_super) {
        __extends(ValueOutput, _super);
        function ValueOutput(state) {
            var _this = _super.call(this) || this;
            _this._state = state;
            return _this;
        }
        ValueOutput.prototype.get = function () {
            return this._state;
        };
        ValueOutput.prototype.onReconcileOutput = function (version) {
            if (this._input !== null) {
                this._state = this._input.get();
            }
        };
        return ValueOutput;
    }(AbstractInlet));

    var MapInput = (function (_super) {
        __extends(MapInput, _super);
        function MapInput(state) {
            if (state === void 0) { state = new collections.BTree(); }
            var _this = _super.call(this) || this;
            _this._state = state;
            state.forEach(function (key) {
                this._effects = this._effects.updated(key, 0);
            }, _this);
            return _this;
        }
        MapInput.prototype.has = function (key) {
            return this._state.has(key);
        };
        MapInput.prototype.get = function (key) {
            if (key === void 0) {
                return this._state;
            }
            else {
                return this._state.get(key);
            }
        };
        MapInput.prototype.set = function (key, newValue) {
            var oldValue = this._state.get(key);
            this._state = this._state.updated(key, newValue);
            this.invalidateInputKey(key, 0);
            return oldValue;
        };
        MapInput.prototype.delete = function (key) {
            var oldState = this._state;
            var newState = oldState.removed(key);
            if (oldState !== newState) {
                this._state = newState;
                this.invalidateInputKey(key, 1);
            }
            return this;
        };
        MapInput.prototype.keyIterator = function () {
            return this._state.keys();
        };
        return MapInput;
    }(AbstractMapOutlet));

    var MapOutput = (function (_super) {
        __extends(MapOutput, _super);
        function MapOutput() {
            var _this = _super.call(this) || this;
            _this._state = new collections.BTree();
            return _this;
        }
        MapOutput.prototype.get = function () {
            return this._state;
        };
        MapOutput.prototype.onReconcileOutputKey = function (key, effect, version) {
            if (effect === 0) {
                if (this._input !== null) {
                    var value = this._input.get(key);
                    if (value !== void 0) {
                        this._state = this._state.updated(key, value);
                    }
                    else {
                        this._state = this._state.removed(key);
                    }
                }
            }
            else if (effect === 1) {
                this._state = this._state.removed(key);
            }
        };
        return MapOutput;
    }(AbstractMapInlet));

    var MemoizeValueCombinator = (function (_super) {
        __extends(MemoizeValueCombinator, _super);
        function MemoizeValueCombinator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MemoizeValueCombinator.prototype.get = function () {
            return this._state;
        };
        MemoizeValueCombinator.prototype.onReconcile = function (version) {
            if (this._input !== null) {
                this._state = this._input.get();
            }
        };
        MemoizeValueCombinator.prototype.memoize = function () {
            return this;
        };
        return MemoizeValueCombinator;
    }(AbstractInoutlet));
    Outlet.MemoizeValueCombinator = MemoizeValueCombinator;

    var MemoizeMapCombinator = (function (_super) {
        __extends(MemoizeMapCombinator, _super);
        function MemoizeMapCombinator() {
            var _this = _super.call(this) || this;
            _this._cache = new collections.BTree();
            return _this;
        }
        MemoizeMapCombinator.prototype.has = function (key) {
            return this._cache.has(key);
        };
        MemoizeMapCombinator.prototype.get = function (key) {
            if (key === void 0) {
                if (this._state === void 0 && this._input != null) {
                    this._state = this._input.get();
                }
                return this._state;
            }
            else {
                return this._cache.get(key);
            }
        };
        MemoizeMapCombinator.prototype.keyIterator = function () {
            return this._cache.keys();
        };
        MemoizeMapCombinator.prototype.onReconcileKey = function (key, effect, version) {
            if (effect === 0) {
                if (this._input !== null) {
                    var value = this._input.get(key);
                    if (value !== void 0) {
                        this._cache = this._cache.updated(key, value);
                    }
                    else {
                        this._cache = this._cache.removed(key);
                    }
                }
            }
            else if (effect === 1) {
                this._cache = this._cache.removed(key);
            }
        };
        MemoizeMapCombinator.prototype.onReconcile = function (version) {
            this._state = void 0;
        };
        MemoizeMapCombinator.prototype.memoize = function () {
            return this;
        };
        return MemoizeMapCombinator;
    }(AbstractMapInoutlet));
    MapOutlet.MemoizeMapCombinator = MemoizeMapCombinator;

    var FilterFieldsOperator = (function (_super) {
        __extends(FilterFieldsOperator, _super);
        function FilterFieldsOperator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FilterFieldsOperator.prototype.has = function (key) {
            if (this._input !== null) {
                var value = this._input.get(key);
                return value !== void 0 && this.evaluate(key, value);
            }
            return false;
        };
        FilterFieldsOperator.prototype.get = function (key) {
            if (key === void 0) {
                var output = new collections.BTree();
                var keys = this.keyIterator();
                do {
                    var next = keys.next();
                    if (!next.done) {
                        var key_1 = next.value;
                        var value = this._input.get(key_1);
                        if (value !== void 0 && this.evaluate(key_1, value)) {
                            output.set(key_1, value);
                        }
                        continue;
                    }
                    break;
                } while (true);
                return output;
            }
            else {
                if (this._input !== null) {
                    var value = this._input.get(key);
                    if (value !== void 0 && this.evaluate(key, value)) {
                        return value;
                    }
                }
                return void 0;
            }
        };
        FilterFieldsOperator.prototype.keyIterator = function () {
            if (this._input !== null) {
                return this._input.keyIterator();
            }
            else {
                return util.Cursor.empty();
            }
        };
        FilterFieldsOperator.prototype.onInvalidateOutputKey = function (key, effect) {
            this.invalidateInputKey(key, effect);
        };
        FilterFieldsOperator.prototype.onReconcileOutputKey = function (key, effect, version) {
            this.reconcileInputKey(key, version);
        };
        FilterFieldsOperator.prototype.willReconcileInputKey = function (key, effect, version) {
            if (effect === 0) {
                if (this._input !== null) {
                    var value = this._input.get(key);
                    if (value === void 0 || !this.evaluate(key, value)) {
                        return 1;
                    }
                }
            }
            return effect;
        };
        return FilterFieldsOperator;
    }(AbstractMapInletMapOutlet));

    var FilterFieldsCombinator = (function (_super) {
        __extends(FilterFieldsCombinator, _super);
        function FilterFieldsCombinator(func) {
            var _this = _super.call(this) || this;
            _this._func = func;
            return _this;
        }
        FilterFieldsCombinator.prototype.evaluate = function (key, value) {
            return this._func(key, value);
        };
        return FilterFieldsCombinator;
    }(FilterFieldsOperator));
    MapOutlet.FilterFieldsCombinator = FilterFieldsCombinator;

    var MapValueOperator = (function (_super) {
        __extends(MapValueOperator, _super);
        function MapValueOperator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MapValueOperator.prototype.get = function () {
            if (this._input !== null) {
                return this.evaluate(this._input.get());
            }
            else {
                return void 0;
            }
        };
        return MapValueOperator;
    }(AbstractInoutlet));

    var MapValueCombinator = (function (_super) {
        __extends(MapValueCombinator, _super);
        function MapValueCombinator(func) {
            var _this = _super.call(this) || this;
            _this._func = func;
            return _this;
        }
        MapValueCombinator.prototype.evaluate = function (value) {
            if (value !== void 0) {
                return this._func(value);
            }
            else {
                return void 0;
            }
        };
        return MapValueCombinator;
    }(MapValueOperator));
    Outlet.MapValueCombinator = MapValueCombinator;

    var MapFieldValuesOperator = (function (_super) {
        __extends(MapFieldValuesOperator, _super);
        function MapFieldValuesOperator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MapFieldValuesOperator.prototype.has = function (key) {
            if (this._input !== null) {
                return this._input.has(key);
            }
            else {
                return false;
            }
        };
        MapFieldValuesOperator.prototype.get = function (key) {
            if (key === void 0) {
                var output = new collections.BTree();
                var keys = this.keyIterator();
                do {
                    var next = keys.next();
                    if (!next.done) {
                        var key_1 = next.value;
                        var value = this.evaluate(key_1, this._input.get(key_1));
                        if (value !== void 0) {
                            output.set(key_1, value);
                        }
                        continue;
                    }
                    break;
                } while (true);
                return output;
            }
            else {
                if (this._input !== null) {
                    return this.evaluate(key, this._input.get(key));
                }
                else {
                    return void 0;
                }
            }
        };
        MapFieldValuesOperator.prototype.keyIterator = function () {
            if (this._input !== null) {
                return this._input.keyIterator();
            }
            else {
                return util.Cursor.empty();
            }
        };
        return MapFieldValuesOperator;
    }(AbstractMapInoutlet));

    var MapFieldValuesCombinator = (function (_super) {
        __extends(MapFieldValuesCombinator, _super);
        function MapFieldValuesCombinator(func) {
            var _this = _super.call(this) || this;
            _this._func = func;
            return _this;
        }
        MapFieldValuesCombinator.prototype.evaluate = function (key, value) {
            if (value !== void 0) {
                return this._func(key, value);
            }
            else {
                return void 0;
            }
        };
        return MapFieldValuesCombinator;
    }(MapFieldValuesOperator));
    MapOutlet.MapFieldValuesCombinator = MapFieldValuesCombinator;

    var ReduceFieldsOperator = (function (_super) {
        __extends(ReduceFieldsOperator, _super);
        function ReduceFieldsOperator() {
            var _this = _super.call(this) || this;
            _this._state = new collections.BTree();
            return _this;
        }
        ReduceFieldsOperator.prototype.get = function () {
            return this._state.reduced(this.identity(), this.accumulate.bind(this), this.combine.bind(this));
        };
        ReduceFieldsOperator.prototype.onReconcileOutputKey = function (key, effect, version) {
            if (effect === 0) {
                if (this._input !== null) {
                    var value = this._input.get(key);
                    if (value !== void 0) {
                        this._state.set(key, value);
                    }
                    else {
                        this._state.delete(key);
                    }
                }
            }
            else if (effect === 1) {
                this._state.delete(key);
            }
        };
        return ReduceFieldsOperator;
    }(AbstractMapInletOutlet));

    var ReduceFieldsCombinator = (function (_super) {
        __extends(ReduceFieldsCombinator, _super);
        function ReduceFieldsCombinator(identity, accumulator, combiner) {
            var _this = _super.call(this) || this;
            _this._identity = identity;
            _this._accumulator = accumulator;
            _this._combiner = combiner;
            return _this;
        }
        ReduceFieldsCombinator.prototype.get = function () {
            return this._state.reduced(this._identity, this._accumulator, this._combiner);
        };
        ReduceFieldsCombinator.prototype.identity = function () {
            return this._identity;
        };
        ReduceFieldsCombinator.prototype.accumulate = function (result, value) {
            return this._accumulator(result, value);
        };
        ReduceFieldsCombinator.prototype.combine = function (result, value) {
            return this._combiner(result, value);
        };
        return ReduceFieldsCombinator;
    }(ReduceFieldsOperator));
    MapOutlet.ReduceFieldsCombinator = ReduceFieldsCombinator;

    var WatchValueOperator = (function (_super) {
        __extends(WatchValueOperator, _super);
        function WatchValueOperator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        WatchValueOperator.prototype.onReconcileOutput = function (version) {
            if (this._input !== null) {
                this.evaluate(this._input.get());
            }
        };
        return WatchValueOperator;
    }(AbstractInlet));

    var WatchValueCombinator = (function (_super) {
        __extends(WatchValueCombinator, _super);
        function WatchValueCombinator(func) {
            var _this = _super.call(this) || this;
            _this._func = func;
            return _this;
        }
        WatchValueCombinator.prototype.evaluate = function (value) {
            if (value !== void 0) {
                return this._func(value);
            }
        };
        return WatchValueCombinator;
    }(WatchValueOperator));
    Outlet.WatchValueCombinator = WatchValueCombinator;

    var WatchFieldsOperator = (function (_super) {
        __extends(WatchFieldsOperator, _super);
        function WatchFieldsOperator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        WatchFieldsOperator.prototype.onReconcileOutputKey = function (key, effect, version) {
            if (effect === 0) {
                if (this._input !== null) {
                    this.evaluate(key, this._input.get(key));
                }
                else {
                    this.evaluate(key, void 0);
                }
            }
            else if (effect === 1) {
                this.evaluate(key, void 0);
            }
        };
        return WatchFieldsOperator;
    }(AbstractMapInlet));

    var WatchFieldsCombinator = (function (_super) {
        __extends(WatchFieldsCombinator, _super);
        function WatchFieldsCombinator(func) {
            var _this = _super.call(this) || this;
            _this._func = func;
            return _this;
        }
        WatchFieldsCombinator.prototype.evaluate = function (key, value) {
            if (value !== void 0) {
                return this._func(key, value);
            }
        };
        return WatchFieldsCombinator;
    }(WatchFieldsOperator));
    MapOutlet.WatchFieldsCombinator = WatchFieldsCombinator;

    var StreamletInlet = (function (_super) {
        __extends(StreamletInlet, _super);
        function StreamletInlet(streamlet) {
            var _this = _super.call(this) || this;
            _this._streamlet = streamlet;
            return _this;
        }
        StreamletInlet.prototype.streamlet = function () {
            return this._streamlet;
        };
        StreamletInlet.prototype.willInvalidateOutput = function () {
            var streamlet = this._streamlet;
            if (streamlet.willInvalidateInlet) {
                streamlet.willInvalidateInlet(this);
            }
        };
        StreamletInlet.prototype.didInvalidateOutput = function () {
            var streamlet = this._streamlet;
            if (streamlet.didInvalidateInlet) {
                streamlet.didInvalidateInlet(this);
            }
            else {
                streamlet.invalidate();
            }
        };
        StreamletInlet.prototype.willReconcileOutput = function (version) {
            var streamlet = this._streamlet;
            if (streamlet.willReconcileInlet) {
                streamlet.willReconcileInlet(this, version);
            }
        };
        StreamletInlet.prototype.didReconcileOutput = function (version) {
            var streamlet = this._streamlet;
            if (streamlet.didReconcileInlet) {
                streamlet.didReconcileInlet(this, version);
            }
            else {
                streamlet.reconcile(version);
            }
        };
        return StreamletInlet;
    }(AbstractInlet));

    var StreamletOutlet = (function (_super) {
        __extends(StreamletOutlet, _super);
        function StreamletOutlet(streamlet) {
            var _this = _super.call(this) || this;
            _this._streamlet = streamlet;
            return _this;
        }
        StreamletOutlet.prototype.streamlet = function () {
            return this._streamlet;
        };
        StreamletOutlet.prototype.get = function () {
            var streamlet = this._streamlet;
            if (streamlet.getOutput) {
                return streamlet.getOutput(this);
            }
            return void 0;
        };
        StreamletOutlet.prototype.willInvalidateInput = function () {
            var streamlet = this._streamlet;
            if (streamlet.willInvalidateOutlet) {
                streamlet.willInvalidateOutlet(this);
            }
        };
        StreamletOutlet.prototype.didInvalidateInput = function () {
            var streamlet = this._streamlet;
            if (streamlet.didInvalidateOutlet) {
                streamlet.didInvalidateOutlet(this);
            }
            else {
                streamlet.invalidate();
            }
        };
        StreamletOutlet.prototype.willReconcileInput = function (version) {
            var streamlet = this._streamlet;
            if (streamlet.willReconcileOutlet) {
                streamlet.willReconcileOutlet(this, version);
            }
        };
        StreamletOutlet.prototype.didReconcileInput = function (version) {
            var streamlet = this._streamlet;
            if (streamlet.didReconcileOutlet) {
                streamlet.didReconcileOutlet(this, version);
            }
        };
        return StreamletOutlet;
    }(AbstractOutlet));

    var StreamletInoutlet = (function (_super) {
        __extends(StreamletInoutlet, _super);
        function StreamletInoutlet(streamlet) {
            var _this = _super.call(this) || this;
            _this._streamlet = streamlet;
            return _this;
        }
        StreamletInoutlet.prototype.streamlet = function () {
            return this._streamlet;
        };
        StreamletInoutlet.prototype.get = function () {
            var streamlet = this._streamlet;
            if (streamlet.getOutput) {
                var output = streamlet.getOutput(this);
                if (output !== void 0) {
                    return output;
                }
            }
            if (this._input !== null) {
                return this._input.get();
            }
            return void 0;
        };
        StreamletInoutlet.prototype.willInvalidate = function () {
            var streamlet = this._streamlet;
            if (streamlet.willInvalidateOutlet) {
                streamlet.willInvalidateOutlet(this);
            }
        };
        StreamletInoutlet.prototype.didInvalidate = function () {
            var streamlet = this._streamlet;
            if (streamlet.didInvalidateOutlet) {
                streamlet.didInvalidateOutlet(this);
            }
            else {
                streamlet.invalidate();
            }
        };
        StreamletInoutlet.prototype.willUpdate = function (version) {
            var streamlet = this._streamlet;
            if (streamlet.willReconcileOutlet) {
                streamlet.willReconcileOutlet(this, version);
            }
        };
        StreamletInoutlet.prototype.didUpdate = function (version) {
            var streamlet = this._streamlet;
            if (streamlet.didReconcileOutlet) {
                streamlet.didReconcileOutlet(this, version);
            }
        };
        return StreamletInoutlet;
    }(AbstractInoutlet));

    var InletDescriptor = (function () {
        function InletDescriptor(key, name, type) {
            this.key = key;
            this.name = name;
            this.type = type;
        }
        return InletDescriptor;
    }());
    var OutletDescriptor = (function () {
        function OutletDescriptor(key, name, type) {
            this.key = key;
            this.name = name;
            this.type = type;
        }
        return OutletDescriptor;
    }());
    var InoutletDescriptor = (function () {
        function InoutletDescriptor(key, name, type) {
            this.key = key;
            this.name = name;
            this.type = type;
        }
        return InoutletDescriptor;
    }());
    var AbstractStreamlet = (function () {
        function AbstractStreamlet(scope) {
            if (scope === void 0) { scope = null; }
            this.scope = scope;
            this._version = -1;
        }
        AbstractStreamlet.prototype.streamletClass = function () {
            return this.__proto__;
        };
        AbstractStreamlet.prototype.streamletScope = function () {
            return this.scope;
        };
        AbstractStreamlet.prototype.setStreamletScope = function (scope) {
            this.scope = scope;
        };
        AbstractStreamlet.prototype.streamletContext = function () {
            if (this.context) {
                return this.context;
            }
            var scope = this.streamletScope();
            if (scope !== null) {
                return scope.streamletContext();
            }
            return null;
        };
        AbstractStreamlet.prototype.setStreamletContext = function (context) {
            this.context = context;
        };
        AbstractStreamlet.prototype.inlet = function (key) {
            if (key === void 0) {
                return new StreamletInlet(this);
            }
            else {
                return AbstractStreamlet.reflectInletKey(key, this, this.streamletClass());
            }
        };
        AbstractStreamlet.prototype.bindInput = function (key, input) {
            var inlet = this.inlet(key);
            if (inlet === null) {
                throw new Error("" + key);
            }
            inlet.bindInput(input);
        };
        AbstractStreamlet.prototype.unbindInput = function (key) {
            var inlet = this.inlet(key);
            if (inlet === null) {
                throw new Error("" + key);
            }
            inlet.unbindInput();
        };
        AbstractStreamlet.prototype.outlet = function (key) {
            if (key === void 0) {
                return new StreamletOutlet(this);
            }
            else if (typeof key === "string") {
                return AbstractStreamlet.reflectOutletKey(key, this, this.streamletClass());
            }
            else {
                return key;
            }
        };
        AbstractStreamlet.prototype.inoutlet = function () {
            return new StreamletInoutlet(this);
        };
        AbstractStreamlet.prototype.invalidate = function () {
            if (this._version >= 0) {
                this.willInvalidate();
                this._version = -1;
                this.onInvalidate();
                this.onInvalidateOutlets();
                this.didInvalidate();
            }
        };
        AbstractStreamlet.prototype.reconcile = function (version) {
            if (this._version < 0) {
                this.willReconcile(version);
                this._version = version;
                this.onReconcileInlets(version);
                this.onReconcile(version);
                this.onReconcileOutlets(version);
                this.didReconcile(version);
            }
        };
        AbstractStreamlet.prototype.getInput = function (inlet, orElse) {
            if (typeof inlet === "string") {
                inlet = this.inlet(inlet);
            }
            var object;
            if (inlet !== null) {
                var input = inlet.input();
                if (input !== null) {
                    object = input.get();
                }
            }
            if (object === void 0) {
                object = orElse;
            }
            return object;
        };
        AbstractStreamlet.prototype.getOutput = function (outlet) {
            return void 0;
        };
        AbstractStreamlet.prototype.disconnectInputs = function () {
            AbstractStreamlet.disconnectInputs(this, this.streamletClass());
        };
        AbstractStreamlet.disconnectInputs = function (streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_inlets")) {
                    for (var name_1 in streamletClass._inlets) {
                        var inletDescriptor = streamletClass._inlets[name_1];
                        if (inletDescriptor instanceof InletDescriptor) {
                            var inlet = AbstractStreamlet.reflectInletField(streamlet, inletDescriptor);
                            inlet.disconnectInputs();
                        }
                        else if (inletDescriptor instanceof InoutletDescriptor) {
                            var inoutlet = AbstractStreamlet.reflectInoutletField(streamlet, inletDescriptor);
                            inoutlet.disconnectInputs();
                        }
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
        };
        AbstractStreamlet.prototype.disconnectOutputs = function () {
            AbstractStreamlet.disconnectOutputs(this, this.streamletClass());
        };
        AbstractStreamlet.disconnectOutputs = function (streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_outlets")) {
                    for (var name_2 in streamletClass._outlets) {
                        var outletDescriptor = streamletClass._outlets[name_2];
                        if (outletDescriptor instanceof OutletDescriptor) {
                            var outlet = AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor);
                            outlet.disconnectOutputs();
                        }
                        else if (outletDescriptor instanceof InoutletDescriptor) {
                            var inoutlet = AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor);
                            inoutlet.disconnectOutputs();
                        }
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
        };
        AbstractStreamlet.prototype.willInvalidateInlet = function (inlet) {
        };
        AbstractStreamlet.prototype.didInvalidateInlet = function (inlet) {
            this.invalidate();
        };
        AbstractStreamlet.prototype.willReconcileInlet = function (inlet, version) {
        };
        AbstractStreamlet.prototype.didReconcileInlet = function (inlet, version) {
            this.reconcile(version);
        };
        AbstractStreamlet.prototype.willInvalidateOutlet = function (outlet) {
        };
        AbstractStreamlet.prototype.didInvalidateOutlet = function (outlet) {
        };
        AbstractStreamlet.prototype.willReconcileOutlet = function (outlet, version) {
        };
        AbstractStreamlet.prototype.didReconcileOutlet = function (outlet, version) {
        };
        AbstractStreamlet.prototype.willInvalidate = function () {
        };
        AbstractStreamlet.prototype.onInvalidate = function () {
        };
        AbstractStreamlet.prototype.onInvalidateOutlets = function () {
            AbstractStreamlet.invalidateOutlets(this, this.streamletClass());
        };
        AbstractStreamlet.invalidateOutlets = function (streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_outlets")) {
                    for (var name_3 in streamletClass._outlets) {
                        var outletDescriptor = streamletClass._outlets[name_3];
                        if (outletDescriptor instanceof OutletDescriptor) {
                            var outlet = AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor);
                            outlet.invalidateInput();
                        }
                        else if (outletDescriptor instanceof InoutletDescriptor) {
                            var inoutlet = AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor);
                            inoutlet.invalidateInput();
                        }
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
        };
        AbstractStreamlet.prototype.didInvalidate = function () {
        };
        AbstractStreamlet.prototype.willReconcile = function (version) {
        };
        AbstractStreamlet.prototype.onReconcileInlets = function (version) {
            AbstractStreamlet.reconcileInlets(version, this, this.streamletClass());
        };
        AbstractStreamlet.reconcileInlets = function (version, streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_inlets")) {
                    for (var name_4 in streamletClass._inlets) {
                        var inletDescriptor = streamletClass._inlets[name_4];
                        if (inletDescriptor instanceof InletDescriptor) {
                            var inlet = AbstractStreamlet.reflectInletField(streamlet, inletDescriptor);
                            inlet.reconcileOutput(version);
                        }
                        else if (inletDescriptor instanceof InoutletDescriptor) {
                            var inoutlet = AbstractStreamlet.reflectInoutletField(streamlet, inletDescriptor);
                            inoutlet.reconcileOutput(version);
                        }
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
        };
        AbstractStreamlet.prototype.onReconcile = function (version) {
        };
        AbstractStreamlet.prototype.onReconcileOutlets = function (version) {
            AbstractStreamlet.reconcileOutlets(version, this, this.streamletClass());
        };
        AbstractStreamlet.reconcileOutlets = function (version, streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_outlets")) {
                    for (var name_5 in streamletClass._outlets) {
                        var outletDescriptor = streamletClass._outlets[name_5];
                        if (outletDescriptor instanceof OutletDescriptor) {
                            var outlet = AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor);
                            outlet.reconcileInput(version);
                        }
                        else if (outletDescriptor instanceof InoutletDescriptor) {
                            var inoutlet = AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor);
                            inoutlet.reconcileInput(version);
                        }
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
        };
        AbstractStreamlet.prototype.didReconcile = function (version) {
        };
        AbstractStreamlet.reflectEachInlet = function (streamlet, streamletClass, callback, thisArg) {
            var index = 0;
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_inlets")) {
                    for (var name_6 in streamletClass._inlets) {
                        var inletDescriptor = streamletClass._inlets[name_6];
                        var inlet = void 0;
                        if (inletDescriptor instanceof InletDescriptor) {
                            inlet = AbstractStreamlet.reflectInletField(streamlet, inletDescriptor);
                        }
                        else if (inletDescriptor instanceof InoutletDescriptor) {
                            inlet = AbstractStreamlet.reflectInoutletField(streamlet, inletDescriptor);
                        }
                        else {
                            inlet = null;
                        }
                        var result = callback.call(thisArg, inlet, inletDescriptor.name, index);
                        if (result !== void 0) {
                            return result;
                        }
                        index += 1;
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
            return void 0;
        };
        AbstractStreamlet.reflectEachOutlet = function (streamlet, streamletClass, callback, thisArg) {
            var index = 0;
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_outlets")) {
                    for (var name_7 in streamletClass._outlets) {
                        var outletDescriptor = streamletClass._outlets[name_7];
                        var outlet = void 0;
                        if (outletDescriptor instanceof OutletDescriptor) {
                            outlet = AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor);
                        }
                        else if (outletDescriptor instanceof InoutletDescriptor) {
                            outlet = AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor);
                        }
                        else {
                            outlet = null;
                        }
                        var result = callback.call(thisArg, outlet, outletDescriptor.name, index);
                        if (result !== void 0) {
                            return result;
                        }
                        index += 1;
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
            return void 0;
        };
        AbstractStreamlet.reflectInletCount = function (streamletClass) {
            var count = 0;
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_inlets")) {
                    for (var _ in streamletClass._inlets) {
                        count += 1;
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
            return count;
        };
        AbstractStreamlet.reflectOutletCount = function (streamletClass) {
            var count = 0;
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_outlets")) {
                    for (var _ in streamletClass._outlets) {
                        count += 1;
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
            return count;
        };
        AbstractStreamlet.reflectInletIndex = function (index, streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_inlets")) {
                    for (var name_8 in streamletClass._inlets) {
                        if (index === 0) {
                            var inletDescriptor = streamletClass._inlets[name_8];
                            if (inletDescriptor instanceof InletDescriptor) {
                                return [inletDescriptor.name, AbstractStreamlet.reflectInletField(streamlet, inletDescriptor)];
                            }
                            else if (inletDescriptor instanceof InoutletDescriptor) {
                                return [inletDescriptor.name, AbstractStreamlet.reflectInoutletField(streamlet, inletDescriptor)];
                            }
                            else {
                                return null;
                            }
                        }
                        index -= 1;
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
            return null;
        };
        AbstractStreamlet.reflectOutletIndex = function (index, streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_outlets")) {
                    for (var name_9 in streamletClass._outlets) {
                        if (index === 0) {
                            var outletDescriptor = streamletClass._outlets[name_9];
                            if (outletDescriptor instanceof OutletDescriptor) {
                                return [outletDescriptor.name, AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor)];
                            }
                            else if (outletDescriptor instanceof InoutletDescriptor) {
                                return [outletDescriptor.name, AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor)];
                            }
                            else {
                                return null;
                            }
                        }
                        index -= 1;
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
            return null;
        };
        AbstractStreamlet.reflectInletKey = function (key, streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_inlets")) {
                    var inletDescriptor = streamletClass._inlets[key];
                    if (inletDescriptor !== void 0) {
                        if (inletDescriptor instanceof InletDescriptor) {
                            return AbstractStreamlet.reflectInletField(streamlet, inletDescriptor);
                        }
                        else if (inletDescriptor instanceof InoutletDescriptor) {
                            return AbstractStreamlet.reflectInoutletField(streamlet, inletDescriptor);
                        }
                        else {
                            return null;
                        }
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
            return null;
        };
        AbstractStreamlet.reflectOutletKey = function (key, streamlet, streamletClass) {
            while (streamletClass) {
                if (streamletClass.hasOwnProperty("_outlets")) {
                    var outletDescriptor = streamletClass._outlets[key];
                    if (outletDescriptor !== void 0) {
                        if (outletDescriptor instanceof OutletDescriptor) {
                            return AbstractStreamlet.reflectOutletField(streamlet, outletDescriptor);
                        }
                        else if (outletDescriptor instanceof InoutletDescriptor) {
                            return AbstractStreamlet.reflectInoutletField(streamlet, outletDescriptor);
                        }
                        else {
                            return null;
                        }
                    }
                }
                streamletClass = streamletClass.__proto__;
            }
            return null;
        };
        AbstractStreamlet.reflectInletField = function (streamlet, inletDescriptor) {
            if (inletDescriptor.type === "value") {
                return AbstractStreamlet.reflectValueInletField(streamlet, inletDescriptor.key);
            }
            else if (inletDescriptor.type === "map") {
                return AbstractStreamlet.reflectMapInletField(streamlet, inletDescriptor.key);
            }
            else {
                throw new TypeError(inletDescriptor.type);
            }
        };
        AbstractStreamlet.reflectValueInletField = function (streamlet, key) {
            var inlet = streamlet[key];
            if (!inlet) {
                if (streamlet instanceof AbstractStreamlet) {
                    inlet = streamlet.inlet();
                }
                else {
                    inlet = new StreamletInlet(streamlet);
                }
                streamlet[key] = inlet;
            }
            return inlet;
        };
        AbstractStreamlet.reflectMapInletField = function (streamlet, key) {
            return null;
        };
        AbstractStreamlet.reflectOutletField = function (streamlet, outletDescriptor) {
            if (outletDescriptor.type === "value") {
                return AbstractStreamlet.reflectValueOutletField(streamlet, outletDescriptor.key);
            }
            else if (outletDescriptor.type === "map") {
                return AbstractStreamlet.reflectMapOutletField(streamlet, outletDescriptor.key);
            }
            else {
                throw new TypeError(outletDescriptor.type);
            }
        };
        AbstractStreamlet.reflectValueOutletField = function (streamlet, key) {
            var outlet = streamlet[key];
            if (!outlet) {
                if (streamlet instanceof AbstractStreamlet) {
                    outlet = streamlet.outlet();
                }
                else {
                    outlet = new StreamletOutlet(streamlet);
                }
                streamlet[key] = outlet;
            }
            return outlet;
        };
        AbstractStreamlet.reflectMapOutletField = function (streamlet, key) {
            return null;
        };
        AbstractStreamlet.reflectInoutletField = function (streamlet, inoutletDescriptor) {
            if (inoutletDescriptor.type === "value") {
                return AbstractStreamlet.reflectValueInoutletField(streamlet, inoutletDescriptor.key);
            }
            else if (inoutletDescriptor.type === "map") {
                return AbstractStreamlet.reflectMapInoutletField(streamlet, inoutletDescriptor.key);
            }
            else {
                throw new TypeError(inoutletDescriptor.type);
            }
        };
        AbstractStreamlet.reflectValueInoutletField = function (streamlet, key) {
            var inoutlet = streamlet[key];
            if (!inoutlet) {
                if (streamlet instanceof AbstractStreamlet) {
                    inoutlet = streamlet.inoutlet();
                }
                else {
                    inoutlet = new StreamletInoutlet(streamlet);
                }
                streamlet[key] = inoutlet;
            }
            return inoutlet;
        };
        AbstractStreamlet.reflectMapInoutletField = function (streamlet, key) {
            return null;
        };
        AbstractStreamlet.init = function (streamletClass) {
            if (!streamletClass.hasOwnProperty("_inlets")) {
                streamletClass._inlets = {};
            }
            if (!streamletClass.hasOwnProperty("_outlets")) {
                streamletClass._outlets = {};
            }
            if (!streamletClass.hasOwnProperty("_inoutlets")) {
                streamletClass._inoutlets = {};
            }
        };
        AbstractStreamlet.decorateInlet = function (options, target, key) {
            AbstractStreamlet.init(target);
            var name = options.name !== void 0 ? options.name : key;
            var type = options.type !== void 0 ? options.type : "value";
            var inletDescriptor = new InletDescriptor(key, name, type);
            target._inlets[name] = inletDescriptor;
        };
        AbstractStreamlet.decorateOutlet = function (options, target, key) {
            AbstractStreamlet.init(target);
            var name = options.name !== void 0 ? options.name : key;
            var type = options.type !== void 0 ? options.type : "value";
            var outletDescriptor = new OutletDescriptor(key, name, type);
            target._outlets[name] = outletDescriptor;
        };
        AbstractStreamlet.decorateInoutlet = function (options, target, key) {
            AbstractStreamlet.init(target);
            var name = options.name !== void 0 ? options.name : key;
            var type = options.type !== void 0 ? options.type : "value";
            var inoutletDescriptor = new InoutletDescriptor(key, name, type);
            target._inlets[name] = inoutletDescriptor;
            target._outlets[name] = inoutletDescriptor;
            target._inoutlets[name] = inoutletDescriptor;
        };
        return AbstractStreamlet;
    }());

    function In(target, key) {
        if (arguments.length === 1) {
            if (typeof target === "string") {
                target = { name: target };
            }
            return AbstractStreamlet.decorateInlet.bind(void 0, target);
        }
        else {
            AbstractStreamlet.decorateInlet({}, target, key);
        }
    }

    function Out(target, key) {
        if (arguments.length === 1) {
            if (typeof target === "string") {
                target = { name: target };
            }
            return AbstractStreamlet.decorateOutlet.bind(void 0, target);
        }
        else {
            AbstractStreamlet.decorateOutlet({}, target, key);
        }
    }

    function Inout(target, key) {
        if (arguments.length === 1) {
            if (typeof target === "string") {
                target = { name: target };
            }
            return AbstractStreamlet.decorateInoutlet.bind(void 0, target);
        }
        else {
            AbstractStreamlet.decorateInoutlet({}, target, key);
        }
    }

    exports.AbstractInlet = AbstractInlet;
    exports.AbstractInoutlet = AbstractInoutlet;
    exports.AbstractMapInlet = AbstractMapInlet;
    exports.AbstractMapInletMapOutlet = AbstractMapInletMapOutlet;
    exports.AbstractMapInletOutlet = AbstractMapInletOutlet;
    exports.AbstractMapInoutlet = AbstractMapInoutlet;
    exports.AbstractMapOutlet = AbstractMapOutlet;
    exports.AbstractOutlet = AbstractOutlet;
    exports.AbstractStreamlet = AbstractStreamlet;
    exports.FilterFieldsCombinator = FilterFieldsCombinator;
    exports.FilterFieldsOperator = FilterFieldsOperator;
    exports.In = In;
    exports.Inlet = Inlet;
    exports.InletDescriptor = InletDescriptor;
    exports.Inout = Inout;
    exports.KeyOutlet = KeyOutlet;
    exports.MapFieldValuesCombinator = MapFieldValuesCombinator;
    exports.MapFieldValuesOperator = MapFieldValuesOperator;
    exports.MapInlet = MapInlet;
    exports.MapInput = MapInput;
    exports.MapOutlet = MapOutlet;
    exports.MapOutput = MapOutput;
    exports.MapValueCombinator = MapValueCombinator;
    exports.MapValueOperator = MapValueOperator;
    exports.MemoizeMapCombinator = MemoizeMapCombinator;
    exports.MemoizeValueCombinator = MemoizeValueCombinator;
    exports.Out = Out;
    exports.Outlet = Outlet;
    exports.OutletDescriptor = OutletDescriptor;
    exports.OutletInlet = OutletInlet;
    exports.OutletMapInlet = OutletMapInlet;
    exports.ReduceFieldsCombinator = ReduceFieldsCombinator;
    exports.ReduceFieldsOperator = ReduceFieldsOperator;
    exports.Streamlet = Streamlet;
    exports.StreamletException = StreamletException;
    exports.StreamletInlet = StreamletInlet;
    exports.StreamletInoutlet = StreamletInoutlet;
    exports.StreamletOutlet = StreamletOutlet;
    exports.StreamletScope = StreamletScope;
    exports.ValueInput = ValueInput;
    exports.ValueOutput = ValueOutput;
    exports.WatchFieldsCombinator = WatchFieldsCombinator;
    exports.WatchFieldsOperator = WatchFieldsOperator;
    exports.WatchValueCombinator = WatchValueCombinator;
    exports.WatchValueOperator = WatchValueOperator;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=swim-streamlet.js.map