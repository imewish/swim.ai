import { __extends } from "tslib";
import { Item, Slot, Value, Num } from "@swim/structure";
import { DownlinkRecord } from "./DownlinkRecord";
var MapDownlinkRecord = (function (_super) {
    __extends(MapDownlinkRecord, _super);
    function MapDownlinkRecord(downlink) {
        var _this = _super.call(this) || this;
        _this._downlink = downlink;
        _this._downlink.observe(_this);
        return _this;
    }
    Object.defineProperty(MapDownlinkRecord.prototype, "downlink", {
        get: function () {
            return this._downlink;
        },
        enumerable: true,
        configurable: true
    });
    MapDownlinkRecord.prototype.isEmpty = function () {
        return this._downlink.isEmpty();
    };
    MapDownlinkRecord.prototype.isArray = function () {
        return this._downlink.isEmpty();
    };
    MapDownlinkRecord.prototype.isObject = function () {
        return true;
    };
    Object.defineProperty(MapDownlinkRecord.prototype, "length", {
        get: function () {
            return this._downlink.size;
        },
        enumerable: true,
        configurable: true
    });
    MapDownlinkRecord.prototype.has = function (key) {
        return this._downlink.has(key);
    };
    MapDownlinkRecord.prototype.get = function (key) {
        if (key === void 0) {
            return this;
        }
        else {
            return this._downlink.get(key);
        }
    };
    MapDownlinkRecord.prototype.getAttr = function (key) {
        return Value.absent();
    };
    MapDownlinkRecord.prototype.getSlot = function (key) {
        return this.get(key);
    };
    MapDownlinkRecord.prototype.getItem = function (index) {
        if (index instanceof Num) {
            index = index.value;
        }
        var n = this._downlink.size;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            var entry = this._downlink.getEntry(index);
            return Slot.of(entry[0], entry[1]);
        }
        return Item.absent();
    };
    MapDownlinkRecord.prototype.set = function (key, newValue) {
        this._downlink.set(key, newValue);
        return this;
    };
    MapDownlinkRecord.prototype.setAttr = function (key, newValue) {
        throw new Error("unsupported");
    };
    MapDownlinkRecord.prototype.setSlot = function (key, newValue) {
        return this.set(key, newValue);
    };
    MapDownlinkRecord.prototype.setItem = function (index, newItem) {
        throw new Error("unsupported");
    };
    MapDownlinkRecord.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        throw new Error("unsupported");
    };
    MapDownlinkRecord.prototype.splice = function (start, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        throw new Error("unsupported");
    };
    MapDownlinkRecord.prototype.delete = function (key) {
        key = Value.fromAny(key);
        var oldValue = this._downlink.get(key);
        if (this._downlink.delete(key)) {
            return Slot.of(key, oldValue);
        }
        return Item.absent();
    };
    MapDownlinkRecord.prototype.clear = function () {
        this._downlink.clear();
    };
    MapDownlinkRecord.prototype.forEach = function (callback, thisArg) {
        var index = 0;
        return this._downlink.forEach(function (key, value) {
            var result = callback.call(thisArg, Slot.of(key, value), index);
            index += 1;
            return result;
        });
    };
    MapDownlinkRecord.prototype.keyIterator = function () {
        return this._downlink.keys();
    };
    MapDownlinkRecord.prototype.didUpdate = function (key, newValue, oldValue) {
        this.invalidateInputKey(key, 0);
        this.reconcileInput(0);
    };
    MapDownlinkRecord.prototype.didRemove = function (key, oldValue) {
        this.invalidateInputKey(key, 1);
        this.reconcileInput(0);
    };
    MapDownlinkRecord.prototype.didDrop = function (lower) {
    };
    MapDownlinkRecord.prototype.didTake = function (upper) {
    };
    MapDownlinkRecord.prototype.didClear = function () {
    };
    return MapDownlinkRecord;
}(DownlinkRecord));
export { MapDownlinkRecord };
//# sourceMappingURL=MapDownlinkRecord.js.map