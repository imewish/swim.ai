import { Cursor } from "@swim/util";
import { BTree } from "@swim/collections";
import { Value } from "@swim/structure";
import { Uri } from "@swim/uri";
import { EventMessage } from "@swim/warp";
import { Host } from "../host/Host";
import { DownlinkContext } from "./DownlinkContext";
import { DownlinkModel } from "./DownlinkModel";
import { DownlinkType } from "./Downlink";
import { MapDownlink } from "./MapDownlink";
export declare class MapDownlinkModel extends DownlinkModel {
    _views: MapDownlink<unknown, unknown>[];
    _state: BTree<Value, Value>;
    constructor(context: DownlinkContext, hostUri: Uri, nodeUri: Uri, laneUri: Uri, prio?: number, rate?: number, body?: Value, state?: BTree<Value, Value>);
    type(): DownlinkType;
    get size(): number;
    isEmpty(): boolean;
    has(key: Value): boolean;
    get(key: Value): Value;
    getEntry(index: number): [Value, Value] | undefined;
    set(key: Value, newValue: Value): this;
    delete(key: Value): boolean;
    drop(lower: number): this;
    take(upper: number): this;
    clear(): void;
    forEach<T, S = unknown>(callback: (this: S, key: Value, value: Value, downlink: MapDownlinkModel) => T | void, thisArg?: S): T | undefined;
    keys(): Cursor<Value>;
    values(): Cursor<Value>;
    entries(): Cursor<[Value, Value]>;
    snapshot(): BTree<Value, Value>;
    setState(state: BTree<Value, Value>): void;
    onEventMessage(message: EventMessage, host: Host): void;
    protected onUpdateEvent(key: Value, newValue: Value): void;
    protected onRemoveEvent(key: Value): void;
    protected onDropEvent(lower: number): void;
    protected onTakeEvent(upper: number): void;
    protected onClearEvent(): void;
    protected mapWillUpdate(key: Value, newValue: Value): Value;
    protected mapDidUpdate(key: Value, newValue: Value, oldValue: Value): void;
    protected mapWillRemove(key: Value): void;
    protected mapDidRemove(key: Value, oldValue: Value): void;
    protected mapWillDrop(lower: number): void;
    protected mapDidDrop(lower: number): void;
    protected mapWillTake(upper: number): void;
    protected mapDidTake(upper: number): void;
    protected mapWillClear(): void;
    protected mapDidClear(): void;
}
//# sourceMappingURL=MapDownlinkModel.d.ts.map