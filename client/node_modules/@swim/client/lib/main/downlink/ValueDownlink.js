import { __extends } from "tslib";
import { Cursor } from "@swim/util";
import { Value, Form } from "@swim/structure";
import { MapValueCombinator } from "@swim/streamlet";
import { WatchValueCombinator } from "@swim/streamlet";
import { Downlink } from "./Downlink";
import { ValueDownlinkModel } from "./ValueDownlinkModel";
var ValueDownlink = (function (_super) {
    __extends(ValueDownlink, _super);
    function ValueDownlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, valueForm, state0) {
        if (flags === void 0) { flags = 3; }
        if (state0 === void 0) { state0 = Value.absent(); }
        var _this = _super.call(this, context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers) || this;
        if (init) {
            var observer = _this._observers[_this._observers.length - 1];
            observer.willSet = init.willSet || observer.willSet;
            observer.didSet = init.didSet || observer.didSet;
            valueForm = init.valueForm ? init.valueForm : valueForm;
        }
        _this._valueForm = valueForm || Form.forValue();
        _this._state0 = state0;
        _this._input = null;
        _this._outputs = null;
        _this._version = -1;
        return _this;
    }
    ValueDownlink.prototype.copy = function (context, owner, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, valueForm, state0) {
        if (arguments.length === 10) {
            state0 = this._state0;
            valueForm = this._valueForm;
        }
        return new ValueDownlink(context, owner, void 0, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, valueForm, state0);
    };
    ValueDownlink.prototype.type = function () {
        return "value";
    };
    ValueDownlink.prototype.valueForm = function (valueForm) {
        if (valueForm === void 0) {
            return this._valueForm;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers, valueForm, this._state0);
        }
    };
    ValueDownlink.prototype.get = function () {
        var value = this._model.get();
        var object = value.coerce(this._valueForm);
        return object;
    };
    ValueDownlink.prototype.set = function (newObject) {
        var newValue = this._valueForm.mold(newObject);
        this._model.set(newValue);
    };
    ValueDownlink.prototype.setState = function (state) {
        this._model.setState(state);
    };
    ValueDownlink.prototype.observe = function (observer) {
        return _super.prototype.observe.call(this, observer);
    };
    ValueDownlink.prototype.willSet = function (willSet) {
        return this.observe({ willSet: willSet });
    };
    ValueDownlink.prototype.didSet = function (didSet) {
        return this.observe({ didSet: didSet });
    };
    ValueDownlink.prototype.valueWillSet = function (newValue) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        var newObject;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.willSet) {
                if (newObject === void 0) {
                    newObject = newValue.coerce(this._valueForm);
                }
                var newResult = observer.willSet(newObject, this);
                if (newResult !== void 0) {
                    newObject = newResult;
                    newValue = this._valueForm.mold(newObject);
                }
            }
        }
        return newValue;
    };
    ValueDownlink.prototype.valueDidSet = function (newValue, oldValue) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        var newObject;
        var oldObject;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didSet) {
                if (newObject === void 0) {
                    newObject = newValue.coerce(this._valueForm);
                }
                if (oldObject === void 0) {
                    oldObject = oldValue.coerce(this._valueForm);
                }
                observer.didSet(newObject, oldObject, this);
            }
        }
        this.invalidate();
        this.reconcile(0);
    };
    ValueDownlink.prototype.initialState = function (state0) {
        if (state0 === void 0) {
            return this._state0;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers, this._valueForm, state0);
        }
    };
    ValueDownlink.prototype.didAliasModel = function () {
        this.onLinkedResponse();
        this.valueDidSet(this._model.get(), Value.absent());
        this.onSyncedResponse();
    };
    ValueDownlink.prototype.open = function () {
        var laneUri = this._laneUri;
        if (laneUri.isEmpty()) {
            throw new Error("no lane");
        }
        var nodeUri = this._nodeUri;
        if (nodeUri.isEmpty()) {
            throw new Error("no node");
        }
        var hostUri = this._hostUri;
        if (hostUri.isEmpty()) {
            hostUri = nodeUri.endpoint();
            nodeUri = hostUri.unresolve(nodeUri);
        }
        var model = this._context.getDownlink(hostUri, nodeUri, laneUri);
        if (model) {
            if (!(model instanceof ValueDownlinkModel)) {
                throw new Error("downlink type mismatch");
            }
            model.addDownlink(this);
            this._model = model;
            setTimeout(this.didAliasModel.bind(this));
        }
        else {
            model = new ValueDownlinkModel(this._context, hostUri, nodeUri, laneUri, this._prio, this._rate, this._body, this._state0);
            model.addDownlink(this);
            this._context.openDownlink(model);
            this._model = model;
        }
        if (this._owner) {
            this._owner.addDownlink(this);
        }
        return this;
    };
    ValueDownlink.prototype.input = function () {
        return this._input;
    };
    ValueDownlink.prototype.bindInput = function (input) {
        if (this._input !== null) {
            this._input.unbindOutput(this);
        }
        this._input = input;
        if (this._input !== null) {
            this._input.bindOutput(this);
        }
    };
    ValueDownlink.prototype.unbindInput = function () {
        if (this._input !== null) {
            this._input.unbindOutput(this);
        }
        this._input = null;
    };
    ValueDownlink.prototype.disconnectInputs = function () {
        var input = this._input;
        if (input !== null) {
            input.unbindOutput(this);
            this._input = null;
            input.disconnectInputs();
        }
    };
    ValueDownlink.prototype.outputIterator = function () {
        return this._outputs !== null ? Cursor.array(this._outputs) : Cursor.empty();
    };
    ValueDownlink.prototype.bindOutput = function (output) {
        var oldOutputs = this._outputs;
        var n = oldOutputs !== null ? oldOutputs.length : 0;
        var newOutputs = new Array(n + 1);
        for (var i = 0; i < n; i += 1) {
            newOutputs[i] = oldOutputs[i];
        }
        newOutputs[n] = output;
        this._outputs = newOutputs;
    };
    ValueDownlink.prototype.unbindOutput = function (output) {
        var oldOutputs = this._outputs;
        var n = oldOutputs !== null ? oldOutputs.length : 0;
        for (var i = 0; i < n; i += 1) {
            if (oldOutputs[i] === output) {
                if (n > 1) {
                    var newOutputs = new Array(n - 1);
                    for (var j = 0; j < i; j += 1) {
                        newOutputs[j] = oldOutputs[j];
                    }
                    for (var j = i; j < n - 1; j += 1) {
                        newOutputs[j] = oldOutputs[j + 1];
                    }
                    this._outputs = newOutputs;
                }
                else {
                    this._outputs = null;
                }
                break;
            }
        }
    };
    ValueDownlink.prototype.unbindOutputs = function () {
        var oldOutputs = this._outputs;
        if (oldOutputs !== null) {
            this._outputs = null;
            for (var i = 0, n = oldOutputs.length; i < n; i += 1) {
                oldOutputs[i].unbindInput();
            }
        }
    };
    ValueDownlink.prototype.disconnectOutputs = function () {
        var outputs = this._outputs;
        if (outputs !== null) {
            this._outputs = null;
            for (var i = 0, n = outputs.length; i < n; i += 1) {
                var output = outputs[i];
                output.unbindInput();
                output.disconnectOutputs();
            }
        }
    };
    ValueDownlink.prototype.invalidateOutput = function () {
        this.invalidate();
    };
    ValueDownlink.prototype.invalidateInput = function () {
        this.invalidate();
    };
    ValueDownlink.prototype.invalidate = function () {
        if (this._version >= 0) {
            this.willInvalidate();
            this._version = -1;
            this.onInvalidate();
            var n = this._outputs !== null ? this._outputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                this._outputs[i].invalidateOutput();
            }
            this.didInvalidate();
        }
    };
    ValueDownlink.prototype.reconcileOutput = function (version) {
        this.reconcile(version);
    };
    ValueDownlink.prototype.reconcileInput = function (version) {
        this.reconcile(version);
    };
    ValueDownlink.prototype.reconcile = function (version) {
        if (this._version < 0) {
            this.willReconcile(version);
            this._version = version;
            if (this._input !== null) {
                this._input.reconcileInput(version);
            }
            this.onReconcile(version);
            var n = this._outputs !== null ? this._outputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                this._outputs[i].reconcileOutput(version);
            }
            this.didReconcile(version);
        }
    };
    ValueDownlink.prototype.willInvalidate = function () {
    };
    ValueDownlink.prototype.onInvalidate = function () {
    };
    ValueDownlink.prototype.didInvalidate = function () {
    };
    ValueDownlink.prototype.willReconcile = function (version) {
    };
    ValueDownlink.prototype.onReconcile = function (version) {
        if (this._input !== null) {
            var value = this._input.get();
            if (value !== void 0) {
                this.set(value);
            }
        }
    };
    ValueDownlink.prototype.didReconcile = function (version) {
    };
    ValueDownlink.prototype.memoize = function () {
        return this;
    };
    ValueDownlink.prototype.map = function (func) {
        var combinator = new MapValueCombinator(func);
        combinator.bindInput(this);
        return combinator;
    };
    ValueDownlink.prototype.watch = function (func) {
        var combinator = new WatchValueCombinator(func);
        combinator.bindInput(this);
        return this;
    };
    return ValueDownlink;
}(Downlink));
export { ValueDownlink };
//# sourceMappingURL=ValueDownlink.js.map