import { AnyUri, Uri } from "@swim/uri";
import { AnyValue, Value, Form } from "@swim/structure";
import { EventMessage, LinkRequest, LinkedResponse, SyncRequest, SyncedResponse, UnlinkRequest, UnlinkedResponse } from "@swim/warp";
import { Host } from "../host/Host";
import { DownlinkOwner } from "./DownlinkOwner";
import { DownlinkContext } from "./DownlinkContext";
import { DownlinkModel } from "./DownlinkModel";
export declare type DownlinkType = "event" | "list" | "map" | "value";
export declare type DownlinkOnEvent = (body: Value, downlink: Downlink) => void;
export declare type DownlinkOnCommand = (body: Value, downlink: Downlink) => void;
export declare type DownlinkWillLink = (downlink: Downlink) => void;
export declare type DownlinkDidLink = (downlink: Downlink) => void;
export declare type DownlinkWillSync = (downlink: Downlink) => void;
export declare type DownlinkDidSync = (downlink: Downlink) => void;
export declare type DownlinkWillUnlink = (downlink: Downlink) => void;
export declare type DownlinkDidUnlink = (downlink: Downlink) => void;
export declare type DownlinkDidConnect = (downlink: Downlink) => void;
export declare type DownlinkDidDisconnect = (downlink: Downlink) => void;
export declare type DownlinkDidClose = (downlink: Downlink) => void;
export declare type DownlinkDidFail = (error: unknown, downlink: Downlink) => void;
export interface DownlinkObserver {
    onEvent?: DownlinkOnEvent;
    onCommand?: DownlinkOnCommand;
    willLink?: DownlinkWillLink;
    didLink?: DownlinkDidLink;
    willSync?: DownlinkWillSync;
    didSync?: DownlinkDidSync;
    willUnlink?: DownlinkWillUnlink;
    didUnlink?: DownlinkDidUnlink;
    didConnect?: DownlinkDidConnect;
    didDisconnect?: DownlinkDidDisconnect;
    didClose?: DownlinkDidClose;
    didFail?: DownlinkDidFail;
}
export interface DownlinkInit extends DownlinkObserver {
    hostUri?: AnyUri;
    nodeUri?: AnyUri;
    laneUri?: AnyUri;
    prio?: number;
    rate?: number;
    body?: AnyValue;
    type?: DownlinkType;
}
export declare const enum DownlinkFlags {
    KeepLinked = 1,
    KeepSynced = 2,
    KeepLinkedSynced = 3
}
export declare abstract class Downlink {
    readonly _context: DownlinkContext;
    readonly _owner: DownlinkOwner | undefined;
    readonly _hostUri: Uri;
    readonly _nodeUri: Uri;
    readonly _laneUri: Uri;
    readonly _prio: number;
    readonly _rate: number;
    readonly _body: Value;
    readonly _flags: number;
    _model: DownlinkModel | null;
    _observers: ReadonlyArray<DownlinkObserver> | null;
    constructor(context: DownlinkContext, owner?: DownlinkOwner, init?: DownlinkInit, hostUri?: Uri, nodeUri?: Uri, laneUri?: Uri, prio?: number, rate?: number, body?: Value, flags?: number, observers?: ReadonlyArray<DownlinkObserver> | DownlinkObserver | null);
    protected abstract copy(context: DownlinkContext, owner: DownlinkOwner | undefined, hostUri: Uri, nodeUri: Uri, laneUri: Uri, prio: number, rate: number, body: Value, flags: number, observers: ReadonlyArray<DownlinkObserver> | null): this;
    hostUri(): Uri;
    hostUri(hostUri: AnyUri): this;
    nodeUri(): Uri;
    nodeUri(nodeUri: AnyUri): this;
    laneUri(): Uri;
    laneUri(laneUri: AnyUri): this;
    prio(): number;
    prio(prio: number): this;
    rate(): number;
    rate(rate: number): this;
    body(): Value;
    body(body: AnyValue): this;
    abstract type(): DownlinkType;
    keepLinked(): boolean;
    keepLinked(keepLinked: boolean): this;
    keepSynced(): boolean;
    keepSynced(keepSynced: boolean): this;
    observe(observer: DownlinkObserver): this;
    unobserve(observer: unknown): this;
    onEvent(onEvent: DownlinkOnEvent): this;
    onCommand(onCommand: DownlinkOnCommand): this;
    willLink(willLink: DownlinkWillLink): this;
    didLink(didLink: DownlinkDidLink): this;
    willSync(willSync: DownlinkWillSync): this;
    didSync(didSync: DownlinkDidSync): this;
    willUnlink(willUnlink: DownlinkWillUnlink): this;
    didUnlink(didUnlink: DownlinkDidUnlink): this;
    didConnect(didConnect: DownlinkDidConnect): this;
    didDisconnect(didDisconnect: DownlinkDidDisconnect): this;
    didClose(didClose: DownlinkDidClose): this;
    didFail(didFail: DownlinkDidFail): this;
    isConnected(): boolean;
    isAuthenticated(): boolean;
    isLinked(): boolean;
    isSynced(): boolean;
    session(): Value;
    onEventMessage(message: EventMessage): void;
    onCommandMessage(body: Value): void;
    onLinkRequest(request?: LinkRequest): void;
    onLinkedResponse(response?: LinkedResponse): void;
    onSyncRequest(request?: SyncRequest): void;
    onSyncedResponse(response?: SyncedResponse): void;
    onUnlinkRequest(request?: UnlinkRequest): void;
    onUnlinkedResponse(response?: UnlinkedResponse): void;
    hostDidConnect(): void;
    hostDidDisconnect(): void;
    hostDidFail(error: unknown): void;
    command(body: AnyValue): void;
    abstract open(): this;
    close(): void;
    openUp(host: Host): void;
    closeUp(): void;
    private static _initForm;
    static initForm(): Form<DownlinkInit | undefined>;
}
//# sourceMappingURL=Downlink.d.ts.map