import { Cursor } from "@swim/util";
import { STree } from "@swim/collections";
import { Value } from "@swim/structure";
import { Uri } from "@swim/uri";
import { EventMessage } from "@swim/warp";
import { Host } from "../host/Host";
import { DownlinkContext } from "./DownlinkContext";
import { DownlinkModel } from "./DownlinkModel";
import { DownlinkType } from "./Downlink";
import { ListDownlink } from "./ListDownlink";
export declare class ListDownlinkModel extends DownlinkModel {
    _views: ListDownlink<unknown>[];
    _state: STree<Value, Value>;
    constructor(context: DownlinkContext, hostUri: Uri, nodeUri: Uri, laneUri: Uri, prio?: number, rate?: number, body?: Value, state?: STree<Value, Value>);
    type(): DownlinkType;
    isEmpty(): boolean;
    get length(): number;
    get(index: number, key?: Value): Value;
    getEntry(index: number, key?: Value): [Value, Value] | undefined;
    set(index: number, newValue: Value, key?: Value): this;
    insert(index: number, newValue: Value, key?: Value): this;
    remove(index: number, key?: Value): this;
    push(...newValues: Value[]): number;
    pop(): Value;
    unshift(...newValues: Value[]): number;
    shift(): Value;
    move(fromIndex: number, toIndex: number, key?: Value): this;
    splice(start: number, deleteCount?: number, ...newValues: Value[]): Value[];
    clear(): void;
    forEach<T, S = unknown>(callback: (this: typeof thisArg, value: Value, index: number, downlink: ListDownlinkModel, key: Value) => T | void, thisArg?: S): T | undefined;
    values(): Cursor<Value>;
    keys(): Cursor<Value>;
    entries(): Cursor<[Value, Value]>;
    snapshot(): STree<Value, Value>;
    setState(state: STree<Value, Value>): void;
    onEventMessage(message: EventMessage, host: Host): void;
    protected onInsertEvent(index: number, newValue: Value, key: Value): void;
    protected onUpdateEvent(index: number, newValue: Value, key: Value): void;
    protected onMoveEvent(fromIndex: number, toIndex: number, key: Value): void;
    protected onRemoveEvent(index: number, key: Value): void;
    protected onDropEvent(lower: number): void;
    protected onTakeEvent(upper: number): void;
    protected onClearEvent(): void;
    protected listWillUpdate(index: number, newValue: Value): Value;
    protected listDidUpdate(index: number, newValue: Value, oldValue: Value): void;
    protected listWillMove(fromIndex: number, toIndex: number, value: Value): void;
    protected listDidMove(fromIndex: number, toIndex: number, value: Value): void;
    protected listWillRemove(index: number): void;
    protected listDidRemove(index: number, oldValue: Value): void;
    protected listWillDrop(lower: number): void;
    protected listDidDrop(lower: number): void;
    protected listWillTake(upper: number): void;
    protected listDidTake(upper: number): void;
    protected listWillClear(): void;
    protected listDidClear(): void;
}
//# sourceMappingURL=ListDownlinkModel.d.ts.map