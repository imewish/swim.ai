import { Cursor } from "@swim/util";
import { STree } from "@swim/collections";
import { Value, Form } from "@swim/structure";
import { Uri } from "@swim/uri";
import { DownlinkContext } from "./DownlinkContext";
import { DownlinkOwner } from "./DownlinkOwner";
import { DownlinkType, DownlinkObserver, DownlinkInit, Downlink } from "./Downlink";
import { ListDownlinkModel } from "./ListDownlinkModel";
export declare type ListDownlinkWillUpdate<V extends VU, VU = V> = (index: number, newValue: V, downlink: ListDownlink<V, VU>) => V | void;
export declare type ListDownlinkDidUpdate<V extends VU, VU = V> = (index: number, newValue: V, oldValue: V, downlink: ListDownlink<V, VU>) => void;
export declare type ListDownlinkWillMove<V extends VU, VU = V> = (fromIndex: number, toIndex: number, value: V, downlink: ListDownlink<V, VU>) => void;
export declare type ListDownlinkDidMove<V extends VU, VU = V> = (fromIndex: number, toIndex: number, value: V, downlink: ListDownlink<V, VU>) => void;
export declare type ListDownlinkWillRemove<V extends VU, VU = V> = (index: number, downlink: ListDownlink<V, VU>) => void;
export declare type ListDownlinkDidRemove<V extends VU, VU = V> = (index: number, oldValue: V, downlink: ListDownlink<V, VU>) => void;
export declare type ListDownlinkWillDrop<V extends VU, VU = V> = (lower: number, downlink: ListDownlink<V, VU>) => void;
export declare type ListDownlinkDidDrop<V extends VU, VU = V> = (lower: number, downlink: ListDownlink<V, VU>) => void;
export declare type ListDownlinkWillTake<V extends VU, VU = V> = (upper: number, downlink: ListDownlink<V, VU>) => void;
export declare type ListDownlinkDidTake<V extends VU, VU = V> = (upper: number, downlink: ListDownlink<V, VU>) => void;
export declare type ListDownlinkWillClear<V extends VU, VU = V> = (downlink: ListDownlink<V, VU>) => void;
export declare type ListDownlinkDidClear<V extends VU, VU = V> = (downlink: ListDownlink<V, VU>) => void;
export interface ListDownlinkObserver<V extends VU, VU = V> extends DownlinkObserver {
    willUpdate?: ListDownlinkWillUpdate<V, VU>;
    didUpdate?: ListDownlinkDidUpdate<V, VU>;
    willMove?: ListDownlinkWillMove<V, VU>;
    didMove?: ListDownlinkDidMove<V, VU>;
    willRemove?: ListDownlinkWillRemove<V, VU>;
    didRemove?: ListDownlinkDidRemove<V, VU>;
    willDrop?: ListDownlinkWillDrop<V, VU>;
    didDrop?: ListDownlinkDidDrop<V, VU>;
    willTake?: ListDownlinkWillTake<V, VU>;
    didTake?: ListDownlinkDidTake<V, VU>;
    willClear?: ListDownlinkWillClear<V, VU>;
    didClear?: ListDownlinkDidClear<V, VU>;
}
export interface ListDownlinkInit<V extends VU, VU = V> extends ListDownlinkObserver<V, VU>, DownlinkInit {
    valueForm?: Form<V, VU>;
}
export declare class ListDownlink<V extends VU, VU = V> extends Downlink {
    _observers: ReadonlyArray<ListDownlinkObserver<V, VU>> | null;
    _model: ListDownlinkModel | null;
    _valueForm: Form<V, VU>;
    _state0: STree<Value, Value> | undefined;
    constructor(context: DownlinkContext, owner?: DownlinkOwner, init?: ListDownlinkInit<V, VU>, hostUri?: Uri, nodeUri?: Uri, laneUri?: Uri, prio?: number, rate?: number, body?: Value, flags?: number, observers?: ReadonlyArray<ListDownlinkObserver<V, VU>> | ListDownlinkObserver<V, VU> | null, valueForm?: Form<V, VU>, state0?: STree<Value, Value>);
    protected copy(context: DownlinkContext, owner: DownlinkOwner | undefined, hostUri: Uri, nodeUri: Uri, laneUri: Uri, prio: number, rate: number, body: Value, flags: number, observers: ReadonlyArray<ListDownlinkObserver<V, VU>> | null, valueForm?: Form<V, VU>, state0?: STree<Value, Value>): this;
    type(): DownlinkType;
    valueForm(): Form<V, VU>;
    valueForm<V2 extends V2U, V2U = V2>(valueForm: Form<V2, V2U>): ListDownlink<V2, V2U>;
    isEmpty(): boolean;
    get length(): number;
    get(index: number, id?: Value): V;
    getEntry(index: number, id?: Value): [V, Value] | undefined;
    set(index: number, newObject: VU, id?: Value): this;
    insert(index: number, newObject: VU, id?: Value): this;
    remove(index: number, id?: Value): this;
    push(...newObjects: VU[]): number;
    pop(): V;
    unshift(...newObjects: VU[]): number;
    shift(): V;
    move(fromIndex: number, toIndex: number, id?: Value): this;
    splice(start: number, deleteCount?: number, ...newObjects: VU[]): V[];
    clear(): void;
    forEach<T, S = unknown>(callback: (this: S, value: V, index: number, downlink: ListDownlink<V, VU>, id: Value) => T | void, thisArg?: S): T | undefined;
    values(): Cursor<V>;
    keys(): Cursor<Value>;
    entries(): Cursor<[Value, V]>;
    snapshot(): STree<Value, Value>;
    setState(state: STree<Value, Value>): void;
    observe(observer: ListDownlinkObserver<V, VU>): this;
    willUpdate(willUpdate: ListDownlinkWillUpdate<V, VU>): this;
    didUpdate(didUpdate: ListDownlinkDidUpdate<V, VU>): this;
    willMove(willMove: ListDownlinkWillMove<V, VU>): this;
    didMove(didMove: ListDownlinkDidMove<V, VU>): this;
    willRemove(willRemove: ListDownlinkWillRemove<V, VU>): this;
    didRemove(didRemove: ListDownlinkDidRemove<V, VU>): this;
    willDrop(willDrop: ListDownlinkWillDrop<V, VU>): this;
    didDrop(didDrop: ListDownlinkDidDrop<V, VU>): this;
    willTake(willTake: ListDownlinkWillTake<V, VU>): this;
    didTake(didTake: ListDownlinkDidTake<V, VU>): this;
    willClear(willClear: ListDownlinkWillClear<V, VU>): this;
    didClear(didClear: ListDownlinkDidClear<V, VU>): this;
    listWillUpdate(index: number, newValue: Value): Value;
    listDidUpdate(index: number, newValue: Value, oldValue: Value): void;
    listWillMove(fromIndex: number, toIndex: number, value: Value): void;
    listDidMove(fromIndex: number, toIndex: number, value: Value): void;
    listWillRemove(index: number): void;
    listDidRemove(index: number, oldValue: Value): void;
    listWillDrop(lower: number): void;
    listDidDrop(lower: number): void;
    listWillTake(upper: number): void;
    listDidTake(upper: number): void;
    listWillClear(): void;
    listDidClear(): void;
    initialState(): STree<Value, Value> | null;
    initialState(state0: STree<Value, Value> | null): this;
    protected didAliasModel(): void;
    open(): this;
}
//# sourceMappingURL=ListDownlink.d.ts.map