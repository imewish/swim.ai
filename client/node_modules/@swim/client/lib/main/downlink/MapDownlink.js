import { __extends } from "tslib";
import { Cursor } from "@swim/util";
import { BTree } from "@swim/collections";
import { Value, Form, ValueCursor, ValueEntryCursor } from "@swim/structure";
import { MapInlet, MapOutlet, KeyOutlet } from "@swim/streamlet";
import { FilterFieldsCombinator } from "@swim/streamlet";
import { MapValueCombinator } from "@swim/streamlet";
import { MapFieldValuesCombinator } from "@swim/streamlet";
import { ReduceFieldsCombinator } from "@swim/streamlet";
import { WatchValueCombinator } from "@swim/streamlet";
import { WatchFieldsCombinator } from "@swim/streamlet";
import { Downlink } from "./Downlink";
import { MapDownlinkModel } from "./MapDownlinkModel";
var MapDownlink = (function (_super) {
    __extends(MapDownlink, _super);
    function MapDownlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, keyForm, valueForm, state0) {
        if (flags === void 0) { flags = 3; }
        var _this = _super.call(this, context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers) || this;
        if (init) {
            var observer = _this._observers[_this._observers.length - 1];
            observer.willUpdate = init.willUpdate || observer.willUpdate;
            observer.didUpdate = init.didUpdate || observer.didUpdate;
            observer.willRemove = init.willRemove || observer.willRemove;
            observer.didRemove = init.didRemove || observer.didRemove;
            observer.willDrop = init.willDrop || observer.willDrop;
            observer.didDrop = init.didDrop || observer.didDrop;
            observer.willTake = init.willTake || observer.willTake;
            observer.didTake = init.didTake || observer.didTake;
            observer.willClear = init.willClear || observer.willClear;
            observer.didClear = init.didClear || observer.didClear;
            keyForm = init.keyForm ? init.keyForm : keyForm;
            valueForm = init.valueForm ? init.valueForm : valueForm;
        }
        _this._keyForm = keyForm || Form.forValue();
        _this._valueForm = valueForm || Form.forValue();
        _this._state0 = state0;
        _this._input = null;
        _this._effects = new BTree();
        _this._outlets = new BTree();
        _this._outputs = null;
        _this._version = -1;
        return _this;
    }
    MapDownlink.prototype.copy = function (context, owner, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, keyForm, valueForm, state0) {
        if (arguments.length === 10) {
            state0 = this._state0;
            keyForm = this._keyForm;
            valueForm = this._valueForm;
        }
        return new MapDownlink(context, owner, void 0, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, keyForm, valueForm, state0);
    };
    MapDownlink.prototype.type = function () {
        return "map";
    };
    MapDownlink.prototype.keyForm = function (keyForm) {
        if (keyForm === void 0) {
            return this._keyForm;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers, keyForm, this._valueForm, this._state0);
        }
    };
    MapDownlink.prototype.valueForm = function (valueForm) {
        if (valueForm === void 0) {
            return this._valueForm;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers, this._keyForm, valueForm, this._state0);
        }
    };
    Object.defineProperty(MapDownlink.prototype, "size", {
        get: function () {
            return this._model.size;
        },
        enumerable: true,
        configurable: true
    });
    MapDownlink.prototype.isEmpty = function () {
        return this._model.isEmpty();
    };
    MapDownlink.prototype.has = function (key) {
        var keyObject = this._keyForm.mold(key);
        return this._model.has(keyObject);
    };
    MapDownlink.prototype.get = function (key) {
        if (key === void 0) {
            return this;
        }
        else {
            var keyObject = this._keyForm.mold(key);
            var value = this._model.get(keyObject);
            return value.coerce(this._valueForm);
        }
    };
    MapDownlink.prototype.getEntry = function (index) {
        var entry = this._model.getEntry(index);
        if (entry) {
            return [entry[0].coerce(this._keyForm), entry[1].coerce(this._valueForm)];
        }
        return void 0;
    };
    MapDownlink.prototype.firstKey = function () {
        var key = this._model._state.firstKey();
        if (key !== void 0) {
            var keyObject = this._keyForm.cast(key);
            if (keyObject !== void 0) {
                return keyObject;
            }
        }
        return this._keyForm.unit();
    };
    MapDownlink.prototype.firstValue = function () {
        var value = this._model._state.firstValue();
        if (value !== void 0) {
            var object = this._valueForm.cast(value);
            if (object !== void 0) {
                return object;
            }
        }
        return this._valueForm.unit();
    };
    MapDownlink.prototype.firstEntry = function () {
        var entry = this._model._state.firstEntry();
        if (entry !== void 0) {
            var keyObject = this._keyForm.cast(entry[0]);
            var object = this._valueForm.cast(entry[1]);
            return [keyObject, object];
        }
        return void 0;
    };
    MapDownlink.prototype.lastKey = function () {
        var key = this._model._state.lastKey();
        if (key !== void 0) {
            var keyObject = this._keyForm.cast(key);
            if (keyObject !== void 0) {
                return keyObject;
            }
        }
        return this._keyForm.unit();
    };
    MapDownlink.prototype.lastValue = function () {
        var value = this._model._state.lastValue();
        if (value !== void 0) {
            var object = this._valueForm.cast(value);
            if (object !== void 0) {
                return object;
            }
        }
        return this._valueForm.unit();
    };
    MapDownlink.prototype.lastEntry = function () {
        var entry = this._model._state.lastEntry();
        if (entry !== void 0) {
            var keyObject = this._keyForm.cast(entry[0]);
            var object = this._valueForm.cast(entry[1]);
            return [keyObject, object];
        }
        return void 0;
    };
    MapDownlink.prototype.nextKey = function (keyObject) {
        var key = this._keyForm.mold(keyObject);
        var nextKey = this._model._state.nextKey(key);
        if (nextKey !== void 0) {
            var nextKeyObject = this._keyForm.cast(nextKey);
            if (nextKeyObject !== void 0) {
                return nextKeyObject;
            }
        }
        return this._keyForm.unit();
    };
    MapDownlink.prototype.nextValue = function (keyObject) {
        var key = this._keyForm.mold(keyObject);
        var nextValue = this._model._state.nextValue(key);
        if (nextValue !== void 0) {
            var nextObject = this._valueForm.cast(nextValue);
            if (nextObject !== void 0) {
                return nextObject;
            }
        }
        return this._valueForm.unit();
    };
    MapDownlink.prototype.nextEntry = function (keyObject) {
        var key = this._keyForm.mold(keyObject);
        var entry = this._model._state.nextEntry(key);
        if (entry !== void 0) {
            var keyObject_1 = this._keyForm.cast(entry[0]);
            var object = this._valueForm.cast(entry[1]);
            return [keyObject_1, object];
        }
        return void 0;
    };
    MapDownlink.prototype.previousKey = function (keyObject) {
        var key = this._keyForm.mold(keyObject);
        var previousKey = this._model._state.previousKey(key);
        if (previousKey !== void 0) {
            var previousKeyObject = this._keyForm.cast(previousKey);
            if (previousKeyObject !== void 0) {
                return previousKeyObject;
            }
        }
        return this._keyForm.unit();
    };
    MapDownlink.prototype.previousValue = function (keyObject) {
        var key = this._keyForm.mold(keyObject);
        var previousValue = this._model._state.previousValue(key);
        if (previousValue !== void 0) {
            var previousObject = this._valueForm.cast(previousValue);
            if (previousObject !== void 0) {
                return previousObject;
            }
        }
        return this._valueForm.unit();
    };
    MapDownlink.prototype.previousEntry = function (keyObject) {
        var key = this._keyForm.mold(keyObject);
        var entry = this._model._state.previousEntry(key);
        if (entry !== void 0) {
            var keyObject_2 = this._keyForm.cast(entry[0]);
            var object = this._valueForm.cast(entry[1]);
            return [keyObject_2, object];
        }
        return void 0;
    };
    MapDownlink.prototype.set = function (key, newValue) {
        var keyObject = this._keyForm.mold(key);
        var newObject = this._valueForm.mold(newValue);
        this._model.set(keyObject, newObject);
        return this;
    };
    MapDownlink.prototype.delete = function (key) {
        var keyObject = this._keyForm.mold(key);
        return this._model.delete(keyObject);
    };
    MapDownlink.prototype.drop = function (lower) {
        this._model.drop(lower);
        return this;
    };
    MapDownlink.prototype.take = function (upper) {
        this._model.take(upper);
        return this;
    };
    MapDownlink.prototype.clear = function () {
        this._model.clear();
    };
    MapDownlink.prototype.forEach = function (callback, thisArg) {
        if (this._keyForm === Form.forValue() && this._valueForm === Form.forValue()) {
            return this._model._state.forEach(callback, thisArg);
        }
        else {
            return this._model._state.forEach(function (key, value) {
                var keyObject = key.coerce(this._keyForm);
                var object = value.coerce(this._valueForm);
                return callback.call(thisArg, keyObject, object, this);
            }, this);
        }
    };
    MapDownlink.prototype.keys = function () {
        var cursor = this._model.keys();
        if (this._keyForm === Form.forValue()) {
            return cursor;
        }
        else {
            return new ValueCursor(cursor, this._keyForm);
        }
    };
    MapDownlink.prototype.values = function () {
        var cursor = this._model.values();
        if (this._valueForm === Form.forValue()) {
            return cursor;
        }
        else {
            return new ValueCursor(cursor, this._valueForm);
        }
    };
    MapDownlink.prototype.entries = function () {
        var cursor = this._model.entries();
        if (this._keyForm === Form.forValue() && this._valueForm === Form.forValue()) {
            return cursor;
        }
        else {
            return new ValueEntryCursor(cursor, this._keyForm, this._valueForm);
        }
    };
    MapDownlink.prototype.snapshot = function () {
        return this._model.snapshot();
    };
    MapDownlink.prototype.setState = function (state) {
        this._model.setState(state);
    };
    MapDownlink.prototype.observe = function (observer) {
        return _super.prototype.observe.call(this, observer);
    };
    MapDownlink.prototype.willUpdate = function (willUpdate) {
        return this.observe({ willUpdate: willUpdate });
    };
    MapDownlink.prototype.didUpdate = function (didUpdate) {
        return this.observe({ didUpdate: didUpdate });
    };
    MapDownlink.prototype.willRemove = function (willRemove) {
        return this.observe({ willRemove: willRemove });
    };
    MapDownlink.prototype.didRemove = function (didRemove) {
        return this.observe({ didRemove: didRemove });
    };
    MapDownlink.prototype.willDrop = function (willDrop) {
        return this.observe({ willDrop: willDrop });
    };
    MapDownlink.prototype.didDrop = function (didDrop) {
        return this.observe({ didDrop: didDrop });
    };
    MapDownlink.prototype.willTake = function (willTake) {
        return this.observe({ willTake: willTake });
    };
    MapDownlink.prototype.didTake = function (didTake) {
        return this.observe({ didTake: didTake });
    };
    MapDownlink.prototype.willClear = function (willClear) {
        return this.observe({ willClear: willClear });
    };
    MapDownlink.prototype.didClear = function (didClear) {
        return this.observe({ didClear: didClear });
    };
    MapDownlink.prototype.mapWillUpdate = function (key, newValue) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        var keyObject;
        var newObject;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.willUpdate) {
                if (keyObject === void 0) {
                    keyObject = key.coerce(this._keyForm);
                }
                if (newObject === void 0) {
                    newObject = newValue.coerce(this._valueForm);
                }
                var newResult = observer.willUpdate(keyObject, newObject, this);
                if (newResult !== void 0) {
                    newObject = newResult;
                    newValue = this._valueForm.mold(newObject);
                }
            }
        }
        return newValue;
    };
    MapDownlink.prototype.mapDidUpdate = function (key, newValue, oldValue) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        var keyObject = key.coerce(this._keyForm);
        var newObject;
        var oldObject;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didUpdate) {
                if (newObject === void 0) {
                    newObject = newValue.coerce(this._valueForm);
                }
                if (oldObject === void 0) {
                    oldObject = oldValue.coerce(this._valueForm);
                }
                observer.didUpdate(keyObject, newObject, oldObject, this);
            }
        }
        this.invalidateInputKey(keyObject, 0);
        this.reconcileInput(0);
    };
    MapDownlink.prototype.mapWillRemove = function (key) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        var keyObject;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.willRemove) {
                if (keyObject === void 0) {
                    keyObject = key.coerce(this._keyForm);
                }
                observer.willRemove(keyObject, this);
            }
        }
    };
    MapDownlink.prototype.mapDidRemove = function (key, oldValue) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        var keyObject = key.coerce(this._keyForm);
        var oldObject;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didRemove) {
                if (oldObject === void 0) {
                    oldObject = oldValue.coerce(this._valueForm);
                }
                observer.didRemove(keyObject, oldObject, this);
            }
        }
        this.invalidateInputKey(keyObject, 1);
        this.reconcileInput(0);
    };
    MapDownlink.prototype.mapWillDrop = function (lower) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.willDrop) {
                observer.willDrop(lower, this);
            }
        }
    };
    MapDownlink.prototype.mapDidDrop = function (lower) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didDrop) {
                observer.didDrop(lower, this);
            }
        }
    };
    MapDownlink.prototype.mapWillTake = function (upper) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.willTake) {
                observer.willTake(upper, this);
            }
        }
    };
    MapDownlink.prototype.mapDidTake = function (upper) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didTake) {
                observer.didTake(upper, this);
            }
        }
    };
    MapDownlink.prototype.mapWillClear = function () {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.willClear) {
                observer.willClear(this);
            }
        }
    };
    MapDownlink.prototype.mapDidClear = function () {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didClear) {
                observer.didClear(this);
            }
        }
    };
    MapDownlink.prototype.initialState = function (state0) {
        if (state0 === void 0) {
            return this._state0 || null;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers, this._keyForm, this._valueForm, state0 || void 0);
        }
    };
    MapDownlink.prototype.didAliasModel = function () {
        this.onLinkedResponse();
        this._model._state.forEach(function (key, value) {
            this.mapDidUpdate(key, value, Value.absent());
        }, this);
        this.onSyncedResponse();
    };
    MapDownlink.prototype.open = function () {
        var laneUri = this._laneUri;
        if (laneUri.isEmpty()) {
            throw new Error("no lane");
        }
        var nodeUri = this._nodeUri;
        if (nodeUri.isEmpty()) {
            throw new Error("no node");
        }
        var hostUri = this._hostUri;
        if (hostUri.isEmpty()) {
            hostUri = nodeUri.endpoint();
            nodeUri = hostUri.unresolve(nodeUri);
        }
        var model = this._context.getDownlink(hostUri, nodeUri, laneUri);
        if (model) {
            if (!(model instanceof MapDownlinkModel)) {
                throw new Error("downlink type mismatch");
            }
            model.addDownlink(this);
            this._model = model;
            setTimeout(this.didAliasModel.bind(this));
        }
        else {
            model = new MapDownlinkModel(this._context, hostUri, nodeUri, laneUri, this._prio, this._rate, this._body, this._state0);
            model.addDownlink(this);
            this._context.openDownlink(model);
            this._model = model;
        }
        if (this._owner) {
            this._owner.addDownlink(this);
        }
        return this;
    };
    MapDownlink.prototype.keyIterator = function () {
        return this.keys();
    };
    MapDownlink.prototype.input = function () {
        return this._input;
    };
    MapDownlink.prototype.bindInput = function (input) {
        if (!MapOutlet.is(input)) {
            throw new TypeError("" + input);
        }
        if (this._input !== null) {
            this._input.unbindOutput(this);
        }
        this._input = input;
        if (this._input !== null) {
            this._input.bindOutput(this);
        }
    };
    MapDownlink.prototype.unbindInput = function () {
        if (this._input !== null) {
            this._input.unbindOutput(this);
        }
        this._input = null;
    };
    MapDownlink.prototype.disconnectInputs = function () {
        var input = this._input;
        if (input !== null) {
            input.unbindOutput(this);
            this._input = null;
            input.disconnectInputs();
        }
    };
    MapDownlink.prototype.outlet = function (key) {
        var outlet = this._outlets.get(key);
        if (outlet === void 0) {
            outlet = new KeyOutlet(this, key);
            this._outlets = this._outlets.updated(key, outlet);
        }
        return outlet;
    };
    MapDownlink.prototype.outputIterator = function () {
        return this._outputs !== null ? Cursor.array(this._outputs) : Cursor.empty();
    };
    MapDownlink.prototype.bindOutput = function (output) {
        var oldOutputs = this._outputs;
        var n = oldOutputs !== null ? oldOutputs.length : 0;
        var newOutputs = new Array(n + 1);
        for (var i = 0; i < n; i += 1) {
            newOutputs[i] = oldOutputs[i];
        }
        newOutputs[n] = output;
        this._outputs = newOutputs;
    };
    MapDownlink.prototype.unbindOutput = function (output) {
        var oldOutputs = this._outputs;
        var n = oldOutputs !== null ? oldOutputs.length : 0;
        for (var i = 0; i < n; i += 1) {
            if (oldOutputs[i] === output) {
                if (n > 1) {
                    var newOutputs = new Array(n - 1);
                    for (var j = 0; j < i; j += 1) {
                        newOutputs[j] = oldOutputs[j];
                    }
                    for (var j = i; j < n - 1; j += 1) {
                        newOutputs[j] = oldOutputs[j + 1];
                    }
                    this._outputs = newOutputs;
                }
                else {
                    this._outputs = null;
                }
                break;
            }
        }
    };
    MapDownlink.prototype.unbindOutputs = function () {
        var oldOutputs = this._outputs;
        if (oldOutputs !== null) {
            this._outputs = null;
            for (var i = 0, n = oldOutputs.length; i < n; i += 1) {
                oldOutputs[i].unbindInput();
            }
        }
    };
    MapDownlink.prototype.disconnectOutputs = function () {
        var outlets = this._outlets;
        if (outlets.isEmpty()) {
            this._outlets = new BTree();
            outlets.forEach(function (key, keyOutlet) {
                keyOutlet.disconnectOutputs();
            }, this);
        }
        var outputs = this._outputs;
        if (outputs !== null) {
            this._outputs = null;
            for (var i = 0, n = outputs.length; i < n; i += 1) {
                var output = outputs[i];
                output.unbindInput();
                output.disconnectOutputs();
            }
        }
    };
    MapDownlink.prototype.invalidateOutputKey = function (key, effect) {
        this.invalidateKey(key, effect);
    };
    MapDownlink.prototype.invalidateInputKey = function (key, effect) {
        this.invalidateKey(key, effect);
    };
    MapDownlink.prototype.invalidateKey = function (key, effect) {
        var oldEffects = this._effects;
        if (oldEffects.get(key) !== effect) {
            this.willInvalidateKey(key, effect);
            this._effects = oldEffects.updated(key, effect);
            this._version = -1;
            this.onInvalidateKey(key, effect);
            var n = this._outputs !== null ? this._outputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                var output = this._outputs[i];
                if (MapInlet.is(output)) {
                    output.invalidateOutputKey(key, effect);
                }
                else {
                    output.invalidateOutput();
                }
            }
            var outlet = this._outlets.get(key);
            if (outlet !== void 0) {
                outlet.invalidateInput();
            }
            this.didInvalidateKey(key, effect);
        }
    };
    MapDownlink.prototype.invalidateOutput = function () {
        this.invalidate();
    };
    MapDownlink.prototype.invalidateInput = function () {
        this.invalidate();
    };
    MapDownlink.prototype.invalidate = function () {
        if (this._version >= 0) {
            this.willInvalidate();
            this._version = -1;
            this.onInvalidate();
            var n = this._outputs !== null ? this._outputs.length : 0;
            for (var i = 0; i < n; i += 1) {
                this._outputs[i].invalidateOutput();
            }
            this._outlets.forEach(function (key, outlet) {
                outlet.invalidateInput();
            }, this);
            this.didInvalidate();
        }
    };
    MapDownlink.prototype.reconcileOutputKey = function (key, version) {
        this.reconcileKey(key, version);
    };
    MapDownlink.prototype.reconcileInputKey = function (key, version) {
        this.reconcileKey(key, version);
    };
    MapDownlink.prototype.reconcileKey = function (key, version) {
        if (this._version < 0) {
            var oldEffects = this._effects;
            var effect = oldEffects.get(key);
            if (effect !== void 0) {
                this.willReconcileKey(key, effect, version);
                this._effects = oldEffects.removed(key);
                if (this._input !== null) {
                    this._input.reconcileInputKey(key, version);
                }
                this.onReconcileKey(key, effect, version);
                for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                    var output = this._outputs[i];
                    if (MapInlet.is(output)) {
                        output.reconcileOutputKey(key, version);
                    }
                }
                var outlet = this._outlets.get(key);
                if (outlet !== void 0) {
                    outlet.reconcileInput(version);
                }
                this.didReconcileKey(key, effect, version);
            }
        }
    };
    MapDownlink.prototype.reconcileOutput = function (version) {
        this.reconcile(version);
    };
    MapDownlink.prototype.reconcileInput = function (version) {
        this.reconcile(version);
    };
    MapDownlink.prototype.reconcile = function (version) {
        if (this._version < 0) {
            this.willReconcile(version);
            this._effects.forEach(function (key) {
                this.reconcileKey(key, version);
            }, this);
            this._version = version;
            this.onReconcile(version);
            for (var i = 0, n = this._outputs !== null ? this._outputs.length : 0; i < n; i += 1) {
                this._outputs[i].reconcileOutput(version);
            }
            this.didReconcile(version);
        }
    };
    MapDownlink.prototype.willInvalidateKey = function (key, effect) {
    };
    MapDownlink.prototype.onInvalidateKey = function (key, effect) {
    };
    MapDownlink.prototype.didInvalidateKey = function (key, effect) {
    };
    MapDownlink.prototype.willInvalidate = function () {
    };
    MapDownlink.prototype.onInvalidate = function () {
    };
    MapDownlink.prototype.didInvalidate = function () {
    };
    MapDownlink.prototype.willReconcileKey = function (key, effect, version) {
    };
    MapDownlink.prototype.onReconcileKey = function (key, effect, version) {
        if (effect === 0) {
            if (this._input !== null) {
                var value = this._input.get(key);
                if (value !== void 0) {
                    this.set(key, value);
                }
                else {
                    this.delete(key);
                }
            }
        }
        else if (effect === 1) {
            this.delete(key);
        }
    };
    MapDownlink.prototype.didReconcileKey = function (key, effect, version) {
    };
    MapDownlink.prototype.willReconcile = function (version) {
    };
    MapDownlink.prototype.onReconcile = function (version) {
    };
    MapDownlink.prototype.didReconcile = function (version) {
    };
    MapDownlink.prototype.memoize = function () {
        return this;
    };
    MapDownlink.prototype.filter = function (func) {
        var combinator = new FilterFieldsCombinator(func);
        combinator.bindInput(this);
        return combinator;
    };
    MapDownlink.prototype.map = function (func) {
        if (func.length === 1) {
            var combinator = new MapValueCombinator(func);
            combinator.bindInput(this);
            return combinator;
        }
        else {
            var combinator = new MapFieldValuesCombinator(func);
            combinator.bindInput(this);
            return combinator;
        }
    };
    MapDownlink.prototype.reduce = function (identity, accumulator, combiner) {
        var combinator = new ReduceFieldsCombinator(identity, accumulator, combiner);
        combinator.bindInput(this);
        return combinator;
    };
    MapDownlink.prototype.watch = function (func) {
        if (func.length === 1) {
            var combinator = new WatchValueCombinator(func);
            combinator.bindInput(this);
            return this;
        }
        else {
            var combinator = new WatchFieldsCombinator(func);
            combinator.bindInput(this);
            return this;
        }
    };
    return MapDownlink;
}(Downlink));
export { MapDownlink };
//# sourceMappingURL=MapDownlink.js.map