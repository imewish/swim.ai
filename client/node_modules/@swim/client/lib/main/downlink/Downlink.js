import { __extends } from "tslib";
import { Uri } from "@swim/uri";
import { Item, Attr, Value, Record, Form } from "@swim/structure";
export var DownlinkFlags;
(function (DownlinkFlags) {
    DownlinkFlags[DownlinkFlags["KeepLinked"] = 1] = "KeepLinked";
    DownlinkFlags[DownlinkFlags["KeepSynced"] = 2] = "KeepSynced";
    DownlinkFlags[DownlinkFlags["KeepLinkedSynced"] = 3] = "KeepLinkedSynced";
})(DownlinkFlags || (DownlinkFlags = {}));
var Downlink = (function () {
    function Downlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers) {
        if (hostUri === void 0) { hostUri = Uri.empty(); }
        if (nodeUri === void 0) { nodeUri = Uri.empty(); }
        if (laneUri === void 0) { laneUri = Uri.empty(); }
        if (prio === void 0) { prio = 0; }
        if (rate === void 0) { rate = 0; }
        if (body === void 0) { body = Value.absent(); }
        if (flags === void 0) { flags = 0; }
        if (observers === void 0) { observers = null; }
        var observer;
        if (!observers) {
            observers = [];
        }
        else if (!Array.isArray(observers)) {
            observer = observers;
            observers = [observer];
        }
        if (init) {
            observer = observer || {};
            observers = observers ? observers.concat(observer) : [observer];
            hostUri = init.hostUri !== void 0 ? Uri.fromAny(init.hostUri) : hostUri;
            nodeUri = init.nodeUri !== void 0 ? Uri.fromAny(init.nodeUri) : nodeUri;
            laneUri = init.laneUri !== void 0 ? Uri.fromAny(init.laneUri) : laneUri;
            prio = init.prio !== void 0 ? init.prio : prio;
            rate = init.rate !== void 0 ? init.rate : rate;
            body = init.body !== void 0 ? Value.fromAny(init.body) : body;
            observer.onEvent = init.onEvent || observer.onEvent;
            observer.onCommand = init.onCommand || observer.onCommand;
            observer.willLink = init.willLink || observer.willLink;
            observer.didLink = init.didLink || observer.didLink;
            observer.willSync = init.willSync || observer.willSync;
            observer.didSync = init.didSync || observer.didSync;
            observer.willUnlink = init.willUnlink || observer.willUnlink;
            observer.didUnlink = init.didUnlink || observer.didUnlink;
            observer.didConnect = init.didConnect || observer.didConnect;
            observer.didDisconnect = init.didDisconnect || observer.didDisconnect;
            observer.didClose = init.didClose || observer.didClose;
            observer.didFail = init.didFail || observer.didFail;
        }
        this._context = context;
        this._owner = owner;
        this._hostUri = hostUri;
        this._nodeUri = nodeUri;
        this._laneUri = laneUri;
        this._prio = prio;
        this._rate = rate;
        this._body = body;
        this._flags = flags;
        this._model = null;
        this._observers = observers;
    }
    Downlink.prototype.hostUri = function (hostUri) {
        if (hostUri === void 0) {
            return this._hostUri;
        }
        else {
            hostUri = Uri.fromAny(hostUri);
            return this.copy(this._context, this._owner, hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers);
        }
    };
    Downlink.prototype.nodeUri = function (nodeUri) {
        if (nodeUri === void 0) {
            return this._nodeUri;
        }
        else {
            nodeUri = Uri.fromAny(nodeUri);
            return this.copy(this._context, this._owner, this._hostUri, nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers);
        }
    };
    Downlink.prototype.laneUri = function (laneUri) {
        if (laneUri === void 0) {
            return this._laneUri;
        }
        else {
            laneUri = Uri.fromAny(laneUri);
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, laneUri, this._prio, this._rate, this._body, this._flags, this._observers);
        }
    };
    Downlink.prototype.prio = function (prio) {
        if (prio === void 0) {
            return this._prio;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, prio, this._rate, this._body, this._flags, this._observers);
        }
    };
    Downlink.prototype.rate = function (rate) {
        if (rate === void 0) {
            return this._rate;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, rate, this._body, this._flags, this._observers);
        }
    };
    Downlink.prototype.body = function (body) {
        if (body === void 0) {
            return this._body;
        }
        else {
            body = Value.fromAny(body);
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, body, this._flags, this._observers);
        }
    };
    Downlink.prototype.keepLinked = function (keepLinked) {
        if (keepLinked === void 0) {
            return (this._flags & 1) !== 0;
        }
        else {
            var flags = keepLinked ? this._flags | 1 : this._flags & ~1;
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, flags, this._observers);
        }
    };
    Downlink.prototype.keepSynced = function (keepSynced) {
        if (keepSynced === void 0) {
            return (this._flags & 2) !== 0;
        }
        else {
            var flags = keepSynced ? this._flags | 2 : this._flags & ~2;
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, flags, this._observers);
        }
    };
    Downlink.prototype.observe = function (observer) {
        var oldObservers = this._observers;
        var n = oldObservers ? oldObservers.length : 0;
        var newObservers = new Array(n + 1);
        for (var i = 0; i < n; i += 1) {
            newObservers[i] = oldObservers[i];
        }
        newObservers[n] = observer;
        this._observers = newObservers;
        return this;
    };
    Downlink.prototype.unobserve = function (observer) {
        var oldObservers = this._observers;
        var n = oldObservers ? oldObservers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var oldObserver = oldObservers[i];
            var found = oldObserver === observer;
            if (!found) {
                for (var key in oldObserver) {
                    if (oldObserver[key] === observer) {
                        found = true;
                        break;
                    }
                }
            }
            if (found) {
                if (n > 1) {
                    var newObservers = new Array(n - 1);
                    for (var j = 0; j < i; j += 1) {
                        newObservers[j] = oldObservers[j];
                    }
                    for (var j = i + 1; j < n; j += 1) {
                        newObservers[j - 1] = oldObservers[j];
                    }
                    this._observers = newObservers;
                }
                else {
                    this._observers = null;
                }
                break;
            }
        }
        return this;
    };
    Downlink.prototype.onEvent = function (onEvent) {
        return this.observe({ onEvent: onEvent });
    };
    Downlink.prototype.onCommand = function (onCommand) {
        return this.observe({ onCommand: onCommand });
    };
    Downlink.prototype.willLink = function (willLink) {
        return this.observe({ willLink: willLink });
    };
    Downlink.prototype.didLink = function (didLink) {
        return this.observe({ didLink: didLink });
    };
    Downlink.prototype.willSync = function (willSync) {
        return this.observe({ willSync: willSync });
    };
    Downlink.prototype.didSync = function (didSync) {
        return this.observe({ didSync: didSync });
    };
    Downlink.prototype.willUnlink = function (willUnlink) {
        return this.observe({ willUnlink: willUnlink });
    };
    Downlink.prototype.didUnlink = function (didUnlink) {
        return this.observe({ didUnlink: didUnlink });
    };
    Downlink.prototype.didConnect = function (didConnect) {
        return this.observe({ didConnect: didConnect });
    };
    Downlink.prototype.didDisconnect = function (didDisconnect) {
        return this.observe({ didDisconnect: didDisconnect });
    };
    Downlink.prototype.didClose = function (didClose) {
        return this.observe({ didClose: didClose });
    };
    Downlink.prototype.didFail = function (didFail) {
        return this.observe({ didFail: didFail });
    };
    Downlink.prototype.isConnected = function () {
        return this._model ? this._model.isConnected() : false;
    };
    Downlink.prototype.isAuthenticated = function () {
        return this._model ? this._model.isAuthenticated() : false;
    };
    Downlink.prototype.isLinked = function () {
        return this._model ? this._model.isLinked() : false;
    };
    Downlink.prototype.isSynced = function () {
        return this._model ? this._model.isSynced() : false;
    };
    Downlink.prototype.session = function () {
        return this._model ? this._model.session() : Value.absent();
    };
    Downlink.prototype.onEventMessage = function (message) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.onEvent) {
                observer.onEvent(message.body(), this);
            }
        }
    };
    Downlink.prototype.onCommandMessage = function (body) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.onCommand) {
                observer.onCommand(body, this);
            }
        }
    };
    Downlink.prototype.onLinkRequest = function (request) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.willLink) {
                observer.willLink(this);
            }
        }
    };
    Downlink.prototype.onLinkedResponse = function (response) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didLink) {
                observer.didLink(this);
            }
        }
    };
    Downlink.prototype.onSyncRequest = function (request) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.willSync) {
                observer.willSync(this);
            }
        }
    };
    Downlink.prototype.onSyncedResponse = function (response) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didSync) {
                observer.didSync(this);
            }
        }
    };
    Downlink.prototype.onUnlinkRequest = function (request) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.willUnlink) {
                observer.willUnlink(this);
            }
        }
    };
    Downlink.prototype.onUnlinkedResponse = function (response) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didUnlink) {
                observer.didUnlink(this);
            }
        }
    };
    Downlink.prototype.hostDidConnect = function () {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didConnect) {
                observer.didConnect(this);
            }
        }
    };
    Downlink.prototype.hostDidDisconnect = function () {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didDisconnect) {
                observer.didDisconnect(this);
            }
        }
    };
    Downlink.prototype.hostDidFail = function (error) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didFail) {
                observer.didFail(error, this);
            }
        }
    };
    Downlink.prototype.command = function (body) {
        this._model.command(body);
    };
    Downlink.prototype.close = function () {
        if (this._owner) {
            this._owner.removeDownlink(this);
        }
        if (this._model) {
            this._model.removeDownlink(this);
        }
    };
    Downlink.prototype.openUp = function (host) {
    };
    Downlink.prototype.closeUp = function () {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didClose) {
                observer.didClose(this);
            }
        }
    };
    Downlink.initForm = function () {
        if (!Downlink._initForm) {
            Downlink._initForm = new DownlinkInitForm();
        }
        return Downlink._initForm;
    };
    return Downlink;
}());
export { Downlink };
var DownlinkInitForm = (function (_super) {
    __extends(DownlinkInitForm, _super);
    function DownlinkInitForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DownlinkInitForm.prototype.tag = function (tag) {
        if (arguments.length === 0) {
            return "link";
        }
        else if (tag !== void 0) {
            return _super.prototype.tag.call(this, tag);
        }
        else {
            return this;
        }
    };
    DownlinkInitForm.prototype.mold = function (init) {
        if (init) {
            var header = Record.create();
            if (init.hostUri !== void 0) {
                header.slot("host", Uri.fromAny(init.hostUri).toString());
            }
            if (init.nodeUri !== void 0) {
                header.slot("node", Uri.fromAny(init.nodeUri).toString());
            }
            if (init.laneUri !== void 0) {
                header.slot("lane", Uri.fromAny(init.laneUri).toString());
            }
            if (init.prio !== void 0) {
                header.slot("prio", init.prio);
            }
            if (init.rate !== void 0) {
                header.slot("rate", init.rate);
            }
            if (init.body !== void 0) {
                header.slot("body", init.body);
            }
            if (init.type !== void 0) {
                header.slot("type", init.type);
            }
            return Record.of(Attr.of("link", header));
        }
        else {
            return Item.extant();
        }
    };
    DownlinkInitForm.prototype.cast = function (item) {
        var value = item.toValue();
        var header = value.get("link");
        if (header.isDefined()) {
            var init = {};
            var host = header.get("host");
            if (host.isDefined()) {
                init.hostUri = host.cast(Uri.form());
            }
            var node = header.get("node");
            if (node.isDefined()) {
                init.nodeUri = node.cast(Uri.form());
            }
            var lane = header.get("lane");
            if (lane.isDefined()) {
                init.laneUri = lane.cast(Uri.form());
            }
            var prio = header.get("prio");
            if (prio.isDefined()) {
                init.prio = prio.numberValue();
            }
            var rate = header.get("rate");
            if (rate.isDefined()) {
                init.rate = rate.numberValue();
            }
            var body = header.get("body");
            if (body.isDefined()) {
                init.body = body;
            }
            var type = header.get("type");
            if (type.isDefined()) {
                init.type = type.stringValue();
            }
            return init;
        }
        return void 0;
    };
    return DownlinkInitForm;
}(Form));
//# sourceMappingURL=Downlink.js.map