import { __extends } from "tslib";
import { BTree } from "@swim/collections";
import { Attr, Value, Record } from "@swim/structure";
import { DownlinkModel } from "./DownlinkModel";
var MapDownlinkModel = (function (_super) {
    __extends(MapDownlinkModel, _super);
    function MapDownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body, state) {
        if (state === void 0) { state = new BTree(); }
        var _this = _super.call(this, context, hostUri, nodeUri, laneUri, prio, rate, body) || this;
        _this._state = state;
        return _this;
    }
    MapDownlinkModel.prototype.type = function () {
        return "map";
    };
    Object.defineProperty(MapDownlinkModel.prototype, "size", {
        get: function () {
            return this._state.size;
        },
        enumerable: true,
        configurable: true
    });
    MapDownlinkModel.prototype.isEmpty = function () {
        return this._state.isEmpty();
    };
    MapDownlinkModel.prototype.has = function (key) {
        return this._state.has(key);
    };
    MapDownlinkModel.prototype.get = function (key) {
        return this._state.get(key) || Value.absent();
    };
    MapDownlinkModel.prototype.getEntry = function (index) {
        return this._state.getEntry(index);
    };
    MapDownlinkModel.prototype.set = function (key, newValue) {
        newValue = this.mapWillUpdate(key, newValue);
        var oldValue = this._state.get(key) || Value.absent();
        this._state.set(key, newValue);
        this.mapDidUpdate(key, newValue, oldValue);
        var header = Record.create(1).slot("key", key);
        this.command(Attr.of("update", header).concat(newValue));
        return this;
    };
    MapDownlinkModel.prototype.delete = function (key) {
        if (this._state.has(key)) {
            this.mapWillRemove(key);
            var oldValue = this._state.get(key) || Value.absent();
            this._state.delete(key);
            this.mapDidRemove(key, oldValue);
            var header = Record.create(1).slot("key", key);
            this.command(Record.create(1).attr("remove", header));
            return true;
        }
        else {
            return false;
        }
    };
    MapDownlinkModel.prototype.drop = function (lower) {
        this.mapWillDrop(lower);
        this._state.drop(lower);
        this.mapDidDrop(lower);
        this.command(Record.create(1).attr("drop", lower));
        return this;
    };
    MapDownlinkModel.prototype.take = function (upper) {
        this.mapWillTake(upper);
        this._state.take(upper);
        this.mapDidTake(upper);
        this.command(Record.create(1).attr("take", upper));
        return this;
    };
    MapDownlinkModel.prototype.clear = function () {
        this.mapWillClear();
        this._state.clear();
        this.mapDidClear();
        this.command(Record.create(1).attr("clear"));
    };
    MapDownlinkModel.prototype.forEach = function (callback, thisArg) {
        return this._state.forEach(function (key, value) {
            return callback.call(thisArg, key, value, this);
        }, this);
    };
    MapDownlinkModel.prototype.keys = function () {
        return this._state.keys();
    };
    MapDownlinkModel.prototype.values = function () {
        return this._state.values();
    };
    MapDownlinkModel.prototype.entries = function () {
        return this._state.entries();
    };
    MapDownlinkModel.prototype.snapshot = function () {
        return this._state.clone();
    };
    MapDownlinkModel.prototype.setState = function (state) {
        this._state = state;
    };
    MapDownlinkModel.prototype.onEventMessage = function (message, host) {
        _super.prototype.onEventMessage.call(this, message, host);
        var event = message.body();
        var tag = event.tag();
        if (tag === "update") {
            var header = event.head().toValue();
            this.onUpdateEvent(header.get("key"), event.body());
        }
        else if (tag === "remove") {
            var header = event.head().toValue();
            this.onRemoveEvent(header.get("key"));
        }
        else if (tag === "drop") {
            var header = event.head().toValue();
            this.onDropEvent(header.numberValue(0));
        }
        else if (tag === "take") {
            var header = event.head().toValue();
            this.onTakeEvent(header.numberValue(0));
        }
        else if (tag === "clear") {
            this.onClearEvent();
        }
    };
    MapDownlinkModel.prototype.onUpdateEvent = function (key, newValue) {
        newValue = this.mapWillUpdate(key, newValue);
        var oldValue = this._state.get(key) || Value.absent();
        this._state.set(key, newValue);
        this.mapDidUpdate(key, newValue, oldValue);
    };
    MapDownlinkModel.prototype.onRemoveEvent = function (key) {
        this.mapWillRemove(key);
        var oldValue = this._state.get(key) || Value.absent();
        this._state.delete(key);
        this.mapDidRemove(key, oldValue);
    };
    MapDownlinkModel.prototype.onDropEvent = function (lower) {
        this.mapWillDrop(lower);
        this._state.drop(lower);
        this.mapDidDrop(lower);
    };
    MapDownlinkModel.prototype.onTakeEvent = function (upper) {
        this.mapWillTake(upper);
        this._state.take(upper);
        this.mapDidTake(upper);
    };
    MapDownlinkModel.prototype.onClearEvent = function () {
        this.mapWillClear();
        this._state.clear();
        this.mapDidClear();
    };
    MapDownlinkModel.prototype.mapWillUpdate = function (key, newValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            newValue = this._views[i].mapWillUpdate(key, newValue);
        }
        return newValue;
    };
    MapDownlinkModel.prototype.mapDidUpdate = function (key, newValue, oldValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapDidUpdate(key, newValue, oldValue);
        }
    };
    MapDownlinkModel.prototype.mapWillRemove = function (key) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapWillRemove(key);
        }
    };
    MapDownlinkModel.prototype.mapDidRemove = function (key, oldValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapDidRemove(key, oldValue);
        }
    };
    MapDownlinkModel.prototype.mapWillDrop = function (lower) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapWillDrop(lower);
        }
    };
    MapDownlinkModel.prototype.mapDidDrop = function (lower) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapDidDrop(lower);
        }
    };
    MapDownlinkModel.prototype.mapWillTake = function (upper) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapWillTake(upper);
        }
    };
    MapDownlinkModel.prototype.mapDidTake = function (upper) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapDidTake(upper);
        }
    };
    MapDownlinkModel.prototype.mapWillClear = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapWillClear();
        }
    };
    MapDownlinkModel.prototype.mapDidClear = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapDidClear();
        }
    };
    return MapDownlinkModel;
}(DownlinkModel));
export { MapDownlinkModel };
//# sourceMappingURL=MapDownlinkModel.js.map