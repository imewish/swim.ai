import { __extends } from "tslib";
import { Cursor } from "@swim/util";
import { Item, Value, Record } from "@swim/structure";
import { DownlinkRecord } from "./DownlinkRecord";
var ValueDownlinkRecord = (function (_super) {
    __extends(ValueDownlinkRecord, _super);
    function ValueDownlinkRecord(downlink) {
        var _this = _super.call(this) || this;
        _this._downlink = downlink;
        _this._downlink.observe(_this);
        return _this;
    }
    Object.defineProperty(ValueDownlinkRecord.prototype, "downlink", {
        get: function () {
            return this._downlink;
        },
        enumerable: true,
        configurable: true
    });
    ValueDownlinkRecord.prototype.isEmpty = function () {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.isEmpty();
        }
        else {
            return !value.isDefined();
        }
    };
    ValueDownlinkRecord.prototype.isArray = function () {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.isArray();
        }
        else {
            return true;
        }
    };
    ValueDownlinkRecord.prototype.isObject = function () {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.isObject();
        }
        else {
            return !value.isDefined();
        }
    };
    Object.defineProperty(ValueDownlinkRecord.prototype, "length", {
        get: function () {
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.length;
            }
            else if (value.isDefined()) {
                return 1;
            }
            else {
                return 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    ValueDownlinkRecord.prototype.has = function (key) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.has(key);
        }
        else {
            return false;
        }
    };
    ValueDownlinkRecord.prototype.get = function (key) {
        if (key === void 0) {
            return this;
        }
        else {
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.get(key);
            }
            else {
                return Value.absent();
            }
        }
    };
    ValueDownlinkRecord.prototype.getAttr = function (key) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.getAttr(key);
        }
        else {
            return Value.absent();
        }
    };
    ValueDownlinkRecord.prototype.getSlot = function (key) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.getSlot(key);
        }
        else {
            return Value.absent();
        }
    };
    ValueDownlinkRecord.prototype.getField = function (key) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.getField(key);
        }
        else {
            return void 0;
        }
    };
    ValueDownlinkRecord.prototype.getItem = function (index) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.getItem(index);
        }
        else {
            return value;
        }
    };
    ValueDownlinkRecord.prototype.set = function (key, newValue) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            value.set(key, newValue);
        }
        else {
            throw new Error("unsupported");
        }
        return this;
    };
    ValueDownlinkRecord.prototype.setAttr = function (key, newValue) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            value.setAttr(key, newValue);
        }
        else {
            throw new Error("unsupported");
        }
        return this;
    };
    ValueDownlinkRecord.prototype.setSlot = function (key, newValue) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            value.setSlot(key, newValue);
        }
        else {
            throw new Error("unsupported");
        }
        return this;
    };
    ValueDownlinkRecord.prototype.setItem = function (index, newItem) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            value.setItem(index, newItem);
        }
        else {
            this._downlink.set(Item.fromAny(newItem).toValue());
        }
        return this;
    };
    ValueDownlinkRecord.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.push.apply(value, arguments);
        }
        else {
            throw new Error("unsupported");
        }
    };
    ValueDownlinkRecord.prototype.splice = function (start, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.splice.apply(value, arguments);
        }
        else {
            throw new Error("unsupported");
        }
    };
    ValueDownlinkRecord.prototype.delete = function (key) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.delete(key);
        }
        else {
            return Value.absent();
        }
    };
    ValueDownlinkRecord.prototype.clear = function () {
        var value = this._downlink.get();
        if (value instanceof Record) {
            value.clear();
        }
        else {
            throw new Error("unsupported");
        }
    };
    ValueDownlinkRecord.prototype.forEach = function (callback, thisArg) {
        var value = this._downlink.get();
        return value.forEach(callback, thisArg);
    };
    ValueDownlinkRecord.prototype.keyIterator = function () {
        var value = this._downlink.get();
        if (value instanceof Record) {
            throw new Error();
        }
        else {
            return Cursor.empty();
        }
    };
    ValueDownlinkRecord.prototype.didSet = function (newValue, oldValue) {
        this.invalidateInput();
        this.reconcileInput(0);
    };
    return ValueDownlinkRecord;
}(DownlinkRecord));
export { ValueDownlinkRecord };
//# sourceMappingURL=ValueDownlinkRecord.js.map