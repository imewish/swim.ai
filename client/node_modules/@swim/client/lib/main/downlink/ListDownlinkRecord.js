import { __extends } from "tslib";
import { Cursor } from "@swim/util";
import { Item, Value, Num } from "@swim/structure";
import { DownlinkRecord } from "./DownlinkRecord";
var ListDownlinkRecord = (function (_super) {
    __extends(ListDownlinkRecord, _super);
    function ListDownlinkRecord(downlink) {
        var _this = _super.call(this) || this;
        _this._downlink = downlink;
        return _this;
    }
    Object.defineProperty(ListDownlinkRecord.prototype, "downlink", {
        get: function () {
            return this._downlink;
        },
        enumerable: true,
        configurable: true
    });
    ListDownlinkRecord.prototype.isEmpty = function () {
        return this._downlink.isEmpty();
    };
    ListDownlinkRecord.prototype.isArray = function () {
        return true;
    };
    ListDownlinkRecord.prototype.isObject = function () {
        return this._downlink.isEmpty();
    };
    Object.defineProperty(ListDownlinkRecord.prototype, "length", {
        get: function () {
            return this._downlink.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListDownlinkRecord.prototype, "size", {
        get: function () {
            return this._downlink.length;
        },
        enumerable: true,
        configurable: true
    });
    ListDownlinkRecord.prototype.has = function (key) {
        return false;
    };
    ListDownlinkRecord.prototype.get = function (key) {
        if (key === void 0) {
            return this;
        }
        else {
            return Value.absent();
        }
    };
    ListDownlinkRecord.prototype.getAttr = function (key) {
        return Value.absent();
    };
    ListDownlinkRecord.prototype.getSlot = function (key) {
        return Value.absent();
    };
    ListDownlinkRecord.prototype.getItem = function (index) {
        if (index instanceof Num) {
            index = index.value;
        }
        var n = this._downlink.length;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            return this._downlink.get(index);
        }
        return Item.absent();
    };
    ListDownlinkRecord.prototype.set = function (key, newValue) {
        throw new Error("unsupported");
    };
    ListDownlinkRecord.prototype.setAttr = function (key, newValue) {
        throw new Error("unsupported");
    };
    ListDownlinkRecord.prototype.setSlot = function (key, newValue) {
        throw new Error("unsupported");
    };
    ListDownlinkRecord.prototype.setItem = function (index, newItem) {
        if (index instanceof Num) {
            index = index.value;
        }
        var n = this._downlink.length;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            this._downlink.set(index, Value.fromAny(newItem));
        }
        return this;
    };
    ListDownlinkRecord.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        return this._downlink.push.apply(this._downlink, arguments);
    };
    ListDownlinkRecord.prototype.splice = function (start, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        return this._downlink.splice.apply(this._downlink, arguments);
    };
    ListDownlinkRecord.prototype.delete = function (key) {
        return Item.absent();
    };
    ListDownlinkRecord.prototype.clear = function () {
        this._downlink.clear();
    };
    ListDownlinkRecord.prototype.forEach = function (callback, thisArg) {
        return this._downlink.forEach(function (value, index) {
            return callback.call(thisArg, value, index);
        });
    };
    ListDownlinkRecord.prototype.keyIterator = function () {
        return Cursor.empty();
    };
    return ListDownlinkRecord;
}(DownlinkRecord));
export { ListDownlinkRecord };
//# sourceMappingURL=ListDownlinkRecord.js.map