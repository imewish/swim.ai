import { __decorate, __extends } from "tslib";
import { Form } from "@swim/structure";
import { Out, Inout } from "@swim/streamlet";
import { AbstractRecordStreamlet } from "@swim/dataflow";
import { ValueDownlink } from "./ValueDownlink";
import { MapDownlinkRecord } from "./MapDownlinkRecord";
import { DownlinkTransmuter } from "./DownlinkTransmuter";
import { client } from "..";
var DownlinkStreamlet = (function (_super) {
    __extends(DownlinkStreamlet, _super);
    function DownlinkStreamlet(warp, scope) {
        var _this = _super.call(this, scope) || this;
        _this.hostUri = _this.inoutlet();
        _this.nodeUri = _this.inoutlet();
        _this.laneUri = _this.inoutlet();
        _this.prio = _this.inoutlet();
        _this.rate = _this.inoutlet();
        _this.bodyValue = _this.inoutlet();
        _this.type = _this.inoutlet();
        _this.warp = warp;
        return _this;
    }
    DownlinkStreamlet.prototype.getOutput = function (outlet) {
        outlet = this.outlet(outlet);
        if (outlet === this.state) {
            if (this.downlink instanceof ValueDownlink) {
                return this.downlink.get();
            }
            else if (this.downlinkRecord) {
                return this.downlinkRecord;
            }
        }
        return void 0;
    };
    DownlinkStreamlet.prototype.onReconcile = function (version) {
        var hostUri = this.castInput(this.hostUri, Form.forString());
        var nodeUri = this.castInput(this.nodeUri, Form.forString());
        var laneUri = this.castInput(this.laneUri, Form.forString());
        var prio = this.castInput(this.prio, Form.forNumber(), 0);
        var rate = this.castInput(this.rate, Form.forNumber(), 0);
        var body = this.getInput(this.bodyValue);
        var type = this.castInput(this.type, Form.forString(), void 0);
        if (hostUri !== this.inputHostUri || nodeUri !== this.inputNodeUri || laneUri !== this.inputLaneUri
            || prio !== this.inputPrio || rate !== this.inputRate
            || (body === void 0 ? this.inputBody !== void 0 : !body.equals(this.inputBody))
            || type !== this.inputType) {
            if (this.downlink) {
                this.downlink.close();
                this.downlink = void 0;
                this.downlinkRecord = void 0;
            }
            this.inputHostUri = hostUri;
            this.inputNodeUri = nodeUri;
            this.inputLaneUri = laneUri;
            this.inputPrio = prio;
            this.inputRate = rate;
            this.inputBody = body;
            this.inputType = type;
            var warp = this.warp || client;
            if (type === "map") {
                var downlink = warp.downlinkMap();
                if (hostUri !== void 0) {
                    downlink = downlink.hostUri(hostUri);
                }
                if (nodeUri !== void 0) {
                    downlink = downlink.nodeUri(nodeUri);
                }
                if (laneUri !== void 0) {
                    downlink = downlink.laneUri(laneUri);
                }
                if (prio !== 0) {
                    downlink = downlink.prio(prio);
                }
                if (rate !== 0) {
                    downlink = downlink.rate(rate);
                }
                if (body !== void 0) {
                    downlink = downlink.body(body);
                }
                downlink = downlink.open();
                this.state = downlink;
                this.downlink = downlink;
                this.downlinkRecord = new MapDownlinkRecord(downlink);
            }
            else if (type === "value") {
                var downlink = warp.downlinkValue();
                if (hostUri !== void 0) {
                    downlink = downlink.hostUri(hostUri);
                }
                if (nodeUri !== void 0) {
                    downlink = downlink.nodeUri(nodeUri);
                }
                if (laneUri !== void 0) {
                    downlink = downlink.laneUri(laneUri);
                }
                if (prio !== void 0) {
                    downlink = downlink.prio(prio);
                }
                if (rate !== void 0) {
                    downlink = downlink.rate(rate);
                }
                if (body !== void 0) {
                    downlink = downlink.body(body);
                }
                downlink = downlink.open();
                this.state = downlink;
                this.downlink = downlink;
            }
        }
    };
    DownlinkStreamlet.transmuter = function (warp) {
        if (warp === void 0) {
            if (!DownlinkStreamlet._transmuter) {
                DownlinkStreamlet._transmuter = new DownlinkTransmuter();
            }
            return DownlinkStreamlet._transmuter;
        }
        else {
            return new DownlinkTransmuter(warp);
        }
    };
    __decorate([
        Inout
    ], DownlinkStreamlet.prototype, "hostUri", void 0);
    __decorate([
        Inout
    ], DownlinkStreamlet.prototype, "nodeUri", void 0);
    __decorate([
        Inout
    ], DownlinkStreamlet.prototype, "laneUri", void 0);
    __decorate([
        Inout
    ], DownlinkStreamlet.prototype, "prio", void 0);
    __decorate([
        Inout
    ], DownlinkStreamlet.prototype, "rate", void 0);
    __decorate([
        Inout("body")
    ], DownlinkStreamlet.prototype, "bodyValue", void 0);
    __decorate([
        Inout
    ], DownlinkStreamlet.prototype, "type", void 0);
    __decorate([
        Out
    ], DownlinkStreamlet.prototype, "state", void 0);
    return DownlinkStreamlet;
}(AbstractRecordStreamlet));
export { DownlinkStreamlet };
//# sourceMappingURL=DownlinkStreamlet.js.map