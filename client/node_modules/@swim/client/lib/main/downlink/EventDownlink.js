import { __extends } from "tslib";
import { Downlink } from "./Downlink";
import { EventDownlinkModel } from "./EventDownlinkModel";
var EventDownlink = (function (_super) {
    __extends(EventDownlink, _super);
    function EventDownlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers) {
        if (flags === void 0) { flags = 1; }
        return _super.call(this, context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers) || this;
    }
    EventDownlink.prototype.copy = function (context, owner, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers) {
        return new EventDownlink(context, owner, void 0, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers);
    };
    EventDownlink.prototype.type = function () {
        return "event";
    };
    EventDownlink.prototype.observe = function (observer) {
        return _super.prototype.observe.call(this, observer);
    };
    EventDownlink.prototype.open = function () {
        var laneUri = this._laneUri;
        if (laneUri.isEmpty()) {
            throw new Error("no lane");
        }
        var nodeUri = this._nodeUri;
        if (nodeUri.isEmpty()) {
            throw new Error("no node");
        }
        var hostUri = this._hostUri;
        if (hostUri.isEmpty()) {
            hostUri = nodeUri.endpoint();
            nodeUri = hostUri.unresolve(nodeUri);
        }
        var model = this._context.getDownlink(hostUri, nodeUri, laneUri);
        if (model) {
            if (!(model instanceof EventDownlinkModel)) {
                throw new Error("downlink type mismatch");
            }
            model.addDownlink(this);
        }
        else {
            model = new EventDownlinkModel(this._context, hostUri, nodeUri, laneUri, this._prio, this._rate, this._body);
            model.addDownlink(this);
            this._context.openDownlink(model);
        }
        this._model = model;
        if (this._owner) {
            this._owner.addDownlink(this);
        }
        return this;
    };
    return EventDownlink;
}(Downlink));
export { EventDownlink };
//# sourceMappingURL=EventDownlink.js.map