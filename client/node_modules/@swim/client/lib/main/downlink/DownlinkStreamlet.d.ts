import { Map } from "@swim/util";
import { Value } from "@swim/structure";
import { Outlet, Inoutlet, StreamletScope } from "@swim/streamlet";
import { AbstractRecordStreamlet, Transmuter } from "@swim/dataflow";
import { DownlinkType, Downlink } from "./Downlink";
import { DownlinkRecord } from "./DownlinkRecord";
import { WarpRef } from "../WarpRef";
export declare class DownlinkStreamlet extends AbstractRecordStreamlet {
    warp: WarpRef | undefined;
    downlink: Downlink | undefined;
    downlinkRecord: DownlinkRecord | undefined;
    inputHostUri: string | undefined;
    inputNodeUri: string | undefined;
    inputLaneUri: string | undefined;
    inputPrio: number | undefined;
    inputRate: number | undefined;
    inputBody: Value | undefined;
    inputType: DownlinkType | undefined;
    constructor(warp?: WarpRef, scope?: StreamletScope<Value> | null);
    hostUri: Inoutlet<Value>;
    nodeUri: Inoutlet<Value>;
    laneUri: Inoutlet<Value>;
    prio: Inoutlet<Value>;
    rate: Inoutlet<Value>;
    bodyValue: Inoutlet<Value>;
    type: Inoutlet<Value>;
    state: Outlet<Value | Map<Value, Value>>;
    getOutput(outlet: Outlet<Value> | string): Value | undefined;
    protected onReconcile(version: number): void;
    private static _transmuter;
    static transmuter(warp?: WarpRef): Transmuter;
}
//# sourceMappingURL=DownlinkStreamlet.d.ts.map