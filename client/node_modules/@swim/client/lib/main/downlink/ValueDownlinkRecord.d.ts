import { Cursor } from "@swim/util";
import { AnyItem, Item, Field, AnyValue, Value, Record, AnyText, AnyNum } from "@swim/structure";
import { DownlinkRecord } from "./DownlinkRecord";
import { ValueDownlink } from "./ValueDownlink";
export declare class ValueDownlinkRecord extends DownlinkRecord {
    readonly _downlink: ValueDownlink<Value, AnyValue>;
    constructor(downlink: ValueDownlink<Value, AnyValue>);
    get downlink(): ValueDownlink<Value, AnyValue>;
    isEmpty(): boolean;
    isArray(): boolean;
    isObject(): boolean;
    get length(): number;
    has(key: AnyValue): boolean;
    get(): Record;
    get(key: AnyValue): Value;
    getAttr(key: AnyText): Value;
    getSlot(key: AnyValue): Value;
    getField(key: AnyValue): Field | undefined;
    getItem(index: AnyNum): Item;
    set(key: AnyValue, newValue: AnyValue): this;
    setAttr(key: AnyText, newValue: AnyValue): this;
    setSlot(key: AnyValue, newValue: AnyValue): this;
    setItem(index: number, newItem: AnyItem): this;
    push(...newItems: AnyItem[]): number;
    splice(start: number, deleteCount?: number, ...newItems: AnyItem[]): Item[];
    delete(key: AnyValue): Item;
    clear(): void;
    forEach<T, S = unknown>(callback: (this: S, item: Item, index: number) => T | void, thisArg?: S): T | undefined;
    keyIterator(): Cursor<Value>;
    didSet(newValue: Value, oldValue: Value): void;
}
//# sourceMappingURL=ValueDownlinkRecord.d.ts.map