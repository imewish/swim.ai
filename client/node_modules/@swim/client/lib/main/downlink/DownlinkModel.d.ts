import { Uri } from "@swim/uri";
import { AnyValue, Value } from "@swim/structure";
import { EventMessage, LinkRequest, LinkedResponse, SyncRequest, SyncedResponse, UnlinkRequest, UnlinkedResponse } from "@swim/warp";
import { HostDownlink } from "../host/HostDownlink";
import { Host } from "../host/Host";
import { DownlinkContext } from "./DownlinkContext";
import { DownlinkType, Downlink } from "./Downlink";
export declare abstract class DownlinkModel implements HostDownlink {
    readonly _context: DownlinkContext;
    readonly _hostUri: Uri;
    readonly _nodeUri: Uri;
    readonly _laneUri: Uri;
    readonly _prio: number;
    readonly _rate: number;
    readonly _body: Value;
    _views: Downlink[];
    _host: Host | null;
    _status: number;
    constructor(context: DownlinkContext, hostUri: Uri, nodeUri: Uri, laneUri: Uri, prio?: number, rate?: number, body?: Value);
    hostUri(): Uri;
    nodeUri(): Uri;
    laneUri(): Uri;
    prio(): number;
    rate(): number;
    body(): Value;
    abstract type(): DownlinkType;
    keepLinked(): boolean;
    keepSynced(): boolean;
    unlinkDelay(): number;
    isConnected(): boolean;
    isAuthenticated(): boolean;
    isLinked(): boolean;
    isSynced(): boolean;
    session(): Value;
    addDownlink(view: Downlink): void;
    removeDownlink(view: Downlink): void;
    onEventMessage(message: EventMessage, host: Host): void;
    onCommandMessage(body: Value): void;
    onLinkRequest(request: LinkRequest): void;
    onLinkedResponse(response: LinkedResponse, host: Host): void;
    onSyncRequest(request: SyncRequest): void;
    onSyncedResponse(response: SyncedResponse, host: Host): void;
    onUnlinkRequest(request: UnlinkRequest, host: Host): void;
    onUnlinkedResponse(response: UnlinkedResponse, host: Host): void;
    hostDidConnect(host: Host): void;
    hostDidDisconnect(host: Host): void;
    hostDidFail(error: unknown, host: Host): void;
    command(body: AnyValue): void;
    sync(): void;
    link(): void;
    unlink(): void;
    protected doUnlink(): void;
    close(): void;
    openUp(host: Host): void;
    closeUp(): void;
}
//# sourceMappingURL=DownlinkModel.d.ts.map