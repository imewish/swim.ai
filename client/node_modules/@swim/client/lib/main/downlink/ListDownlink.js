import { __extends, __spreadArrays } from "tslib";
import { Value, Form, ValueCursor, ValueEntryCursor } from "@swim/structure";
import { Downlink } from "./Downlink";
import { ListDownlinkModel } from "./ListDownlinkModel";
var ListDownlink = (function (_super) {
    __extends(ListDownlink, _super);
    function ListDownlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, valueForm, state0) {
        if (flags === void 0) { flags = 3; }
        var _this = _super.call(this, context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers) || this;
        if (init) {
            var observer = _this._observers[_this._observers.length - 1];
            observer.willUpdate = init.willUpdate || observer.willUpdate;
            observer.didUpdate = init.didUpdate || observer.didUpdate;
            observer.willMove = init.willMove || observer.willMove;
            observer.didMove = init.didMove || observer.didMove;
            observer.willRemove = init.willRemove || observer.willRemove;
            observer.didRemove = init.didRemove || observer.didRemove;
            observer.willDrop = init.willDrop || observer.willDrop;
            observer.didDrop = init.didDrop || observer.didDrop;
            observer.willTake = init.willTake || observer.willTake;
            observer.didTake = init.didTake || observer.didTake;
            observer.willClear = init.willClear || observer.willClear;
            observer.didClear = init.didClear || observer.didClear;
            valueForm = init.valueForm ? init.valueForm : valueForm;
        }
        _this._valueForm = valueForm || Form.forValue();
        _this._state0 = state0;
        return _this;
    }
    ListDownlink.prototype.copy = function (context, owner, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, valueForm, state0) {
        if (arguments.length === 10) {
            valueForm = this._valueForm;
            state0 = this._state0;
        }
        return new ListDownlink(context, owner, void 0, hostUri, nodeUri, laneUri, prio, rate, body, flags, observers, valueForm, state0);
    };
    ListDownlink.prototype.type = function () {
        return "list";
    };
    ListDownlink.prototype.valueForm = function (valueForm) {
        if (valueForm === void 0) {
            return this._valueForm;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers, valueForm, this._state0);
        }
    };
    ListDownlink.prototype.isEmpty = function () {
        return this._model.isEmpty();
    };
    Object.defineProperty(ListDownlink.prototype, "length", {
        get: function () {
            return this._model.length;
        },
        enumerable: true,
        configurable: true
    });
    ListDownlink.prototype.get = function (index, id) {
        var value = this._model.get(index, id);
        return value.coerce(this._valueForm);
    };
    ListDownlink.prototype.getEntry = function (index, id) {
        var entry = this._model.getEntry(index, id);
        if (entry) {
            return [entry[0].coerce(this._valueForm), entry[1]];
        }
        return void 0;
    };
    ListDownlink.prototype.set = function (index, newObject, id) {
        var newValue = this._valueForm.mold(newObject);
        this._model.set(index, newValue, id);
        return this;
    };
    ListDownlink.prototype.insert = function (index, newObject, id) {
        var newValue = this._valueForm.mold(newObject);
        this._model.insert(index, newValue, id);
        return this;
    };
    ListDownlink.prototype.remove = function (index, id) {
        this._model.remove(index, id);
        return this;
    };
    ListDownlink.prototype.push = function () {
        var newObjects = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newObjects[_i] = arguments[_i];
        }
        var newValues = new Array(newObjects.length);
        for (var i = 0; i < newObjects.length; i += 1) {
            newValues[i] = this._valueForm.mold(newObjects[i]);
        }
        return this._model.push.apply(this._model, newValues);
    };
    ListDownlink.prototype.pop = function () {
        var value = this._model.pop();
        return value.coerce(this._valueForm);
    };
    ListDownlink.prototype.unshift = function () {
        var newObjects = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newObjects[_i] = arguments[_i];
        }
        var newValues = new Array(newObjects.length);
        for (var i = 0; i < newObjects.length; i += 1) {
            newValues[i] = this._valueForm.mold(newObjects[i]);
        }
        return this._model.unshift.apply(this._model, newValues);
    };
    ListDownlink.prototype.shift = function () {
        var value = this._model.shift();
        return value.coerce(this._valueForm);
    };
    ListDownlink.prototype.move = function (fromIndex, toIndex, id) {
        this._model.move(fromIndex, toIndex, id);
        return this;
    };
    ListDownlink.prototype.splice = function (start, deleteCount) {
        var _a;
        var newObjects = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newObjects[_i - 2] = arguments[_i];
        }
        var newValues = new Array(newObjects.length);
        for (var i = 0; i < newObjects.length; i += 1) {
            newValues[i] = this._valueForm.mold(newObjects[i]);
        }
        var oldValues = (_a = this._model).splice.apply(_a, __spreadArrays([start, deleteCount], newValues));
        var oldObjects = new Array(oldValues.length);
        for (var i = 0; i < oldValues.length; i += 1) {
            oldObjects[i] = oldValues[i].coerce(this._valueForm);
        }
        return oldObjects;
    };
    ListDownlink.prototype.clear = function () {
        this._model.clear();
    };
    ListDownlink.prototype.forEach = function (callback, thisArg) {
        if (this._valueForm === Form.forValue()) {
            return this._model._state.forEach(callback, thisArg);
        }
        else {
            return this._model._state.forEach(function (value, index, tree, id) {
                var object = value.coerce(this._valueForm);
                return callback.call(thisArg, object, index, this, id);
            }, this);
        }
    };
    ListDownlink.prototype.values = function () {
        var cursor = this._model.values();
        if (this._valueForm === Form.forValue()) {
            return cursor;
        }
        else {
            return new ValueCursor(cursor, this._valueForm);
        }
    };
    ListDownlink.prototype.keys = function () {
        return this._model.keys();
    };
    ListDownlink.prototype.entries = function () {
        var cursor = this._model.entries();
        if (this._valueForm === Form.forValue()) {
            return cursor;
        }
        else {
            return new ValueEntryCursor(cursor, Form.forValue(), this._valueForm);
        }
    };
    ListDownlink.prototype.snapshot = function () {
        return this._model.snapshot();
    };
    ListDownlink.prototype.setState = function (state) {
        this._model.setState(state);
    };
    ListDownlink.prototype.observe = function (observer) {
        return _super.prototype.observe.call(this, observer);
    };
    ListDownlink.prototype.willUpdate = function (willUpdate) {
        return this.observe({ willUpdate: willUpdate });
    };
    ListDownlink.prototype.didUpdate = function (didUpdate) {
        return this.observe({ didUpdate: didUpdate });
    };
    ListDownlink.prototype.willMove = function (willMove) {
        return this.observe({ willMove: willMove });
    };
    ListDownlink.prototype.didMove = function (didMove) {
        return this.observe({ didMove: didMove });
    };
    ListDownlink.prototype.willRemove = function (willRemove) {
        return this.observe({ willRemove: willRemove });
    };
    ListDownlink.prototype.didRemove = function (didRemove) {
        return this.observe({ didRemove: didRemove });
    };
    ListDownlink.prototype.willDrop = function (willDrop) {
        return this.observe({ willDrop: willDrop });
    };
    ListDownlink.prototype.didDrop = function (didDrop) {
        return this.observe({ didDrop: didDrop });
    };
    ListDownlink.prototype.willTake = function (willTake) {
        return this.observe({ willTake: willTake });
    };
    ListDownlink.prototype.didTake = function (didTake) {
        return this.observe({ didTake: didTake });
    };
    ListDownlink.prototype.willClear = function (willClear) {
        return this.observe({ willClear: willClear });
    };
    ListDownlink.prototype.didClear = function (didClear) {
        return this.observe({ didClear: didClear });
    };
    ListDownlink.prototype.listWillUpdate = function (index, newValue) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        var newObject;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.willUpdate) {
                if (newObject === void 0) {
                    newObject = newValue.coerce(this._valueForm);
                }
                var newResult = observer.willUpdate(index, newObject, this);
                if (newResult !== void 0) {
                    newObject = newResult;
                    newValue = this._valueForm.mold(newObject);
                }
            }
        }
        return newValue;
    };
    ListDownlink.prototype.listDidUpdate = function (index, newValue, oldValue) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        var newObject;
        var oldObject;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didUpdate) {
                if (newObject === void 0) {
                    newObject = newValue.coerce(this._valueForm);
                }
                if (oldObject === void 0) {
                    oldObject = oldValue.coerce(this._valueForm);
                }
                observer.didUpdate(index, newObject, oldObject, this);
            }
        }
    };
    ListDownlink.prototype.listWillMove = function (fromIndex, toIndex, value) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        var object;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.willMove) {
                if (object === void 0) {
                    object = value.coerce(this._valueForm);
                }
                observer.willMove(fromIndex, toIndex, object, this);
            }
        }
    };
    ListDownlink.prototype.listDidMove = function (fromIndex, toIndex, value) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        var object;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didMove) {
                if (object === void 0) {
                    object = value.coerce(this._valueForm);
                }
                observer.didMove(fromIndex, toIndex, object, this);
            }
        }
    };
    ListDownlink.prototype.listWillRemove = function (index) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.willRemove) {
                observer.willRemove(index, this);
            }
        }
    };
    ListDownlink.prototype.listDidRemove = function (index, oldValue) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        var oldObject;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didRemove) {
                if (oldObject === void 0) {
                    oldObject = oldValue.coerce(this._valueForm);
                }
                observer.didRemove(index, oldObject, this);
            }
        }
    };
    ListDownlink.prototype.listWillDrop = function (lower) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.willDrop) {
                observer.willDrop(lower, this);
            }
        }
    };
    ListDownlink.prototype.listDidDrop = function (lower) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didDrop) {
                observer.didDrop(lower, this);
            }
        }
    };
    ListDownlink.prototype.listWillTake = function (upper) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.willTake) {
                observer.willTake(upper, this);
            }
        }
    };
    ListDownlink.prototype.listDidTake = function (upper) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didTake) {
                observer.didTake(upper, this);
            }
        }
    };
    ListDownlink.prototype.listWillClear = function () {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.willClear) {
                observer.willClear(this);
            }
        }
    };
    ListDownlink.prototype.listDidClear = function () {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didClear) {
                observer.didClear(this);
            }
        }
    };
    ListDownlink.prototype.initialState = function (state0) {
        if (state0 === void 0) {
            return this._state0 || null;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this._observers, this._valueForm, state0 || void 0);
        }
    };
    ListDownlink.prototype.didAliasModel = function () {
        this.onLinkedResponse();
        this._model._state.forEach(function (value, index) {
            this.listDidUpdate(index, value, Value.absent());
        }, this);
        this.onSyncedResponse();
    };
    ListDownlink.prototype.open = function () {
        var laneUri = this._laneUri;
        if (laneUri.isEmpty()) {
            throw new Error("no lane");
        }
        var nodeUri = this._nodeUri;
        if (nodeUri.isEmpty()) {
            throw new Error("no node");
        }
        var hostUri = this._hostUri;
        if (hostUri.isEmpty()) {
            hostUri = nodeUri.endpoint();
            nodeUri = hostUri.unresolve(nodeUri);
        }
        var model = this._context.getDownlink(hostUri, nodeUri, laneUri);
        if (model) {
            if (!(model instanceof ListDownlinkModel)) {
                throw new Error("downlink type mismatch");
            }
            model.addDownlink(this);
            this._model = model;
            setTimeout(this.didAliasModel.bind(this));
        }
        else {
            model = new ListDownlinkModel(this._context, hostUri, nodeUri, laneUri, this._prio, this._rate, this._body, this._state0);
            model.addDownlink(this);
            this._context.openDownlink(model);
            this._model = model;
        }
        if (this._owner) {
            this._owner.addDownlink(this);
        }
        return this;
    };
    return ListDownlink;
}(Downlink));
export { ListDownlink };
//# sourceMappingURL=ListDownlink.js.map