import { Value } from "@swim/structure";
import { LinkRequest, SyncRequest, } from "@swim/warp";
var LINKING = 1;
var LINKED = 2;
var SYNCING = 4;
var SYNCED = 8;
var UNLINKING = 16;
var DownlinkModel = (function () {
    function DownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body) {
        if (prio === void 0) { prio = 0; }
        if (rate === void 0) { rate = 0; }
        if (body === void 0) { body = Value.absent(); }
        this._context = context;
        this._hostUri = hostUri;
        this._nodeUri = nodeUri;
        this._laneUri = laneUri;
        this._prio = prio;
        this._rate = rate;
        this._body = body;
        this._views = [];
        this._host = null;
        this._status = 0;
    }
    DownlinkModel.prototype.hostUri = function () {
        return this._hostUri;
    };
    DownlinkModel.prototype.nodeUri = function () {
        return this._nodeUri;
    };
    DownlinkModel.prototype.laneUri = function () {
        return this._laneUri;
    };
    DownlinkModel.prototype.prio = function () {
        return this._prio;
    };
    DownlinkModel.prototype.rate = function () {
        return this._rate;
    };
    DownlinkModel.prototype.body = function () {
        return this._body;
    };
    DownlinkModel.prototype.keepLinked = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            if (this._views[i].keepLinked()) {
                return true;
            }
        }
        return false;
    };
    DownlinkModel.prototype.keepSynced = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            if (this._views[i].keepSynced()) {
                return true;
            }
        }
        return false;
    };
    DownlinkModel.prototype.unlinkDelay = function () {
        return this._host ? this._host.unlinkDelay() : 0;
    };
    DownlinkModel.prototype.isConnected = function () {
        return !!(this._host && this._host.isConnected());
    };
    DownlinkModel.prototype.isAuthenticated = function () {
        return !!(this._host && this._host.isAuthenticated());
    };
    DownlinkModel.prototype.isLinked = function () {
        return (this._status & LINKED) !== 0;
    };
    DownlinkModel.prototype.isSynced = function () {
        return (this._status & SYNCED) !== 0;
    };
    DownlinkModel.prototype.session = function () {
        return this._host ? this._host.session() : Value.absent();
    };
    DownlinkModel.prototype.addDownlink = function (view) {
        this._views.push(view);
    };
    DownlinkModel.prototype.removeDownlink = function (view) {
        for (var i = 0; i < this._views.length; i += 1) {
            if (this._views[i] === view) {
                this._views.splice(i, 1);
                view.closeUp();
            }
        }
        if (this._views.length === 0) {
            var unlinkDelay = this.unlinkDelay();
            if (unlinkDelay < 0) {
                this.unlink();
            }
            else {
                setTimeout(this.doUnlink.bind(this), unlinkDelay);
            }
        }
    };
    DownlinkModel.prototype.onEventMessage = function (message, host) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onEventMessage(message);
        }
    };
    DownlinkModel.prototype.onCommandMessage = function (body) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onCommandMessage(body);
        }
    };
    DownlinkModel.prototype.onLinkRequest = function (request) {
        this._status |= LINKING;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onLinkRequest(request);
        }
    };
    DownlinkModel.prototype.onLinkedResponse = function (response, host) {
        this._status = this._status & ~LINKING | LINKED;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onLinkedResponse(response);
        }
    };
    DownlinkModel.prototype.onSyncRequest = function (request) {
        this._status |= SYNCING;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onSyncRequest(request);
        }
    };
    DownlinkModel.prototype.onSyncedResponse = function (response, host) {
        this._status = this._status & ~SYNCING | SYNCED;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onSyncedResponse(response);
        }
    };
    DownlinkModel.prototype.onUnlinkRequest = function (request, host) {
        this._status = this._status & ~(LINKING | SYNCING) | UNLINKING;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onUnlinkRequest(request);
        }
    };
    DownlinkModel.prototype.onUnlinkedResponse = function (response, host) {
        this._status &= ~UNLINKING;
        if (this._views.length === 0 || this._status !== 0) {
            for (var i = 0; i < this._views.length; i += 1) {
                this._views[i].onUnlinkedResponse(response);
            }
            this.close();
        }
        else {
            if (this.keepSynced()) {
                this.sync();
            }
            else {
                this.link();
            }
        }
    };
    DownlinkModel.prototype.hostDidConnect = function (host) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].hostDidConnect();
        }
        if (this.keepSynced()) {
            this.sync();
        }
        else {
            this.link();
        }
    };
    DownlinkModel.prototype.hostDidDisconnect = function (host) {
        this._status = 0;
        var keepLinked = false;
        for (var i = 0; i < this._views.length; i += 1) {
            var view = this._views[i];
            view.hostDidDisconnect();
            keepLinked = keepLinked || view.keepLinked();
        }
        if (!keepLinked) {
            this.close();
        }
    };
    DownlinkModel.prototype.hostDidFail = function (error, host) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].hostDidFail(error);
        }
    };
    DownlinkModel.prototype.command = function (body) {
        body = Value.fromAny(body);
        this.onCommandMessage(body);
        this._host.command(this._nodeUri, this._laneUri, body);
    };
    DownlinkModel.prototype.sync = function () {
        var nodeUri = this._host.unresolve(this._nodeUri);
        var request = SyncRequest.of(nodeUri, this._laneUri, this._prio, this._rate, this._body);
        this.onSyncRequest(request);
        this._host.push(request);
    };
    DownlinkModel.prototype.link = function () {
        var nodeUri = this._host.unresolve(this._nodeUri);
        var request = LinkRequest.of(nodeUri, this._laneUri, this._prio, this._rate, this._body);
        this.onLinkRequest(request);
        this._host.push(request);
    };
    DownlinkModel.prototype.unlink = function () {
        this._status = UNLINKING;
        this._context.unlinkDownlink(this);
    };
    DownlinkModel.prototype.doUnlink = function () {
        if (this._views.length === 0) {
            this.unlink();
        }
    };
    DownlinkModel.prototype.close = function () {
        this._context.closeDownlink(this);
    };
    DownlinkModel.prototype.openUp = function (host) {
        this._host = host;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].openUp(host);
        }
    };
    DownlinkModel.prototype.closeUp = function () {
        var views = this._views;
        this._views = [];
        for (var i = 0; i < views.length; i += 1) {
            views[i].closeUp();
        }
    };
    return DownlinkModel;
}());
export { DownlinkModel };
//# sourceMappingURL=DownlinkModel.js.map