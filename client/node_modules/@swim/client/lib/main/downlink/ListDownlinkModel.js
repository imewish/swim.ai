import { __extends } from "tslib";
import { STree } from "@swim/collections";
import { Attr, Value, Record } from "@swim/structure";
import { DownlinkModel } from "./DownlinkModel";
var ListDownlinkModel = (function (_super) {
    __extends(ListDownlinkModel, _super);
    function ListDownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body, state) {
        if (state === void 0) { state = new STree(); }
        var _this = _super.call(this, context, hostUri, nodeUri, laneUri, prio, rate, body) || this;
        _this._state = state;
        return _this;
    }
    ListDownlinkModel.prototype.type = function () {
        return "list";
    };
    ListDownlinkModel.prototype.isEmpty = function () {
        return this._state.isEmpty();
    };
    Object.defineProperty(ListDownlinkModel.prototype, "length", {
        get: function () {
            return this._state.length;
        },
        enumerable: true,
        configurable: true
    });
    ListDownlinkModel.prototype.get = function (index, key) {
        return this._state.get(index, key) || Value.absent();
    };
    ListDownlinkModel.prototype.getEntry = function (index, key) {
        return this._state.getEntry(index, key);
    };
    ListDownlinkModel.prototype.set = function (index, newValue, key) {
        if (key !== void 0) {
            index = this._state.lookup(key, index);
            if (index < 0) {
                throw new RangeError("" + key);
            }
        }
        if (index < 0 || index >= this._state.length) {
            throw new RangeError("" + index);
        }
        newValue = this.listWillUpdate(index, newValue);
        var oldEntry = this._state.getEntry(index);
        this._state.set(index, newValue);
        this.listDidUpdate(index, newValue, oldEntry[1]);
        var header = Record.create(2).slot("key", oldEntry[0]).slot("index", index);
        this.command(Attr.of("update", header).concat(newValue));
        return this;
    };
    ListDownlinkModel.prototype.insert = function (index, newValue, key) {
        if (index < 0 || index > this._state.length) {
            throw new RangeError("" + index);
        }
        newValue = this.listWillUpdate(index, newValue);
        this._state.insert(index, newValue, key);
        var newEntry = this._state.getEntry(index);
        this.listDidUpdate(index, newValue, Value.absent());
        var header = Record.create(2).slot("key", newEntry[0]).slot("index", index);
        this.command(Attr.of("update", header).concat(newValue));
        return this;
    };
    ListDownlinkModel.prototype.remove = function (index, key) {
        if (key !== void 0) {
            index = this._state.lookup(key, index);
            if (index < 0) {
                throw new RangeError("" + key);
            }
        }
        if (index < 0 || index > this._state.length) {
            throw new RangeError("" + index);
        }
        this.listWillRemove(index);
        var oldEntry = this._state.getEntry(index);
        this._state.remove(index);
        this.listDidRemove(index, oldEntry[1]);
        var header = Record.create(2).slot("key", oldEntry[0]).slot("index", index);
        this.command(Record.create(1).attr("remove", header));
        return this;
    };
    ListDownlinkModel.prototype.push = function () {
        var newValues = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newValues[_i] = arguments[_i];
        }
        for (var i = 0; i < newValues.length; i += 1) {
            var index = this._state.length + i;
            var newValue = this.listWillUpdate(index, newValues[i]);
            this._state.insert(index, newValue);
            var newEntry = this._state.getEntry(index);
            this.listDidUpdate(index, newValue, Value.absent());
            var header = Record.create(2).slot("key", newEntry[0]).slot("index", index);
            this.command(Attr.of("update", header).concat(newValue));
        }
        return this._state.length;
    };
    ListDownlinkModel.prototype.pop = function () {
        var index = this._state.length - 1;
        if (index >= 0) {
            this.listWillRemove(index);
            var oldEntry = this._state.getEntry(index);
            this._state.remove(index);
            this.listDidRemove(index, oldEntry[1]);
            var header = Record.create(2).slot("key", oldEntry[0]).slot("index", index);
            this.command(Record.create(1).attr("remove", header));
            return oldEntry[1];
        }
        else {
            return Value.absent();
        }
    };
    ListDownlinkModel.prototype.unshift = function () {
        var newValues = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newValues[_i] = arguments[_i];
        }
        for (var i = newValues.length - 1; i >= 0; i -= 1) {
            var newValue = this.listWillUpdate(0, newValues[i]);
            this._state.insert(0, newValue);
            var newEntry = this._state.getEntry(0);
            this.listDidUpdate(0, newValue, Value.absent());
            var header = Record.create(2).slot("key", newEntry[0]).slot("index", 0);
            this.command(Attr.of("update", header).concat(newValue));
        }
        return this._state.length;
    };
    ListDownlinkModel.prototype.shift = function () {
        if (this._state.length > 0) {
            this.listWillRemove(0);
            var oldEntry = this._state.getEntry(0);
            this._state.remove(0);
            this.listDidRemove(0, oldEntry[1]);
            var header = Record.create(2).slot("key", oldEntry[0]).slot("index", 0);
            this.command(Record.create(1).attr("remove", header));
            return oldEntry[1];
        }
        else {
            return Value.absent();
        }
    };
    ListDownlinkModel.prototype.move = function (fromIndex, toIndex, key) {
        if (key !== void 0) {
            fromIndex = this._state.lookup(key, fromIndex);
            if (fromIndex < 0) {
                throw new RangeError("" + key);
            }
        }
        if (fromIndex < 0 || fromIndex >= this._state.length) {
            throw new RangeError("" + fromIndex);
        }
        if (toIndex < 0 || toIndex >= this._state.length) {
            throw new RangeError("" + toIndex);
        }
        if (fromIndex !== toIndex) {
            var entry = this._state.getEntry(fromIndex);
            this.listWillMove(fromIndex, toIndex, entry[1]);
            this._state.remove(fromIndex).insert(toIndex, entry[1], entry[0]);
            this.listDidMove(fromIndex, toIndex, entry[1]);
            var header = Record.create(2).slot("key", entry[0]).slot("from", fromIndex).slot("to", toIndex);
            this.command(Record.create(1).attr("move", header));
        }
        return this;
    };
    ListDownlinkModel.prototype.splice = function (start, deleteCount) {
        var newValues = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newValues[_i - 2] = arguments[_i];
        }
        if (start < 0) {
            start = this._state.length + start;
        }
        start = Math.min(Math.max(0, start), this._state.length);
        if (deleteCount === void 0) {
            deleteCount = this._state.length - start;
        }
        var deleted = [];
        for (var i = start, n = start + deleteCount; i < n; i += 1) {
            this.listWillRemove(start);
            var oldEntry = this._state.getEntry(start);
            deleted.push(oldEntry[1]);
            this._state.remove(start);
            this.listDidRemove(start, oldEntry[1]);
            var header = Record.create(2).slot("key", oldEntry[0]).slot("index", start);
            this.command(Record.create(1).attr("remove", header));
        }
        for (var i = 0; i < newValues.length; i += 1) {
            var index = start + i;
            var newValue = this.listWillUpdate(index, newValues[i]);
            this._state.insert(index, newValue);
            var newEntry = this._state.getEntry(index);
            this.listDidUpdate(index, newValue, Value.absent());
            var header = Record.create(2).slot("key", newEntry[0]).slot("index", index);
            this.command(Attr.of("update", header).concat(newValue));
        }
        return deleted;
    };
    ListDownlinkModel.prototype.clear = function () {
        this.listWillClear();
        this._state.clear();
        this.listDidClear();
        this.command(Record.create(1).attr("clear"));
    };
    ListDownlinkModel.prototype.forEach = function (callback, thisArg) {
        return this._state.forEach(function (value, index, tree, key) {
            return callback.call(thisArg, value, index, this, key);
        }, this);
    };
    ListDownlinkModel.prototype.values = function () {
        return this._state.values();
    };
    ListDownlinkModel.prototype.keys = function () {
        return this._state.keys();
    };
    ListDownlinkModel.prototype.entries = function () {
        return this._state.entries();
    };
    ListDownlinkModel.prototype.snapshot = function () {
        return this._state.clone();
    };
    ListDownlinkModel.prototype.setState = function (state) {
        this._state = state;
    };
    ListDownlinkModel.prototype.onEventMessage = function (message, host) {
        _super.prototype.onEventMessage.call(this, message, host);
        var event = message.body();
        var tag = event.tag();
        if (tag === "update") {
            var header = event.head().toValue();
            var index = this._state.lookup(header.get("key"), header.get("index").numberValue());
            if (index >= 0) {
                this.onUpdateEvent(index, event.body(), header.get("key"));
            }
            else {
                this.onInsertEvent(header.get("index").numberValue(0), event.body(), header.get("key"));
            }
        }
        else if (tag === "move") {
            var header = event.head().toValue();
            var index = this._state.lookup(header.get("key"), header.get("from").numberValue());
            if (index >= 0) {
                this.onMoveEvent(index, header.get("to").numberValue(0), header.get("key"));
            }
        }
        else if (tag === "remove") {
            var header = event.head().toValue();
            var index = this._state.lookup(header.get("key"), header.get("index").numberValue());
            if (index >= 0) {
                this.onRemoveEvent(index, header.get("key"));
            }
        }
        else if (tag === "drop") {
            var header = event.head();
            this.onDropEvent(header.numberValue(0));
        }
        else if (tag === "take") {
            var header = event.head();
            this.onTakeEvent(header.numberValue(0));
        }
        else if (tag === "clear") {
            this.onClearEvent();
        }
    };
    ListDownlinkModel.prototype.onInsertEvent = function (index, newValue, key) {
        newValue = this.listWillUpdate(index, newValue);
        this._state.insert(index, newValue, key);
        this.listDidUpdate(index, newValue, Value.absent());
    };
    ListDownlinkModel.prototype.onUpdateEvent = function (index, newValue, key) {
        newValue = this.listWillUpdate(index, newValue);
        var oldValue = this._state.get(index) || Value.absent();
        this._state.set(index, newValue);
        this.listDidUpdate(index, newValue, oldValue);
    };
    ListDownlinkModel.prototype.onMoveEvent = function (fromIndex, toIndex, key) {
        toIndex = Math.min(Math.max(0, toIndex), this._state.length);
        if (fromIndex !== toIndex) {
            var value = this._state.get(fromIndex) || Value.absent();
            this.listWillMove(fromIndex, toIndex, value);
            this._state.remove(fromIndex).insert(toIndex, value, key);
            this.listDidMove(fromIndex, toIndex, value);
        }
    };
    ListDownlinkModel.prototype.onRemoveEvent = function (index, key) {
        this.listWillRemove(index);
        var oldValue = this._state.get(index) || Value.absent();
        this._state.remove(index);
        this.listDidRemove(index, oldValue);
    };
    ListDownlinkModel.prototype.onDropEvent = function (lower) {
        this.listWillDrop(lower);
        this._state.drop(lower);
        this.listDidDrop(lower);
    };
    ListDownlinkModel.prototype.onTakeEvent = function (upper) {
        this.listWillTake(upper);
        this._state.take(upper);
        this.listDidTake(upper);
    };
    ListDownlinkModel.prototype.onClearEvent = function () {
        this.listWillClear();
        this._state.clear();
        this.listDidClear();
    };
    ListDownlinkModel.prototype.listWillUpdate = function (index, newValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            newValue = this._views[i].listWillUpdate(index, newValue);
        }
        return newValue;
    };
    ListDownlinkModel.prototype.listDidUpdate = function (index, newValue, oldValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidUpdate(index, newValue, oldValue);
        }
    };
    ListDownlinkModel.prototype.listWillMove = function (fromIndex, toIndex, value) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listWillMove(fromIndex, toIndex, value);
        }
    };
    ListDownlinkModel.prototype.listDidMove = function (fromIndex, toIndex, value) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidMove(fromIndex, toIndex, value);
        }
    };
    ListDownlinkModel.prototype.listWillRemove = function (index) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listWillRemove(index);
        }
    };
    ListDownlinkModel.prototype.listDidRemove = function (index, oldValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidRemove(index, oldValue);
        }
    };
    ListDownlinkModel.prototype.listWillDrop = function (lower) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listWillDrop(lower);
        }
    };
    ListDownlinkModel.prototype.listDidDrop = function (lower) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidDrop(lower);
        }
    };
    ListDownlinkModel.prototype.listWillTake = function (upper) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listWillTake(upper);
        }
    };
    ListDownlinkModel.prototype.listDidTake = function (upper) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidTake(upper);
        }
    };
    ListDownlinkModel.prototype.listWillClear = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listWillClear();
        }
    };
    ListDownlinkModel.prototype.listDidClear = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidClear();
        }
    };
    return ListDownlinkModel;
}(DownlinkModel));
export { ListDownlinkModel };
//# sourceMappingURL=ListDownlinkModel.js.map