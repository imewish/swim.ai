import { BTree } from "@swim/collections";
import { Value } from "@swim/structure";
import { Uri } from "@swim/uri";
import { WebSocketHost } from "./host/WebSocketHost";
import { EventDownlink } from "./downlink/EventDownlink";
import { ListDownlink } from "./downlink/ListDownlink";
import { MapDownlink } from "./downlink/MapDownlink";
import { ValueDownlink } from "./downlink/ValueDownlink";
import { HostRef } from "./ref/HostRef";
import { NodeRef } from "./ref/NodeRef";
import { LaneRef } from "./ref/LaneRef";
var WarpClient = (function () {
    function WarpClient(options) {
        if (options === void 0) { options = {}; }
        if (options.keepOnline === void 0) {
            options.keepOnline = true;
        }
        this._options = options;
        this._hosts = new BTree();
        this._downlinks = new BTree();
        this._downlinkCount = 0;
        this._refs = [];
        this._online = true;
        this._observers = null;
        this.onOnline = this.onOnline.bind(this);
        this.onOffline = this.onOffline.bind(this);
        this.watchOnline(!!options.keepOnline);
    }
    WarpClient.prototype.isOnline = function (online) {
        if (online === void 0) {
            return this._online;
        }
        else {
            if (this._online !== online) {
                this._online = online;
                if (online) {
                    this._hosts.forEach(function (hostUri, host) {
                        host.open();
                    }, this);
                }
            }
            return this;
        }
    };
    WarpClient.prototype.keepOnline = function (keepOnline) {
        if (keepOnline === void 0) {
            return !!this._options.keepOnline;
        }
        else {
            if (this._options.keepOnline !== keepOnline) {
                this._options.keepOnline = keepOnline;
                this.watchOnline(keepOnline);
            }
            return this;
        }
    };
    WarpClient.prototype.watchOnline = function (keepOnline) {
        if (typeof window === "object") {
            if (keepOnline) {
                window.addEventListener("online", this.onOnline);
                window.addEventListener("offline", this.onOffline);
            }
            else {
                window.removeEventListener("online", this.onOnline);
                window.removeEventListener("offline", this.onOffline);
            }
        }
    };
    WarpClient.prototype.onOnline = function (event) {
        this.isOnline(true);
    };
    WarpClient.prototype.onOffline = function (event) {
        this.isOnline(false);
    };
    WarpClient.prototype.getHost = function (hostUri) {
        hostUri = Uri.fromAny(hostUri);
        return this._hosts.get(hostUri);
    };
    WarpClient.prototype.openHost = function (hostUri) {
        hostUri = Uri.fromAny(hostUri);
        var host = this._hosts.get(hostUri);
        if (!host) {
            host = new WebSocketHost(this, hostUri, this._options);
            this._hosts.set(hostUri, host);
        }
        return host;
    };
    WarpClient.prototype.closeHost = function (host) {
        if (this._hosts.get(host.hostUri())) {
            this._hosts.delete(host.hostUri());
            host.closeUp();
        }
    };
    WarpClient.prototype.getDownlink = function (hostUri, nodeUri, laneUri) {
        var hostDownlinks = this._downlinks.get(hostUri);
        if (hostDownlinks) {
            var nodeDownlinks = hostDownlinks.get(nodeUri);
            if (nodeDownlinks) {
                return nodeDownlinks.get(laneUri);
            }
        }
        return void 0;
    };
    WarpClient.prototype.openDownlink = function (downlink) {
        var hostUri = downlink.hostUri();
        var nodeUri = downlink.nodeUri();
        var laneUri = downlink.laneUri();
        var hostDownlinks = this._downlinks.get(hostUri);
        if (!hostDownlinks) {
            hostDownlinks = new BTree();
            this._downlinks.set(hostUri, hostDownlinks);
        }
        var nodeDownlinks = hostDownlinks.get(nodeUri);
        if (!nodeDownlinks) {
            nodeDownlinks = new BTree();
            hostDownlinks.set(nodeUri, nodeDownlinks);
        }
        if (nodeDownlinks.has(laneUri)) {
            throw new Error("duplicate downlink");
        }
        nodeDownlinks.set(laneUri, downlink);
        this._downlinkCount += 1;
        var host = this.openHost(hostUri);
        host.openDownlink(downlink);
    };
    WarpClient.prototype.unlinkDownlink = function (downlink) {
        var hostUri = downlink.hostUri();
        var host = this.getHost(hostUri);
        if (host) {
            host.unlinkDownlink(downlink);
        }
    };
    WarpClient.prototype.closeDownlink = function (downlink) {
        var hostUri = downlink.hostUri();
        var nodeUri = downlink.nodeUri();
        var laneUri = downlink.laneUri();
        var hostDownlinks = this._downlinks.get(hostUri);
        if (hostDownlinks) {
            var nodeDownlinks = hostDownlinks.get(nodeUri);
            if (nodeDownlinks) {
                if (nodeDownlinks.get(laneUri)) {
                    this._downlinkCount -= 1;
                    nodeDownlinks.delete(laneUri);
                    if (nodeDownlinks.isEmpty()) {
                        hostDownlinks.delete(nodeUri);
                        if (hostDownlinks.isEmpty()) {
                            this._downlinks.delete(hostUri);
                        }
                    }
                    var host = this.getHost(hostUri);
                    if (host) {
                        host.closeDownlink(downlink);
                    }
                }
            }
        }
    };
    WarpClient.prototype.downlink = function (init) {
        return new EventDownlink(this, void 0, init);
    };
    WarpClient.prototype.downlinkList = function (init) {
        return new ListDownlink(this, void 0, init);
    };
    WarpClient.prototype.downlinkMap = function (init) {
        return new MapDownlink(this, void 0, init);
    };
    WarpClient.prototype.downlinkValue = function (init) {
        return new ValueDownlink(this, void 0, init);
    };
    WarpClient.prototype.openRef = function (ref) {
        this._refs.push(ref);
    };
    WarpClient.prototype.closeRef = function (ref) {
        var index = this._refs.indexOf(ref);
        if (index >= 0) {
            this._refs.splice(index, 1);
            ref.closeUp();
        }
    };
    WarpClient.prototype.hostRef = function (hostUri) {
        hostUri = Uri.fromAny(hostUri);
        return new HostRef(this, hostUri);
    };
    WarpClient.prototype.nodeRef = function (hostUri, nodeUri) {
        hostUri = Uri.fromAny(hostUri);
        if (nodeUri === void 0) {
            nodeUri = hostUri;
            hostUri = nodeUri.endpoint();
            nodeUri = hostUri.unresolve(nodeUri);
        }
        else {
            nodeUri = Uri.fromAny(nodeUri);
        }
        return new NodeRef(this, hostUri, nodeUri);
    };
    WarpClient.prototype.laneRef = function (hostUri, nodeUri, laneUri) {
        hostUri = Uri.fromAny(hostUri);
        nodeUri = Uri.fromAny(nodeUri);
        if (laneUri === void 0) {
            laneUri = nodeUri;
            nodeUri = hostUri;
            hostUri = nodeUri.endpoint();
            nodeUri = hostUri.unresolve(nodeUri);
        }
        else {
            laneUri = Uri.fromAny(laneUri);
        }
        return new LaneRef(this, hostUri, nodeUri, laneUri);
    };
    WarpClient.prototype.authenticate = function (hostUri, credentials) {
        hostUri = Uri.fromAny(hostUri);
        credentials = Value.fromAny(credentials);
        var host = this.openHost(hostUri);
        host.authenticate(credentials);
    };
    WarpClient.prototype.command = function (hostUri, nodeUri, laneUri, body) {
        hostUri = Uri.fromAny(hostUri);
        nodeUri = Uri.fromAny(nodeUri);
        if (arguments.length === 3) {
            body = laneUri;
            laneUri = nodeUri;
            nodeUri = hostUri;
            hostUri = nodeUri.endpoint();
            nodeUri = hostUri.unresolve(nodeUri);
        }
        else {
            laneUri = Uri.fromAny(laneUri);
        }
        body = Value.fromAny(body);
        var host = this.openHost(hostUri);
        host.command(nodeUri, laneUri, body);
    };
    WarpClient.prototype.close = function () {
        var refs = this._refs;
        this._refs = [];
        for (var i = 0; i < refs.length; i += 1) {
            refs[i].closeUp();
        }
        var downlinks = this._downlinks.clone();
        this._downlinks.clear();
        this._downlinkCount = 0;
        downlinks.forEach(function (hostUri, hostDownlinks) {
            hostDownlinks.forEach(function (nodeUri, nodeDownlinks) {
                nodeDownlinks.forEach(function (laneUri, downlink) {
                    downlink.closeUp();
                    var host = this.getHost(hostUri);
                    if (host) {
                        host.closeDownlink(downlink);
                    }
                }, this);
            }, this);
        }, this);
        var hosts = this._hosts.clone();
        this._hosts.clear();
        hosts.forEach(function (hostUri, host) {
            host.closeUp();
        }, this);
    };
    WarpClient.prototype.observe = function (observer) {
        var oldObservers = this._observers;
        var n = oldObservers ? oldObservers.length : 0;
        var newObservers = new Array(n + 1);
        for (var i = 0; i < n; i += 1) {
            newObservers[i] = oldObservers[i];
        }
        newObservers[n] = observer;
        this._observers = newObservers;
        return this;
    };
    WarpClient.prototype.unobserve = function (observer) {
        var oldObservers = this._observers;
        var n = oldObservers ? oldObservers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var oldObserver = oldObservers[i];
            var found = oldObserver === observer;
            if (!found) {
                for (var key in oldObserver) {
                    if (oldObserver[key] === observer) {
                        found = true;
                        break;
                    }
                }
            }
            if (found) {
                if (n > 1) {
                    var newObservers = new Array(n - 1);
                    for (var j = 0; j < i; j += 1) {
                        newObservers[j] = oldObservers[j];
                    }
                    for (var j = i + 1; j < n; j += 1) {
                        newObservers[j - 1] = oldObservers[j];
                    }
                    this._observers = newObservers;
                }
                else {
                    this._observers = null;
                }
                break;
            }
        }
        return this;
    };
    WarpClient.prototype.didConnect = function (didConnect) {
        return this.observe({ didConnect: didConnect });
    };
    WarpClient.prototype.didAuthenticate = function (didAuthenticate) {
        return this.observe({ didAuthenticate: didAuthenticate });
    };
    WarpClient.prototype.didDeauthenticate = function (didDeauthenticate) {
        return this.observe({ didDeauthenticate: didDeauthenticate });
    };
    WarpClient.prototype.didDisconnect = function (didDisconnect) {
        return this.observe({ didDisconnect: didDisconnect });
    };
    WarpClient.prototype.didFail = function (didFail) {
        return this.observe({ didFail: didFail });
    };
    WarpClient.prototype.hostDidConnect = function (host) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didConnect) {
                observer.didConnect(host, this);
            }
        }
        for (var i = 0; i < this._refs.length; i += 1) {
            var ref = this._refs[i];
            if (ref.hostUri().equals(host.hostUri())) {
                ref.hostDidConnect(host);
            }
        }
    };
    WarpClient.prototype.hostDidAuthenticate = function (body, host) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didAuthenticate) {
                observer.didAuthenticate(body, host, this);
            }
        }
        for (var i = 0; i < this._refs.length; i += 1) {
            var ref = this._refs[i];
            if (ref.hostUri().equals(host.hostUri())) {
                ref.hostDidAuthenticate(body, host);
            }
        }
    };
    WarpClient.prototype.hostDidDeauthenticate = function (body, host) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didDeauthenticate) {
                observer.didDeauthenticate(body, host, this);
            }
        }
        for (var i = 0; i < this._refs.length; i += 1) {
            var ref = this._refs[i];
            if (ref.hostUri().equals(host.hostUri())) {
                ref.hostDidDeauthenticate(body, host);
            }
        }
    };
    WarpClient.prototype.hostDidDisconnect = function (host) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didDisconnect) {
                observer.didDisconnect(host, this);
            }
        }
        for (var i = 0; i < this._refs.length; i += 1) {
            var ref = this._refs[i];
            if (ref.hostUri().equals(host.hostUri())) {
                ref.hostDidDisconnect(host);
            }
        }
    };
    WarpClient.prototype.hostDidFail = function (error, host) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didFail) {
                observer.didFail(error, host, this);
            }
        }
        for (var i = 0; i < this._refs.length; i += 1) {
            var ref = this._refs[i];
            if (ref.hostUri().equals(host.hostUri())) {
                ref.hostDidFail(error, host);
            }
        }
    };
    return WarpClient;
}());
export { WarpClient };
//# sourceMappingURL=WarpClient.js.map