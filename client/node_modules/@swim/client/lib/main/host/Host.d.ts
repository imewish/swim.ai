import { AnyUri, Uri } from "@swim/uri";
import { AnyValue, Value } from "@swim/structure";
import { Envelope } from "@swim/warp";
import { HostDownlink } from "./HostDownlink";
export interface HostOptions {
    credentials?: Value;
    unlinkDelay?: number;
    maxReconnectTimeout?: number;
    idleTimeout?: number;
    sendBufferSize?: number;
}
export declare abstract class Host {
    abstract hostUri(): Uri;
    abstract unlinkDelay(): number;
    abstract isConnected(): boolean;
    abstract isAuthenticated(): boolean;
    abstract session(): Value;
    abstract resolve(relative: AnyUri): Uri;
    abstract unresolve(absolute: AnyUri): Uri;
    abstract authenticate(credentials: AnyValue): void;
    abstract openDownlink(downlink: HostDownlink): void;
    abstract unlinkDownlink(downlink: HostDownlink): void;
    abstract closeDownlink(downlink: HostDownlink): void;
    abstract command(nodeUri: AnyUri, laneUri: AnyUri, body: AnyValue): void;
    abstract open(): void;
    abstract close(): void;
    abstract closeUp(): void;
    abstract push(envelope: Envelope): void;
}
//# sourceMappingURL=Host.d.ts.map