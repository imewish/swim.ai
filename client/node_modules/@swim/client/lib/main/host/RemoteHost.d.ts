import { BTree } from "@swim/collections";
import { AnyUri, Uri, UriCache } from "@swim/uri";
import { AnyValue, Value } from "@swim/structure";
import { Envelope, EventMessage, CommandMessage, LinkRequest, LinkedResponse, SyncRequest, SyncedResponse, UnlinkRequest, UnlinkedResponse, AuthRequest, AuthedResponse, DeauthRequest, DeauthedResponse } from "@swim/warp";
import { HostDownlink } from "./HostDownlink";
import { HostContext } from "./HostContext";
import { HostOptions, Host } from "./Host";
export declare abstract class RemoteHost extends Host {
    readonly _context: HostContext;
    readonly _hostUri: Uri;
    readonly _options: HostOptions;
    _downlinks: BTree<Uri, BTree<Uri, HostDownlink>>;
    _downlinkCount: number;
    _authenticated: boolean;
    _session: Value;
    _uriCache: UriCache;
    _sendBuffer: Envelope[];
    _reconnectTimer: number;
    _reconnectTimeout: number;
    _idleTimer: number;
    constructor(context: HostContext, hostUri: Uri, options?: HostOptions);
    hostUri(): Uri;
    credentials(): Value;
    unlinkDelay(): number;
    maxReconnectTimeout(): number;
    idleTimeout(): number;
    sendBufferSize(): number;
    abstract isConnected(): boolean;
    isAuthenticated(): boolean;
    session(): Value;
    isIdle(): boolean;
    resolve(relative: AnyUri): Uri;
    unresolve(absolute: AnyUri): Uri;
    authenticate(credentials: AnyValue): void;
    openDownlink(downlink: HostDownlink): void;
    unlinkDownlink(downlink: HostDownlink): void;
    closeDownlink(downlink: HostDownlink): void;
    command(nodeUri: AnyUri, laneUri: AnyUri, body: AnyValue): void;
    protected onEnvelope(envelope: Envelope): void;
    protected onEventMessage(message: EventMessage): void;
    protected onCommandMessage(message: CommandMessage): void;
    protected onLinkRequest(request: LinkRequest): void;
    protected onLinkedResponse(response: LinkedResponse): void;
    protected onSyncRequest(request: SyncRequest): void;
    protected onSyncedResponse(response: SyncedResponse): void;
    protected onUnlinkRequest(request: UnlinkRequest): void;
    protected onUnlinkedResponse(response: UnlinkedResponse): void;
    protected onAuthRequest(request: AuthRequest): void;
    protected onAuthedResponse(response: AuthedResponse): void;
    protected onDeauthRequest(request: DeauthRequest): void;
    protected onDeauthedResponse(response: DeauthedResponse): void;
    protected onUnknownEnvelope(envelope: Envelope | string): void;
    protected onConnect(): void;
    protected onDisconnect(): void;
    protected onError(error?: unknown): void;
    protected reconnect(): void;
    protected clearReconnect(): void;
    protected watchIdle(): void;
    protected clearIdle(): void;
    protected checkIdle(): void;
    abstract open(): void;
    close(): void;
    closeUp(): void;
    abstract push(envelope: Envelope): void;
}
//# sourceMappingURL=RemoteHost.d.ts.map