import { __extends } from "tslib";
import { BTree } from "@swim/collections";
import { Uri, UriCache } from "@swim/uri";
import { Value } from "@swim/structure";
import { EventMessage, CommandMessage, LinkRequest, LinkedResponse, SyncRequest, SyncedResponse, UnlinkRequest, UnlinkedResponse, AuthRequest, AuthedResponse, DeauthRequest, DeauthedResponse, } from "@swim/warp";
import { Host } from "./Host";
var UNLINK_DELAY = 0;
var MAX_RECONNECT_TIMEOUT = 30000;
var IDLE_TIMEOUT = 1000;
var SEND_BUFFER_SIZE = 1024;
var RemoteHost = (function (_super) {
    __extends(RemoteHost, _super);
    function RemoteHost(context, hostUri, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this._context = context;
        _this._hostUri = hostUri;
        _this._options = options;
        _this._downlinks = new BTree();
        _this._downlinkCount = 0;
        _this._authenticated = false;
        _this._session = Value.absent();
        _this._uriCache = new UriCache(hostUri);
        _this._sendBuffer = [];
        _this._reconnectTimer = 0;
        _this._reconnectTimeout = 0;
        _this._idleTimer = 0;
        return _this;
    }
    RemoteHost.prototype.hostUri = function () {
        return this._hostUri;
    };
    RemoteHost.prototype.credentials = function () {
        return this._options.credentials || Value.absent();
    };
    RemoteHost.prototype.unlinkDelay = function () {
        var unlinkDelay = this._options.unlinkDelay;
        return typeof unlinkDelay === "number" ? unlinkDelay : UNLINK_DELAY;
    };
    RemoteHost.prototype.maxReconnectTimeout = function () {
        return this._options.maxReconnectTimeout || MAX_RECONNECT_TIMEOUT;
    };
    RemoteHost.prototype.idleTimeout = function () {
        return this._options.idleTimeout || IDLE_TIMEOUT;
    };
    RemoteHost.prototype.sendBufferSize = function () {
        return this._options.sendBufferSize || SEND_BUFFER_SIZE;
    };
    RemoteHost.prototype.isAuthenticated = function () {
        return this._authenticated;
    };
    RemoteHost.prototype.session = function () {
        return this._session;
    };
    RemoteHost.prototype.isIdle = function () {
        return !this._sendBuffer.length && !this._downlinkCount;
    };
    RemoteHost.prototype.resolve = function (relative) {
        return this._uriCache.resolve(relative);
    };
    RemoteHost.prototype.unresolve = function (absolute) {
        return this._uriCache.unresolve(absolute);
    };
    RemoteHost.prototype.authenticate = function (credentials) {
        credentials = Value.fromAny(credentials);
        if (!credentials.equals(this._options.credentials)) {
            this._options.credentials = credentials;
            if (this.isConnected()) {
                var request = AuthRequest.of(credentials);
                this.push(request);
            }
            else {
                this.open();
            }
        }
    };
    RemoteHost.prototype.openDownlink = function (downlink) {
        this.clearIdle();
        var nodeUri = this.resolve(downlink.nodeUri());
        var laneUri = downlink.laneUri();
        if (!this._downlinkCount) {
            this.open();
        }
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (!nodeDownlinks) {
            nodeDownlinks = new BTree();
            this._downlinks.set(nodeUri, nodeDownlinks);
        }
        if (nodeDownlinks.get(laneUri)) {
            throw new Error("duplicate downlink");
        }
        nodeDownlinks.set(laneUri, downlink);
        this._downlinkCount += 1;
        downlink.openUp(this);
        if (this.isConnected()) {
            downlink.hostDidConnect(this);
        }
    };
    RemoteHost.prototype.unlinkDownlink = function (downlink) {
        var nodeUri = this.resolve(downlink.nodeUri());
        var laneUri = downlink.laneUri();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks && nodeDownlinks.get(laneUri) && this.isConnected()) {
            var request = UnlinkRequest.of(this.unresolve(nodeUri), laneUri);
            downlink.onUnlinkRequest(request, this);
            this.push(request);
        }
    };
    RemoteHost.prototype.closeDownlink = function (downlink) {
        var nodeUri = this.resolve(downlink.nodeUri());
        var laneUri = downlink.laneUri();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks) {
            if (nodeDownlinks.get(laneUri)) {
                this._downlinkCount -= 1;
                nodeDownlinks.delete(laneUri);
                if (nodeDownlinks.isEmpty()) {
                    this._downlinks.delete(nodeUri);
                }
                if (!this._downlinkCount) {
                    this.watchIdle();
                }
                downlink.closeUp(this);
            }
        }
    };
    RemoteHost.prototype.command = function (nodeUri, laneUri, body) {
        nodeUri = Uri.fromAny(nodeUri);
        nodeUri = this.resolve(nodeUri);
        laneUri = Uri.fromAny(laneUri);
        body = Value.fromAny(body);
        var message = CommandMessage.of(this.unresolve(nodeUri), laneUri, body);
        this.push(message);
    };
    RemoteHost.prototype.onEnvelope = function (envelope) {
        if (envelope instanceof EventMessage) {
            this.onEventMessage(envelope);
        }
        else if (envelope instanceof CommandMessage) {
            this.onCommandMessage(envelope);
        }
        else if (envelope instanceof LinkRequest) {
            this.onLinkRequest(envelope);
        }
        else if (envelope instanceof LinkedResponse) {
            this.onLinkedResponse(envelope);
        }
        else if (envelope instanceof SyncRequest) {
            this.onSyncRequest(envelope);
        }
        else if (envelope instanceof SyncedResponse) {
            this.onSyncedResponse(envelope);
        }
        else if (envelope instanceof UnlinkRequest) {
            this.onUnlinkRequest(envelope);
        }
        else if (envelope instanceof UnlinkedResponse) {
            this.onUnlinkedResponse(envelope);
        }
        else if (envelope instanceof AuthRequest) {
            this.onAuthRequest(envelope);
        }
        else if (envelope instanceof AuthedResponse) {
            this.onAuthedResponse(envelope);
        }
        else if (envelope instanceof DeauthRequest) {
            this.onDeauthRequest(envelope);
        }
        else if (envelope instanceof DeauthedResponse) {
            this.onDeauthedResponse(envelope);
        }
        else {
            this.onUnknownEnvelope(envelope);
        }
    };
    RemoteHost.prototype.onEventMessage = function (message) {
        var nodeUri = this.resolve(message.node());
        var laneUri = message.lane();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks) {
            var downlink = nodeDownlinks.get(laneUri);
            if (downlink) {
                var resolvedMessage = message.node(nodeUri);
                downlink.onEventMessage(resolvedMessage, this);
            }
        }
    };
    RemoteHost.prototype.onCommandMessage = function (message) {
    };
    RemoteHost.prototype.onLinkRequest = function (request) {
    };
    RemoteHost.prototype.onLinkedResponse = function (response) {
        var nodeUri = this.resolve(response.node());
        var laneUri = response.lane();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks) {
            var downlink = nodeDownlinks.get(laneUri);
            if (downlink) {
                var resolvedResponse = response.node(nodeUri);
                downlink.onLinkedResponse(resolvedResponse, this);
            }
        }
    };
    RemoteHost.prototype.onSyncRequest = function (request) {
    };
    RemoteHost.prototype.onSyncedResponse = function (response) {
        var nodeUri = this.resolve(response.node());
        var laneUri = response.lane();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks) {
            var downlink = nodeDownlinks.get(laneUri);
            if (downlink) {
                var resolvedResponse = response.node(nodeUri);
                downlink.onSyncedResponse(resolvedResponse, this);
            }
        }
    };
    RemoteHost.prototype.onUnlinkRequest = function (request) {
    };
    RemoteHost.prototype.onUnlinkedResponse = function (response) {
        var nodeUri = this.resolve(response.node());
        var laneUri = response.lane();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks) {
            var downlink = nodeDownlinks.get(laneUri);
            if (downlink) {
                var resolvedResponse = response.node(nodeUri);
                downlink.onUnlinkedResponse(resolvedResponse, this);
            }
        }
    };
    RemoteHost.prototype.onAuthRequest = function (request) {
    };
    RemoteHost.prototype.onAuthedResponse = function (response) {
        this._authenticated = true;
        this._session = response.body();
        this._context.hostDidAuthenticate(response.body(), this);
    };
    RemoteHost.prototype.onDeauthRequest = function (request) {
    };
    RemoteHost.prototype.onDeauthedResponse = function (response) {
        this._authenticated = false;
        this._session = Value.absent();
        this._context.hostDidDeauthenticate(response.body(), this);
    };
    RemoteHost.prototype.onUnknownEnvelope = function (envelope) {
    };
    RemoteHost.prototype.onConnect = function () {
        this._reconnectTimeout = 0;
        this._context.hostDidConnect(this);
        this._downlinks.forEach(function (nodeUri, nodeDownlinks) {
            nodeDownlinks.forEach(function (laneUri, downlink) {
                downlink.hostDidConnect(this);
            }, this);
        }, this);
    };
    RemoteHost.prototype.onDisconnect = function () {
        this._authenticated = false;
        this._session = Value.absent();
        this._context.hostDidDisconnect(this);
        this._downlinks.forEach(function (nodeUri, nodeDownlinks) {
            nodeDownlinks.forEach(function (laneUri, downlink) {
                downlink.hostDidDisconnect(this);
            }, this);
        }, this);
    };
    RemoteHost.prototype.onError = function (error) {
        this._context.hostDidFail(error, this);
        this._downlinks.forEach(function (nodeUri, nodeDownlinks) {
            nodeDownlinks.forEach(function (laneUri, downlink) {
                downlink.hostDidFail(error, this);
            }, this);
        }, this);
    };
    RemoteHost.prototype.reconnect = function () {
        if (!this._reconnectTimer) {
            if (!this._reconnectTimeout) {
                this._reconnectTimeout = Math.floor(500 + 1000 * Math.random());
            }
            else {
                this._reconnectTimeout = Math.min(Math.floor(1.8 * this._reconnectTimeout), this.maxReconnectTimeout());
            }
            this._reconnectTimer = setTimeout(this.open.bind(this), this._reconnectTimeout);
        }
    };
    RemoteHost.prototype.clearReconnect = function () {
        if (this._reconnectTimer) {
            clearTimeout(this._reconnectTimer);
            this._reconnectTimer = 0;
        }
    };
    RemoteHost.prototype.watchIdle = function () {
        if (!this._idleTimer && this.isConnected() && this.isIdle()) {
            this._idleTimer = setTimeout(this.checkIdle.bind(this), this.idleTimeout());
        }
    };
    RemoteHost.prototype.clearIdle = function () {
        if (this._idleTimer) {
            clearTimeout(this._idleTimer);
            this._idleTimer = 0;
        }
    };
    RemoteHost.prototype.checkIdle = function () {
        if (this.isConnected() && this.isIdle()) {
            this.close();
        }
    };
    RemoteHost.prototype.close = function () {
        this._context.closeHost(this);
    };
    RemoteHost.prototype.closeUp = function () {
        this._downlinks.forEach(function (nodeUri, nodeDownlinks) {
            nodeDownlinks.forEach(function (laneUri, downlink) {
                downlink.closeUp(this);
            }, this);
        }, this);
    };
    return RemoteHost;
}(Host));
export { RemoteHost };
//# sourceMappingURL=RemoteHost.js.map