import { Uri } from "@swim/uri";
import { Envelope } from "@swim/warp";
import { HostContext } from "./HostContext";
import { HostOptions } from "./Host";
import { RemoteHost } from "./RemoteHost";
export declare type WebSocketConstructor = {
    new (url: string, protocols?: string | string[]): WebSocket;
};
export interface WebSocketHostOptions extends HostOptions {
    protocols?: string | string[];
    WebSocket?: WebSocketConstructor;
}
export declare class WebSocketHost extends RemoteHost {
    readonly _options: WebSocketHostOptions;
    _socket: WebSocket | undefined;
    constructor(context: HostContext, hostUri: Uri, options?: WebSocketHostOptions);
    get WebSocket(): WebSocketConstructor | undefined;
    isConnected(): boolean;
    open(): void;
    close(): void;
    push(envelope: Envelope): void;
    protected onWebSocketOpen(): void;
    protected onWebSocketMessage(message: MessageEvent): void;
    protected onWebSocketClose(): void;
    protected onWebSocketError(): void;
}
//# sourceMappingURL=WebSocketHost.d.ts.map