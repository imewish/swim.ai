import { BTree } from "@swim/collections";
import { AnyValue, Value } from "@swim/structure";
import { AnyUri, Uri } from "@swim/uri";
import { HostContext } from "./host/HostContext";
import { HostOptions, Host } from "./host/Host";
import { DownlinkModel } from "./downlink/DownlinkModel";
import { EventDownlinkInit, EventDownlink } from "./downlink/EventDownlink";
import { ListDownlinkInit, ListDownlink } from "./downlink/ListDownlink";
import { MapDownlinkInit, MapDownlink } from "./downlink/MapDownlink";
import { ValueDownlinkInit, ValueDownlink } from "./downlink/ValueDownlink";
import { WarpRef } from "./WarpRef";
import { WarpDidConnect, WarpDidAuthenticate, WarpDidDeauthenticate, WarpDidDisconnect, WarpDidFail, WarpObserver } from "./WarpObserver";
import { RefContext } from "./ref/RefContext";
import { BaseRef } from "./ref/BaseRef";
import { HostRef } from "./ref/HostRef";
import { NodeRef } from "./ref/NodeRef";
import { LaneRef } from "./ref/LaneRef";
export interface WarpClientOptions extends HostOptions {
    keepOnline?: boolean;
}
export declare class WarpClient implements HostContext, RefContext, WarpRef {
    readonly _options: WarpClientOptions;
    _hosts: BTree<Uri, Host>;
    _downlinks: BTree<Uri, BTree<Uri, BTree<Uri, DownlinkModel>>>;
    _downlinkCount: number;
    _refs: BaseRef[];
    _online: boolean;
    _observers: ReadonlyArray<WarpObserver> | null;
    constructor(options?: WarpClientOptions);
    isOnline(): boolean;
    isOnline(online: boolean): this;
    keepOnline(): boolean;
    keepOnline(keepOnline: boolean): this;
    protected watchOnline(keepOnline: boolean): void;
    protected onOnline(event: Event): void;
    protected onOffline(event: Event): void;
    getHost(hostUri: AnyUri): Host | undefined;
    openHost(hostUri: AnyUri): Host;
    closeHost(host: Host): void;
    getDownlink(hostUri: Uri, nodeUri: Uri, laneUri: Uri): DownlinkModel | undefined;
    openDownlink(downlink: DownlinkModel): void;
    unlinkDownlink(downlink: DownlinkModel): void;
    closeDownlink(downlink: DownlinkModel): void;
    downlink(init?: EventDownlinkInit): EventDownlink;
    downlinkList(init?: ListDownlinkInit<Value, AnyValue>): ListDownlink<Value, AnyValue>;
    downlinkList<V extends VU, VU = V>(init?: ListDownlinkInit<V, VU>): ListDownlink<V, VU>;
    downlinkMap(init?: MapDownlinkInit<Value, Value, AnyValue, AnyValue>): MapDownlink<Value, Value, AnyValue, AnyValue>;
    downlinkMap<K extends KU, V extends VU, KU = K, VU = V>(init?: MapDownlinkInit<K, V, KU, VU>): MapDownlink<K, V, KU, VU>;
    downlinkValue(init?: ValueDownlinkInit<Value, AnyValue>): ValueDownlink<Value, AnyValue>;
    downlinkValue<V extends VU, VU = V>(init?: ValueDownlinkInit<V, VU>): ValueDownlink<V, VU>;
    openRef(ref: BaseRef): void;
    closeRef(ref: BaseRef): void;
    hostRef(hostUri: AnyUri): HostRef;
    nodeRef(hostUri: AnyUri, nodeUri: AnyUri): NodeRef;
    nodeRef(nodeUri: AnyUri): NodeRef;
    laneRef(hostUri: AnyUri, nodeUri: AnyUri, laneUri: AnyUri): LaneRef;
    laneRef(nodeUri: AnyUri, laneUri: AnyUri): LaneRef;
    authenticate(hostUri: AnyUri, credentials: AnyValue): void;
    command(hostUri: AnyUri, nodeUri: AnyUri, laneUri: AnyUri, body: AnyValue): void;
    command(nodeUri: AnyUri, laneUri: AnyUri, body: AnyValue): void;
    close(): void;
    observe(observer: WarpObserver): this;
    unobserve(observer: unknown): this;
    didConnect(didConnect: WarpDidConnect): this;
    didAuthenticate(didAuthenticate: WarpDidAuthenticate): this;
    didDeauthenticate(didDeauthenticate: WarpDidDeauthenticate): this;
    didDisconnect(didDisconnect: WarpDidDisconnect): this;
    didFail(didFail: WarpDidFail): this;
    hostDidConnect(host: Host): void;
    hostDidAuthenticate(body: Value, host: Host): void;
    hostDidDeauthenticate(body: Value, host: Host): void;
    hostDidDisconnect(host: Host): void;
    hostDidFail(error: unknown, host: Host): void;
}
export declare type SwimClientOptions = WarpClientOptions;
export declare type SwimClient = WarpClient;
//# sourceMappingURL=WarpClient.d.ts.map