import { AnyValue, Value } from "@swim/structure";
import { EventDownlinkInit, EventDownlink } from "./downlink/EventDownlink";
import { ListDownlinkInit, ListDownlink } from "./downlink/ListDownlink";
import { MapDownlinkInit, MapDownlink } from "./downlink/MapDownlink";
import { ValueDownlinkInit, ValueDownlink } from "./downlink/ValueDownlink";
import { WarpDidConnect, WarpDidAuthenticate, WarpDidDeauthenticate, WarpDidDisconnect, WarpDidFail, WarpObserver } from "./WarpObserver";
export interface WarpRef {
    downlink(init?: EventDownlinkInit): EventDownlink;
    downlinkList(init?: ListDownlinkInit<Value, AnyValue>): ListDownlink<Value, AnyValue>;
    downlinkList<V extends VU, VU = V>(init?: ListDownlinkInit<V, VU>): ListDownlink<V, VU>;
    downlinkMap(init?: MapDownlinkInit<Value, Value, AnyValue, AnyValue>): MapDownlink<Value, Value, AnyValue, AnyValue>;
    downlinkMap<K extends KU, V extends VU, KU = K, VU = V>(init?: MapDownlinkInit<K, V, KU, VU>): MapDownlink<K, V, KU, VU>;
    downlinkValue(init?: ValueDownlinkInit<Value, AnyValue>): ValueDownlink<Value, AnyValue>;
    downlinkValue<V extends VU, VU = V>(init?: ValueDownlinkInit<V, VU>): ValueDownlink<V, VU>;
    observe(observer: WarpObserver): this;
    unobserve(observer: unknown): this;
    didConnect(didConnect: WarpDidConnect): this;
    didAuthenticate(didAuthenticate: WarpDidAuthenticate): this;
    didDeauthenticate(didDeauthenticate: WarpDidDeauthenticate): this;
    didDisconnect(didDisconnect: WarpDidDisconnect): this;
    didFail(didFail: WarpDidFail): this;
}
export declare type SwimRef = WarpRef;
//# sourceMappingURL=WarpRef.d.ts.map