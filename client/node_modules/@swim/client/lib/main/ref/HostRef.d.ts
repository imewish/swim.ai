import { Value, AnyValue } from "@swim/structure";
import { AnyUri, Uri } from "@swim/uri";
import { EventDownlinkInit, EventDownlink } from "../downlink/EventDownlink";
import { ListDownlinkInit, ListDownlink } from "../downlink/ListDownlink";
import { MapDownlinkInit, MapDownlink } from "../downlink/MapDownlink";
import { ValueDownlinkInit, ValueDownlink } from "../downlink/ValueDownlink";
import { RefContext } from "./RefContext";
import { BaseRef } from "./BaseRef";
import { NodeRef } from "./NodeRef";
import { LaneRef } from "./LaneRef";
export declare class HostRef extends BaseRef {
    readonly _hostUri: Uri;
    constructor(context: RefContext, hostUri: Uri);
    hostUri(): Uri;
    hostRef(hostUri: AnyUri): HostRef;
    nodeRef(nodeUri: AnyUri): NodeRef;
    laneRef(nodeUri: AnyUri, laneUri: AnyUri): LaneRef;
    downlink(init?: EventDownlinkInit): EventDownlink;
    downlinkList(init?: ListDownlinkInit<Value, AnyValue>): ListDownlink<Value, AnyValue>;
    downlinkList<V extends VU, VU = V>(init?: ListDownlinkInit<V, VU>): ListDownlink<V, VU>;
    downlinkMap(init?: MapDownlinkInit<Value, Value, AnyValue, AnyValue>): MapDownlink<Value, Value, AnyValue, AnyValue>;
    downlinkMap<K extends KU, V extends VU, KU = K, VU = V>(init?: MapDownlinkInit<K, V, KU, VU>): MapDownlink<K, V, KU, VU>;
    downlinkValue(init?: ValueDownlinkInit<Value, AnyValue>): ValueDownlink<Value, AnyValue>;
    downlinkValue<V extends VU, VU = V>(init?: ValueDownlinkInit<V, VU>): ValueDownlink<V, VU>;
    command(nodeUri: AnyUri, laneUri: AnyUri, body: AnyValue): void;
}
//# sourceMappingURL=HostRef.d.ts.map