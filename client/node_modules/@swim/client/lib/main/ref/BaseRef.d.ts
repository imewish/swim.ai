import { AnyValue, Value } from "@swim/structure";
import { Uri } from "@swim/uri";
import { Host } from "../host/Host";
import { DownlinkOwner } from "../downlink/DownlinkOwner";
import { Downlink } from "../downlink/Downlink";
import { EventDownlinkInit, EventDownlink } from "../downlink/EventDownlink";
import { ListDownlinkInit, ListDownlink } from "../downlink/ListDownlink";
import { MapDownlinkInit, MapDownlink } from "../downlink/MapDownlink";
import { ValueDownlinkInit, ValueDownlink } from "../downlink/ValueDownlink";
import { RefContext } from "./RefContext";
import { WarpRef } from "../WarpRef";
import { WarpDidConnect, WarpDidAuthenticate, WarpDidDeauthenticate, WarpDidDisconnect, WarpDidFail, WarpObserver } from "../WarpObserver";
export declare abstract class BaseRef implements DownlinkOwner, WarpRef {
    readonly _context: RefContext;
    _host: Host | undefined;
    _downlinks: Downlink[];
    _downlinkCount: number;
    _observers: ReadonlyArray<WarpObserver> | null;
    constructor(context: RefContext);
    abstract hostUri(): Uri;
    isConnected(): boolean;
    isAuthenticated(): boolean;
    session(): Value;
    authenticate(credentials: AnyValue): void;
    abstract downlink(init?: EventDownlinkInit): EventDownlink;
    abstract downlinkList(init?: ListDownlinkInit<Value, AnyValue>): ListDownlink<Value, AnyValue>;
    abstract downlinkList<V extends VU, VU = V>(init?: ListDownlinkInit<V, VU>): ListDownlink<V, VU>;
    abstract downlinkMap(init?: MapDownlinkInit<Value, Value, AnyValue, AnyValue>): MapDownlink<Value, Value, AnyValue, AnyValue>;
    abstract downlinkMap<K extends KU, V extends VU, KU = K, VU = V>(init?: MapDownlinkInit<K, V, KU, VU>): MapDownlink<K, V, KU, VU>;
    abstract downlinkValue(init?: ValueDownlinkInit<Value, AnyValue>): ValueDownlink<Value, AnyValue>;
    abstract downlinkValue<V extends VU, VU = V>(init?: ValueDownlinkInit<V, VU>): ValueDownlink<V, VU>;
    addDownlink(downlink: Downlink): void;
    removeDownlink(downlink: Downlink): void;
    open(): void;
    close(): void;
    closeUp(): void;
    observe(observer: WarpObserver): this;
    unobserve(observer: unknown): this;
    didConnect(didConnect: WarpDidConnect): this;
    didAuthenticate(didAuthenticate: WarpDidAuthenticate): this;
    didDeauthenticate(didDeauthenticate: WarpDidDeauthenticate): this;
    didDisconnect(didDisconnect: WarpDidDisconnect): this;
    didFail(didFail: WarpDidFail): this;
    hostDidConnect(host: Host): void;
    hostDidAuthenticate(body: Value, host: Host): void;
    hostDidDeauthenticate(body: Value, host: Host): void;
    hostDidDisconnect(host: Host): void;
    hostDidFail(error: unknown, host: Host): void;
}
//# sourceMappingURL=BaseRef.d.ts.map