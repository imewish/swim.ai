import { Value } from "@swim/structure";
var BaseRef = (function () {
    function BaseRef(context) {
        this._context = context;
        this._host = void 0;
        this._downlinks = [];
        this._observers = null;
    }
    BaseRef.prototype.isConnected = function () {
        return this._host ? this._host.isConnected() : false;
    };
    BaseRef.prototype.isAuthenticated = function () {
        return this._host ? this._host.isAuthenticated() : false;
    };
    BaseRef.prototype.session = function () {
        return this._host ? this._host.session() : Value.absent();
    };
    BaseRef.prototype.authenticate = function (credentials) {
        this._context.authenticate(this.hostUri(), credentials);
    };
    BaseRef.prototype.addDownlink = function (downlink) {
        if (this._downlinks.length === 0) {
            this.open();
        }
        this._downlinks.push(downlink);
    };
    BaseRef.prototype.removeDownlink = function (downlink) {
        var i = this._downlinks.indexOf(downlink);
        if (i >= 0) {
            this._downlinks.splice(i, 1);
            if (this._downlinks.length === 0) {
                this.close();
            }
        }
    };
    BaseRef.prototype.open = function () {
        this._context.openRef(this);
    };
    BaseRef.prototype.close = function () {
        this._context.closeRef(this);
    };
    BaseRef.prototype.closeUp = function () {
        var downlinks = this._downlinks;
        this._downlinks = [];
        for (var i = 0, n = downlinks.length; i < n; i += 1) {
            downlinks[i].close();
        }
    };
    BaseRef.prototype.observe = function (observer) {
        var oldObservers = this._observers;
        var n = oldObservers ? oldObservers.length : 0;
        var newObservers = new Array(n + 1);
        for (var i = 0; i < n; i += 1) {
            newObservers[i] = oldObservers[i];
        }
        newObservers[n] = observer;
        this._observers = newObservers;
        return this;
    };
    BaseRef.prototype.unobserve = function (observer) {
        var oldObservers = this._observers;
        var n = oldObservers ? oldObservers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var oldObserver = oldObservers[i];
            var found = oldObserver === observer;
            if (!found) {
                for (var key in oldObserver) {
                    if (oldObserver[key] === observer) {
                        found = true;
                        break;
                    }
                }
            }
            if (found) {
                if (n > 1) {
                    var newObservers = new Array(n - 1);
                    for (var j = 0; j < i; j += 1) {
                        newObservers[j] = oldObservers[j];
                    }
                    for (var j = i + 1; j < n; j += 1) {
                        newObservers[j - 1] = oldObservers[j];
                    }
                    this._observers = newObservers;
                }
                else {
                    this._observers = null;
                }
                break;
            }
        }
        return this;
    };
    BaseRef.prototype.didConnect = function (didConnect) {
        return this.observe({ didConnect: didConnect });
    };
    BaseRef.prototype.didAuthenticate = function (didAuthenticate) {
        return this.observe({ didAuthenticate: didAuthenticate });
    };
    BaseRef.prototype.didDeauthenticate = function (didDeauthenticate) {
        return this.observe({ didDeauthenticate: didDeauthenticate });
    };
    BaseRef.prototype.didDisconnect = function (didDisconnect) {
        return this.observe({ didDisconnect: didDisconnect });
    };
    BaseRef.prototype.didFail = function (didFail) {
        return this.observe({ didFail: didFail });
    };
    BaseRef.prototype.hostDidConnect = function (host) {
        this._host = host;
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didConnect) {
                observer.didConnect(host, this);
            }
        }
    };
    BaseRef.prototype.hostDidAuthenticate = function (body, host) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didAuthenticate) {
                observer.didAuthenticate(body, host, this);
            }
        }
    };
    BaseRef.prototype.hostDidDeauthenticate = function (body, host) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didDeauthenticate) {
                observer.didDeauthenticate(body, host, this);
            }
        }
    };
    BaseRef.prototype.hostDidDisconnect = function (host) {
        this._host = void 0;
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didDisconnect) {
                observer.didDisconnect(host, this);
            }
        }
    };
    BaseRef.prototype.hostDidFail = function (error, host) {
        var observers = this._observers;
        var n = observers ? observers.length : 0;
        for (var i = 0; i < n; i += 1) {
            var observer = observers[i];
            if (observer.didFail) {
                observer.didFail(error, host, this);
            }
        }
    };
    return BaseRef;
}());
export { BaseRef };
//# sourceMappingURL=BaseRef.js.map