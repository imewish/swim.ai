import { Tag } from "./Tag";
import { Output } from "./Output";
import { Unicode } from "./Unicode";
var Format = (function () {
    function Format() {
    }
    Format.display = function (object, output) {
        var notOutput = !(output instanceof Output);
        if (object === void 0) {
            if (output === void 0) {
                return "undefined";
            }
            else {
                if (!(output instanceof Output)) {
                    output = Unicode.stringOutput(output);
                }
                output = output.write("undefined");
            }
        }
        else if (object === null) {
            if (output === void 0) {
                return "null";
            }
            else {
                if (!(output instanceof Output)) {
                    output = Unicode.stringOutput(output);
                }
                output = output.write("null");
            }
        }
        else if (typeof object === "number") {
            if (output === void 0) {
                return "" + object;
            }
            else {
                if (!(output instanceof Output)) {
                    output = Unicode.stringOutput(output);
                }
                Format.displayNumber(object, output);
            }
        }
        else if (typeof object === "string") {
            if (output === void 0) {
                return object;
            }
            else {
                if (!(output instanceof Output)) {
                    output = Unicode.stringOutput(output);
                }
                output = output.write(object);
            }
        }
        else if (object && typeof object.display === "function") {
            if (!(output instanceof Output)) {
                output = Unicode.stringOutput(output);
            }
            object.display(output);
        }
        else {
            if (output === void 0) {
                return "" + object;
            }
            else {
                if (!(output instanceof Output)) {
                    output = Unicode.stringOutput(output);
                }
                output = output.write("" + object);
            }
        }
        if (notOutput) {
            return output.toString();
        }
    };
    Format.debug = function (object, output) {
        var notOutput = !(output instanceof Output);
        if (object === void 0) {
            if (output === void 0) {
                return "undefined";
            }
            else {
                if (!(output instanceof Output)) {
                    output = Unicode.stringOutput(output);
                }
                output = output.write("undefined");
            }
        }
        else if (object === null) {
            if (output === void 0) {
                return "null";
            }
            else {
                if (!(output instanceof Output)) {
                    output = Unicode.stringOutput(output);
                }
                output = output.write("null");
            }
        }
        else if (typeof object === "number") {
            if (output === void 0) {
                return "" + object;
            }
            else {
                if (!(output instanceof Output)) {
                    output = Unicode.stringOutput(output);
                }
                Format.debugNumber(object, output);
            }
        }
        else if (typeof object === "string") {
            if (!(output instanceof Output)) {
                output = Unicode.stringOutput(output);
            }
            Format.debugString(object, output);
        }
        else if (typeof object.debug === "function") {
            if (!(output instanceof Output)) {
                output = Unicode.stringOutput(output);
            }
            object.debug(output);
        }
        else {
            if (output === void 0) {
                return "" + object;
            }
            else {
                if (!(output instanceof Output)) {
                    output = Unicode.stringOutput(output);
                }
                output = output.write("" + object);
            }
        }
        if (notOutput) {
            return output.toString();
        }
    };
    Format.displayNumber = function (value, output) {
        if (isFinite(value) && Math.floor(value) === value && Math.abs(value) < 2147483648) {
            if (value < 0) {
                output = output.write(45);
            }
            if (value > -10 && value < 10) {
                output = output.write(48 + Math.abs(value));
            }
            else {
                var digits = new Array(19);
                var x = value;
                var i = 18;
                while (x) {
                    digits[i] = Math.abs((x % 10) | 0);
                    x = (x / 10) | 0;
                    i -= 1;
                }
                i += 1;
                while (i < 19) {
                    output = output.write(48 + digits[i]);
                    i += 1;
                }
            }
        }
        else {
            output = output.write("" + value);
        }
    };
    Format.debugNumber = function (value, output) {
        Format.displayNumber(value, output);
    };
    Format.debugChar = function (character, output) {
        output = output.write(39);
        switch (character) {
            case 8:
                output.write(92).write(98);
                break;
            case 9:
                output.write(92).write(116);
                break;
            case 10:
                output.write(92).write(110);
                break;
            case 12:
                output.write(92).write(102);
                break;
            case 13:
                output.write(92).write(114);
                break;
            case 34:
                output.write(92).write(34);
                break;
            case 39:
                output.write(92).write(39);
                break;
            case 92:
                output.write(92).write(92);
                break;
            default:
                if (character >= 0x0000 && character <= 0x001f
                    || character >= 0x007f && character <= 0x009f) {
                    output = output.write(92).write(117)
                        .write(Format.encodeHex(character >>> 12 & 0xf))
                        .write(Format.encodeHex(character >>> 8 & 0xf))
                        .write(Format.encodeHex(character >>> 4 & 0xf))
                        .write(Format.encodeHex(character & 0xf));
                }
                else {
                    output = output.write(character);
                }
        }
        output = output.write(39);
    };
    Format.debugString = function (string, output) {
        output = output.write(34);
        var input = Unicode.stringInput(string);
        while (input.isCont()) {
            var c = input.head();
            switch (c) {
                case 8:
                    output.write(92).write(98);
                    break;
                case 9:
                    output.write(92).write(116);
                    break;
                case 10:
                    output.write(92).write(110);
                    break;
                case 12:
                    output.write(92).write(102);
                    break;
                case 13:
                    output.write(92).write(114);
                    break;
                case 34:
                    output.write(92).write(34);
                    break;
                case 92:
                    output.write(92).write(92);
                    break;
                default:
                    if (c >= 0x0000 && c <= 0x001f || c >= 0x007f && c <= 0x009f) {
                        output = output.write(92).write(117)
                            .write(Format.encodeHex(c >>> 12 & 0xf))
                            .write(Format.encodeHex(c >>> 8 & 0xf))
                            .write(Format.encodeHex(c >>> 4 & 0xf))
                            .write(Format.encodeHex(c & 0xf));
                    }
                    else {
                        output = output.write(c);
                    }
            }
            input = input.step();
        }
        output = output.write(34);
    };
    Format.encodeHex = function (x) {
        if (x < 10) {
            return 48 + x;
        }
        else {
            return 65 + (x - 10);
        }
    };
    Format.lineSeparator = function () {
        if (!Format._lineSeparator) {
            if (typeof require === "function") {
                var os = require("os");
                if (os) {
                    Format._lineSeparator = os.EOL;
                }
            }
            if (!Format._lineSeparator) {
                Format._lineSeparator = "\n";
            }
        }
        return Format._lineSeparator;
    };
    Format.prefix = function (value, precision) {
        if (precision === void 0) { precision = 1; }
        if (isFinite(value)) {
            var exponential = Math.abs(value).toExponential();
            var exponentIndex = exponential.indexOf("e");
            var exponent = exponentIndex >= 0 ? +exponential.slice(exponentIndex + 1) : NaN;
            var power = Math.min(Math.max(-8, Math.floor(exponent / 3)), 8) * 3;
            var scaled = Math.pow(10, -power) * value;
            var s = Format.trimTrailingZeros(Math.abs(scaled).toFixed(precision));
            if (scaled < 0 && +s !== 0) {
                s = "-" + s;
            }
            s += Format.Prefixes[8 + power / 3];
            return s;
        }
        else {
            return "" + value;
        }
    };
    Format.trimTrailingZeros = function (s) {
        var i0 = -1;
        var i1;
        for (var i = 1, n = s.length; i < n; i += 1) {
            var c = s.charCodeAt(i);
            if (c === 46) {
                i0 = i;
                i1 = i;
            }
            else if (c === 48) {
                if (i0 === 0) {
                    i0 = i;
                }
                i1 = i;
            }
            else if (c >= 49 && c <= 57) {
                if (i0 > 0) {
                    i0 = 0;
                }
            }
            else if (i0 > 0) {
                break;
            }
        }
        if (i0 > 0) {
            s = s.slice(0, i0) + s.slice(i1 + 1);
        }
        return s;
    };
    Format.duration = function (millis, separator) {
        if (separator === void 0) { separator = " "; }
        if (isFinite(millis)) {
            var SECOND = 1000;
            var MINUTE = 60 * SECOND;
            var HOUR = 60 * MINUTE;
            var DAY = 24 * HOUR;
            var WEEK = 7 * DAY;
            var weeks = void 0;
            if (millis > WEEK) {
                weeks = Math.floor(millis / WEEK);
                millis %= WEEK;
            }
            var days = void 0;
            if (millis > DAY) {
                days = Math.floor(millis / DAY);
                millis %= DAY;
            }
            var hours = void 0;
            if (millis > HOUR) {
                hours = Math.floor(millis / HOUR);
                millis %= HOUR;
            }
            var minutes = void 0;
            if (millis > MINUTE) {
                minutes = Math.floor(millis / MINUTE);
                millis %= MINUTE;
            }
            var seconds = void 0;
            if (millis > SECOND) {
                seconds = Math.floor(millis / SECOND);
                millis %= SECOND;
            }
            var s = "";
            if (weeks !== void 0) {
                s += weeks + "w";
            }
            if (days !== void 0) {
                s += (s ? separator : "") + days + "d";
            }
            if (hours !== void 0) {
                s += (s ? separator : "") + hours + "h";
            }
            if (minutes !== void 0) {
                s += (s ? separator : "") + minutes + "m";
            }
            if (seconds !== void 0 || !millis) {
                s += (s ? separator : "") + (seconds || 0) + "s";
            }
            if (millis && !s) {
                s += millis + "ms";
            }
            return s;
        }
        else {
            return "" + millis;
        }
    };
    Format.Prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", " Z", "Y"];
    return Format;
}());
export { Format };
Tag.Format = Format;
//# sourceMappingURL=Format.js.map