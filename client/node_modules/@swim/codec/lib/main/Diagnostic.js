import { Objects, Severity } from "@swim/util";
import { OutputStyle } from "./OutputStyle";
import { Format } from "./Format";
import { Unicode } from "./Unicode";
import { Base10 } from "./Base10";
var Diagnostic = (function () {
    function Diagnostic(input, tag, severity, message, note, cause) {
        this._input = input;
        this._tag = tag;
        this._severity = severity;
        this._message = message;
        this._note = note;
        this._cause = cause;
    }
    Diagnostic.prototype.input = function () {
        return this._input.clone();
    };
    Diagnostic.prototype.tag = function () {
        return this._tag;
    };
    Diagnostic.prototype.severity = function () {
        return this._severity;
    };
    Diagnostic.prototype.message = function () {
        return this._message;
    };
    Diagnostic.prototype.note = function () {
        return this._note;
    };
    Diagnostic.prototype.cause = function () {
        return this._cause;
    };
    Diagnostic.prototype.lineDigits = function () {
        var digits = Base10.countDigits(this._tag.end().line());
        if (this._cause !== null) {
            digits = Math.max(digits, this._cause.lineDigits());
        }
        return digits;
    };
    Diagnostic.prototype.display = function (output) {
        var input = this._input.clone();
        var start = this._tag.start();
        var end = this._tag.end();
        var severity = this._severity;
        var message = this._message;
        var note = this._note;
        var cause = this._cause;
        var contextLines = 2;
        var lineDigits = this.lineDigits();
        Diagnostic.displayDiagnostic(input, start, end, severity, message, note, cause, contextLines, lineDigits, output);
    };
    Diagnostic.prototype.toString = function (settings) {
        return Format.display(this, settings);
    };
    Diagnostic.from = function (input, tag, severity, message, note, cause) {
        if (message instanceof Diagnostic) {
            cause = message;
            note = null;
            message = null;
        }
        else if (note instanceof Diagnostic) {
            cause = note;
            note = null;
        }
        input = input.clone();
        if (message === void 0) {
            message = null;
        }
        if (note === void 0) {
            note = null;
        }
        if (cause === void 0) {
            cause = null;
        }
        return new Diagnostic(input, tag, severity, message, note, cause);
    };
    Diagnostic.message = function (message, input, severity, note, cause) {
        if (severity === null || severity instanceof Diagnostic) {
            cause = severity;
            severity = void 0;
        }
        else if (typeof severity === "string") {
            note = severity;
            severity = void 0;
        }
        if (note === null || note instanceof Diagnostic) {
            cause = note;
            note = void 0;
        }
        if (note === void 0) {
            note = null;
        }
        if (severity === void 0) {
            severity = Severity.error();
        }
        var mark = input.mark();
        var source = input.clone();
        source.seek();
        return Diagnostic.from(source, mark, severity, message, note, cause);
    };
    Diagnostic.unexpected = function (input, severity, note, cause) {
        if (severity === null || severity instanceof Diagnostic) {
            cause = severity;
            severity = void 0;
        }
        else if (typeof severity === "string") {
            note = severity;
            severity = void 0;
        }
        if (note === null || note instanceof Diagnostic) {
            cause = note;
            note = void 0;
        }
        if (note === void 0) {
            note = null;
        }
        if (severity === void 0) {
            severity = Severity.error();
        }
        var message;
        if (input.isCont()) {
            var output = Unicode.stringOutput().write("unexpected").write(32);
            Format.debugChar(input.head(), output);
            message = output.bind();
        }
        else {
            message = "unexpected end of input";
        }
        var mark = input.mark();
        var source = input.clone();
        source.seek();
        return Diagnostic.from(source, mark, severity, message, note, cause);
    };
    Diagnostic.expected = function (expected, input, severity, note, cause) {
        if (severity === null || severity instanceof Diagnostic) {
            cause = severity;
            severity = void 0;
        }
        else if (typeof severity === "string") {
            note = severity;
            severity = void 0;
        }
        if (note === null || note instanceof Diagnostic) {
            cause = note;
            note = void 0;
        }
        if (note === void 0) {
            note = null;
        }
        if (severity === void 0) {
            severity = Severity.error();
        }
        var output = Unicode.stringOutput().write("expected").write(32);
        if (typeof expected === "number") {
            Format.debugChar(expected, output);
        }
        else {
            output = output.write(expected);
        }
        output = output.write(44).write(32).write("but found").write(32);
        if (input.isCont()) {
            Format.debugChar(input.head(), output);
        }
        else {
            output = output.write("end of input");
        }
        var message = output.bind();
        var mark = input.mark();
        var source = input.clone();
        source.seek();
        return Diagnostic.from(source, mark, severity, message, note, cause);
    };
    Diagnostic.displayDiagnostic = function (input, start, end, severity, message, note, cause, contextLines, lineDigits, output) {
        do {
            if (message !== null) {
                Diagnostic.displayMessage(severity, message, output);
                output = output.writeln();
            }
            Diagnostic.displayAnchor(input, start, lineDigits, output);
            output = output.writeln();
            var next = Diagnostic.displayContext(input, start, end, severity, note, cause, contextLines, lineDigits, output);
            if (next !== null) {
                output = output.writeln();
                input = next._input.clone();
                start = next._tag.start();
                end = next._tag.end();
                severity = next._severity;
                message = next._message;
                note = next._note;
                cause = next._cause;
            }
            else {
                break;
            }
        } while (true);
    };
    Diagnostic.displayMessage = function (severity, message, output) {
        Diagnostic.formatSeverity(severity, output);
        output = output.write(severity.label());
        OutputStyle.reset(output);
        OutputStyle.bold(output);
        output = output.write(58);
        if (message !== null) {
            output = output.write(32).write(message);
        }
        OutputStyle.reset(output);
    };
    Diagnostic.displayAnchor = function (input, start, lineDigits, output) {
        Diagnostic.displayLineLeadArrow(lineDigits, output);
        output = output.write(32);
        var id = input.id();
        if (id !== null) {
            Format.display(id, output);
        }
        output = output.write(58);
        Format.displayNumber(start._line, output);
        output = output.write(58);
        Format.displayNumber(start._column, output);
        output = output.writeln();
        Diagnostic.displayLineLead(lineDigits, output);
    };
    Diagnostic.displayCause = function (cause, contextLines, lineDigits, output) {
        var input = cause._input.clone();
        var start = cause._tag.start();
        var end = cause._tag.end();
        var severity = cause._severity;
        var note = cause._note;
        var next = cause._cause;
        return Diagnostic.displayContext(input, start, end, severity, note, next, contextLines, lineDigits, output);
    };
    Diagnostic.displayContext = function (input, start, end, severity, note, cause, contextLines, lineDigits, output) {
        var next = cause;
        var sameCause = cause !== null && cause._message === null
            && Objects.equal(input.id(), cause._input.id());
        var causeOrder = sameCause ? (start._offset <= cause._tag.start()._offset ? -1 : 1) : 0;
        if (causeOrder === 1) {
            next = Diagnostic.displayCause(cause, contextLines, lineDigits, output);
            output = output.writeln();
            Diagnostic.displayLineLeadEllipsis(lineDigits, output);
            output = output.writeln();
        }
        Diagnostic.displayLines(input, start, end, severity, contextLines, lineDigits, output);
        if (note !== null) {
            Diagnostic.displayNote(note, lineDigits, output);
        }
        if (causeOrder === -1) {
            output = output.writeln();
            Diagnostic.displayLineLeadEllipsis(lineDigits, output);
            output = output.writeln();
            next = Diagnostic.displayCause(cause, contextLines, lineDigits, output);
        }
        return next;
    };
    Diagnostic.displayLines = function (input, start, end, severity, contextLines, lineDigits, output) {
        var startLine = start.line();
        var endLine = end.line();
        var line = input.line();
        while (line < startLine) {
            Diagnostic.consumeLineText(input, line);
            line += 1;
        }
        if (endLine - startLine > 2 * contextLines + 2) {
            while (line <= startLine + contextLines) {
                Diagnostic.displayLine(input, start, end, severity, line, lineDigits, output);
                line += 1;
            }
            Diagnostic.displayLineLeadEllipsis(lineDigits, output);
            output = output.write(32);
            Diagnostic.formatSeverity(severity, output);
            output = output.write(124);
            OutputStyle.reset(output);
            output = output.writeln();
            while (line < endLine - contextLines) {
                Diagnostic.consumeLineText(input, line);
                line += 1;
            }
        }
        while (line <= endLine) {
            Diagnostic.displayLine(input, start, end, severity, line, lineDigits, output);
            line += 1;
        }
    };
    Diagnostic.displayNote = function (note, lineDigits, output) {
        output = output.writeln();
        Diagnostic.displayLineLead(lineDigits, output);
        output = output.writeln();
        Diagnostic.displayLineComment('note', note, lineDigits, output);
    };
    Diagnostic.displayLine = function (input, start, end, severity, line, lineDigits, output) {
        if (start._line === line && end._line === line) {
            Diagnostic.displaySingleLine(input, start, end, severity, line, lineDigits, output);
        }
        else if (start._line === line) {
            Diagnostic.displayStartLine(input, start, severity, line, lineDigits, output);
        }
        else if (end._line === line) {
            Diagnostic.displayEndLine(input, end, severity, line, lineDigits, output);
        }
        else {
            Diagnostic.displayMidLine(input, severity, line, lineDigits, output);
        }
    };
    Diagnostic.displaySingleLine = function (input, start, end, severity, line, lineDigits, output) {
        Diagnostic.displayLineLeadNumber(line, lineDigits, output);
        output = output.write(32);
        for (var i_1 = 1; i_1 < input.column(); i_1 += 1) {
            output = output.write(32);
        }
        Diagnostic.displayLineText(input, line, output);
        Diagnostic.displayLineLead(lineDigits, output);
        output = output.write(32);
        var i = 1;
        while (i < start._column) {
            output = output.write(32);
            i += 1;
        }
        Diagnostic.formatSeverity(severity, output);
        while (i <= end._column) {
            output = output.write(94);
            i += 1;
        }
        if (end._note !== null) {
            output = output.write(32).write(end._note);
        }
        OutputStyle.reset(output);
    };
    Diagnostic.displayStartLine = function (input, start, severity, line, lineDigits, output) {
        Diagnostic.displayLineLeadNumber(line, lineDigits, output);
        output = output.write(32).write(32).write(32);
        for (var i_2 = 1; i_2 < input.column(); i_2 += 1) {
            output = output.write(32);
        }
        Diagnostic.displayLineText(input, line, output);
        Diagnostic.displayLineLead(lineDigits, output);
        output = output.write(32).write(32);
        Diagnostic.formatSeverity(severity, output);
        output = output.write(95);
        var i = 1;
        while (i < start._column) {
            output = output.write(95);
            i += 1;
        }
        output = output.write(94);
        if (start._note !== null) {
            output = output.write(32).write(start._note);
        }
        OutputStyle.reset(output);
        output = output.writeln();
    };
    Diagnostic.displayEndLine = function (input, end, severity, line, lineDigits, output) {
        Diagnostic.displayLineLeadNumber(line, lineDigits, output);
        output = output.write(32);
        Diagnostic.formatSeverity(severity, output);
        output = output.write(124);
        OutputStyle.reset(output);
        output = output.write(32);
        Diagnostic.displayLineText(input, line, output);
        Diagnostic.displayLineLead(lineDigits, output);
        output = output.write(32);
        Diagnostic.formatSeverity(severity, output);
        output = output.write(124).write(95);
        var i = 1;
        while (i < end._column) {
            output = output.write(95);
            i += 1;
        }
        output = output.write(94);
        if (end._note !== null) {
            output = output.write(32).write(end._note);
        }
        OutputStyle.reset(output);
    };
    Diagnostic.displayMidLine = function (input, severity, line, lineDigits, output) {
        Diagnostic.displayLineLeadNumber(line, lineDigits, output);
        output = output.write(32);
        Diagnostic.formatSeverity(severity, output);
        output = output.write(124);
        OutputStyle.reset(output);
        output = output.write(32);
        Diagnostic.displayLineText(input, line, output);
    };
    Diagnostic.displayLineComment = function (label, comment, lineDigits, output) {
        Diagnostic.displayLineLeadComment(lineDigits, output);
        output = output.write(32);
        OutputStyle.bold(output);
        output = output.write(label).write(58);
        OutputStyle.reset(output);
        if (comment != null) {
            output = output.write(32).write(comment);
        }
    };
    Diagnostic.displayLineLead = function (lineDigits, output) {
        OutputStyle.blueBold(output);
        var padding = 1 + lineDigits;
        for (var i = 0; i < padding; i += 1) {
            output = output.write(32);
        }
        output = output.write(124);
        OutputStyle.reset(output);
    };
    Diagnostic.displayLineLeadComment = function (lineDigits, output) {
        OutputStyle.blueBold(output);
        var padding = 1 + lineDigits;
        for (var i = 0; i < padding; i += 1) {
            output = output.write(32);
        }
        output = output.write(61);
        OutputStyle.reset(output);
    };
    Diagnostic.displayLineLeadArrow = function (lineDigits, output) {
        for (var i = 0; i < lineDigits; i += 1) {
            output = output.write(32);
        }
        OutputStyle.blueBold(output);
        output = output.write(45).write(45).write(62);
        OutputStyle.reset(output);
    };
    Diagnostic.displayLineLeadEllipsis = function (lineDigits, output) {
        OutputStyle.blueBold(output);
        for (var i = 0; i < lineDigits; i += 1) {
            output = output.write(46);
        }
        OutputStyle.reset(output);
        output = output.write(32).write(32);
    };
    Diagnostic.displayLineLeadNumber = function (line, lineDigits, output) {
        var padding = lineDigits - Base10.countDigits(line);
        for (var i = 0; i < padding; i += 1) {
            output = output.write(32);
        }
        OutputStyle.blueBold(output);
        Format.displayNumber(line, output);
        output = output.write(32).write(124);
        OutputStyle.reset(output);
    };
    Diagnostic.displayLineText = function (input, line, output) {
        while (input.isCont() && input.line() === line) {
            output = output.write(input.head());
            input = input.step();
        }
        if (input.line() === line) {
            output = output.writeln();
        }
    };
    Diagnostic.consumeLineText = function (input, line) {
        while (input.isCont() && input.line() === line) {
            input = input.step();
        }
    };
    Diagnostic.formatSeverity = function (severity, output) {
        switch (severity.level()) {
            case Severity.FATAL_LEVEL:
            case Severity.ALERT_LEVEL:
            case Severity.ERROR_LEVEL:
                OutputStyle.redBold(output);
                break;
            case Severity.WARNING_LEVEL:
                OutputStyle.yellowBold(output);
                break;
            case Severity.NOTE_LEVEL:
                OutputStyle.greenBold(output);
                break;
            case Severity.INFO_LEVEL:
                OutputStyle.cyanBold(output);
                break;
            case Severity.DEBUG_LEVEL:
            case Severity.TRACE_LEVEL:
            default:
                OutputStyle.magentaBold(output);
        }
    };
    return Diagnostic;
}());
export { Diagnostic };
//# sourceMappingURL=Diagnostic.js.map