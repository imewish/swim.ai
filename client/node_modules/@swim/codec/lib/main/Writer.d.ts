import { Output } from "./Output";
export declare abstract class Writer<I = unknown, O = unknown> {
    isCont(): boolean;
    isDone(): boolean;
    isError(): boolean;
    feed(input: I): Writer<I, O>;
    abstract pull(output: Output): Writer<I, O>;
    fork(condition: unknown): Writer<I, O>;
    bind(): O;
    trap(): Error;
    asDone<I2>(): Writer<I2, O>;
    asError<I2, O2>(): Writer<I2, O2>;
    andThen<O2>(that: Writer<I, O2>): Writer<I, O2>;
    private static _done?;
    static done<I, O>(): Writer<I, O>;
    static done<I, O>(output: O): Writer<I, O>;
    static error<I, O>(error: Error): Writer<I, O>;
}
//# sourceMappingURL=Writer.d.ts.map