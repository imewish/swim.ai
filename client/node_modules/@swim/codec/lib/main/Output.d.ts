import { Builder } from "@swim/util";
import { AnyOutputSettings, OutputSettings } from "./OutputSettings";
export declare abstract class Output<T = unknown> implements Builder<number, T> {
    abstract isCont(): boolean;
    abstract isFull(): boolean;
    abstract isDone(): boolean;
    abstract isError(): boolean;
    abstract isPart(): boolean;
    abstract isPart(isPart: boolean): Output<T>;
    abstract write(token: number): Output<T>;
    abstract write(string: string): Output<T>;
    writeln(string?: string): Output<T>;
    display(object: unknown): Output<T>;
    debug(object: unknown): Output<T>;
    flush(): Output<T>;
    push(...tokens: number[]): void;
    abstract settings(): OutputSettings;
    abstract settings(settings: AnyOutputSettings): Output<T>;
    abstract bind(): T;
    trap(): Error;
    clone(): Output<T>;
    private static _full;
    private static _done;
    static full<T>(value?: T | null, settings?: OutputSettings): Output<T>;
    static done<T>(value?: T | null, settings?: OutputSettings): Output<T>;
    static error<T>(error: Error, settings?: OutputSettings): Output<T>;
}
//# sourceMappingURL=Output.d.ts.map