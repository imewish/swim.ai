import { __extends } from "tslib";
import { Parser } from "./Parser";
import { Diagnostic } from "./Diagnostic";
import { Unicode } from "./Unicode";
import { Base10 } from "./Base10";
var Base10NumberParser = (function (_super) {
    __extends(Base10NumberParser, _super);
    function Base10NumberParser(sign, value, mode, step) {
        var _this = _super.call(this) || this;
        _this._sign = sign;
        _this._value = value;
        _this._mode = mode;
        _this._step = step;
        return _this;
    }
    Base10NumberParser.prototype.feed = function (input) {
        return Base10NumberParser.parse(input, this._sign, this._value, this._mode, this._step);
    };
    Base10NumberParser.parse = function (input, sign, value, mode, step) {
        if (sign === void 0) { sign = 1; }
        if (value === void 0) { value = 0; }
        if (mode === void 0) { mode = 2; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (input.isCont()) {
                c = input.head();
                if (c === 45) {
                    input = input.step();
                    sign = -1;
                }
                step = 2;
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.expected("number", input));
            }
        }
        if (step === 2) {
            if (input.isCont()) {
                c = input.head();
                if (c === 48) {
                    input = input.step();
                    step = 4;
                }
                else if (c >= 49 && c <= 57) {
                    input = input.step();
                    value = sign * (c - 48);
                    step = 3;
                }
                else if (mode > 0 && c === 46) {
                    var output = Unicode.stringOutput();
                    if (sign < 0) {
                        output = output.write(45);
                    }
                    return Base10DecimalParser.parse(input, output, mode);
                }
                else {
                    return Parser.error(Diagnostic.expected("number", input));
                }
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.expected("number", input));
            }
        }
        if (step === 3) {
            while (input.isCont()) {
                c = input.head();
                if (c >= 48 && c <= 57) {
                    var newValue = 10 * value + sign * (c - 48);
                    if (-9007199254740991 <= newValue && newValue <= 9007199254740992) {
                        value = newValue;
                        input = input.step();
                    }
                    else {
                        return Parser.error(Diagnostic.message("integer overflow", input));
                    }
                }
                else {
                    break;
                }
            }
            if (input.isCont()) {
                step = 4;
            }
            else if (input.isDone()) {
                return Parser.done(value);
            }
        }
        if (step === 4) {
            if (input.isCont()) {
                c = input.head();
                if (mode > 0 && c === 46 || mode > 1 && (c === 69 || c === 101)) {
                    var output = Unicode.stringOutput();
                    if (sign < 0 && value === 0) {
                        output = output.write(45).write(48);
                    }
                    else {
                        output = output.write("" + value);
                    }
                    return Base10DecimalParser.parse(input, output, mode);
                }
                else {
                    return Parser.done(value);
                }
            }
            else if (input.isDone()) {
                return Parser.done(value);
            }
        }
        return new Base10NumberParser(sign, value, mode, step);
    };
    return Base10NumberParser;
}(Parser));
export { Base10NumberParser };
Base10.NumberParser = Base10NumberParser;
var Base10DecimalParser = (function (_super) {
    __extends(Base10DecimalParser, _super);
    function Base10DecimalParser(output, mode, step) {
        var _this = _super.call(this) || this;
        _this._output = output;
        _this._mode = mode;
        _this._step = step;
        return _this;
    }
    Base10DecimalParser.prototype.feed = function (input) {
        return Base10DecimalParser.parse(input, this._output, this._mode, this._step);
    };
    Base10DecimalParser.parse = function (input, output, mode, step) {
        if (mode === void 0) { mode = 2; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (input.isCont()) {
                c = input.head();
                if (c === 46) {
                    input = input.step();
                    output = output.write(c);
                    step = 2;
                }
                else if (mode > 1 && (c === 69 || c === 101)) {
                    input = input.step();
                    output = output.write(c);
                    step = 5;
                }
                else {
                    return Parser.error(Diagnostic.expected("decimal or exponent", input));
                }
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.expected("decimal or exponent", input));
            }
        }
        if (step === 2) {
            if (input.isCont()) {
                c = input.head();
                if (c >= 48 && c <= 57) {
                    input = input.step();
                    output = output.write(c);
                    step = 3;
                }
                else {
                    return Parser.error(Diagnostic.expected("digit", input));
                }
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.expected("digit", input));
            }
        }
        if (step === 3) {
            while (input.isCont()) {
                c = input.head();
                if (c >= 48 && c <= 57) {
                    input = input.step();
                    output = output.write(c);
                }
                else {
                    break;
                }
            }
            if (input.isCont()) {
                if (mode > 1) {
                    step = 4;
                }
                else {
                    return Parser.done(+output.bind());
                }
            }
            else if (input.isDone()) {
                return Parser.done(+output.bind());
            }
        }
        if (step === 4) {
            c = input.head();
            if (c === 69 || c === 101) {
                input = input.step();
                output = output.write(c);
                step = 5;
            }
            else {
                return Parser.done(+output.bind());
            }
        }
        if (step === 5) {
            if (input.isCont()) {
                c = input.head();
                if (c === 43 || c === 45) {
                    input = input.step();
                    output = output.write(c);
                }
                step = 6;
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.unexpected(input));
            }
        }
        if (step === 6) {
            if (input.isCont()) {
                c = input.head();
                if (c >= 48 && c <= 57) {
                    input = input.step();
                    output = output.write(c);
                    step = 7;
                }
                else {
                    return Parser.error(Diagnostic.expected("digit", input));
                }
            }
            else if (input.isDone()) {
                return Parser.error(Diagnostic.expected("digit", input));
            }
        }
        if (step === 7) {
            while (input.isCont()) {
                c = input.head();
                if (c >= 48 && c <= 57) {
                    input = input.step();
                    output = output.write(c);
                }
                else {
                    break;
                }
            }
            if (!input.isEmpty()) {
                return Parser.done(+output.bind());
            }
        }
        return new Base10DecimalParser(output, mode, step);
    };
    return Base10DecimalParser;
}(Parser));
//# sourceMappingURL=Base10NumberParser.js.map