import { __extends } from "tslib";
import { OutputSettings } from "./OutputSettings";
import { Output } from "./Output";
var ByteOutput = (function (_super) {
    __extends(ByteOutput, _super);
    function ByteOutput(array, size, settings) {
        var _this = _super.call(this) || this;
        _this._array = array;
        _this._size = size;
        _this._settings = settings;
        return _this;
    }
    ByteOutput.prototype.isCont = function () {
        return true;
    };
    ByteOutput.prototype.isFull = function () {
        return false;
    };
    ByteOutput.prototype.isDone = function () {
        return false;
    };
    ByteOutput.prototype.isError = function () {
        return false;
    };
    ByteOutput.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return false;
        }
        else {
            return this;
        }
    };
    ByteOutput.prototype.write = function (b) {
        if (typeof b === "number") {
            var n = this._size;
            var oldArray = this._array;
            var newArray = void 0;
            if (oldArray === null || n + 1 > oldArray.length) {
                newArray = new Uint8Array(ByteOutput.expand(n + 1));
                if (oldArray !== null) {
                    newArray.set(oldArray, 0);
                }
                this._array = newArray;
            }
            else {
                newArray = oldArray;
            }
            newArray[n] = b;
            this._size = n + 1;
            return this;
        }
        else {
            throw new TypeError("" + b);
        }
    };
    ByteOutput.prototype.writeln = function (string) {
        throw new TypeError("" + string);
    };
    ByteOutput.prototype.toUint8Array = function () {
        var n = this._size;
        var oldArray = this._array;
        if (oldArray !== null && n === oldArray.length) {
            return oldArray;
        }
        else {
            var newArray = new Uint8Array(n);
            if (oldArray !== null) {
                newArray.set(oldArray.slice(0, n), 0);
            }
            this._array = newArray;
            return newArray;
        }
    };
    ByteOutput.prototype.cloneArray = function () {
        var oldArray = this._array;
        if (oldArray !== null) {
            return oldArray.slice(0, this._size);
        }
        else {
            return null;
        }
    };
    ByteOutput.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            this._settings = OutputSettings.fromAny(settings);
            return this;
        }
    };
    ByteOutput.expand = function (n) {
        n = Math.max(32, n) - 1;
        n |= n >> 1;
        n |= n >> 2;
        n |= n >> 4;
        n |= n >> 8;
        n |= n >> 16;
        return n + 1;
    };
    return ByteOutput;
}(Output));
export { ByteOutput };
//# sourceMappingURL=ByteOutput.js.map