import { __extends } from "tslib";
import { Mark } from "./Mark";
import { InputException } from "./InputException";
import { InputSettings } from "./InputSettings";
import { Input } from "./Input";
var StringInput = (function (_super) {
    __extends(StringInput, _super);
    function StringInput(string, id, offset, line, column, settings, index, isPart) {
        if (id === void 0) { id = null; }
        if (offset === void 0) { offset = 0; }
        if (line === void 0) { line = 1; }
        if (column === void 0) { column = 1; }
        if (settings === void 0) { settings = InputSettings.standard(); }
        if (index === void 0) { index = 0; }
        if (isPart === void 0) { isPart = false; }
        var _this = _super.call(this) || this;
        _this._string = string;
        _this._id = id;
        _this._offset = offset;
        _this._line = line;
        _this._column = column;
        _this._settings = settings;
        _this._index = index;
        _this._isPart = isPart;
        return _this;
    }
    StringInput.prototype.isCont = function () {
        return this._index < this._string.length;
    };
    StringInput.prototype.isEmpty = function () {
        return this._isPart && this._index >= this._string.length;
    };
    StringInput.prototype.isDone = function () {
        return !this._isPart && this._index >= this._string.length;
    };
    StringInput.prototype.isError = function () {
        return false;
    };
    StringInput.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return this._isPart;
        }
        else {
            this._isPart = isPart;
            return this;
        }
    };
    StringInput.prototype.head = function () {
        if (this._index < this._string.length) {
            var c = this._string.codePointAt(this._index);
            if (c !== void 0) {
                return c;
            }
            else {
                return this._string.charCodeAt(this._index);
            }
        }
        throw new InputException();
    };
    StringInput.prototype.step = function () {
        var index = this._index;
        if (index < this._string.length) {
            var c = this._string.codePointAt(index);
            this._index = this._string.offsetByCodePoints(index, 1);
            this._offset += this._index - index;
            if (c === 10) {
                this._line += 1;
                this._column = 1;
            }
            else {
                this._column += 1;
            }
            return this;
        }
        else {
            var error = new InputException("invalid step");
            return Input.error(error, this._id, this.mark(), this._settings);
        }
    };
    StringInput.prototype.seek = function (mark) {
        if (mark !== void 0) {
            var index = this._index + (mark._offset - this._offset);
            if (0 <= index && index <= this._string.length) {
                this._offset = mark._offset;
                this._line = mark._line;
                this._column = mark._column;
                this._index = index;
                return this;
            }
            else {
                var error = new InputException("invalid seek to " + mark);
                return Input.error(error, this._id, this.mark(), this._settings);
            }
        }
        else {
            this._offset = 0;
            this._line = 1;
            this._column = 1;
            this._index = 0;
            return this;
        }
    };
    StringInput.prototype.id = function (id) {
        if (id === void 0) {
            return this._id;
        }
        else {
            this._id = id;
            return this;
        }
    };
    StringInput.prototype.mark = function (mark) {
        if (mark === void 0) {
            return Mark.at(this._offset, this._line, this._column);
        }
        else {
            this._offset = mark._offset;
            this._line = mark._line;
            this._column = mark._column;
            return this;
        }
    };
    StringInput.prototype.offset = function () {
        return this._offset;
    };
    StringInput.prototype.line = function () {
        return this._line;
    };
    StringInput.prototype.column = function () {
        return this._column;
    };
    StringInput.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            this._settings = InputSettings.fromAny(settings);
            return this;
        }
    };
    StringInput.prototype.clone = function () {
        return new StringInput(this._string, this._id, this._offset, this._line, this._column, this._settings, this._index, this._isPart);
    };
    return StringInput;
}(Input));
export { StringInput };
//# sourceMappingURL=StringInput.js.map