import { __extends } from "tslib";
import { Mark } from "./Mark";
import { InputException } from "./InputException";
import { InputSettings } from "./InputSettings";
var Input = (function () {
    function Input() {
    }
    Input.prototype.trap = function () {
        throw new InputException();
    };
    Input.prototype.offset = function () {
        return this.mark()._offset;
    };
    Input.prototype.line = function () {
        return this.mark()._line;
    };
    Input.prototype.column = function () {
        return this.mark()._column;
    };
    Input.empty = function (id, mark, settings) {
        if (id === void 0) { id = null; }
        if (mark === void 0) { mark = Mark.zero(); }
        if (settings === void 0) { settings = InputSettings.standard(); }
        if (id === null && mark === Mark.zero() && settings === InputSettings.standard()) {
            if (!Input._empty) {
                Input._empty = new InputEmpty(null, Mark.zero(), InputSettings.standard());
            }
            return Input._empty;
        }
        return new InputEmpty(id, mark, settings);
    };
    Input.done = function (id, mark, settings) {
        if (id === void 0) { id = null; }
        if (mark === void 0) { mark = Mark.zero(); }
        if (settings === void 0) { settings = InputSettings.standard(); }
        if (id === null && mark === Mark.zero() && settings === InputSettings.standard()) {
            if (!Input._done) {
                Input._done = new InputDone(null, Mark.zero(), InputSettings.standard());
            }
            return Input._done;
        }
        return new InputDone(id, mark, settings);
    };
    Input.error = function (error, id, mark, settings) {
        if (id === void 0) { id = null; }
        if (mark === void 0) { mark = Mark.zero(); }
        if (settings === void 0) { settings = InputSettings.standard(); }
        return new InputError(error, id, mark, settings);
    };
    return Input;
}());
export { Input };
var InputEmpty = (function (_super) {
    __extends(InputEmpty, _super);
    function InputEmpty(id, mark, settings) {
        var _this = _super.call(this) || this;
        _this._id = id;
        _this._mark = mark;
        _this._settings = settings;
        return _this;
    }
    InputEmpty.prototype.isCont = function () {
        return false;
    };
    InputEmpty.prototype.isEmpty = function () {
        return true;
    };
    InputEmpty.prototype.isDone = function () {
        return false;
    };
    InputEmpty.prototype.isError = function () {
        return false;
    };
    InputEmpty.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return true;
        }
        else if (isPart) {
            return this;
        }
        else {
            return Input.done(this._id, this._mark, this._settings);
        }
    };
    InputEmpty.prototype.head = function () {
        throw new InputException();
    };
    InputEmpty.prototype.step = function () {
        var error = new InputException("empty step");
        return Input.error(error, this._id, this._mark, this._settings);
    };
    InputEmpty.prototype.seek = function (mark) {
        var error = new InputException("empty seek");
        return Input.error(error, this._id, this._mark, this._settings);
    };
    InputEmpty.prototype.id = function (id) {
        if (id === void 0) {
            return this._id;
        }
        else {
            return Input.empty(id, this._mark, this._settings);
        }
    };
    InputEmpty.prototype.mark = function (mark) {
        if (mark === void 0) {
            return this._mark;
        }
        else {
            return Input.empty(this._id, mark, this._settings);
        }
    };
    InputEmpty.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            return Input.empty(this._id, this._mark, settings);
        }
    };
    InputEmpty.prototype.clone = function () {
        return this;
    };
    return InputEmpty;
}(Input));
var InputDone = (function (_super) {
    __extends(InputDone, _super);
    function InputDone(id, mark, settings) {
        var _this = _super.call(this) || this;
        _this._id = id;
        _this._mark = mark;
        _this._settings = settings;
        return _this;
    }
    InputDone.prototype.isCont = function () {
        return false;
    };
    InputDone.prototype.isEmpty = function () {
        return false;
    };
    InputDone.prototype.isDone = function () {
        return true;
    };
    InputDone.prototype.isError = function () {
        return false;
    };
    InputDone.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return false;
        }
        else if (isPart) {
            return Input.empty(this._id, this._mark, this._settings);
        }
        else {
            return this;
        }
    };
    InputDone.prototype.head = function () {
        throw new InputException();
    };
    InputDone.prototype.step = function () {
        var error = new InputException("done step");
        return Input.error(error, this._id, this._mark, this._settings);
    };
    InputDone.prototype.seek = function (mark) {
        var error = new InputException("empty seek");
        return Input.error(error, this._id, this._mark, this._settings);
    };
    InputDone.prototype.id = function (id) {
        if (id === void 0) {
            return this._id;
        }
        else {
            return Input.done(id, this._mark, this._settings);
        }
    };
    InputDone.prototype.mark = function (mark) {
        if (mark === void 0) {
            return this._mark;
        }
        else {
            return Input.done(this._id, mark, this._settings);
        }
    };
    InputDone.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            return Input.done(this._id, this._mark, settings);
        }
    };
    InputDone.prototype.clone = function () {
        return this;
    };
    return InputDone;
}(Input));
var InputError = (function (_super) {
    __extends(InputError, _super);
    function InputError(error, id, mark, settings) {
        var _this = _super.call(this) || this;
        _this._error = error;
        _this._id = id;
        _this._mark = mark;
        _this._settings = settings;
        return _this;
    }
    InputError.prototype.isCont = function () {
        return false;
    };
    InputError.prototype.isEmpty = function () {
        return false;
    };
    InputError.prototype.isDone = function () {
        return false;
    };
    InputError.prototype.isError = function () {
        return true;
    };
    InputError.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return false;
        }
        else {
            return this;
        }
    };
    InputError.prototype.head = function () {
        throw new InputException();
    };
    InputError.prototype.step = function () {
        var error = new InputException("error step");
        return Input.error(error, this._id, this._mark, this._settings);
    };
    InputError.prototype.trap = function () {
        return this._error;
    };
    InputError.prototype.seek = function (mark) {
        var error = new InputException("error seek");
        return Input.error(error, this._id, this._mark, this._settings);
    };
    InputError.prototype.id = function (id) {
        if (id === void 0) {
            return this._id;
        }
        else {
            return Input.error(this._error, id, this._mark, this._settings);
        }
    };
    InputError.prototype.mark = function (mark) {
        if (mark === void 0) {
            return this._mark;
        }
        else {
            return Input.error(this._error, this._id, mark, this._settings);
        }
    };
    InputError.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            return Input.error(this._error, this._id, this._mark, settings);
        }
    };
    InputError.prototype.clone = function () {
        return this;
    };
    return InputError;
}(Input));
//# sourceMappingURL=Input.js.map