import { UtfErrorMode } from "./UtfErrorMode";
import { AnyOutputSettings, OutputSettings } from "./OutputSettings";
import { Output } from "./Output";
export declare class Utf8DecodedOutput<T> extends Output<T> {
    _output: Output<T>;
    readonly _errorMode: UtfErrorMode;
    _c1: number;
    _c2: number;
    _c3: number;
    _have: number;
    constructor(output: Output<T>, errorMode: UtfErrorMode, c1?: number, c2?: number, c3?: number, have?: number);
    isCont(): boolean;
    isFull(): boolean;
    isDone(): boolean;
    isError(): boolean;
    isPart(): boolean;
    isPart(isPart: boolean): Output<T>;
    write(token: number | string): Output<T>;
    static invalid(c1: number, c2?: number, c3?: number, c4?: number): string;
    settings(): OutputSettings;
    settings(settings: AnyOutputSettings): Output<T>;
    bind(): T;
    trap(): Error;
    clone(): Output<T>;
}
//# sourceMappingURL=Utf8DecodedOutput.d.ts.map