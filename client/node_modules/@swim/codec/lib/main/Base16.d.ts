import { Input } from "./Input";
import { Output } from "./Output";
import { Parser } from "./Parser";
import { Writer } from "./Writer";
import { Base16Parser } from "./Base16Parser";
import { Base16Writer } from "./Base16Writer";
import { Base16IntegerWriter } from "./Base16IntegerWriter";
export declare class Base16 {
    readonly _alphabet: string;
    constructor(alphabet: string);
    alphabet(): string;
    encodeDigit(b: number): number;
    uint8ArrayWriter(): Writer<Uint8Array, unknown>;
    uint8ArrayWriter(input: Uint8Array): Writer<unknown, Uint8Array>;
    writeUint8Array(input: Uint8Array, output: Output): Writer<unknown, unknown>;
    writeInteger(input: number, output: Output, width?: number): Writer<unknown, unknown>;
    writeIntegerLiteral(input: number, output: Output, width?: number): Writer<unknown, unknown>;
    private static _lowercase?;
    private static _uppercase?;
    static lowercase(): Base16;
    static uppercase(): Base16;
    static isDigit(c: number): boolean;
    static decodeDigit(c: number): number;
    static writeQuantum(c1: number, c2: number, output: Output): void;
    static parser<O>(output: Output<O>): Parser<O>;
    static parse<O>(input: Input, output: Output<O>): Parser<O>;
    static parseUint8Array(input: Input): Parser<Uint8Array>;
    static Parser: typeof Base16Parser;
    static Writer: typeof Base16Writer;
    static IntegerWriter: typeof Base16IntegerWriter;
}
//# sourceMappingURL=Base16.d.ts.map