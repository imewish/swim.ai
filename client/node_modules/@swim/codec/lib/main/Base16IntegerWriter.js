import { __extends } from "tslib";
import { WriterException } from "./WriterException";
import { Writer } from "./Writer";
import { Base16 } from "./Base16";
var Base16IntegerWriter = (function (_super) {
    __extends(Base16IntegerWriter, _super);
    function Base16IntegerWriter(value, input, width, base16, index, step) {
        var _this = _super.call(this) || this;
        _this._value = value;
        _this._input = input;
        _this._width = width;
        _this._base16 = base16;
        _this._index = index;
        _this._step = step;
        return _this;
    }
    Base16IntegerWriter.prototype.pull = function (output) {
        return Base16IntegerWriter.write(output, this._value, this._input, this._width, this._base16, this._index, this._step);
    };
    Base16IntegerWriter.write = function (output, value, input, width, base16, index, step) {
        if (index === void 0) { index = 0; }
        if (step === void 0) { step = 3; }
        if (step <= 0) {
            return Writer.done();
        }
        if (step === 1 && output.isCont()) {
            output = output.write(48);
            step = 2;
        }
        if (step === 2 && output.isCont()) {
            output = output.write(120);
            step = 3;
        }
        if (step === 3) {
            if (input >= 0 && input < 16 && width <= 1) {
                if (output.isCont()) {
                    output = output.write(base16.encodeDigit(input));
                    return Writer.done(value);
                }
            }
            else {
                var i = 15;
                var digits = new Array(16);
                var x = input;
                while (x !== 0 || i >= 16 - width) {
                    digits[i] = x & 0xf;
                    x >>>= 4;
                    i -= 1;
                }
                i += 1 + index;
                while (i < 16 && output.isCont()) {
                    output = output.write(base16.encodeDigit(digits[i]));
                    index += 1;
                    i += 1;
                }
                if (i === 16) {
                    return Writer.done(value);
                }
            }
        }
        if (output.isDone()) {
            return Writer.error(new WriterException("truncated"));
        }
        else if (output.isError()) {
            return Writer.error(output.trap());
        }
        return new Base16IntegerWriter(value, input, width, base16, index, step);
    };
    Base16IntegerWriter.writeLiteral = function (output, value, input, width, base16) {
        return Base16IntegerWriter.write(output, value, input, width, base16, 0, 1);
    };
    return Base16IntegerWriter;
}(Writer));
export { Base16IntegerWriter };
Base16.IntegerWriter = Base16IntegerWriter;
//# sourceMappingURL=Base16IntegerWriter.js.map