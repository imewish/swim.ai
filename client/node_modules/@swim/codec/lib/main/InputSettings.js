import { Murmur3 } from "@swim/util";
import { Format } from "./Format";
var InputSettings = (function () {
    function InputSettings(isStripped) {
        this._isStrict = isStripped;
    }
    InputSettings.prototype.isStripped = function (isStripped) {
        if (isStripped === void 0) {
            return this._isStrict;
        }
        else {
            return this.copy(isStripped);
        }
    };
    InputSettings.prototype.copy = function (isStripped) {
        return InputSettings.create(isStripped);
    };
    InputSettings.prototype.canEqual = function (that) {
        return that instanceof InputSettings;
    };
    InputSettings.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof InputSettings) {
            return that.canEqual(this) && this._isStrict === that._isStrict;
        }
        return false;
    };
    InputSettings.prototype.hashCode = function () {
        if (InputSettings._hashSeed === void 0) {
            InputSettings._hashSeed = Murmur3.seed(InputSettings);
        }
        return Murmur3.mash(Murmur3.mix(InputSettings._hashSeed, Murmur3.hash(this._isStrict)));
    };
    InputSettings.prototype.debug = function (output) {
        output = output.write("InputSettings").write(46);
        if (!this._isStrict) {
            output = output.write("standard");
        }
        else {
            output = output.write("stripped");
        }
        output = output.write(40).write(41);
    };
    InputSettings.prototype.toString = function () {
        return Format.debug(this);
    };
    InputSettings.standard = function () {
        if (!InputSettings._standard) {
            InputSettings._standard = new InputSettings(false);
        }
        return InputSettings._standard;
    };
    InputSettings.stripped = function () {
        if (!InputSettings._stripped) {
            InputSettings._stripped = new InputSettings(false);
        }
        return InputSettings._stripped;
    };
    InputSettings.create = function (isStripped) {
        if (isStripped) {
            return InputSettings.stripped();
        }
        return InputSettings.standard();
    };
    InputSettings.fromAny = function (settings) {
        if (settings instanceof InputSettings) {
            return settings;
        }
        else if (typeof settings === "object" && settings) {
            return InputSettings.create(settings.isStripped);
        }
        else {
            return InputSettings.standard();
        }
    };
    return InputSettings;
}());
export { InputSettings };
//# sourceMappingURL=InputSettings.js.map