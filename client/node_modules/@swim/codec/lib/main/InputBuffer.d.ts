import { Mark } from "./Mark";
import { AnyInputSettings, InputSettings } from "./InputSettings";
import { Input } from "./Input";
export declare abstract class InputBuffer extends Input {
    abstract isPart(): boolean;
    abstract isPart(isPart: boolean): InputBuffer;
    abstract index(): number;
    abstract index(index: number): InputBuffer;
    abstract limit(): number;
    abstract limit(limit: number): InputBuffer;
    abstract capacity(): number;
    abstract remaining(): number;
    abstract has(index: number): boolean;
    abstract get(index: number): number;
    abstract set(index: number, token: number): void;
    abstract step(offset?: number): InputBuffer;
    abstract seek(mark: Mark): InputBuffer;
    abstract id(): unknown | null;
    abstract id(id: unknown | null): InputBuffer;
    abstract mark(): Mark;
    abstract mark(mark: Mark): Input;
    abstract settings(): InputSettings;
    abstract settings(settings: AnyInputSettings): Input;
    abstract clone(): InputBuffer;
    private static _emptyBuffer;
    private static _doneBuffer;
    static empty(id?: unknown | null, mark?: Mark, settings?: InputSettings): InputBuffer;
    static done(id?: unknown | null, mark?: Mark, settings?: InputSettings): InputBuffer;
    static error(error: Error, id?: unknown | null, mark?: Mark, settings?: InputSettings): InputBuffer;
}
//# sourceMappingURL=InputBuffer.d.ts.map