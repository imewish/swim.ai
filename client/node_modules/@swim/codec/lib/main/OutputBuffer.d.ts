import { AnyOutputSettings, OutputSettings } from "./OutputSettings";
import { Output } from "./Output";
export declare abstract class OutputBuffer<T = unknown> extends Output<T> {
    abstract isPart(): boolean;
    abstract isPart(isPart: boolean): OutputBuffer<T>;
    abstract index(): number;
    abstract index(index: number): OutputBuffer<T>;
    abstract limit(): number;
    abstract limit(limit: number): OutputBuffer<T>;
    abstract capacity(): number;
    abstract remaining(): number;
    abstract has(index: number): boolean;
    abstract get(index: number): number;
    abstract set(index: number, token: number): void;
    abstract write(token: number): OutputBuffer<T>;
    abstract write(string: string): OutputBuffer<T>;
    writeln(string?: string): OutputBuffer<T>;
    display(object: unknown): OutputBuffer<T>;
    debug(object: unknown): OutputBuffer<T>;
    abstract step(offset?: number): OutputBuffer<T>;
    flush(): OutputBuffer<T>;
    abstract settings(): OutputSettings;
    abstract settings(settings: AnyOutputSettings): Output<T>;
    clone(): OutputBuffer<T>;
    private static _fullBuffer;
    private static _doneBuffer;
    static full<T>(value?: T | null, settings?: OutputSettings): OutputBuffer<T>;
    static done<T>(value?: T | null, settings?: OutputSettings): OutputBuffer<T>;
    static error<T>(error: Error, settings?: OutputSettings): OutputBuffer<T>;
}
//# sourceMappingURL=OutputBuffer.d.ts.map