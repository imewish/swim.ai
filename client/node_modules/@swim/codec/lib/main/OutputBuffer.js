import { __extends } from "tslib";
import { OutputSettings } from "./OutputSettings";
import { Format } from "./Format";
import { OutputException } from "./OutputException";
import { Output } from "./Output";
var OutputBuffer = (function (_super) {
    __extends(OutputBuffer, _super);
    function OutputBuffer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OutputBuffer.prototype.writeln = function (string) {
        if (typeof string === "string") {
            this.write(string);
        }
        return this.write(this.settings().lineSeparator());
    };
    OutputBuffer.prototype.display = function (object) {
        Format.display(object, this);
        return this;
    };
    OutputBuffer.prototype.debug = function (object) {
        Format.debug(object, this);
        return this;
    };
    OutputBuffer.prototype.flush = function () {
        return this;
    };
    OutputBuffer.prototype.clone = function () {
        throw new Error();
    };
    OutputBuffer.full = function (value, settings) {
        if (value === void 0) { value = null; }
        if (settings === void 0) { settings = OutputSettings.standard(); }
        if (value === null && settings === OutputSettings.standard()) {
            if (!OutputBuffer._fullBuffer) {
                OutputBuffer._fullBuffer = new OutputBufferFull(value, OutputSettings.standard());
            }
            return OutputBuffer._fullBuffer;
        }
        return new OutputBufferFull(value, settings);
    };
    OutputBuffer.done = function (value, settings) {
        if (value === void 0) { value = null; }
        if (settings === void 0) { settings = OutputSettings.standard(); }
        if (value === null && settings === OutputSettings.standard()) {
            if (!OutputBuffer._doneBuffer) {
                OutputBuffer._doneBuffer = new OutputBufferDone(value, OutputSettings.standard());
            }
            return OutputBuffer._doneBuffer;
        }
        return new OutputBufferDone(value, settings);
    };
    OutputBuffer.error = function (error, settings) {
        if (settings === void 0) { settings = OutputSettings.standard(); }
        return new OutputBufferError(error, settings);
    };
    return OutputBuffer;
}(Output));
export { OutputBuffer };
var OutputBufferFull = (function (_super) {
    __extends(OutputBufferFull, _super);
    function OutputBufferFull(value, settings) {
        var _this = _super.call(this) || this;
        _this._value = value;
        _this._settings = settings;
        return _this;
    }
    OutputBufferFull.prototype.isCont = function () {
        return false;
    };
    OutputBufferFull.prototype.isFull = function () {
        return true;
    };
    OutputBufferFull.prototype.isDone = function () {
        return false;
    };
    OutputBufferFull.prototype.isError = function () {
        return false;
    };
    OutputBufferFull.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return true;
        }
        else if (isPart) {
            return OutputBuffer.done(this._value, this._settings);
        }
        else {
            return this;
        }
    };
    OutputBufferFull.prototype.index = function (index) {
        if (index === void 0) {
            return 0;
        }
        else if (index === 0) {
            return this;
        }
        else {
            return OutputBuffer.error(new OutputException("invalid index"), this._settings);
        }
    };
    OutputBufferFull.prototype.limit = function (limit) {
        if (limit === void 0) {
            return 0;
        }
        else if (limit === 0) {
            return this;
        }
        else {
            return OutputBuffer.error(new OutputException("invalid index"), this._settings);
        }
    };
    OutputBufferFull.prototype.capacity = function () {
        return 0;
    };
    OutputBufferFull.prototype.remaining = function () {
        return 0;
    };
    OutputBufferFull.prototype.has = function (index) {
        return false;
    };
    OutputBufferFull.prototype.get = function (index) {
        throw new OutputException();
    };
    OutputBufferFull.prototype.set = function (index, token) {
        throw new OutputException();
    };
    OutputBufferFull.prototype.write = function (tokenOrString) {
        return OutputBuffer.error(new OutputException("full"), this._settings);
    };
    OutputBufferFull.prototype.writeln = function (string) {
        return OutputBuffer.error(new OutputException("full"), this._settings);
    };
    OutputBufferFull.prototype.step = function (offset) {
        if (offset === void 0) { offset = 1; }
        if (offset === 0) {
            return this;
        }
        else {
            return OutputBuffer.error(new OutputException("invalid step"), this._settings);
        }
    };
    OutputBufferFull.prototype.bind = function () {
        return this._value;
    };
    OutputBufferFull.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            return OutputBuffer.full(this._value, settings);
        }
    };
    OutputBufferFull.prototype.clone = function () {
        return this;
    };
    return OutputBufferFull;
}(OutputBuffer));
var OutputBufferDone = (function (_super) {
    __extends(OutputBufferDone, _super);
    function OutputBufferDone(value, settings) {
        var _this = _super.call(this) || this;
        _this._value = value;
        _this._settings = settings;
        return _this;
    }
    OutputBufferDone.prototype.isCont = function () {
        return false;
    };
    OutputBufferDone.prototype.isFull = function () {
        return false;
    };
    OutputBufferDone.prototype.isDone = function () {
        return true;
    };
    OutputBufferDone.prototype.isError = function () {
        return false;
    };
    OutputBufferDone.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return false;
        }
        else if (isPart) {
            return this;
        }
        else {
            return OutputBuffer.full(this._value, this._settings);
        }
    };
    OutputBufferDone.prototype.index = function (index) {
        if (index === void 0) {
            return 0;
        }
        else if (index === 0) {
            return this;
        }
        else {
            return OutputBuffer.error(new OutputException("invalid index"), this._settings);
        }
    };
    OutputBufferDone.prototype.limit = function (limit) {
        if (limit === void 0) {
            return 0;
        }
        else if (limit === 0) {
            return this;
        }
        else {
            return OutputBuffer.error(new OutputException("invalid index"), this._settings);
        }
    };
    OutputBufferDone.prototype.capacity = function () {
        return 0;
    };
    OutputBufferDone.prototype.remaining = function () {
        return 0;
    };
    OutputBufferDone.prototype.has = function (index) {
        return false;
    };
    OutputBufferDone.prototype.get = function (index) {
        throw new OutputException();
    };
    OutputBufferDone.prototype.set = function (index, token) {
        throw new OutputException();
    };
    OutputBufferDone.prototype.write = function (tokenOrString) {
        return OutputBuffer.error(new OutputException("done"), this._settings);
    };
    OutputBufferDone.prototype.writeln = function (string) {
        return OutputBuffer.error(new OutputException("done"), this._settings);
    };
    OutputBufferDone.prototype.step = function (offset) {
        if (offset === void 0) { offset = 1; }
        if (offset === 0) {
            return this;
        }
        else {
            return OutputBuffer.error(new OutputException("invalid step"), this._settings);
        }
    };
    OutputBufferDone.prototype.bind = function () {
        return this._value;
    };
    OutputBufferDone.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            return OutputBuffer.done(this._value, settings);
        }
    };
    OutputBufferDone.prototype.clone = function () {
        return this;
    };
    return OutputBufferDone;
}(OutputBuffer));
var OutputBufferError = (function (_super) {
    __extends(OutputBufferError, _super);
    function OutputBufferError(error, settings) {
        var _this = _super.call(this) || this;
        _this._error = error;
        _this._settings = settings;
        return _this;
    }
    OutputBufferError.prototype.isCont = function () {
        return false;
    };
    OutputBufferError.prototype.isFull = function () {
        return false;
    };
    OutputBufferError.prototype.isDone = function () {
        return false;
    };
    OutputBufferError.prototype.isError = function () {
        return true;
    };
    OutputBufferError.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return false;
        }
        else {
            return this;
        }
    };
    OutputBufferError.prototype.index = function (index) {
        if (index === void 0) {
            return 0;
        }
        else if (index === 0) {
            return this;
        }
        else {
            return OutputBuffer.error(new OutputException("invalid index"), this._settings);
        }
    };
    OutputBufferError.prototype.limit = function (limit) {
        if (limit === void 0) {
            return 0;
        }
        else if (limit === 0) {
            return this;
        }
        else {
            return OutputBuffer.error(new OutputException("invalid index"), this._settings);
        }
    };
    OutputBufferError.prototype.capacity = function () {
        return 0;
    };
    OutputBufferError.prototype.remaining = function () {
        return 0;
    };
    OutputBufferError.prototype.has = function (index) {
        return false;
    };
    OutputBufferError.prototype.get = function (index) {
        throw new OutputException();
    };
    OutputBufferError.prototype.set = function (index, token) {
        throw new OutputException();
    };
    OutputBufferError.prototype.write = function (tokenOrString) {
        return this;
    };
    OutputBufferError.prototype.writeln = function (string) {
        return this;
    };
    OutputBufferError.prototype.step = function (offset) {
        if (offset === void 0) { offset = 1; }
        if (offset === 0) {
            return this;
        }
        else {
            return OutputBuffer.error(new OutputException("invalid step"), this._settings);
        }
    };
    OutputBufferError.prototype.bind = function () {
        throw new OutputException();
    };
    OutputBufferError.prototype.trap = function () {
        return this._error;
    };
    OutputBufferError.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            return OutputBuffer.error(this._error, settings);
        }
    };
    OutputBufferError.prototype.clone = function () {
        return this;
    };
    return OutputBufferError;
}(OutputBuffer));
//# sourceMappingURL=OutputBuffer.js.map