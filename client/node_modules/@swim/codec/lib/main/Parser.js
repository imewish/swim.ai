import { __extends } from "tslib";
import { ParserException } from "./ParserException";
var Parser = (function () {
    function Parser() {
    }
    Parser.prototype.isCont = function () {
        return true;
    };
    Parser.prototype.isDone = function () {
        return false;
    };
    Parser.prototype.isError = function () {
        return false;
    };
    Parser.prototype.fork = function (condition) {
        return this;
    };
    Parser.prototype.bind = function () {
        throw new Error();
    };
    Parser.prototype.trap = function () {
        throw new Error();
    };
    Parser.prototype.asError = function () {
        throw new Error();
    };
    Parser.done = function (output) {
        if (output === void 0) {
            if (!Parser._done) {
                Parser._done = new ParserDone(void 0);
            }
            return Parser._done;
        }
        else {
            return new ParserDone(output);
        }
    };
    Parser.error = function (error) {
        if (error instanceof Error) {
            return new ParserError(error);
        }
        else {
            return new ParserError(new ParserException(error));
        }
    };
    return Parser;
}());
export { Parser };
var ParserDone = (function (_super) {
    __extends(ParserDone, _super);
    function ParserDone(output) {
        var _this = _super.call(this) || this;
        _this._output = output;
        return _this;
    }
    ParserDone.prototype.isCont = function () {
        return false;
    };
    ParserDone.prototype.isDone = function () {
        return true;
    };
    ParserDone.prototype.feed = function (input) {
        return this;
    };
    ParserDone.prototype.bind = function () {
        return this._output;
    };
    return ParserDone;
}(Parser));
var ParserError = (function (_super) {
    __extends(ParserError, _super);
    function ParserError(error) {
        var _this = _super.call(this) || this;
        _this._error = error;
        return _this;
    }
    ParserError.prototype.isCont = function () {
        return false;
    };
    ParserError.prototype.isError = function () {
        return true;
    };
    ParserError.prototype.feed = function (input) {
        return this;
    };
    ParserError.prototype.bind = function () {
        throw this._error;
    };
    ParserError.prototype.trap = function () {
        return this._error;
    };
    ParserError.prototype.asError = function () {
        return this;
    };
    return ParserError;
}(Parser));
//# sourceMappingURL=Parser.js.map