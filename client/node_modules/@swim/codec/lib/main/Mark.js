import { __extends } from "tslib";
import { Murmur3 } from "@swim/util";
import { Tag } from "./Tag";
var Mark = (function (_super) {
    __extends(Mark, _super);
    function Mark(offset, line, column, note) {
        var _this = _super.call(this) || this;
        _this._offset = offset;
        _this._line = line;
        _this._column = column;
        _this._note = note;
        return _this;
    }
    Mark.prototype.offset = function () {
        return this._offset;
    };
    Mark.prototype.line = function () {
        return this._line;
    };
    Mark.prototype.column = function () {
        return this._column;
    };
    Mark.prototype.note = function () {
        return this._note;
    };
    Mark.prototype.min = function (that) {
        if (this._offset <= that._offset) {
            return this;
        }
        else {
            return that;
        }
    };
    Mark.prototype.max = function (that) {
        if (this._offset >= that._offset) {
            return this;
        }
        else {
            return that;
        }
    };
    Mark.prototype.start = function () {
        return this;
    };
    Mark.prototype.end = function () {
        return this;
    };
    Mark.prototype.union = function (that) {
        if (that instanceof Mark) {
            if (this._offset === that._offset && this._line === that._line
                && this._column === that._column) {
                return this;
            }
            else {
                return Tag.Span.from(this, that);
            }
        }
        else if (that instanceof Tag.Span) {
            var start = this.min(that._start);
            var end = this.max(that._end);
            if (start === that._start && end === that._end) {
                return that;
            }
            else {
                return Tag.Span.from(start, end);
            }
        }
        throw new Error(that.toString());
    };
    Mark.prototype.shift = function (mark) {
        var offset = this._offset + (this._offset - mark._offset);
        var line = this._line + (this._line - mark._line);
        var column = this._column;
        if (line === 1) {
            column += (this._column - mark._column);
        }
        if (offset === this._offset && line === this._line && column === this._column) {
            return this;
        }
        else {
            return Mark.at(offset, line, column, this._note);
        }
    };
    Mark.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Mark) {
            return this._offset === that._offset && this._line === that._line
                && this._column === that._column && this._note === that._note;
        }
        return false;
    };
    Mark.prototype.hashCode = function () {
        if (Mark._hashSeed === void 0) {
            Mark._hashSeed = Murmur3.seed(Mark);
        }
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(Mark._hashSeed, this._offset), this._line), this._column), Murmur3.hash(this._note)));
    };
    Mark.prototype.display = function (output) {
        Tag.Format.displayNumber(this._line, output);
        output = output.write(58);
        Tag.Format.displayNumber(this._column, output);
        if (this._note !== null) {
            output = output.write(58).write(32).write(this._note);
        }
    };
    Mark.prototype.debug = function (output) {
        output = output.write("Mark").write(".").write("at").write("(");
        Tag.Format.debugNumber(this._offset, output);
        output = output.write(", ");
        Tag.Format.debugNumber(this._line, output);
        output = output.write(", ");
        Tag.Format.debugNumber(this._column, output);
        if (this._note !== null) {
            output = output.write(", ");
            Tag.Format.debugString(this._note, output);
        }
        output = output.write(")");
    };
    Mark.prototype.toString = function () {
        return Tag.Format.display(this);
    };
    Mark.zero = function () {
        if (!Mark._zero) {
            Mark._zero = new Mark(0, 1, 1, null);
        }
        return Mark._zero;
    };
    Mark.at = function (offset, line, column, note) {
        if (note === void 0) { note = null; }
        return new Mark(offset, line, column, note);
    };
    return Mark;
}(Tag));
export { Mark };
Tag.Mark = Mark;
//# sourceMappingURL=Mark.js.map