import { __extends } from "tslib";
import { Parser } from "./Parser";
import { Diagnostic } from "./Diagnostic";
import { Base16 } from "./Base16";
var Base16Parser = (function (_super) {
    __extends(Base16Parser, _super);
    function Base16Parser(output, p, step) {
        if (p === void 0) { p = 0; }
        if (step === void 0) { step = 1; }
        var _this = _super.call(this) || this;
        _this._output = output;
        _this._p = p;
        _this._step = step;
        return _this;
    }
    Base16Parser.prototype.feed = function (input) {
        return Base16Parser.parse(input, this._output.clone(), this._p, this._step);
    };
    Base16Parser.parse = function (input, output, p, step) {
        if (p === void 0) { p = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        while (!input.isEmpty()) {
            if (step === 1) {
                if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                    input = input.step();
                    p = c;
                    step = 2;
                }
                else if (!input.isEmpty()) {
                    return Parser.done(output.bind());
                }
            }
            if (step === 2) {
                if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                    input = input.step();
                    Base16.writeQuantum(p, c, output);
                    p = 0;
                    step = 1;
                }
                else if (!input.isEmpty()) {
                    return Parser.error(Diagnostic.expected("base16 digit", input));
                }
            }
        }
        return new Base16Parser(output, p, step);
    };
    return Base16Parser;
}(Parser));
export { Base16Parser };
Base16.Parser = Base16Parser;
//# sourceMappingURL=Base16Parser.js.map