import { Input } from "./Input";
import { Output } from "./Output";
import { Parser } from "./Parser";
import { Writer } from "./Writer";
import { Base64Parser } from "./Base64Parser";
import { Base64Writer } from "./Base64Writer";
export declare abstract class Base64 {
    constructor();
    abstract alphabet(): string;
    abstract isPadded(): boolean;
    abstract isPadded(isPadded: boolean): Base64;
    abstract isDigit(c: number): boolean;
    decodeDigit(c: number): number;
    encodeDigit(b: number): number;
    writeQuantum(c1: number, c2: number, c3: number, c4: number, output: Output): void;
    parser<O>(output: Output<O>): Parser<O>;
    parse<O>(input: Input, output: Output<O>): Parser<O>;
    parseUint8Array(input: Input): Parser<Uint8Array>;
    uint8ArrayWriter(): Writer<Uint8Array, unknown>;
    uint8ArrayWriter(input: Uint8Array): Writer<unknown, Uint8Array>;
    writeUint8Array(input: Uint8Array, output: Output): Writer<unknown, unknown>;
    private static _standard?;
    private static _standardUnpadded?;
    private static _url?;
    private static _urlUnpadded?;
    static standard(isPadded?: boolean): Base64;
    static url(isPadded?: boolean): Base64;
    static Parser: typeof Base64Parser;
    static Writer: typeof Base64Writer;
}
//# sourceMappingURL=Base64.d.ts.map