import { Murmur3 } from "@swim/util";
import { Format } from "./Format";
var OutputSettings = (function () {
    function OutputSettings(lineSeparator, isPretty, isStyled) {
        this._lineSeparator = lineSeparator;
        this._isPretty = isPretty;
        this._isStyled = isStyled;
    }
    OutputSettings.prototype.lineSeparator = function (lineSeparator) {
        if (lineSeparator === void 0) {
            return this._lineSeparator;
        }
        else {
            return this.copy(lineSeparator, this._isPretty, this._isStyled);
        }
    };
    OutputSettings.prototype.isPretty = function (isPretty) {
        if (isPretty === void 0) {
            return this._isPretty;
        }
        else {
            return this.copy(this._lineSeparator, isPretty, this._isStyled);
        }
    };
    OutputSettings.prototype.isStyled = function (isStyled) {
        if (isStyled === void 0) {
            return this._isStyled;
        }
        else {
            return this.copy(this._lineSeparator, this._isPretty, isStyled);
        }
    };
    OutputSettings.prototype.copy = function (lineSeparator, isPretty, isStyled) {
        return OutputSettings.create(lineSeparator, isPretty, isStyled);
    };
    OutputSettings.prototype.canEqual = function (that) {
        return that instanceof OutputSettings;
    };
    OutputSettings.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof OutputSettings) {
            return that.canEqual(this) && this._lineSeparator === that._lineSeparator
                && this._isPretty === that._isPretty && this._isStyled === that._isStyled;
        }
        return false;
    };
    OutputSettings.prototype.hashCode = function () {
        if (OutputSettings._hashSeed === void 0) {
            OutputSettings._hashSeed = Murmur3.seed(OutputSettings);
        }
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(OutputSettings._hashSeed, Murmur3.hash(this._lineSeparator)), Murmur3.hash(this._isPretty)), Murmur3.hash(this._isStyled)));
    };
    OutputSettings.prototype.debug = function (output) {
        output = output.write("OutputSettings").write(46);
        if (!this._isPretty && !this._isStyled) {
            output = output.write("standard");
        }
        else if (this._isPretty && !this._isStyled) {
            output = output.write("pretty");
        }
        else if (!this._isPretty && this._isStyled) {
            output = output.write("styled");
        }
        else {
            output = output.write("prettyStyled");
        }
        output = output.write(40).write(41);
        if (Format.lineSeparator() !== this._lineSeparator) {
            output = output.write(46).write("lineSeparator").write(40)
                .display(this._lineSeparator).write(41);
        }
    };
    OutputSettings.prototype.toString = function () {
        return Format.debug(this);
    };
    OutputSettings.standard = function () {
        if (!OutputSettings._standard) {
            OutputSettings._standard = new OutputSettings(Format.lineSeparator(), false, false);
        }
        return OutputSettings._standard;
    };
    OutputSettings.pretty = function () {
        if (!OutputSettings._pretty) {
            OutputSettings._pretty = new OutputSettings(Format.lineSeparator(), true, false);
        }
        return OutputSettings._pretty;
    };
    OutputSettings.styled = function () {
        if (!OutputSettings._styled) {
            OutputSettings._styled = new OutputSettings(Format.lineSeparator(), false, true);
        }
        return OutputSettings._styled;
    };
    OutputSettings.prettyStyled = function () {
        if (!OutputSettings._prettyStyled) {
            OutputSettings._prettyStyled = new OutputSettings(Format.lineSeparator(), true, true);
        }
        return OutputSettings._prettyStyled;
    };
    OutputSettings.create = function (lineSeparator, isPretty, isStyled) {
        if (typeof lineSeparator !== "string") {
            lineSeparator = Format.lineSeparator();
        }
        if (typeof isPretty !== "boolean") {
            isPretty = false;
        }
        if (typeof isStyled !== "boolean") {
            isStyled = false;
        }
        if (Format.lineSeparator() === lineSeparator) {
            if (!isPretty && !isStyled) {
                return OutputSettings.standard();
            }
            else if (isPretty && !isStyled) {
                return OutputSettings.pretty();
            }
            else if (!isPretty && isStyled) {
                return OutputSettings.styled();
            }
            else {
                return OutputSettings.prettyStyled();
            }
        }
        return new OutputSettings(lineSeparator, isPretty, isStyled);
    };
    OutputSettings.fromAny = function (settings) {
        if (settings instanceof OutputSettings) {
            return settings;
        }
        else if (typeof settings === "object" && settings) {
            return OutputSettings.create(settings.lineSeparator, settings.isPretty, settings.isStyled);
        }
        return OutputSettings.standard();
    };
    return OutputSettings;
}());
export { OutputSettings };
//# sourceMappingURL=OutputSettings.js.map