import { __extends } from "tslib";
import { WriterException } from "./WriterException";
import { Writer } from "./Writer";
import { Base10 } from "./Base10";
var Base10IntegerWriter = (function (_super) {
    __extends(Base10IntegerWriter, _super);
    function Base10IntegerWriter(value, input, index, step) {
        if (index === void 0) { index = 0; }
        if (step === void 0) { step = 1; }
        var _this = _super.call(this) || this;
        _this._value = value;
        _this._input = input;
        _this._index = index;
        _this._step = step;
        return _this;
    }
    Base10IntegerWriter.prototype.pull = function (output) {
        return Base10IntegerWriter.write(output, this._value, this._input, this._index, this._step);
    };
    Base10IntegerWriter.write = function (output, value, input, index, step) {
        if (index === void 0) { index = 0; }
        if (step === void 0) { step = 1; }
        if (step === 0) {
            return Writer.done();
        }
        if (step === 1) {
            if (input < 0) {
                if (output.isCont()) {
                    output = output.write(45);
                    step = 2;
                }
            }
            else {
                step = 2;
            }
        }
        if (step === 2) {
            if (input > -10 && input < 10) {
                if (output.isCont()) {
                    output = output.write(Base10.encodeDigit(Math.abs(input | 0)));
                    return Writer.done(value);
                }
            }
            else {
                var digits = new Array(19);
                var x = input;
                var i = 18;
                while (x) {
                    digits[i] = Math.abs((x % 10) | 0);
                    x = (x / 10) | 0;
                    i -= 1;
                }
                i += 1 + index;
                while (i < 19 && output.isCont()) {
                    output = output.write(Base10.encodeDigit(digits[i]));
                    index += 1;
                    i += 1;
                }
                if (i === 19) {
                    return Writer.done(value);
                }
            }
        }
        if (output.isDone()) {
            return Writer.error(new WriterException("truncated"));
        }
        else if (output.isError()) {
            return Writer.error(output.trap());
        }
        return new Base10IntegerWriter(value, input, index, step);
    };
    return Base10IntegerWriter;
}(Writer));
export { Base10IntegerWriter };
Base10.IntegerWriter = Base10IntegerWriter;
//# sourceMappingURL=Base10IntegerWriter.js.map