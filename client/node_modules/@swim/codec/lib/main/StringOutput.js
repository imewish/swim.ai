import { __extends } from "tslib";
import { OutputSettings } from "./OutputSettings";
import { Output } from "./Output";
var StringOutput = (function (_super) {
    __extends(StringOutput, _super);
    function StringOutput(string, settings) {
        var _this = _super.call(this) || this;
        _this._string = string;
        _this._settings = settings;
        return _this;
    }
    StringOutput.prototype.isCont = function () {
        return true;
    };
    StringOutput.prototype.isFull = function () {
        return false;
    };
    StringOutput.prototype.isDone = function () {
        return false;
    };
    StringOutput.prototype.isError = function () {
        return false;
    };
    StringOutput.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return false;
        }
        else {
            return this;
        }
    };
    StringOutput.prototype.write = function (token) {
        if (typeof token === "number") {
            if ((token >= 0x0000 && token <= 0xd7ff)
                || (token >= 0xe000 && token <= 0xffff)) {
                token = String.fromCharCode(token);
            }
            else if (token >= 0x10000 && token <= 0x10ffff) {
                var u = token - 0x10000;
                token = String.fromCharCode(0xd800 | (u >>> 10), 0xdc00 | (u & 0x3ff));
            }
            else {
                token = "\ufffd";
            }
        }
        this._string += token;
        return this;
    };
    StringOutput.prototype.writeln = function (string) {
        if (string === void 0) {
            this._string = this._string.concat(this._settings._lineSeparator);
            return this;
        }
        else {
            this._string = this._string.concat(string).concat(this._settings._lineSeparator);
            return this;
        }
    };
    StringOutput.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            this._settings = OutputSettings.fromAny(settings);
            return this;
        }
    };
    StringOutput.prototype.bind = function () {
        return this._string;
    };
    StringOutput.prototype.clone = function () {
        return new StringOutput(this._string, this._settings);
    };
    StringOutput.prototype.toString = function () {
        return this._string;
    };
    return StringOutput;
}(Output));
export { StringOutput };
//# sourceMappingURL=StringOutput.js.map