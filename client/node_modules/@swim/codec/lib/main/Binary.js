import { OutputSettings } from "./OutputSettings";
import { Uint8ArrayOutput } from "./Uint8ArrayOutput";
import { ByteOutputUint8Array } from "./ByteOutputUint8Array";
var Binary = (function () {
    function Binary() {
    }
    Binary.outputBuffer = function (array, offset, length) {
        if (offset === void 0) { offset = 0; }
        if (length === void 0) { length = array.length; }
        return new Uint8ArrayOutput(array, offset, offset + length);
    };
    Binary.uint8ArrayOutput = function (initialCapacity, settings) {
        if (settings === void 0 && typeof initialCapacity !== "number") {
            settings = initialCapacity;
            initialCapacity = void 0;
        }
        else if (typeof initialCapacity !== "number") {
            initialCapacity = void 0;
        }
        var array;
        if (typeof initialCapacity === "number") {
            array = new Uint8Array(initialCapacity);
        }
        else {
            array = null;
        }
        settings = OutputSettings.fromAny(settings);
        return new ByteOutputUint8Array(array, 0, settings);
    };
    return Binary;
}());
export { Binary };
//# sourceMappingURL=Binary.js.map