import { AnyOutputSettings, OutputSettings } from "./OutputSettings";
import { OutputBuffer } from "./OutputBuffer";
export declare class Uint8ArrayOutput extends OutputBuffer<Uint8Array> {
    _array: Uint8Array;
    _index: number;
    _limit: number;
    _settings: OutputSettings;
    _isPart: boolean;
    constructor(array: Uint8Array, index: number, limit: number, settings?: OutputSettings, isPart?: boolean);
    isCont(): boolean;
    isFull(): boolean;
    isDone(): boolean;
    isError(): boolean;
    isPart(): boolean;
    isPart(isPart: boolean): OutputBuffer<Uint8Array>;
    index(): number;
    index(index: number): OutputBuffer<Uint8Array>;
    limit(): number;
    limit(limit: number): OutputBuffer<Uint8Array>;
    capacity(): number;
    remaining(): number;
    has(index: number): boolean;
    get(index: number): number;
    set(index: number, token: number): void;
    write(token: number | string): OutputBuffer<Uint8Array>;
    writeln(string?: string): OutputBuffer<Uint8Array>;
    step(offset: number): OutputBuffer<Uint8Array>;
    bind(): Uint8Array;
    settings(): OutputSettings;
    settings(settings: AnyOutputSettings): OutputBuffer<Uint8Array>;
    clone(): OutputBuffer<Uint8Array>;
}
//# sourceMappingURL=Uint8ArrayOutput.d.ts.map