import { Format } from "./Format";
import { Unicode } from "./Unicode";
import { Binary } from "./Binary";
var Base16 = (function () {
    function Base16(alphabet) {
        this._alphabet = alphabet;
    }
    Base16.prototype.alphabet = function () {
        return this._alphabet;
    };
    Base16.prototype.encodeDigit = function (b) {
        return this._alphabet.charCodeAt(b);
    };
    Base16.prototype.uint8ArrayWriter = function (input) {
        if (input === void 0) {
            return new Base16.Writer(void 0, void 0, this);
        }
        else {
            return new Base16.Writer(input, input, this);
        }
    };
    Base16.prototype.writeUint8Array = function (input, output) {
        return Base16.Writer.write(output, void 0, input, this);
    };
    Base16.prototype.writeInteger = function (input, output, width) {
        if (width === void 0) { width = 0; }
        return Base16.IntegerWriter.write(output, void 0, input, width, this);
    };
    Base16.prototype.writeIntegerLiteral = function (input, output, width) {
        if (width === void 0) { width = 0; }
        return Base16.IntegerWriter.writeLiteral(output, void 0, input, width, this);
    };
    Base16.lowercase = function () {
        if (!Base16._lowercase) {
            Base16._lowercase = new Base16("0123456789abcdef");
        }
        return Base16._lowercase;
    };
    Base16.uppercase = function () {
        if (!Base16._uppercase) {
            Base16._uppercase = new Base16("0123456789ABCDEF");
        }
        return Base16._uppercase;
    };
    Base16.isDigit = function (c) {
        return c >= 48 && c <= 57
            || c >= 65 && c <= 70
            || c >= 97 && c <= 102;
    };
    Base16.decodeDigit = function (c) {
        if (c >= 48 && c <= 57) {
            return c - 48;
        }
        else if (c >= 65 && c <= 70) {
            return 10 + (c - 65);
        }
        else if (c >= 97 && c <= 102) {
            return 10 + (c - 97);
        }
        else {
            var message = Unicode.stringOutput();
            message.write("Invalid base-16 digit: ");
            Format.debugChar(c, message);
            throw new Error(message.bind());
        }
    };
    Base16.writeQuantum = function (c1, c2, output) {
        var x = Base16.decodeDigit(c1);
        var y = Base16.decodeDigit(c2);
        output = output.write(x << 4 | y);
    };
    Base16.parser = function (output) {
        return new Base16.Parser(output);
    };
    Base16.parse = function (input, output) {
        return Base16.Parser.parse(input, output);
    };
    Base16.parseUint8Array = function (input) {
        return Base16.Parser.parse(input, Binary.uint8ArrayOutput());
    };
    return Base16;
}());
export { Base16 };
//# sourceMappingURL=Base16.js.map