import { __extends } from "tslib";
import { Murmur3 } from "@swim/util";
import { Format } from "./Format";
var UtfErrorMode = (function () {
    function UtfErrorMode() {
    }
    UtfErrorMode.prototype.isFatal = function () {
        return false;
    };
    UtfErrorMode.prototype.isReplacement = function () {
        return false;
    };
    UtfErrorMode.prototype.replacementChar = function () {
        return 0xfffd;
    };
    UtfErrorMode.prototype.toString = function () {
        return Format.debug(this);
    };
    UtfErrorMode.fatal = function () {
        if (!UtfErrorMode._fatal) {
            UtfErrorMode._fatal = new UtfFatalErrorMode(false);
        }
        return UtfErrorMode._fatal;
    };
    UtfErrorMode.fatalNonZero = function () {
        if (!UtfErrorMode._fatalNonZero) {
            UtfErrorMode._fatalNonZero = new UtfFatalErrorMode(true);
        }
        return UtfErrorMode._fatalNonZero;
    };
    UtfErrorMode.replacement = function (replacementChar) {
        if (replacementChar === void 0 || replacementChar === 0xfffd) {
            if (!UtfErrorMode._replacement) {
                UtfErrorMode._replacement = new UtfReplacementErrorMode(0xfffd, false);
            }
            return UtfErrorMode._replacement;
        }
        else {
            return new UtfReplacementErrorMode(replacementChar, false);
        }
    };
    UtfErrorMode.replacementNonZero = function (replacementChar) {
        if (replacementChar === void 0 || replacementChar === 0xfffd) {
            if (!UtfErrorMode._replacementNonZero) {
                UtfErrorMode._replacementNonZero = new UtfReplacementErrorMode(0xfffd, true);
            }
            return UtfErrorMode._replacementNonZero;
        }
        else {
            return new UtfReplacementErrorMode(replacementChar, true);
        }
    };
    return UtfErrorMode;
}());
export { UtfErrorMode };
var UtfFatalErrorMode = (function (_super) {
    __extends(UtfFatalErrorMode, _super);
    function UtfFatalErrorMode(isNonZero) {
        var _this = _super.call(this) || this;
        _this._isNonZero = isNonZero;
        return _this;
    }
    UtfFatalErrorMode.prototype.isFatal = function () {
        return true;
    };
    UtfFatalErrorMode.prototype.isNonZero = function (isNonZero) {
        if (isNonZero === void 0) {
            return this._isNonZero;
        }
        else if (isNonZero) {
            return UtfErrorMode.fatalNonZero();
        }
        else {
            return UtfErrorMode.fatal();
        }
    };
    UtfFatalErrorMode.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UtfFatalErrorMode) {
            return this._isNonZero === that._isNonZero;
        }
        return false;
    };
    UtfFatalErrorMode.prototype.hashCode = function () {
        if (UtfFatalErrorMode._hashSeed === void 0) {
            UtfFatalErrorMode._hashSeed = Murmur3.seed(UtfFatalErrorMode);
        }
        return Murmur3.mash(Murmur3.mix(UtfFatalErrorMode._hashSeed, Murmur3.hash(this._isNonZero)));
    };
    UtfFatalErrorMode.prototype.debug = function (output) {
        output = output.write("UtfErrorMode").write(46)
            .write(this.isNonZero ? "fatalNonZero" : "fatal")
            .write(40).write(41);
    };
    return UtfFatalErrorMode;
}(UtfErrorMode));
var UtfReplacementErrorMode = (function (_super) {
    __extends(UtfReplacementErrorMode, _super);
    function UtfReplacementErrorMode(replacementChar, isNonZero) {
        var _this = _super.call(this) || this;
        _this._replacementChar = replacementChar;
        _this._isNonZero = isNonZero;
        return _this;
    }
    UtfReplacementErrorMode.prototype.isReplacement = function () {
        return true;
    };
    UtfReplacementErrorMode.prototype.replacementChar = function () {
        return this._replacementChar;
    };
    UtfReplacementErrorMode.prototype.isNonZero = function (isNonZero) {
        if (isNonZero === void 0) {
            return this._isNonZero;
        }
        else if (this._replacementChar === 0xfffd) {
            if (isNonZero) {
                return UtfErrorMode.replacementNonZero();
            }
            else {
                return UtfErrorMode.replacement();
            }
        }
        else {
            return new UtfReplacementErrorMode(this._replacementChar, isNonZero);
        }
    };
    UtfReplacementErrorMode.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UtfReplacementErrorMode) {
            return this.replacementChar === that.replacementChar
                && this.isNonZero === that.isNonZero;
        }
        return false;
    };
    UtfReplacementErrorMode.prototype.hashCode = function () {
        if (UtfReplacementErrorMode._hashSeed === void 0) {
            UtfReplacementErrorMode._hashSeed = Murmur3.seed(UtfReplacementErrorMode);
        }
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(UtfReplacementErrorMode._hashSeed, this._replacementChar), Murmur3.hash(this._isNonZero)));
    };
    UtfReplacementErrorMode.prototype.debug = function (output) {
        output = output.write("UtfErrorMode").write(46)
            .write(this._isNonZero ? "replacementNonZero" : "replacement")
            .write(40);
        if (this._replacementChar !== 0xfffd) {
            Format.debugChar(this._replacementChar, output);
        }
        output = output.write(41);
    };
    return UtfReplacementErrorMode;
}(UtfErrorMode));
//# sourceMappingURL=UtfErrorMode.js.map