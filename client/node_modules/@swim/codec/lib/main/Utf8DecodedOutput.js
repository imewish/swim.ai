import { __extends } from "tslib";
import { OutputException } from "./OutputException";
import { Output } from "./Output";
import { Unicode } from "./Unicode";
import { Base16 } from "./Base16";
var Utf8DecodedOutput = (function (_super) {
    __extends(Utf8DecodedOutput, _super);
    function Utf8DecodedOutput(output, errorMode, c1, c2, c3, have) {
        if (c1 === void 0) { c1 = -1; }
        if (c2 === void 0) { c2 = -1; }
        if (c3 === void 0) { c3 = -1; }
        if (have === void 0) { have = 0; }
        var _this = _super.call(this) || this;
        _this._output = output;
        _this._errorMode = errorMode;
        _this._c1 = c1;
        _this._c2 = c2;
        _this._c3 = c3;
        _this._have = have;
        return _this;
    }
    Utf8DecodedOutput.prototype.isCont = function () {
        return this._output.isCont();
    };
    Utf8DecodedOutput.prototype.isFull = function () {
        return this._output.isFull();
    };
    Utf8DecodedOutput.prototype.isDone = function () {
        return this._output.isDone();
    };
    Utf8DecodedOutput.prototype.isError = function () {
        return this._output.isError();
    };
    Utf8DecodedOutput.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return this._output.isPart();
        }
        else {
            this._output = this._output.isPart(isPart);
            return this;
        }
    };
    Utf8DecodedOutput.prototype.write = function (token) {
        if (typeof token === "number") {
            var c1 = this._c1;
            var c2 = this._c2;
            var c3 = this._c3;
            var c4 = -1;
            var have = this._have;
            if (token >= 0) {
                switch (have) {
                    case 0:
                        c1 = token & 0xff;
                        have = 1;
                        break;
                    case 1:
                        c2 = token & 0xff;
                        have = 2;
                        break;
                    case 2:
                        c3 = token & 0xff;
                        have = 3;
                        break;
                    case 3:
                        c4 = token & 0xff;
                        have = 4;
                        break;
                    default:
                        throw new Error("unreachable");
                }
            }
            if (c1 === 0 && this._errorMode.isNonZero()) {
                return Output.error(new OutputException("unexpected NUL byte"));
            }
            else if (c1 >= 0 && c1 <= 0x7f) {
                this._output = this._output.write(c1);
                this._have = 0;
            }
            else if (c1 >= 0xc2 && c1 <= 0xf4) {
                if (c1 >= 0xc2 && c1 <= 0xdf && c2 >= 0x80 && c2 <= 0xbf) {
                    this._output = this._output.write((c1 & 0x1f) << 6 | c2 & 0x3f);
                    this._c1 = -1;
                    this._have = 0;
                }
                else if (c1 === 0xe0 && c2 >= 0xa0 && c2 <= 0xbf
                    || c1 >= 0xe1 && c1 <= 0xec && c2 >= 0x80 && c2 <= 0xbf
                    || c1 === 0xed && c2 >= 0x80 && c2 <= 0x9f
                    || c1 >= 0xee && c1 <= 0xef && c2 >= 0x80 && c2 <= 0xbf) {
                    if (c3 >= 0x80 && c3 <= 0xbf) {
                        this._output = this._output.write((c1 & 0x0f) << 12 | (c2 & 0x3f) << 6 | c3 & 0x3f);
                        this._c1 = -1;
                        this._c2 = -1;
                        this._have = 0;
                    }
                    else if (c3 >= 0) {
                        if (this._errorMode.isFatal()) {
                            return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2, c3)));
                        }
                        this._output = this._output.write(this._errorMode.replacementChar());
                        this._c1 = c3;
                        this._c2 = -1;
                        this._have = 1;
                    }
                    else if (token < 0 || this._output.isDone()) {
                        return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2)));
                    }
                    else {
                        this._c2 = c2;
                        this._have = 2;
                    }
                }
                else if (c1 === 0xf0 && c2 >= 0x90 && c2 <= 0xbf
                    || c1 >= 0xf1 && c1 <= 0xf3 && c2 >= 0x80 && c2 <= 0xbf
                    || c1 === 0xf4 && c2 >= 0x80 && c2 <= 0x8f) {
                    if (c3 >= 0x80 && c3 <= 0xbf) {
                        if (c4 >= 0x80 && c4 <= 0xbf) {
                            this._have = 4;
                            this._output = this._output.write((c1 & 0x07) << 18 | (c2 & 0x3f) << 12 | (c3 & 0x3f) << 6 | c4 & 0x3f);
                            this._c1 = -1;
                            this._c2 = -1;
                            this._c3 = -1;
                            this._have = 0;
                        }
                        else if (c4 >= 0) {
                            if (this._errorMode.isFatal()) {
                                return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2, c3, c4)));
                            }
                            this._output = this._output.write(this._errorMode.replacementChar());
                            this._c1 = c4;
                            this._c2 = -1;
                            this._c3 = -1;
                            this._have = 1;
                        }
                        else if (token < 0 || this._output.isDone()) {
                            return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2, c3)));
                        }
                        else {
                            this._c3 = c3;
                            this._have = 3;
                        }
                    }
                    else if (c3 >= 0) {
                        if (this._errorMode.isFatal()) {
                            return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2, c3)));
                        }
                        this._output = this._output.write(this._errorMode.replacementChar());
                        this._c1 = c3;
                        this._c2 = -1;
                        this._have = 1;
                    }
                    else if (token < 0 || this._output.isDone()) {
                        return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2)));
                    }
                    else {
                        this._c2 = c2;
                        this._have = 2;
                    }
                }
                else if (c2 >= 0) {
                    if (this._errorMode.isFatal()) {
                        return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2)));
                    }
                    this._output = this._output.write(this._errorMode.replacementChar());
                    this._c1 = c2;
                    this._have = 1;
                }
                else if (token < 0 || this._output.isDone()) {
                    return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1)));
                }
                else {
                    this._c1 = c1;
                    this._have = 1;
                }
            }
            else if (c1 >= 0) {
                if (this._errorMode.isFatal()) {
                    return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1)));
                }
                this._output = this._output.write(this._errorMode.replacementChar());
                this._have = 0;
            }
            if (this._output.isError()) {
                return this._output;
            }
            return this;
        }
        else if (typeof token === "string") {
            this._output.write(token);
            return this;
        }
        else {
            throw new TypeError("" + token);
        }
    };
    Utf8DecodedOutput.invalid = function (c1, c2, c3, c4) {
        var output = Unicode.stringOutput();
        output = output.write("invalid UTF-8 code unit sequence: ");
        Base16.uppercase().writeIntegerLiteral(c1, output, 2);
        if (c2 !== void 0) {
            output = output.write(' ');
            Base16.uppercase().writeIntegerLiteral(c2, output, 2);
            if (c3 !== void 0) {
                output = output.write(' ');
                Base16.uppercase().writeIntegerLiteral(c3, output, 2);
                if (c4 !== void 0) {
                    output = output.write(' ');
                    Base16.uppercase().writeIntegerLiteral(c4, output, 2);
                }
            }
        }
        return output.bind();
    };
    Utf8DecodedOutput.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._output.settings();
        }
        else {
            this._output.settings(settings);
            return this;
        }
    };
    Utf8DecodedOutput.prototype.bind = function () {
        if (this._have === 0) {
            return this._output.bind();
        }
        else {
            return this.write(-1).bind();
        }
    };
    Utf8DecodedOutput.prototype.trap = function () {
        return this._output.trap();
    };
    Utf8DecodedOutput.prototype.clone = function () {
        return new Utf8DecodedOutput(this._output.clone(), this._errorMode, this._c1, this._c2, this._c3, this._have);
    };
    return Utf8DecodedOutput;
}(Output));
export { Utf8DecodedOutput };
//# sourceMappingURL=Utf8DecodedOutput.js.map