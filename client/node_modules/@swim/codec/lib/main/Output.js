import { __extends } from "tslib";
import { OutputSettings } from "./OutputSettings";
import { Format } from "./Format";
import { OutputException } from "./OutputException";
var Output = (function () {
    function Output() {
    }
    Output.prototype.writeln = function (string) {
        if (typeof string === "string") {
            this.write(string);
        }
        return this.write(this.settings().lineSeparator());
    };
    Output.prototype.display = function (object) {
        Format.display(object, this);
        return this;
    };
    Output.prototype.debug = function (object) {
        Format.debug(object, this);
        return this;
    };
    Output.prototype.flush = function () {
        return this;
    };
    Output.prototype.push = function () {
        var tokens = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            tokens[_i] = arguments[_i];
        }
        var n = tokens.length;
        for (var i = 0; i < n; i += 1) {
            this.write(tokens[i]);
        }
    };
    Output.prototype.trap = function () {
        throw new OutputException();
    };
    Output.prototype.clone = function () {
        throw new Error();
    };
    Output.full = function (value, settings) {
        if (value === void 0) { value = null; }
        if (settings === void 0) { settings = OutputSettings.standard(); }
        if (value === null && settings === OutputSettings.standard()) {
            if (!Output._full) {
                Output._full = new OutputFull(value, OutputSettings.standard());
            }
            return Output._full;
        }
        return new OutputFull(value, settings);
    };
    Output.done = function (value, settings) {
        if (value === void 0) { value = null; }
        if (settings === void 0) { settings = OutputSettings.standard(); }
        if (value === null && settings === OutputSettings.standard()) {
            if (!Output._done) {
                Output._done = new OutputDone(value, OutputSettings.standard());
            }
            return Output._done;
        }
        return new OutputDone(value, settings);
    };
    Output.error = function (error, settings) {
        if (settings === void 0) { settings = OutputSettings.standard(); }
        return new OutputError(error, settings);
    };
    return Output;
}());
export { Output };
var OutputFull = (function (_super) {
    __extends(OutputFull, _super);
    function OutputFull(value, settings) {
        var _this = _super.call(this) || this;
        _this._value = value;
        _this._settings = settings;
        return _this;
    }
    OutputFull.prototype.isCont = function () {
        return false;
    };
    OutputFull.prototype.isFull = function () {
        return true;
    };
    OutputFull.prototype.isDone = function () {
        return false;
    };
    OutputFull.prototype.isError = function () {
        return false;
    };
    OutputFull.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return true;
        }
        else if (isPart) {
            return Output.done(this._value, this._settings);
        }
        else {
            return this;
        }
    };
    OutputFull.prototype.write = function (tokenOrString) {
        return Output.error(new OutputException("full"), this._settings);
    };
    OutputFull.prototype.writeln = function (string) {
        return Output.error(new OutputException("full"), this._settings);
    };
    OutputFull.prototype.bind = function () {
        return this._value;
    };
    OutputFull.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            return Output.full(this._value, settings);
        }
    };
    OutputFull.prototype.clone = function () {
        return this;
    };
    return OutputFull;
}(Output));
var OutputDone = (function (_super) {
    __extends(OutputDone, _super);
    function OutputDone(value, settings) {
        var _this = _super.call(this) || this;
        _this._value = value;
        _this._settings = settings;
        return _this;
    }
    OutputDone.prototype.isCont = function () {
        return false;
    };
    OutputDone.prototype.isFull = function () {
        return false;
    };
    OutputDone.prototype.isDone = function () {
        return true;
    };
    OutputDone.prototype.isError = function () {
        return false;
    };
    OutputDone.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return false;
        }
        else if (isPart) {
            return this;
        }
        else {
            return Output.full(this._value, this._settings);
        }
    };
    OutputDone.prototype.write = function (tokenOrString) {
        return Output.error(new OutputException("done"), this._settings);
    };
    OutputDone.prototype.writeln = function (string) {
        return Output.error(new OutputException("done"), this._settings);
    };
    OutputDone.prototype.bind = function () {
        return this._value;
    };
    OutputDone.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            return Output.done(this._value, settings);
        }
    };
    OutputDone.prototype.clone = function () {
        return this;
    };
    return OutputDone;
}(Output));
var OutputError = (function (_super) {
    __extends(OutputError, _super);
    function OutputError(error, settings) {
        var _this = _super.call(this) || this;
        _this._error = error;
        _this._settings = settings;
        return _this;
    }
    OutputError.prototype.isCont = function () {
        return false;
    };
    OutputError.prototype.isFull = function () {
        return false;
    };
    OutputError.prototype.isDone = function () {
        return false;
    };
    OutputError.prototype.isError = function () {
        return true;
    };
    OutputError.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return false;
        }
        else {
            return this;
        }
    };
    OutputError.prototype.write = function (tokenOrString) {
        return this;
    };
    OutputError.prototype.writeln = function (string) {
        return this;
    };
    OutputError.prototype.bind = function () {
        throw new OutputException();
    };
    OutputError.prototype.trap = function () {
        return this._error;
    };
    OutputError.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            return Output.error(this._error, settings);
        }
    };
    OutputError.prototype.clone = function () {
        return this;
    };
    return OutputError;
}(Output));
//# sourceMappingURL=Output.js.map