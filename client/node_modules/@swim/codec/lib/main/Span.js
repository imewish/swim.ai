import { __extends } from "tslib";
import { Murmur3 } from "@swim/util";
import { Tag } from "./Tag";
var Span = (function (_super) {
    __extends(Span, _super);
    function Span(start, end) {
        var _this = _super.call(this) || this;
        _this._start = start;
        _this._end = end;
        return _this;
    }
    Span.prototype.start = function () {
        return this._start;
    };
    Span.prototype.end = function () {
        return this._end;
    };
    Span.prototype.union = function (that) {
        if (that instanceof Tag.Mark) {
            var start = this._start.min(that);
            var end = this._end.max(that);
            if (start === this._start && end === this._end) {
                return this;
            }
            else {
                return Span.from(start, end);
            }
        }
        else if (that instanceof Span) {
            var start = this._start.min(that._start);
            var end = this._end.max(that._end);
            if (start === this._start && end === this._end) {
                return this;
            }
            else {
                return Span.from(start, end);
            }
        }
        throw new Error(that.toString());
    };
    Span.prototype.shift = function (mark) {
        var start = this._start.shift(mark);
        var end = this._end.shift(mark);
        if (start === this._start && end === this._end) {
            return this;
        }
        else {
            return Span.from(start, end);
        }
    };
    Span.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Span) {
            return this._start.equals(that._start) && this._end.equals(that._end);
        }
        return false;
    };
    Span.prototype.hashCode = function () {
        if (Span._hashSeed === void 0) {
            Span._hashSeed = Murmur3.seed(Span);
        }
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(Span._hashSeed, this._start.hashCode()), this._end.hashCode()));
    };
    Span.prototype.display = function (output) {
        if (this._start._note !== null) {
            output = output.write(this._start._note).write(58).write(32);
        }
        Tag.Format.displayNumber(this._start._line, output);
        output = output.write(58);
        Tag.Format.displayNumber(this._start._column, output);
        output = output.write(45);
        Tag.Format.displayNumber(this._end._line, output);
        output = output.write(58);
        Tag.Format.displayNumber(this._end._column, output);
        if (this._end._note !== null) {
            output = output.write(58).write(32).write(this._end._note);
        }
    };
    Span.prototype.debug = function (output) {
        output = output.write("Span").write(".").write("from").write("(");
        this._start.debug(output);
        output = output.write(", ");
        this._end.debug(output);
        output = output.write(")");
    };
    Span.prototype.toString = function () {
        return Tag.Format.display(this);
    };
    Span.from = function (start, end) {
        if (start._offset > end._offset) {
            var tmp = start;
            start = end;
            end = tmp;
        }
        return new Span(start, end);
    };
    return Span;
}(Tag));
export { Span };
Tag.Span = Span;
//# sourceMappingURL=Span.js.map