import { UtfErrorMode } from "./UtfErrorMode";
import { Unicode } from "./Unicode";
import { Utf8DecodedOutput } from "./Utf8DecodedOutput";
import { Utf8EncodedOutput } from "./Utf8EncodedOutput";
var Utf8 = (function () {
    function Utf8() {
    }
    Utf8.sizeOf = function (u, errorMode) {
        if (typeof u === "number" || u === void 0) {
            if (typeof u === "number") {
                if (u === 0x0000 && errorMode !== void 0 && errorMode.isNonZero()) {
                    return 2;
                }
                else if (u >= 0x0000 && u <= 0x007F) {
                    return 1;
                }
                else if (u >= 0x0080 && u <= 0x07FF) {
                    return 2;
                }
                else if (u >= 0x0800 && u <= 0xFFFF ||
                    u >= 0xE000 && u <= 0xFFFF) {
                    return 3;
                }
                else if (u >= 0x10000 && u <= 0x10FFFF) {
                    return 4;
                }
            }
            if (errorMode === void 0) {
                return 3;
            }
            else if (errorMode.isReplacement()) {
                return Utf8.sizeOf(errorMode.replacementChar());
            }
            else {
                return 0;
            }
        }
        else if (typeof u === "string") {
            var size = 0;
            for (var i = 0, n = u.length; i < n; i = u.offsetByCodePoints(i, 1)) {
                size += Utf8.sizeOf(u.charCodeAt(i), errorMode);
            }
            return size;
        }
        else {
            throw new TypeError("" + u);
        }
    };
    Utf8.decodedOutput = function (output, errorMode) {
        if (errorMode === void 0) { errorMode = UtfErrorMode.fatal(); }
        return new Utf8DecodedOutput(output, errorMode);
    };
    Utf8.encodedOutput = function (output, errorMode) {
        if (errorMode === void 0) { errorMode = UtfErrorMode.fatal(); }
        return new Utf8EncodedOutput(output, errorMode);
    };
    Utf8.decodedString = function () {
        return Utf8.decodedOutput(Unicode.stringOutput());
    };
    return Utf8;
}());
export { Utf8 };
//# sourceMappingURL=Utf8.js.map