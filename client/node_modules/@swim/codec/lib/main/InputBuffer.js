import { __extends } from "tslib";
import { Mark } from "./Mark";
import { InputException } from "./InputException";
import { InputSettings } from "./InputSettings";
import { Input } from "./Input";
var InputBuffer = (function (_super) {
    __extends(InputBuffer, _super);
    function InputBuffer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InputBuffer.empty = function (id, mark, settings) {
        if (id === void 0) { id = null; }
        if (mark === void 0) { mark = Mark.zero(); }
        if (settings === void 0) { settings = InputSettings.standard(); }
        if (id === null && mark === Mark.zero() && settings === InputSettings.standard()) {
            if (!InputBuffer._emptyBuffer) {
                InputBuffer._emptyBuffer = new InputBufferEmpty(null, Mark.zero(), InputSettings.standard());
            }
            return InputBuffer._emptyBuffer;
        }
        return new InputBufferEmpty(id, mark, settings);
    };
    InputBuffer.done = function (id, mark, settings) {
        if (id === void 0) { id = null; }
        if (mark === void 0) { mark = Mark.zero(); }
        if (settings === void 0) { settings = InputSettings.standard(); }
        if (id === null && mark === Mark.zero() && settings === InputSettings.standard()) {
            if (!InputBuffer._doneBuffer) {
                InputBuffer._doneBuffer = new InputBufferDone(null, Mark.zero(), InputSettings.standard());
            }
            return InputBuffer._doneBuffer;
        }
        return new InputBufferDone(id, mark, settings);
    };
    InputBuffer.error = function (error, id, mark, settings) {
        if (id === void 0) { id = null; }
        if (mark === void 0) { mark = Mark.zero(); }
        if (settings === void 0) { settings = InputSettings.standard(); }
        return new InputBufferError(error, id, mark, settings);
    };
    return InputBuffer;
}(Input));
export { InputBuffer };
var InputBufferEmpty = (function (_super) {
    __extends(InputBufferEmpty, _super);
    function InputBufferEmpty(id, mark, settings) {
        var _this = _super.call(this) || this;
        _this._id = id;
        _this._mark = mark;
        _this._settings = settings;
        return _this;
    }
    InputBufferEmpty.prototype.isCont = function () {
        return false;
    };
    InputBufferEmpty.prototype.isEmpty = function () {
        return true;
    };
    InputBufferEmpty.prototype.isDone = function () {
        return false;
    };
    InputBufferEmpty.prototype.isError = function () {
        return false;
    };
    InputBufferEmpty.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return true;
        }
        else if (isPart) {
            return this;
        }
        else {
            return InputBuffer.done(this._id, this._mark, this._settings);
        }
    };
    InputBufferEmpty.prototype.index = function (index) {
        if (index === void 0) {
            return 0;
        }
        else if (index === 0) {
            return this;
        }
        else {
            var error = new InputException("invalid index");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        }
    };
    InputBufferEmpty.prototype.limit = function (limit) {
        if (limit === void 0) {
            return 0;
        }
        else if (limit === 0) {
            return this;
        }
        else {
            var error = new InputException("invalid limit");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        }
    };
    InputBufferEmpty.prototype.capacity = function () {
        return 0;
    };
    InputBufferEmpty.prototype.remaining = function () {
        return 0;
    };
    InputBufferEmpty.prototype.has = function (index) {
        return false;
    };
    InputBufferEmpty.prototype.get = function (index) {
        throw new InputException();
    };
    InputBufferEmpty.prototype.set = function (index, token) {
        throw new InputException();
    };
    InputBufferEmpty.prototype.head = function () {
        throw new InputException();
    };
    InputBufferEmpty.prototype.step = function (offset) {
        var error = new InputException("empty step");
        return InputBuffer.error(error, this._id, this._mark, this._settings);
    };
    InputBufferEmpty.prototype.seek = function (mark) {
        var error = new InputException("empty seek");
        return InputBuffer.error(error, this._id, this._mark, this._settings);
    };
    InputBufferEmpty.prototype.id = function (id) {
        if (id === void 0) {
            return this._id;
        }
        else {
            return InputBuffer.empty(id, this._mark, this._settings);
        }
    };
    InputBufferEmpty.prototype.mark = function (mark) {
        if (mark === void 0) {
            return this._mark;
        }
        else {
            return InputBuffer.empty(this._id, mark, this._settings);
        }
    };
    InputBufferEmpty.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            return InputBuffer.empty(this._id, this._mark, settings);
        }
    };
    InputBufferEmpty.prototype.clone = function () {
        return this;
    };
    return InputBufferEmpty;
}(InputBuffer));
var InputBufferDone = (function (_super) {
    __extends(InputBufferDone, _super);
    function InputBufferDone(id, mark, settings) {
        var _this = _super.call(this) || this;
        _this._id = id;
        _this._mark = mark;
        _this._settings = settings;
        return _this;
    }
    InputBufferDone.prototype.isCont = function () {
        return false;
    };
    InputBufferDone.prototype.isEmpty = function () {
        return false;
    };
    InputBufferDone.prototype.isDone = function () {
        return true;
    };
    InputBufferDone.prototype.isError = function () {
        return false;
    };
    InputBufferDone.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return false;
        }
        else if (isPart) {
            return InputBuffer.empty(this._id, this._mark, this._settings);
        }
        else {
            return this;
        }
    };
    InputBufferDone.prototype.index = function (index) {
        if (index === void 0) {
            return 0;
        }
        else if (index === 0) {
            return this;
        }
        else {
            var error = new InputException("invalid index");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        }
    };
    InputBufferDone.prototype.limit = function (limit) {
        if (limit === void 0) {
            return 0;
        }
        else if (limit === 0) {
            return this;
        }
        else {
            var error = new InputException("invalid limit");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        }
    };
    InputBufferDone.prototype.capacity = function () {
        return 0;
    };
    InputBufferDone.prototype.remaining = function () {
        return 0;
    };
    InputBufferDone.prototype.has = function (index) {
        return false;
    };
    InputBufferDone.prototype.get = function (index) {
        throw new InputException();
    };
    InputBufferDone.prototype.set = function (index, token) {
        throw new InputException();
    };
    InputBufferDone.prototype.head = function () {
        throw new InputException();
    };
    InputBufferDone.prototype.step = function (offset) {
        var error = new InputException("done step");
        return InputBuffer.error(error, this._id, this._mark, this._settings);
    };
    InputBufferDone.prototype.seek = function (mark) {
        var error = new InputException("done seek");
        return InputBuffer.error(error, this._id, this._mark, this._settings);
    };
    InputBufferDone.prototype.id = function (id) {
        if (id === void 0) {
            return this._id;
        }
        else {
            return InputBuffer.done(id, this._mark, this._settings);
        }
    };
    InputBufferDone.prototype.mark = function (mark) {
        if (mark === void 0) {
            return this._mark;
        }
        else {
            return InputBuffer.done(this._id, mark, this._settings);
        }
    };
    InputBufferDone.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            return InputBuffer.done(this._id, this._mark, settings);
        }
    };
    InputBufferDone.prototype.clone = function () {
        return this;
    };
    return InputBufferDone;
}(InputBuffer));
var InputBufferError = (function (_super) {
    __extends(InputBufferError, _super);
    function InputBufferError(error, id, mark, settings) {
        var _this = _super.call(this) || this;
        _this._error = error;
        _this._id = id;
        _this._mark = mark;
        _this._settings = settings;
        return _this;
    }
    InputBufferError.prototype.isCont = function () {
        return false;
    };
    InputBufferError.prototype.isEmpty = function () {
        return false;
    };
    InputBufferError.prototype.isDone = function () {
        return false;
    };
    InputBufferError.prototype.isError = function () {
        return true;
    };
    InputBufferError.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return false;
        }
        else {
            return this;
        }
    };
    InputBufferError.prototype.index = function (index) {
        if (index === void 0) {
            return 0;
        }
        else if (index === 0) {
            return this;
        }
        else {
            var error = new InputException("invalid index");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        }
    };
    InputBufferError.prototype.limit = function (limit) {
        if (limit === void 0) {
            return 0;
        }
        else if (limit === 0) {
            return this;
        }
        else {
            var error = new InputException("invalid limit");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        }
    };
    InputBufferError.prototype.capacity = function () {
        return 0;
    };
    InputBufferError.prototype.remaining = function () {
        return 0;
    };
    InputBufferError.prototype.has = function (index) {
        return false;
    };
    InputBufferError.prototype.get = function (index) {
        throw new InputException();
    };
    InputBufferError.prototype.set = function (index, token) {
        throw new InputException();
    };
    InputBufferError.prototype.head = function () {
        throw new InputException();
    };
    InputBufferError.prototype.step = function (offset) {
        var error = new InputException("error step");
        return InputBuffer.error(error, this._id, this._mark, this._settings);
    };
    InputBufferError.prototype.trap = function () {
        return this._error;
    };
    InputBufferError.prototype.seek = function (mark) {
        var error = new InputException("error seek");
        return InputBuffer.error(error, this._id, this._mark, this._settings);
    };
    InputBufferError.prototype.id = function (id) {
        if (id === void 0) {
            return this._id;
        }
        else {
            return InputBuffer.error(this._error, id, this._mark, this._settings);
        }
    };
    InputBufferError.prototype.mark = function (mark) {
        if (mark === void 0) {
            return this._mark;
        }
        else {
            return InputBuffer.error(this._error, this._id, mark, this._settings);
        }
    };
    InputBufferError.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            return InputBuffer.error(this._error, this._id, this._mark, settings);
        }
    };
    InputBufferError.prototype.clone = function () {
        return this;
    };
    return InputBufferError;
}(InputBuffer));
//# sourceMappingURL=InputBuffer.js.map