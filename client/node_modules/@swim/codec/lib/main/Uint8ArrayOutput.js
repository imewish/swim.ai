import { __extends } from "tslib";
import { OutputException } from "./OutputException";
import { OutputSettings } from "./OutputSettings";
import { OutputBuffer } from "./OutputBuffer";
var Uint8ArrayOutput = (function (_super) {
    __extends(Uint8ArrayOutput, _super);
    function Uint8ArrayOutput(array, index, limit, settings, isPart) {
        if (settings === void 0) { settings = OutputSettings.standard(); }
        if (isPart === void 0) { isPart = false; }
        var _this = _super.call(this) || this;
        _this._array = array;
        _this._index = index;
        _this._limit = limit;
        _this._settings = settings;
        _this._isPart = isPart;
        return _this;
    }
    Uint8ArrayOutput.prototype.isCont = function () {
        return this._index < this._limit;
    };
    Uint8ArrayOutput.prototype.isFull = function () {
        return this._isPart && this._index >= this._limit;
    };
    Uint8ArrayOutput.prototype.isDone = function () {
        return !this._isPart && this._index >= this._limit;
    };
    Uint8ArrayOutput.prototype.isError = function () {
        return false;
    };
    Uint8ArrayOutput.prototype.isPart = function (isPart) {
        if (isPart === void 0) {
            return this._isPart;
        }
        else {
            this._isPart = isPart;
            return this;
        }
    };
    Uint8ArrayOutput.prototype.index = function (index) {
        if (index === void 0) {
            return this._index;
        }
        else if (0 <= index && index <= this._limit) {
            this._index = index;
            return this;
        }
        else {
            return OutputBuffer.error(new OutputException("invalid index"), this._settings);
        }
    };
    Uint8ArrayOutput.prototype.limit = function (limit) {
        if (limit === void 0) {
            return this._limit;
        }
        else if (0 <= limit && limit <= this._array.length) {
            this._limit = limit;
            return this;
        }
        else {
            return OutputBuffer.error(new OutputException("invalid limit"), this._settings);
        }
    };
    Uint8ArrayOutput.prototype.capacity = function () {
        return this._array.length;
    };
    Uint8ArrayOutput.prototype.remaining = function () {
        return this._limit - this._index;
    };
    Uint8ArrayOutput.prototype.has = function (index) {
        return 0 <= index && index < this._limit;
    };
    Uint8ArrayOutput.prototype.get = function (index) {
        if (0 <= index && index < this._limit) {
            return this._array[index];
        }
        else {
            throw new OutputException();
        }
    };
    Uint8ArrayOutput.prototype.set = function (index, token) {
        if (0 <= index && index < this._limit) {
            this._array[index] = token;
        }
        else {
            throw new OutputException();
        }
    };
    Uint8ArrayOutput.prototype.write = function (token) {
        if (typeof token === "number") {
            var index = this._index;
            if (index < this._limit) {
                this._array[index] = token;
                this._index = index + 1;
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("full"), this._settings);
            }
        }
        else {
            return OutputBuffer.error(new OutputException("binary output"), this._settings);
        }
    };
    Uint8ArrayOutput.prototype.writeln = function (string) {
        return OutputBuffer.error(new OutputException("binary output"), this._settings);
    };
    Uint8ArrayOutput.prototype.step = function (offset) {
        var index = this._index + offset;
        if (0 <= index && index <= this._limit) {
            this._index = index;
            return this;
        }
        else {
            return OutputBuffer.error(new OutputException("invalid step"), this._settings);
        }
    };
    Uint8ArrayOutput.prototype.bind = function () {
        return new Uint8Array(this._array.buffer, 0, this._index);
    };
    Uint8ArrayOutput.prototype.settings = function (settings) {
        if (settings === void 0) {
            return this._settings;
        }
        else {
            this._settings = OutputSettings.fromAny(settings);
            return this;
        }
    };
    Uint8ArrayOutput.prototype.clone = function () {
        return new Uint8ArrayOutput(this._array, this._index, this._limit, this._settings, this._isPart);
    };
    return Uint8ArrayOutput;
}(OutputBuffer));
export { Uint8ArrayOutput };
//# sourceMappingURL=Uint8ArrayOutput.js.map