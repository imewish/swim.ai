(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@swim/util')) :
    typeof define === 'function' && define.amd ? define(['exports', '@swim/util'], factory) :
    (global = global || self, factory(global.swim = global.swim || {}, global.swim));
}(this, (function (exports, util) { 'use strict';

    var Tag = (function () {
        function Tag() {
        }
        return Tag;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var Mark = (function (_super) {
        __extends(Mark, _super);
        function Mark(offset, line, column, note) {
            var _this = _super.call(this) || this;
            _this._offset = offset;
            _this._line = line;
            _this._column = column;
            _this._note = note;
            return _this;
        }
        Mark.prototype.offset = function () {
            return this._offset;
        };
        Mark.prototype.line = function () {
            return this._line;
        };
        Mark.prototype.column = function () {
            return this._column;
        };
        Mark.prototype.note = function () {
            return this._note;
        };
        Mark.prototype.min = function (that) {
            if (this._offset <= that._offset) {
                return this;
            }
            else {
                return that;
            }
        };
        Mark.prototype.max = function (that) {
            if (this._offset >= that._offset) {
                return this;
            }
            else {
                return that;
            }
        };
        Mark.prototype.start = function () {
            return this;
        };
        Mark.prototype.end = function () {
            return this;
        };
        Mark.prototype.union = function (that) {
            if (that instanceof Mark) {
                if (this._offset === that._offset && this._line === that._line
                    && this._column === that._column) {
                    return this;
                }
                else {
                    return Tag.Span.from(this, that);
                }
            }
            else if (that instanceof Tag.Span) {
                var start = this.min(that._start);
                var end = this.max(that._end);
                if (start === that._start && end === that._end) {
                    return that;
                }
                else {
                    return Tag.Span.from(start, end);
                }
            }
            throw new Error(that.toString());
        };
        Mark.prototype.shift = function (mark) {
            var offset = this._offset + (this._offset - mark._offset);
            var line = this._line + (this._line - mark._line);
            var column = this._column;
            if (line === 1) {
                column += (this._column - mark._column);
            }
            if (offset === this._offset && line === this._line && column === this._column) {
                return this;
            }
            else {
                return Mark.at(offset, line, column, this._note);
            }
        };
        Mark.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Mark) {
                return this._offset === that._offset && this._line === that._line
                    && this._column === that._column && this._note === that._note;
            }
            return false;
        };
        Mark.prototype.hashCode = function () {
            if (Mark._hashSeed === void 0) {
                Mark._hashSeed = util.Murmur3.seed(Mark);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(util.Murmur3.mix(util.Murmur3.mix(Mark._hashSeed, this._offset), this._line), this._column), util.Murmur3.hash(this._note)));
        };
        Mark.prototype.display = function (output) {
            Tag.Format.displayNumber(this._line, output);
            output = output.write(58);
            Tag.Format.displayNumber(this._column, output);
            if (this._note !== null) {
                output = output.write(58).write(32).write(this._note);
            }
        };
        Mark.prototype.debug = function (output) {
            output = output.write("Mark").write(".").write("at").write("(");
            Tag.Format.debugNumber(this._offset, output);
            output = output.write(", ");
            Tag.Format.debugNumber(this._line, output);
            output = output.write(", ");
            Tag.Format.debugNumber(this._column, output);
            if (this._note !== null) {
                output = output.write(", ");
                Tag.Format.debugString(this._note, output);
            }
            output = output.write(")");
        };
        Mark.prototype.toString = function () {
            return Tag.Format.display(this);
        };
        Mark.zero = function () {
            if (!Mark._zero) {
                Mark._zero = new Mark(0, 1, 1, null);
            }
            return Mark._zero;
        };
        Mark.at = function (offset, line, column, note) {
            if (note === void 0) { note = null; }
            return new Mark(offset, line, column, note);
        };
        return Mark;
    }(Tag));
    Tag.Mark = Mark;

    var Span = (function (_super) {
        __extends(Span, _super);
        function Span(start, end) {
            var _this = _super.call(this) || this;
            _this._start = start;
            _this._end = end;
            return _this;
        }
        Span.prototype.start = function () {
            return this._start;
        };
        Span.prototype.end = function () {
            return this._end;
        };
        Span.prototype.union = function (that) {
            if (that instanceof Tag.Mark) {
                var start = this._start.min(that);
                var end = this._end.max(that);
                if (start === this._start && end === this._end) {
                    return this;
                }
                else {
                    return Span.from(start, end);
                }
            }
            else if (that instanceof Span) {
                var start = this._start.min(that._start);
                var end = this._end.max(that._end);
                if (start === this._start && end === this._end) {
                    return this;
                }
                else {
                    return Span.from(start, end);
                }
            }
            throw new Error(that.toString());
        };
        Span.prototype.shift = function (mark) {
            var start = this._start.shift(mark);
            var end = this._end.shift(mark);
            if (start === this._start && end === this._end) {
                return this;
            }
            else {
                return Span.from(start, end);
            }
        };
        Span.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof Span) {
                return this._start.equals(that._start) && this._end.equals(that._end);
            }
            return false;
        };
        Span.prototype.hashCode = function () {
            if (Span._hashSeed === void 0) {
                Span._hashSeed = util.Murmur3.seed(Span);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(Span._hashSeed, this._start.hashCode()), this._end.hashCode()));
        };
        Span.prototype.display = function (output) {
            if (this._start._note !== null) {
                output = output.write(this._start._note).write(58).write(32);
            }
            Tag.Format.displayNumber(this._start._line, output);
            output = output.write(58);
            Tag.Format.displayNumber(this._start._column, output);
            output = output.write(45);
            Tag.Format.displayNumber(this._end._line, output);
            output = output.write(58);
            Tag.Format.displayNumber(this._end._column, output);
            if (this._end._note !== null) {
                output = output.write(58).write(32).write(this._end._note);
            }
        };
        Span.prototype.debug = function (output) {
            output = output.write("Span").write(".").write("from").write("(");
            this._start.debug(output);
            output = output.write(", ");
            this._end.debug(output);
            output = output.write(")");
        };
        Span.prototype.toString = function () {
            return Tag.Format.display(this);
        };
        Span.from = function (start, end) {
            if (start._offset > end._offset) {
                var tmp = start;
                start = end;
                end = tmp;
            }
            return new Span(start, end);
        };
        return Span;
    }(Tag));
    Tag.Span = Span;

    var InputException = (function (_super) {
        __extends(InputException, _super);
        function InputException(message) {
            var _this = _super.call(this, message) || this;
            _this.__proto__ = InputException.prototype;
            return _this;
        }
        return InputException;
    }(Error));

    var OutputSettings = (function () {
        function OutputSettings(lineSeparator, isPretty, isStyled) {
            this._lineSeparator = lineSeparator;
            this._isPretty = isPretty;
            this._isStyled = isStyled;
        }
        OutputSettings.prototype.lineSeparator = function (lineSeparator) {
            if (lineSeparator === void 0) {
                return this._lineSeparator;
            }
            else {
                return this.copy(lineSeparator, this._isPretty, this._isStyled);
            }
        };
        OutputSettings.prototype.isPretty = function (isPretty) {
            if (isPretty === void 0) {
                return this._isPretty;
            }
            else {
                return this.copy(this._lineSeparator, isPretty, this._isStyled);
            }
        };
        OutputSettings.prototype.isStyled = function (isStyled) {
            if (isStyled === void 0) {
                return this._isStyled;
            }
            else {
                return this.copy(this._lineSeparator, this._isPretty, isStyled);
            }
        };
        OutputSettings.prototype.copy = function (lineSeparator, isPretty, isStyled) {
            return OutputSettings.create(lineSeparator, isPretty, isStyled);
        };
        OutputSettings.prototype.canEqual = function (that) {
            return that instanceof OutputSettings;
        };
        OutputSettings.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof OutputSettings) {
                return that.canEqual(this) && this._lineSeparator === that._lineSeparator
                    && this._isPretty === that._isPretty && this._isStyled === that._isStyled;
            }
            return false;
        };
        OutputSettings.prototype.hashCode = function () {
            if (OutputSettings._hashSeed === void 0) {
                OutputSettings._hashSeed = util.Murmur3.seed(OutputSettings);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(util.Murmur3.mix(OutputSettings._hashSeed, util.Murmur3.hash(this._lineSeparator)), util.Murmur3.hash(this._isPretty)), util.Murmur3.hash(this._isStyled)));
        };
        OutputSettings.prototype.debug = function (output) {
            output = output.write("OutputSettings").write(46);
            if (!this._isPretty && !this._isStyled) {
                output = output.write("standard");
            }
            else if (this._isPretty && !this._isStyled) {
                output = output.write("pretty");
            }
            else if (!this._isPretty && this._isStyled) {
                output = output.write("styled");
            }
            else {
                output = output.write("prettyStyled");
            }
            output = output.write(40).write(41);
            if (Format.lineSeparator() !== this._lineSeparator) {
                output = output.write(46).write("lineSeparator").write(40)
                    .display(this._lineSeparator).write(41);
            }
        };
        OutputSettings.prototype.toString = function () {
            return Format.debug(this);
        };
        OutputSettings.standard = function () {
            if (!OutputSettings._standard) {
                OutputSettings._standard = new OutputSettings(Format.lineSeparator(), false, false);
            }
            return OutputSettings._standard;
        };
        OutputSettings.pretty = function () {
            if (!OutputSettings._pretty) {
                OutputSettings._pretty = new OutputSettings(Format.lineSeparator(), true, false);
            }
            return OutputSettings._pretty;
        };
        OutputSettings.styled = function () {
            if (!OutputSettings._styled) {
                OutputSettings._styled = new OutputSettings(Format.lineSeparator(), false, true);
            }
            return OutputSettings._styled;
        };
        OutputSettings.prettyStyled = function () {
            if (!OutputSettings._prettyStyled) {
                OutputSettings._prettyStyled = new OutputSettings(Format.lineSeparator(), true, true);
            }
            return OutputSettings._prettyStyled;
        };
        OutputSettings.create = function (lineSeparator, isPretty, isStyled) {
            if (typeof lineSeparator !== "string") {
                lineSeparator = Format.lineSeparator();
            }
            if (typeof isPretty !== "boolean") {
                isPretty = false;
            }
            if (typeof isStyled !== "boolean") {
                isStyled = false;
            }
            if (Format.lineSeparator() === lineSeparator) {
                if (!isPretty && !isStyled) {
                    return OutputSettings.standard();
                }
                else if (isPretty && !isStyled) {
                    return OutputSettings.pretty();
                }
                else if (!isPretty && isStyled) {
                    return OutputSettings.styled();
                }
                else {
                    return OutputSettings.prettyStyled();
                }
            }
            return new OutputSettings(lineSeparator, isPretty, isStyled);
        };
        OutputSettings.fromAny = function (settings) {
            if (settings instanceof OutputSettings) {
                return settings;
            }
            else if (typeof settings === "object" && settings) {
                return OutputSettings.create(settings.lineSeparator, settings.isPretty, settings.isStyled);
            }
            return OutputSettings.standard();
        };
        return OutputSettings;
    }());

    var OutputException = (function (_super) {
        __extends(OutputException, _super);
        function OutputException(message) {
            var _this = _super.call(this, message) || this;
            _this.__proto__ = OutputException.prototype;
            return _this;
        }
        return OutputException;
    }(Error));

    var Output = (function () {
        function Output() {
        }
        Output.prototype.writeln = function (string) {
            if (typeof string === "string") {
                this.write(string);
            }
            return this.write(this.settings().lineSeparator());
        };
        Output.prototype.display = function (object) {
            Format.display(object, this);
            return this;
        };
        Output.prototype.debug = function (object) {
            Format.debug(object, this);
            return this;
        };
        Output.prototype.flush = function () {
            return this;
        };
        Output.prototype.push = function () {
            var tokens = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                tokens[_i] = arguments[_i];
            }
            var n = tokens.length;
            for (var i = 0; i < n; i += 1) {
                this.write(tokens[i]);
            }
        };
        Output.prototype.trap = function () {
            throw new OutputException();
        };
        Output.prototype.clone = function () {
            throw new Error();
        };
        Output.full = function (value, settings) {
            if (value === void 0) { value = null; }
            if (settings === void 0) { settings = OutputSettings.standard(); }
            if (value === null && settings === OutputSettings.standard()) {
                if (!Output._full) {
                    Output._full = new OutputFull(value, OutputSettings.standard());
                }
                return Output._full;
            }
            return new OutputFull(value, settings);
        };
        Output.done = function (value, settings) {
            if (value === void 0) { value = null; }
            if (settings === void 0) { settings = OutputSettings.standard(); }
            if (value === null && settings === OutputSettings.standard()) {
                if (!Output._done) {
                    Output._done = new OutputDone(value, OutputSettings.standard());
                }
                return Output._done;
            }
            return new OutputDone(value, settings);
        };
        Output.error = function (error, settings) {
            if (settings === void 0) { settings = OutputSettings.standard(); }
            return new OutputError(error, settings);
        };
        return Output;
    }());
    var OutputFull = (function (_super) {
        __extends(OutputFull, _super);
        function OutputFull(value, settings) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._settings = settings;
            return _this;
        }
        OutputFull.prototype.isCont = function () {
            return false;
        };
        OutputFull.prototype.isFull = function () {
            return true;
        };
        OutputFull.prototype.isDone = function () {
            return false;
        };
        OutputFull.prototype.isError = function () {
            return false;
        };
        OutputFull.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return true;
            }
            else if (isPart) {
                return Output.done(this._value, this._settings);
            }
            else {
                return this;
            }
        };
        OutputFull.prototype.write = function (tokenOrString) {
            return Output.error(new OutputException("full"), this._settings);
        };
        OutputFull.prototype.writeln = function (string) {
            return Output.error(new OutputException("full"), this._settings);
        };
        OutputFull.prototype.bind = function () {
            return this._value;
        };
        OutputFull.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return Output.full(this._value, settings);
            }
        };
        OutputFull.prototype.clone = function () {
            return this;
        };
        return OutputFull;
    }(Output));
    var OutputDone = (function (_super) {
        __extends(OutputDone, _super);
        function OutputDone(value, settings) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._settings = settings;
            return _this;
        }
        OutputDone.prototype.isCont = function () {
            return false;
        };
        OutputDone.prototype.isFull = function () {
            return false;
        };
        OutputDone.prototype.isDone = function () {
            return true;
        };
        OutputDone.prototype.isError = function () {
            return false;
        };
        OutputDone.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else if (isPart) {
                return this;
            }
            else {
                return Output.full(this._value, this._settings);
            }
        };
        OutputDone.prototype.write = function (tokenOrString) {
            return Output.error(new OutputException("done"), this._settings);
        };
        OutputDone.prototype.writeln = function (string) {
            return Output.error(new OutputException("done"), this._settings);
        };
        OutputDone.prototype.bind = function () {
            return this._value;
        };
        OutputDone.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return Output.done(this._value, settings);
            }
        };
        OutputDone.prototype.clone = function () {
            return this;
        };
        return OutputDone;
    }(Output));
    var OutputError = (function (_super) {
        __extends(OutputError, _super);
        function OutputError(error, settings) {
            var _this = _super.call(this) || this;
            _this._error = error;
            _this._settings = settings;
            return _this;
        }
        OutputError.prototype.isCont = function () {
            return false;
        };
        OutputError.prototype.isFull = function () {
            return false;
        };
        OutputError.prototype.isDone = function () {
            return false;
        };
        OutputError.prototype.isError = function () {
            return true;
        };
        OutputError.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        OutputError.prototype.write = function (tokenOrString) {
            return this;
        };
        OutputError.prototype.writeln = function (string) {
            return this;
        };
        OutputError.prototype.bind = function () {
            throw new OutputException();
        };
        OutputError.prototype.trap = function () {
            return this._error;
        };
        OutputError.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return Output.error(this._error, settings);
            }
        };
        OutputError.prototype.clone = function () {
            return this;
        };
        return OutputError;
    }(Output));

    var Input = (function () {
        function Input() {
        }
        Input.prototype.trap = function () {
            throw new InputException();
        };
        Input.prototype.offset = function () {
            return this.mark()._offset;
        };
        Input.prototype.line = function () {
            return this.mark()._line;
        };
        Input.prototype.column = function () {
            return this.mark()._column;
        };
        Input.empty = function (id, mark, settings) {
            if (id === void 0) { id = null; }
            if (mark === void 0) { mark = Mark.zero(); }
            if (settings === void 0) { settings = InputSettings.standard(); }
            if (id === null && mark === Mark.zero() && settings === InputSettings.standard()) {
                if (!Input._empty) {
                    Input._empty = new InputEmpty(null, Mark.zero(), InputSettings.standard());
                }
                return Input._empty;
            }
            return new InputEmpty(id, mark, settings);
        };
        Input.done = function (id, mark, settings) {
            if (id === void 0) { id = null; }
            if (mark === void 0) { mark = Mark.zero(); }
            if (settings === void 0) { settings = InputSettings.standard(); }
            if (id === null && mark === Mark.zero() && settings === InputSettings.standard()) {
                if (!Input._done) {
                    Input._done = new InputDone(null, Mark.zero(), InputSettings.standard());
                }
                return Input._done;
            }
            return new InputDone(id, mark, settings);
        };
        Input.error = function (error, id, mark, settings) {
            if (id === void 0) { id = null; }
            if (mark === void 0) { mark = Mark.zero(); }
            if (settings === void 0) { settings = InputSettings.standard(); }
            return new InputError(error, id, mark, settings);
        };
        return Input;
    }());
    var InputEmpty = (function (_super) {
        __extends(InputEmpty, _super);
        function InputEmpty(id, mark, settings) {
            var _this = _super.call(this) || this;
            _this._id = id;
            _this._mark = mark;
            _this._settings = settings;
            return _this;
        }
        InputEmpty.prototype.isCont = function () {
            return false;
        };
        InputEmpty.prototype.isEmpty = function () {
            return true;
        };
        InputEmpty.prototype.isDone = function () {
            return false;
        };
        InputEmpty.prototype.isError = function () {
            return false;
        };
        InputEmpty.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return true;
            }
            else if (isPart) {
                return this;
            }
            else {
                return Input.done(this._id, this._mark, this._settings);
            }
        };
        InputEmpty.prototype.head = function () {
            throw new InputException();
        };
        InputEmpty.prototype.step = function () {
            var error = new InputException("empty step");
            return Input.error(error, this._id, this._mark, this._settings);
        };
        InputEmpty.prototype.seek = function (mark) {
            var error = new InputException("empty seek");
            return Input.error(error, this._id, this._mark, this._settings);
        };
        InputEmpty.prototype.id = function (id) {
            if (id === void 0) {
                return this._id;
            }
            else {
                return Input.empty(id, this._mark, this._settings);
            }
        };
        InputEmpty.prototype.mark = function (mark) {
            if (mark === void 0) {
                return this._mark;
            }
            else {
                return Input.empty(this._id, mark, this._settings);
            }
        };
        InputEmpty.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return Input.empty(this._id, this._mark, settings);
            }
        };
        InputEmpty.prototype.clone = function () {
            return this;
        };
        return InputEmpty;
    }(Input));
    var InputDone = (function (_super) {
        __extends(InputDone, _super);
        function InputDone(id, mark, settings) {
            var _this = _super.call(this) || this;
            _this._id = id;
            _this._mark = mark;
            _this._settings = settings;
            return _this;
        }
        InputDone.prototype.isCont = function () {
            return false;
        };
        InputDone.prototype.isEmpty = function () {
            return false;
        };
        InputDone.prototype.isDone = function () {
            return true;
        };
        InputDone.prototype.isError = function () {
            return false;
        };
        InputDone.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else if (isPart) {
                return Input.empty(this._id, this._mark, this._settings);
            }
            else {
                return this;
            }
        };
        InputDone.prototype.head = function () {
            throw new InputException();
        };
        InputDone.prototype.step = function () {
            var error = new InputException("done step");
            return Input.error(error, this._id, this._mark, this._settings);
        };
        InputDone.prototype.seek = function (mark) {
            var error = new InputException("empty seek");
            return Input.error(error, this._id, this._mark, this._settings);
        };
        InputDone.prototype.id = function (id) {
            if (id === void 0) {
                return this._id;
            }
            else {
                return Input.done(id, this._mark, this._settings);
            }
        };
        InputDone.prototype.mark = function (mark) {
            if (mark === void 0) {
                return this._mark;
            }
            else {
                return Input.done(this._id, mark, this._settings);
            }
        };
        InputDone.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return Input.done(this._id, this._mark, settings);
            }
        };
        InputDone.prototype.clone = function () {
            return this;
        };
        return InputDone;
    }(Input));
    var InputError = (function (_super) {
        __extends(InputError, _super);
        function InputError(error, id, mark, settings) {
            var _this = _super.call(this) || this;
            _this._error = error;
            _this._id = id;
            _this._mark = mark;
            _this._settings = settings;
            return _this;
        }
        InputError.prototype.isCont = function () {
            return false;
        };
        InputError.prototype.isEmpty = function () {
            return false;
        };
        InputError.prototype.isDone = function () {
            return false;
        };
        InputError.prototype.isError = function () {
            return true;
        };
        InputError.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        InputError.prototype.head = function () {
            throw new InputException();
        };
        InputError.prototype.step = function () {
            var error = new InputException("error step");
            return Input.error(error, this._id, this._mark, this._settings);
        };
        InputError.prototype.trap = function () {
            return this._error;
        };
        InputError.prototype.seek = function (mark) {
            var error = new InputException("error seek");
            return Input.error(error, this._id, this._mark, this._settings);
        };
        InputError.prototype.id = function (id) {
            if (id === void 0) {
                return this._id;
            }
            else {
                return Input.error(this._error, id, this._mark, this._settings);
            }
        };
        InputError.prototype.mark = function (mark) {
            if (mark === void 0) {
                return this._mark;
            }
            else {
                return Input.error(this._error, this._id, mark, this._settings);
            }
        };
        InputError.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return Input.error(this._error, this._id, this._mark, settings);
            }
        };
        InputError.prototype.clone = function () {
            return this;
        };
        return InputError;
    }(Input));

    var StringInput = (function (_super) {
        __extends(StringInput, _super);
        function StringInput(string, id, offset, line, column, settings, index, isPart) {
            if (id === void 0) { id = null; }
            if (offset === void 0) { offset = 0; }
            if (line === void 0) { line = 1; }
            if (column === void 0) { column = 1; }
            if (settings === void 0) { settings = InputSettings.standard(); }
            if (index === void 0) { index = 0; }
            if (isPart === void 0) { isPart = false; }
            var _this = _super.call(this) || this;
            _this._string = string;
            _this._id = id;
            _this._offset = offset;
            _this._line = line;
            _this._column = column;
            _this._settings = settings;
            _this._index = index;
            _this._isPart = isPart;
            return _this;
        }
        StringInput.prototype.isCont = function () {
            return this._index < this._string.length;
        };
        StringInput.prototype.isEmpty = function () {
            return this._isPart && this._index >= this._string.length;
        };
        StringInput.prototype.isDone = function () {
            return !this._isPart && this._index >= this._string.length;
        };
        StringInput.prototype.isError = function () {
            return false;
        };
        StringInput.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return this._isPart;
            }
            else {
                this._isPart = isPart;
                return this;
            }
        };
        StringInput.prototype.head = function () {
            if (this._index < this._string.length) {
                var c = this._string.codePointAt(this._index);
                if (c !== void 0) {
                    return c;
                }
                else {
                    return this._string.charCodeAt(this._index);
                }
            }
            throw new InputException();
        };
        StringInput.prototype.step = function () {
            var index = this._index;
            if (index < this._string.length) {
                var c = this._string.codePointAt(index);
                this._index = this._string.offsetByCodePoints(index, 1);
                this._offset += this._index - index;
                if (c === 10) {
                    this._line += 1;
                    this._column = 1;
                }
                else {
                    this._column += 1;
                }
                return this;
            }
            else {
                var error = new InputException("invalid step");
                return Input.error(error, this._id, this.mark(), this._settings);
            }
        };
        StringInput.prototype.seek = function (mark) {
            if (mark !== void 0) {
                var index = this._index + (mark._offset - this._offset);
                if (0 <= index && index <= this._string.length) {
                    this._offset = mark._offset;
                    this._line = mark._line;
                    this._column = mark._column;
                    this._index = index;
                    return this;
                }
                else {
                    var error = new InputException("invalid seek to " + mark);
                    return Input.error(error, this._id, this.mark(), this._settings);
                }
            }
            else {
                this._offset = 0;
                this._line = 1;
                this._column = 1;
                this._index = 0;
                return this;
            }
        };
        StringInput.prototype.id = function (id) {
            if (id === void 0) {
                return this._id;
            }
            else {
                this._id = id;
                return this;
            }
        };
        StringInput.prototype.mark = function (mark) {
            if (mark === void 0) {
                return Mark.at(this._offset, this._line, this._column);
            }
            else {
                this._offset = mark._offset;
                this._line = mark._line;
                this._column = mark._column;
                return this;
            }
        };
        StringInput.prototype.offset = function () {
            return this._offset;
        };
        StringInput.prototype.line = function () {
            return this._line;
        };
        StringInput.prototype.column = function () {
            return this._column;
        };
        StringInput.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                this._settings = InputSettings.fromAny(settings);
                return this;
            }
        };
        StringInput.prototype.clone = function () {
            return new StringInput(this._string, this._id, this._offset, this._line, this._column, this._settings, this._index, this._isPart);
        };
        return StringInput;
    }(Input));

    var StringOutput = (function (_super) {
        __extends(StringOutput, _super);
        function StringOutput(string, settings) {
            var _this = _super.call(this) || this;
            _this._string = string;
            _this._settings = settings;
            return _this;
        }
        StringOutput.prototype.isCont = function () {
            return true;
        };
        StringOutput.prototype.isFull = function () {
            return false;
        };
        StringOutput.prototype.isDone = function () {
            return false;
        };
        StringOutput.prototype.isError = function () {
            return false;
        };
        StringOutput.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        StringOutput.prototype.write = function (token) {
            if (typeof token === "number") {
                if ((token >= 0x0000 && token <= 0xd7ff)
                    || (token >= 0xe000 && token <= 0xffff)) {
                    token = String.fromCharCode(token);
                }
                else if (token >= 0x10000 && token <= 0x10ffff) {
                    var u = token - 0x10000;
                    token = String.fromCharCode(0xd800 | (u >>> 10), 0xdc00 | (u & 0x3ff));
                }
                else {
                    token = "\ufffd";
                }
            }
            this._string += token;
            return this;
        };
        StringOutput.prototype.writeln = function (string) {
            if (string === void 0) {
                this._string = this._string.concat(this._settings._lineSeparator);
                return this;
            }
            else {
                this._string = this._string.concat(string).concat(this._settings._lineSeparator);
                return this;
            }
        };
        StringOutput.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                this._settings = OutputSettings.fromAny(settings);
                return this;
            }
        };
        StringOutput.prototype.bind = function () {
            return this._string;
        };
        StringOutput.prototype.clone = function () {
            return new StringOutput(this._string, this._settings);
        };
        StringOutput.prototype.toString = function () {
            return this._string;
        };
        return StringOutput;
    }(Output));

    var WriterException = (function (_super) {
        __extends(WriterException, _super);
        function WriterException(message) {
            var _this = _super.call(this, message) || this;
            _this.__proto__ = WriterException.prototype;
            return _this;
        }
        return WriterException;
    }(Error));

    var Writer = (function () {
        function Writer() {
        }
        Writer.prototype.isCont = function () {
            return true;
        };
        Writer.prototype.isDone = function () {
            return false;
        };
        Writer.prototype.isError = function () {
            return false;
        };
        Writer.prototype.feed = function (input) {
            throw new Error();
        };
        Writer.prototype.fork = function (condition) {
            return this;
        };
        Writer.prototype.bind = function () {
            throw new Error();
        };
        Writer.prototype.trap = function () {
            throw new Error();
        };
        Writer.prototype.asDone = function () {
            throw new Error();
        };
        Writer.prototype.asError = function () {
            throw new Error();
        };
        Writer.prototype.andThen = function (that) {
            return new WriterAndThen(this, that);
        };
        Writer.done = function (output) {
            if (output === void 0) {
                if (!Writer._done) {
                    Writer._done = new WriterDone(void 0);
                }
                return Writer._done;
            }
            else {
                return new WriterDone(output);
            }
        };
        Writer.error = function (error) {
            return new WriterError(error);
        };
        return Writer;
    }());
    var WriterDone = (function (_super) {
        __extends(WriterDone, _super);
        function WriterDone(output) {
            var _this = _super.call(this) || this;
            _this._output = output;
            return _this;
        }
        WriterDone.prototype.isCont = function () {
            return false;
        };
        WriterDone.prototype.isDone = function () {
            return true;
        };
        WriterDone.prototype.pull = function (output) {
            return this;
        };
        WriterDone.prototype.bind = function () {
            return this._output;
        };
        WriterDone.prototype.asDone = function () {
            return this;
        };
        WriterDone.prototype.andThen = function (that) {
            return that;
        };
        return WriterDone;
    }(Writer));
    var WriterError = (function (_super) {
        __extends(WriterError, _super);
        function WriterError(error) {
            var _this = _super.call(this) || this;
            _this._error = error;
            return _this;
        }
        WriterError.prototype.isCont = function () {
            return false;
        };
        WriterError.prototype.isError = function () {
            return true;
        };
        WriterError.prototype.pull = function (output) {
            return this;
        };
        WriterError.prototype.bind = function () {
            throw this._error;
        };
        WriterError.prototype.trap = function () {
            return this._error;
        };
        WriterError.prototype.asError = function () {
            return this;
        };
        WriterError.prototype.andThen = function (that) {
            return this;
        };
        return WriterError;
    }(Writer));
    var WriterAndThen = (function (_super) {
        __extends(WriterAndThen, _super);
        function WriterAndThen(head, tail) {
            var _this = _super.call(this) || this;
            _this._head = head;
            _this._tail = tail;
            return _this;
        }
        WriterAndThen.prototype.pull = function (output) {
            var head = this._head;
            if (head.isCont()) {
                head = head.pull(output);
            }
            if (head.isError()) {
                return head.asError();
            }
            else if (head.isDone()) {
                return this._tail.pull(output);
            }
            else {
                return new WriterAndThen(head, this._tail);
            }
        };
        return WriterAndThen;
    }(Writer));

    var StringWriter = (function (_super) {
        __extends(StringWriter, _super);
        function StringWriter(value, input, index) {
            if (index === void 0) { index = 0; }
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._input = input;
            _this._index = index;
            return _this;
        }
        StringWriter.prototype.feed = function (input) {
            return new StringWriter(input, "" + input);
        };
        StringWriter.prototype.pull = function (output) {
            return StringWriter.write(output, this._value, this._input, this._index);
        };
        StringWriter.write = function (output, value, input, index) {
            if (index === void 0) { index = 0; }
            var length = input.length;
            while (index < length && output.isCont()) {
                var c = input.codePointAt(index);
                if (c === void 0) {
                    c = input.charCodeAt(index);
                }
                output = output.write(c);
                index = input.offsetByCodePoints(index, 1);
            }
            if (index === length) {
                return Writer.done(value);
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new StringWriter(value, input, index);
        };
        return StringWriter;
    }(Writer));

    var Unicode = (function () {
        function Unicode() {
        }
        Unicode.stringInput = function (string) {
            return new StringInput(string);
        };
        Unicode.stringOutput = function (string, settings) {
            if (settings === void 0 && typeof string !== "string") {
                settings = string;
                string = "";
            }
            else if (typeof string !== "string") {
                string = "";
            }
            settings = OutputSettings.fromAny(settings);
            return new StringOutput(string, settings);
        };
        Unicode.stringWriter = function (input) {
            if (input === void 0) {
                return new StringWriter(void 0, "");
            }
            else {
                return new StringWriter(input, "" + input);
            }
        };
        Unicode.writeString = function (input, output) {
            return StringWriter.write(output, void 0, "" + input);
        };
        Unicode.isAlpha = function (c) {
            return c >= 65 && c <= 90
                || c >= 97 && c <= 122;
        };
        Unicode.isSpace = function (c) {
            return c === 0x20 || c === 0x9;
        };
        Unicode.isNewline = function (c) {
            return c === 0xa || c === 0xd;
        };
        Unicode.isWhitespace = function (c) {
            return Unicode.isSpace(c) || Unicode.isNewline(c);
        };
        return Unicode;
    }());

    var Format = (function () {
        function Format() {
        }
        Format.display = function (object, output) {
            var notOutput = !(output instanceof Output);
            if (object === void 0) {
                if (output === void 0) {
                    return "undefined";
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    output = output.write("undefined");
                }
            }
            else if (object === null) {
                if (output === void 0) {
                    return "null";
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    output = output.write("null");
                }
            }
            else if (typeof object === "number") {
                if (output === void 0) {
                    return "" + object;
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    Format.displayNumber(object, output);
                }
            }
            else if (typeof object === "string") {
                if (output === void 0) {
                    return object;
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    output = output.write(object);
                }
            }
            else if (object && typeof object.display === "function") {
                if (!(output instanceof Output)) {
                    output = Unicode.stringOutput(output);
                }
                object.display(output);
            }
            else {
                if (output === void 0) {
                    return "" + object;
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    output = output.write("" + object);
                }
            }
            if (notOutput) {
                return output.toString();
            }
        };
        Format.debug = function (object, output) {
            var notOutput = !(output instanceof Output);
            if (object === void 0) {
                if (output === void 0) {
                    return "undefined";
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    output = output.write("undefined");
                }
            }
            else if (object === null) {
                if (output === void 0) {
                    return "null";
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    output = output.write("null");
                }
            }
            else if (typeof object === "number") {
                if (output === void 0) {
                    return "" + object;
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    Format.debugNumber(object, output);
                }
            }
            else if (typeof object === "string") {
                if (!(output instanceof Output)) {
                    output = Unicode.stringOutput(output);
                }
                Format.debugString(object, output);
            }
            else if (typeof object.debug === "function") {
                if (!(output instanceof Output)) {
                    output = Unicode.stringOutput(output);
                }
                object.debug(output);
            }
            else {
                if (output === void 0) {
                    return "" + object;
                }
                else {
                    if (!(output instanceof Output)) {
                        output = Unicode.stringOutput(output);
                    }
                    output = output.write("" + object);
                }
            }
            if (notOutput) {
                return output.toString();
            }
        };
        Format.displayNumber = function (value, output) {
            if (isFinite(value) && Math.floor(value) === value && Math.abs(value) < 2147483648) {
                if (value < 0) {
                    output = output.write(45);
                }
                if (value > -10 && value < 10) {
                    output = output.write(48 + Math.abs(value));
                }
                else {
                    var digits = new Array(19);
                    var x = value;
                    var i = 18;
                    while (x) {
                        digits[i] = Math.abs((x % 10) | 0);
                        x = (x / 10) | 0;
                        i -= 1;
                    }
                    i += 1;
                    while (i < 19) {
                        output = output.write(48 + digits[i]);
                        i += 1;
                    }
                }
            }
            else {
                output = output.write("" + value);
            }
        };
        Format.debugNumber = function (value, output) {
            Format.displayNumber(value, output);
        };
        Format.debugChar = function (character, output) {
            output = output.write(39);
            switch (character) {
                case 8:
                    output.write(92).write(98);
                    break;
                case 9:
                    output.write(92).write(116);
                    break;
                case 10:
                    output.write(92).write(110);
                    break;
                case 12:
                    output.write(92).write(102);
                    break;
                case 13:
                    output.write(92).write(114);
                    break;
                case 34:
                    output.write(92).write(34);
                    break;
                case 39:
                    output.write(92).write(39);
                    break;
                case 92:
                    output.write(92).write(92);
                    break;
                default:
                    if (character >= 0x0000 && character <= 0x001f
                        || character >= 0x007f && character <= 0x009f) {
                        output = output.write(92).write(117)
                            .write(Format.encodeHex(character >>> 12 & 0xf))
                            .write(Format.encodeHex(character >>> 8 & 0xf))
                            .write(Format.encodeHex(character >>> 4 & 0xf))
                            .write(Format.encodeHex(character & 0xf));
                    }
                    else {
                        output = output.write(character);
                    }
            }
            output = output.write(39);
        };
        Format.debugString = function (string, output) {
            output = output.write(34);
            var input = Unicode.stringInput(string);
            while (input.isCont()) {
                var c = input.head();
                switch (c) {
                    case 8:
                        output.write(92).write(98);
                        break;
                    case 9:
                        output.write(92).write(116);
                        break;
                    case 10:
                        output.write(92).write(110);
                        break;
                    case 12:
                        output.write(92).write(102);
                        break;
                    case 13:
                        output.write(92).write(114);
                        break;
                    case 34:
                        output.write(92).write(34);
                        break;
                    case 92:
                        output.write(92).write(92);
                        break;
                    default:
                        if (c >= 0x0000 && c <= 0x001f || c >= 0x007f && c <= 0x009f) {
                            output = output.write(92).write(117)
                                .write(Format.encodeHex(c >>> 12 & 0xf))
                                .write(Format.encodeHex(c >>> 8 & 0xf))
                                .write(Format.encodeHex(c >>> 4 & 0xf))
                                .write(Format.encodeHex(c & 0xf));
                        }
                        else {
                            output = output.write(c);
                        }
                }
                input = input.step();
            }
            output = output.write(34);
        };
        Format.encodeHex = function (x) {
            if (x < 10) {
                return 48 + x;
            }
            else {
                return 65 + (x - 10);
            }
        };
        Format.lineSeparator = function () {
            if (!Format._lineSeparator) {
                if (typeof require === "function") {
                    var os = require("os");
                    if (os) {
                        Format._lineSeparator = os.EOL;
                    }
                }
                if (!Format._lineSeparator) {
                    Format._lineSeparator = "\n";
                }
            }
            return Format._lineSeparator;
        };
        Format.prefix = function (value, precision) {
            if (precision === void 0) { precision = 1; }
            if (isFinite(value)) {
                var exponential = Math.abs(value).toExponential();
                var exponentIndex = exponential.indexOf("e");
                var exponent = exponentIndex >= 0 ? +exponential.slice(exponentIndex + 1) : NaN;
                var power = Math.min(Math.max(-8, Math.floor(exponent / 3)), 8) * 3;
                var scaled = Math.pow(10, -power) * value;
                var s = Format.trimTrailingZeros(Math.abs(scaled).toFixed(precision));
                if (scaled < 0 && +s !== 0) {
                    s = "-" + s;
                }
                s += Format.Prefixes[8 + power / 3];
                return s;
            }
            else {
                return "" + value;
            }
        };
        Format.trimTrailingZeros = function (s) {
            var i0 = -1;
            var i1;
            for (var i = 1, n = s.length; i < n; i += 1) {
                var c = s.charCodeAt(i);
                if (c === 46) {
                    i0 = i;
                    i1 = i;
                }
                else if (c === 48) {
                    if (i0 === 0) {
                        i0 = i;
                    }
                    i1 = i;
                }
                else if (c >= 49 && c <= 57) {
                    if (i0 > 0) {
                        i0 = 0;
                    }
                }
                else if (i0 > 0) {
                    break;
                }
            }
            if (i0 > 0) {
                s = s.slice(0, i0) + s.slice(i1 + 1);
            }
            return s;
        };
        Format.duration = function (millis, separator) {
            if (separator === void 0) { separator = " "; }
            if (isFinite(millis)) {
                var SECOND = 1000;
                var MINUTE = 60 * SECOND;
                var HOUR = 60 * MINUTE;
                var DAY = 24 * HOUR;
                var WEEK = 7 * DAY;
                var weeks = void 0;
                if (millis > WEEK) {
                    weeks = Math.floor(millis / WEEK);
                    millis %= WEEK;
                }
                var days = void 0;
                if (millis > DAY) {
                    days = Math.floor(millis / DAY);
                    millis %= DAY;
                }
                var hours = void 0;
                if (millis > HOUR) {
                    hours = Math.floor(millis / HOUR);
                    millis %= HOUR;
                }
                var minutes = void 0;
                if (millis > MINUTE) {
                    minutes = Math.floor(millis / MINUTE);
                    millis %= MINUTE;
                }
                var seconds = void 0;
                if (millis > SECOND) {
                    seconds = Math.floor(millis / SECOND);
                    millis %= SECOND;
                }
                var s = "";
                if (weeks !== void 0) {
                    s += weeks + "w";
                }
                if (days !== void 0) {
                    s += (s ? separator : "") + days + "d";
                }
                if (hours !== void 0) {
                    s += (s ? separator : "") + hours + "h";
                }
                if (minutes !== void 0) {
                    s += (s ? separator : "") + minutes + "m";
                }
                if (seconds !== void 0 || !millis) {
                    s += (s ? separator : "") + (seconds || 0) + "s";
                }
                if (millis && !s) {
                    s += millis + "ms";
                }
                return s;
            }
            else {
                return "" + millis;
            }
        };
        Format.Prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", " Z", "Y"];
        return Format;
    }());
    Tag.Format = Format;

    var InputSettings = (function () {
        function InputSettings(isStripped) {
            this._isStrict = isStripped;
        }
        InputSettings.prototype.isStripped = function (isStripped) {
            if (isStripped === void 0) {
                return this._isStrict;
            }
            else {
                return this.copy(isStripped);
            }
        };
        InputSettings.prototype.copy = function (isStripped) {
            return InputSettings.create(isStripped);
        };
        InputSettings.prototype.canEqual = function (that) {
            return that instanceof InputSettings;
        };
        InputSettings.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof InputSettings) {
                return that.canEqual(this) && this._isStrict === that._isStrict;
            }
            return false;
        };
        InputSettings.prototype.hashCode = function () {
            if (InputSettings._hashSeed === void 0) {
                InputSettings._hashSeed = util.Murmur3.seed(InputSettings);
            }
            return util.Murmur3.mash(util.Murmur3.mix(InputSettings._hashSeed, util.Murmur3.hash(this._isStrict)));
        };
        InputSettings.prototype.debug = function (output) {
            output = output.write("InputSettings").write(46);
            if (!this._isStrict) {
                output = output.write("standard");
            }
            else {
                output = output.write("stripped");
            }
            output = output.write(40).write(41);
        };
        InputSettings.prototype.toString = function () {
            return Format.debug(this);
        };
        InputSettings.standard = function () {
            if (!InputSettings._standard) {
                InputSettings._standard = new InputSettings(false);
            }
            return InputSettings._standard;
        };
        InputSettings.stripped = function () {
            if (!InputSettings._stripped) {
                InputSettings._stripped = new InputSettings(false);
            }
            return InputSettings._stripped;
        };
        InputSettings.create = function (isStripped) {
            if (isStripped) {
                return InputSettings.stripped();
            }
            return InputSettings.standard();
        };
        InputSettings.fromAny = function (settings) {
            if (settings instanceof InputSettings) {
                return settings;
            }
            else if (typeof settings === "object" && settings) {
                return InputSettings.create(settings.isStripped);
            }
            else {
                return InputSettings.standard();
            }
        };
        return InputSettings;
    }());

    var InputBuffer = (function (_super) {
        __extends(InputBuffer, _super);
        function InputBuffer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        InputBuffer.empty = function (id, mark, settings) {
            if (id === void 0) { id = null; }
            if (mark === void 0) { mark = Mark.zero(); }
            if (settings === void 0) { settings = InputSettings.standard(); }
            if (id === null && mark === Mark.zero() && settings === InputSettings.standard()) {
                if (!InputBuffer._emptyBuffer) {
                    InputBuffer._emptyBuffer = new InputBufferEmpty(null, Mark.zero(), InputSettings.standard());
                }
                return InputBuffer._emptyBuffer;
            }
            return new InputBufferEmpty(id, mark, settings);
        };
        InputBuffer.done = function (id, mark, settings) {
            if (id === void 0) { id = null; }
            if (mark === void 0) { mark = Mark.zero(); }
            if (settings === void 0) { settings = InputSettings.standard(); }
            if (id === null && mark === Mark.zero() && settings === InputSettings.standard()) {
                if (!InputBuffer._doneBuffer) {
                    InputBuffer._doneBuffer = new InputBufferDone(null, Mark.zero(), InputSettings.standard());
                }
                return InputBuffer._doneBuffer;
            }
            return new InputBufferDone(id, mark, settings);
        };
        InputBuffer.error = function (error, id, mark, settings) {
            if (id === void 0) { id = null; }
            if (mark === void 0) { mark = Mark.zero(); }
            if (settings === void 0) { settings = InputSettings.standard(); }
            return new InputBufferError(error, id, mark, settings);
        };
        return InputBuffer;
    }(Input));
    var InputBufferEmpty = (function (_super) {
        __extends(InputBufferEmpty, _super);
        function InputBufferEmpty(id, mark, settings) {
            var _this = _super.call(this) || this;
            _this._id = id;
            _this._mark = mark;
            _this._settings = settings;
            return _this;
        }
        InputBufferEmpty.prototype.isCont = function () {
            return false;
        };
        InputBufferEmpty.prototype.isEmpty = function () {
            return true;
        };
        InputBufferEmpty.prototype.isDone = function () {
            return false;
        };
        InputBufferEmpty.prototype.isError = function () {
            return false;
        };
        InputBufferEmpty.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return true;
            }
            else if (isPart) {
                return this;
            }
            else {
                return InputBuffer.done(this._id, this._mark, this._settings);
            }
        };
        InputBufferEmpty.prototype.index = function (index) {
            if (index === void 0) {
                return 0;
            }
            else if (index === 0) {
                return this;
            }
            else {
                var error = new InputException("invalid index");
                return InputBuffer.error(error, this._id, this._mark, this._settings);
            }
        };
        InputBufferEmpty.prototype.limit = function (limit) {
            if (limit === void 0) {
                return 0;
            }
            else if (limit === 0) {
                return this;
            }
            else {
                var error = new InputException("invalid limit");
                return InputBuffer.error(error, this._id, this._mark, this._settings);
            }
        };
        InputBufferEmpty.prototype.capacity = function () {
            return 0;
        };
        InputBufferEmpty.prototype.remaining = function () {
            return 0;
        };
        InputBufferEmpty.prototype.has = function (index) {
            return false;
        };
        InputBufferEmpty.prototype.get = function (index) {
            throw new InputException();
        };
        InputBufferEmpty.prototype.set = function (index, token) {
            throw new InputException();
        };
        InputBufferEmpty.prototype.head = function () {
            throw new InputException();
        };
        InputBufferEmpty.prototype.step = function (offset) {
            var error = new InputException("empty step");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        };
        InputBufferEmpty.prototype.seek = function (mark) {
            var error = new InputException("empty seek");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        };
        InputBufferEmpty.prototype.id = function (id) {
            if (id === void 0) {
                return this._id;
            }
            else {
                return InputBuffer.empty(id, this._mark, this._settings);
            }
        };
        InputBufferEmpty.prototype.mark = function (mark) {
            if (mark === void 0) {
                return this._mark;
            }
            else {
                return InputBuffer.empty(this._id, mark, this._settings);
            }
        };
        InputBufferEmpty.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return InputBuffer.empty(this._id, this._mark, settings);
            }
        };
        InputBufferEmpty.prototype.clone = function () {
            return this;
        };
        return InputBufferEmpty;
    }(InputBuffer));
    var InputBufferDone = (function (_super) {
        __extends(InputBufferDone, _super);
        function InputBufferDone(id, mark, settings) {
            var _this = _super.call(this) || this;
            _this._id = id;
            _this._mark = mark;
            _this._settings = settings;
            return _this;
        }
        InputBufferDone.prototype.isCont = function () {
            return false;
        };
        InputBufferDone.prototype.isEmpty = function () {
            return false;
        };
        InputBufferDone.prototype.isDone = function () {
            return true;
        };
        InputBufferDone.prototype.isError = function () {
            return false;
        };
        InputBufferDone.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else if (isPart) {
                return InputBuffer.empty(this._id, this._mark, this._settings);
            }
            else {
                return this;
            }
        };
        InputBufferDone.prototype.index = function (index) {
            if (index === void 0) {
                return 0;
            }
            else if (index === 0) {
                return this;
            }
            else {
                var error = new InputException("invalid index");
                return InputBuffer.error(error, this._id, this._mark, this._settings);
            }
        };
        InputBufferDone.prototype.limit = function (limit) {
            if (limit === void 0) {
                return 0;
            }
            else if (limit === 0) {
                return this;
            }
            else {
                var error = new InputException("invalid limit");
                return InputBuffer.error(error, this._id, this._mark, this._settings);
            }
        };
        InputBufferDone.prototype.capacity = function () {
            return 0;
        };
        InputBufferDone.prototype.remaining = function () {
            return 0;
        };
        InputBufferDone.prototype.has = function (index) {
            return false;
        };
        InputBufferDone.prototype.get = function (index) {
            throw new InputException();
        };
        InputBufferDone.prototype.set = function (index, token) {
            throw new InputException();
        };
        InputBufferDone.prototype.head = function () {
            throw new InputException();
        };
        InputBufferDone.prototype.step = function (offset) {
            var error = new InputException("done step");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        };
        InputBufferDone.prototype.seek = function (mark) {
            var error = new InputException("done seek");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        };
        InputBufferDone.prototype.id = function (id) {
            if (id === void 0) {
                return this._id;
            }
            else {
                return InputBuffer.done(id, this._mark, this._settings);
            }
        };
        InputBufferDone.prototype.mark = function (mark) {
            if (mark === void 0) {
                return this._mark;
            }
            else {
                return InputBuffer.done(this._id, mark, this._settings);
            }
        };
        InputBufferDone.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return InputBuffer.done(this._id, this._mark, settings);
            }
        };
        InputBufferDone.prototype.clone = function () {
            return this;
        };
        return InputBufferDone;
    }(InputBuffer));
    var InputBufferError = (function (_super) {
        __extends(InputBufferError, _super);
        function InputBufferError(error, id, mark, settings) {
            var _this = _super.call(this) || this;
            _this._error = error;
            _this._id = id;
            _this._mark = mark;
            _this._settings = settings;
            return _this;
        }
        InputBufferError.prototype.isCont = function () {
            return false;
        };
        InputBufferError.prototype.isEmpty = function () {
            return false;
        };
        InputBufferError.prototype.isDone = function () {
            return false;
        };
        InputBufferError.prototype.isError = function () {
            return true;
        };
        InputBufferError.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        InputBufferError.prototype.index = function (index) {
            if (index === void 0) {
                return 0;
            }
            else if (index === 0) {
                return this;
            }
            else {
                var error = new InputException("invalid index");
                return InputBuffer.error(error, this._id, this._mark, this._settings);
            }
        };
        InputBufferError.prototype.limit = function (limit) {
            if (limit === void 0) {
                return 0;
            }
            else if (limit === 0) {
                return this;
            }
            else {
                var error = new InputException("invalid limit");
                return InputBuffer.error(error, this._id, this._mark, this._settings);
            }
        };
        InputBufferError.prototype.capacity = function () {
            return 0;
        };
        InputBufferError.prototype.remaining = function () {
            return 0;
        };
        InputBufferError.prototype.has = function (index) {
            return false;
        };
        InputBufferError.prototype.get = function (index) {
            throw new InputException();
        };
        InputBufferError.prototype.set = function (index, token) {
            throw new InputException();
        };
        InputBufferError.prototype.head = function () {
            throw new InputException();
        };
        InputBufferError.prototype.step = function (offset) {
            var error = new InputException("error step");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        };
        InputBufferError.prototype.trap = function () {
            return this._error;
        };
        InputBufferError.prototype.seek = function (mark) {
            var error = new InputException("error seek");
            return InputBuffer.error(error, this._id, this._mark, this._settings);
        };
        InputBufferError.prototype.id = function (id) {
            if (id === void 0) {
                return this._id;
            }
            else {
                return InputBuffer.error(this._error, id, this._mark, this._settings);
            }
        };
        InputBufferError.prototype.mark = function (mark) {
            if (mark === void 0) {
                return this._mark;
            }
            else {
                return InputBuffer.error(this._error, this._id, mark, this._settings);
            }
        };
        InputBufferError.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return InputBuffer.error(this._error, this._id, this._mark, settings);
            }
        };
        InputBufferError.prototype.clone = function () {
            return this;
        };
        return InputBufferError;
    }(InputBuffer));

    var OutputBuffer = (function (_super) {
        __extends(OutputBuffer, _super);
        function OutputBuffer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        OutputBuffer.prototype.writeln = function (string) {
            if (typeof string === "string") {
                this.write(string);
            }
            return this.write(this.settings().lineSeparator());
        };
        OutputBuffer.prototype.display = function (object) {
            Format.display(object, this);
            return this;
        };
        OutputBuffer.prototype.debug = function (object) {
            Format.debug(object, this);
            return this;
        };
        OutputBuffer.prototype.flush = function () {
            return this;
        };
        OutputBuffer.prototype.clone = function () {
            throw new Error();
        };
        OutputBuffer.full = function (value, settings) {
            if (value === void 0) { value = null; }
            if (settings === void 0) { settings = OutputSettings.standard(); }
            if (value === null && settings === OutputSettings.standard()) {
                if (!OutputBuffer._fullBuffer) {
                    OutputBuffer._fullBuffer = new OutputBufferFull(value, OutputSettings.standard());
                }
                return OutputBuffer._fullBuffer;
            }
            return new OutputBufferFull(value, settings);
        };
        OutputBuffer.done = function (value, settings) {
            if (value === void 0) { value = null; }
            if (settings === void 0) { settings = OutputSettings.standard(); }
            if (value === null && settings === OutputSettings.standard()) {
                if (!OutputBuffer._doneBuffer) {
                    OutputBuffer._doneBuffer = new OutputBufferDone(value, OutputSettings.standard());
                }
                return OutputBuffer._doneBuffer;
            }
            return new OutputBufferDone(value, settings);
        };
        OutputBuffer.error = function (error, settings) {
            if (settings === void 0) { settings = OutputSettings.standard(); }
            return new OutputBufferError(error, settings);
        };
        return OutputBuffer;
    }(Output));
    var OutputBufferFull = (function (_super) {
        __extends(OutputBufferFull, _super);
        function OutputBufferFull(value, settings) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._settings = settings;
            return _this;
        }
        OutputBufferFull.prototype.isCont = function () {
            return false;
        };
        OutputBufferFull.prototype.isFull = function () {
            return true;
        };
        OutputBufferFull.prototype.isDone = function () {
            return false;
        };
        OutputBufferFull.prototype.isError = function () {
            return false;
        };
        OutputBufferFull.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return true;
            }
            else if (isPart) {
                return OutputBuffer.done(this._value, this._settings);
            }
            else {
                return this;
            }
        };
        OutputBufferFull.prototype.index = function (index) {
            if (index === void 0) {
                return 0;
            }
            else if (index === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid index"), this._settings);
            }
        };
        OutputBufferFull.prototype.limit = function (limit) {
            if (limit === void 0) {
                return 0;
            }
            else if (limit === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid index"), this._settings);
            }
        };
        OutputBufferFull.prototype.capacity = function () {
            return 0;
        };
        OutputBufferFull.prototype.remaining = function () {
            return 0;
        };
        OutputBufferFull.prototype.has = function (index) {
            return false;
        };
        OutputBufferFull.prototype.get = function (index) {
            throw new OutputException();
        };
        OutputBufferFull.prototype.set = function (index, token) {
            throw new OutputException();
        };
        OutputBufferFull.prototype.write = function (tokenOrString) {
            return OutputBuffer.error(new OutputException("full"), this._settings);
        };
        OutputBufferFull.prototype.writeln = function (string) {
            return OutputBuffer.error(new OutputException("full"), this._settings);
        };
        OutputBufferFull.prototype.step = function (offset) {
            if (offset === void 0) { offset = 1; }
            if (offset === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid step"), this._settings);
            }
        };
        OutputBufferFull.prototype.bind = function () {
            return this._value;
        };
        OutputBufferFull.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return OutputBuffer.full(this._value, settings);
            }
        };
        OutputBufferFull.prototype.clone = function () {
            return this;
        };
        return OutputBufferFull;
    }(OutputBuffer));
    var OutputBufferDone = (function (_super) {
        __extends(OutputBufferDone, _super);
        function OutputBufferDone(value, settings) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._settings = settings;
            return _this;
        }
        OutputBufferDone.prototype.isCont = function () {
            return false;
        };
        OutputBufferDone.prototype.isFull = function () {
            return false;
        };
        OutputBufferDone.prototype.isDone = function () {
            return true;
        };
        OutputBufferDone.prototype.isError = function () {
            return false;
        };
        OutputBufferDone.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else if (isPart) {
                return this;
            }
            else {
                return OutputBuffer.full(this._value, this._settings);
            }
        };
        OutputBufferDone.prototype.index = function (index) {
            if (index === void 0) {
                return 0;
            }
            else if (index === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid index"), this._settings);
            }
        };
        OutputBufferDone.prototype.limit = function (limit) {
            if (limit === void 0) {
                return 0;
            }
            else if (limit === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid index"), this._settings);
            }
        };
        OutputBufferDone.prototype.capacity = function () {
            return 0;
        };
        OutputBufferDone.prototype.remaining = function () {
            return 0;
        };
        OutputBufferDone.prototype.has = function (index) {
            return false;
        };
        OutputBufferDone.prototype.get = function (index) {
            throw new OutputException();
        };
        OutputBufferDone.prototype.set = function (index, token) {
            throw new OutputException();
        };
        OutputBufferDone.prototype.write = function (tokenOrString) {
            return OutputBuffer.error(new OutputException("done"), this._settings);
        };
        OutputBufferDone.prototype.writeln = function (string) {
            return OutputBuffer.error(new OutputException("done"), this._settings);
        };
        OutputBufferDone.prototype.step = function (offset) {
            if (offset === void 0) { offset = 1; }
            if (offset === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid step"), this._settings);
            }
        };
        OutputBufferDone.prototype.bind = function () {
            return this._value;
        };
        OutputBufferDone.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return OutputBuffer.done(this._value, settings);
            }
        };
        OutputBufferDone.prototype.clone = function () {
            return this;
        };
        return OutputBufferDone;
    }(OutputBuffer));
    var OutputBufferError = (function (_super) {
        __extends(OutputBufferError, _super);
        function OutputBufferError(error, settings) {
            var _this = _super.call(this) || this;
            _this._error = error;
            _this._settings = settings;
            return _this;
        }
        OutputBufferError.prototype.isCont = function () {
            return false;
        };
        OutputBufferError.prototype.isFull = function () {
            return false;
        };
        OutputBufferError.prototype.isDone = function () {
            return false;
        };
        OutputBufferError.prototype.isError = function () {
            return true;
        };
        OutputBufferError.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        OutputBufferError.prototype.index = function (index) {
            if (index === void 0) {
                return 0;
            }
            else if (index === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid index"), this._settings);
            }
        };
        OutputBufferError.prototype.limit = function (limit) {
            if (limit === void 0) {
                return 0;
            }
            else if (limit === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid index"), this._settings);
            }
        };
        OutputBufferError.prototype.capacity = function () {
            return 0;
        };
        OutputBufferError.prototype.remaining = function () {
            return 0;
        };
        OutputBufferError.prototype.has = function (index) {
            return false;
        };
        OutputBufferError.prototype.get = function (index) {
            throw new OutputException();
        };
        OutputBufferError.prototype.set = function (index, token) {
            throw new OutputException();
        };
        OutputBufferError.prototype.write = function (tokenOrString) {
            return this;
        };
        OutputBufferError.prototype.writeln = function (string) {
            return this;
        };
        OutputBufferError.prototype.step = function (offset) {
            if (offset === void 0) { offset = 1; }
            if (offset === 0) {
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid step"), this._settings);
            }
        };
        OutputBufferError.prototype.bind = function () {
            throw new OutputException();
        };
        OutputBufferError.prototype.trap = function () {
            return this._error;
        };
        OutputBufferError.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                return OutputBuffer.error(this._error, settings);
            }
        };
        OutputBufferError.prototype.clone = function () {
            return this;
        };
        return OutputBufferError;
    }(OutputBuffer));

    var OutputStyle = (function () {
        function OutputStyle() {
        }
        OutputStyle.reset = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(109);
            }
        };
        OutputStyle.bold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(109);
            }
        };
        OutputStyle.faint = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(50).write(109);
            }
        };
        OutputStyle.black = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(59)
                    .write(51).write(48).write(109);
            }
        };
        OutputStyle.red = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(59)
                    .write(51).write(49).write(109);
            }
        };
        OutputStyle.green = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(59)
                    .write(51).write(50).write(109);
            }
        };
        OutputStyle.yellow = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(59)
                    .write(51).write(51).write(109);
            }
        };
        OutputStyle.blue = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(59)
                    .write(51).write(52).write(109);
            }
        };
        OutputStyle.magenta = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(59)
                    .write(51).write(53).write(109);
            }
        };
        OutputStyle.cyan = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(59)
                    .write(51).write(54).write(109);
            }
        };
        OutputStyle.gray = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(48).write(59)
                    .write(51).write(55).write(109);
            }
        };
        OutputStyle.blackBold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(59)
                    .write(51).write(48).write(109);
            }
        };
        OutputStyle.redBold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(59)
                    .write(51).write(49).write(109);
            }
        };
        OutputStyle.greenBold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(59)
                    .write(51).write(50).write(109);
            }
        };
        OutputStyle.yellowBold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(59)
                    .write(51).write(51).write(109);
            }
        };
        OutputStyle.blueBold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(59)
                    .write(51).write(52).write(109);
            }
        };
        OutputStyle.magentaBold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(59)
                    .write(51).write(53).write(109);
            }
        };
        OutputStyle.cyanBold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(59)
                    .write(51).write(54).write(109);
            }
        };
        OutputStyle.grayBold = function (output) {
            if (output.settings().isStyled()) {
                output = output.write(27).write(91).write(49).write(59)
                    .write(51).write(55).write(109);
            }
        };
        return OutputStyle;
    }());

    var Base10 = (function () {
        function Base10() {
        }
        Base10.isDigit = function (c) {
            return c >= 48 && c <= 57;
        };
        Base10.decodeDigit = function (c) {
            if (c >= 48 && c <= 57) {
                return c - 48;
            }
            else {
                var message = Unicode.stringOutput();
                message.write("Invalid base-10 digit: ");
                Format.debugChar(c, message);
                throw new Error(message.bind());
            }
        };
        Base10.encodeDigit = function (b) {
            if (b >= 0 && b <= 9) {
                return 48 + b;
            }
            else {
                throw new Error("" + b);
            }
        };
        Base10.countDigits = function (value) {
            var size = 0;
            do {
                size += 1;
                value = (value / 10) | 0;
            } while (value);
            return size;
        };
        Base10.integerParser = function () {
            return new Base10.NumberParser(void 0, void 0, 0);
        };
        Base10.parseInteger = function (input) {
            return Base10.NumberParser.parse(input, void 0, void 0, 0);
        };
        Base10.decimalParser = function () {
            return new Base10.NumberParser(void 0, void 0, 1);
        };
        Base10.parseDecimal = function (input) {
            return Base10.NumberParser.parse(input, void 0, void 0, 1);
        };
        Base10.numberParser = function () {
            return new Base10.NumberParser();
        };
        Base10.parseNumber = function (input) {
            return Base10.NumberParser.parse(input);
        };
        Base10.integerWriter = function (input) {
            if (input === void 0) {
                return new Base10.IntegerWriter(void 0, 0);
            }
            else {
                return new Base10.IntegerWriter(void 0, input);
            }
        };
        Base10.writeInteger = function (input, output) {
            return Base10.IntegerWriter.write(output, void 0, input);
        };
        return Base10;
    }());

    var Diagnostic = (function () {
        function Diagnostic(input, tag, severity, message, note, cause) {
            this._input = input;
            this._tag = tag;
            this._severity = severity;
            this._message = message;
            this._note = note;
            this._cause = cause;
        }
        Diagnostic.prototype.input = function () {
            return this._input.clone();
        };
        Diagnostic.prototype.tag = function () {
            return this._tag;
        };
        Diagnostic.prototype.severity = function () {
            return this._severity;
        };
        Diagnostic.prototype.message = function () {
            return this._message;
        };
        Diagnostic.prototype.note = function () {
            return this._note;
        };
        Diagnostic.prototype.cause = function () {
            return this._cause;
        };
        Diagnostic.prototype.lineDigits = function () {
            var digits = Base10.countDigits(this._tag.end().line());
            if (this._cause !== null) {
                digits = Math.max(digits, this._cause.lineDigits());
            }
            return digits;
        };
        Diagnostic.prototype.display = function (output) {
            var input = this._input.clone();
            var start = this._tag.start();
            var end = this._tag.end();
            var severity = this._severity;
            var message = this._message;
            var note = this._note;
            var cause = this._cause;
            var contextLines = 2;
            var lineDigits = this.lineDigits();
            Diagnostic.displayDiagnostic(input, start, end, severity, message, note, cause, contextLines, lineDigits, output);
        };
        Diagnostic.prototype.toString = function (settings) {
            return Format.display(this, settings);
        };
        Diagnostic.from = function (input, tag, severity, message, note, cause) {
            if (message instanceof Diagnostic) {
                cause = message;
                note = null;
                message = null;
            }
            else if (note instanceof Diagnostic) {
                cause = note;
                note = null;
            }
            input = input.clone();
            if (message === void 0) {
                message = null;
            }
            if (note === void 0) {
                note = null;
            }
            if (cause === void 0) {
                cause = null;
            }
            return new Diagnostic(input, tag, severity, message, note, cause);
        };
        Diagnostic.message = function (message, input, severity, note, cause) {
            if (severity === null || severity instanceof Diagnostic) {
                cause = severity;
                severity = void 0;
            }
            else if (typeof severity === "string") {
                note = severity;
                severity = void 0;
            }
            if (note === null || note instanceof Diagnostic) {
                cause = note;
                note = void 0;
            }
            if (note === void 0) {
                note = null;
            }
            if (severity === void 0) {
                severity = util.Severity.error();
            }
            var mark = input.mark();
            var source = input.clone();
            source.seek();
            return Diagnostic.from(source, mark, severity, message, note, cause);
        };
        Diagnostic.unexpected = function (input, severity, note, cause) {
            if (severity === null || severity instanceof Diagnostic) {
                cause = severity;
                severity = void 0;
            }
            else if (typeof severity === "string") {
                note = severity;
                severity = void 0;
            }
            if (note === null || note instanceof Diagnostic) {
                cause = note;
                note = void 0;
            }
            if (note === void 0) {
                note = null;
            }
            if (severity === void 0) {
                severity = util.Severity.error();
            }
            var message;
            if (input.isCont()) {
                var output = Unicode.stringOutput().write("unexpected").write(32);
                Format.debugChar(input.head(), output);
                message = output.bind();
            }
            else {
                message = "unexpected end of input";
            }
            var mark = input.mark();
            var source = input.clone();
            source.seek();
            return Diagnostic.from(source, mark, severity, message, note, cause);
        };
        Diagnostic.expected = function (expected, input, severity, note, cause) {
            if (severity === null || severity instanceof Diagnostic) {
                cause = severity;
                severity = void 0;
            }
            else if (typeof severity === "string") {
                note = severity;
                severity = void 0;
            }
            if (note === null || note instanceof Diagnostic) {
                cause = note;
                note = void 0;
            }
            if (note === void 0) {
                note = null;
            }
            if (severity === void 0) {
                severity = util.Severity.error();
            }
            var output = Unicode.stringOutput().write("expected").write(32);
            if (typeof expected === "number") {
                Format.debugChar(expected, output);
            }
            else {
                output = output.write(expected);
            }
            output = output.write(44).write(32).write("but found").write(32);
            if (input.isCont()) {
                Format.debugChar(input.head(), output);
            }
            else {
                output = output.write("end of input");
            }
            var message = output.bind();
            var mark = input.mark();
            var source = input.clone();
            source.seek();
            return Diagnostic.from(source, mark, severity, message, note, cause);
        };
        Diagnostic.displayDiagnostic = function (input, start, end, severity, message, note, cause, contextLines, lineDigits, output) {
            do {
                if (message !== null) {
                    Diagnostic.displayMessage(severity, message, output);
                    output = output.writeln();
                }
                Diagnostic.displayAnchor(input, start, lineDigits, output);
                output = output.writeln();
                var next = Diagnostic.displayContext(input, start, end, severity, note, cause, contextLines, lineDigits, output);
                if (next !== null) {
                    output = output.writeln();
                    input = next._input.clone();
                    start = next._tag.start();
                    end = next._tag.end();
                    severity = next._severity;
                    message = next._message;
                    note = next._note;
                    cause = next._cause;
                }
                else {
                    break;
                }
            } while (true);
        };
        Diagnostic.displayMessage = function (severity, message, output) {
            Diagnostic.formatSeverity(severity, output);
            output = output.write(severity.label());
            OutputStyle.reset(output);
            OutputStyle.bold(output);
            output = output.write(58);
            if (message !== null) {
                output = output.write(32).write(message);
            }
            OutputStyle.reset(output);
        };
        Diagnostic.displayAnchor = function (input, start, lineDigits, output) {
            Diagnostic.displayLineLeadArrow(lineDigits, output);
            output = output.write(32);
            var id = input.id();
            if (id !== null) {
                Format.display(id, output);
            }
            output = output.write(58);
            Format.displayNumber(start._line, output);
            output = output.write(58);
            Format.displayNumber(start._column, output);
            output = output.writeln();
            Diagnostic.displayLineLead(lineDigits, output);
        };
        Diagnostic.displayCause = function (cause, contextLines, lineDigits, output) {
            var input = cause._input.clone();
            var start = cause._tag.start();
            var end = cause._tag.end();
            var severity = cause._severity;
            var note = cause._note;
            var next = cause._cause;
            return Diagnostic.displayContext(input, start, end, severity, note, next, contextLines, lineDigits, output);
        };
        Diagnostic.displayContext = function (input, start, end, severity, note, cause, contextLines, lineDigits, output) {
            var next = cause;
            var sameCause = cause !== null && cause._message === null
                && util.Objects.equal(input.id(), cause._input.id());
            var causeOrder = sameCause ? (start._offset <= cause._tag.start()._offset ? -1 : 1) : 0;
            if (causeOrder === 1) {
                next = Diagnostic.displayCause(cause, contextLines, lineDigits, output);
                output = output.writeln();
                Diagnostic.displayLineLeadEllipsis(lineDigits, output);
                output = output.writeln();
            }
            Diagnostic.displayLines(input, start, end, severity, contextLines, lineDigits, output);
            if (note !== null) {
                Diagnostic.displayNote(note, lineDigits, output);
            }
            if (causeOrder === -1) {
                output = output.writeln();
                Diagnostic.displayLineLeadEllipsis(lineDigits, output);
                output = output.writeln();
                next = Diagnostic.displayCause(cause, contextLines, lineDigits, output);
            }
            return next;
        };
        Diagnostic.displayLines = function (input, start, end, severity, contextLines, lineDigits, output) {
            var startLine = start.line();
            var endLine = end.line();
            var line = input.line();
            while (line < startLine) {
                Diagnostic.consumeLineText(input, line);
                line += 1;
            }
            if (endLine - startLine > 2 * contextLines + 2) {
                while (line <= startLine + contextLines) {
                    Diagnostic.displayLine(input, start, end, severity, line, lineDigits, output);
                    line += 1;
                }
                Diagnostic.displayLineLeadEllipsis(lineDigits, output);
                output = output.write(32);
                Diagnostic.formatSeverity(severity, output);
                output = output.write(124);
                OutputStyle.reset(output);
                output = output.writeln();
                while (line < endLine - contextLines) {
                    Diagnostic.consumeLineText(input, line);
                    line += 1;
                }
            }
            while (line <= endLine) {
                Diagnostic.displayLine(input, start, end, severity, line, lineDigits, output);
                line += 1;
            }
        };
        Diagnostic.displayNote = function (note, lineDigits, output) {
            output = output.writeln();
            Diagnostic.displayLineLead(lineDigits, output);
            output = output.writeln();
            Diagnostic.displayLineComment('note', note, lineDigits, output);
        };
        Diagnostic.displayLine = function (input, start, end, severity, line, lineDigits, output) {
            if (start._line === line && end._line === line) {
                Diagnostic.displaySingleLine(input, start, end, severity, line, lineDigits, output);
            }
            else if (start._line === line) {
                Diagnostic.displayStartLine(input, start, severity, line, lineDigits, output);
            }
            else if (end._line === line) {
                Diagnostic.displayEndLine(input, end, severity, line, lineDigits, output);
            }
            else {
                Diagnostic.displayMidLine(input, severity, line, lineDigits, output);
            }
        };
        Diagnostic.displaySingleLine = function (input, start, end, severity, line, lineDigits, output) {
            Diagnostic.displayLineLeadNumber(line, lineDigits, output);
            output = output.write(32);
            for (var i_1 = 1; i_1 < input.column(); i_1 += 1) {
                output = output.write(32);
            }
            Diagnostic.displayLineText(input, line, output);
            Diagnostic.displayLineLead(lineDigits, output);
            output = output.write(32);
            var i = 1;
            while (i < start._column) {
                output = output.write(32);
                i += 1;
            }
            Diagnostic.formatSeverity(severity, output);
            while (i <= end._column) {
                output = output.write(94);
                i += 1;
            }
            if (end._note !== null) {
                output = output.write(32).write(end._note);
            }
            OutputStyle.reset(output);
        };
        Diagnostic.displayStartLine = function (input, start, severity, line, lineDigits, output) {
            Diagnostic.displayLineLeadNumber(line, lineDigits, output);
            output = output.write(32).write(32).write(32);
            for (var i_2 = 1; i_2 < input.column(); i_2 += 1) {
                output = output.write(32);
            }
            Diagnostic.displayLineText(input, line, output);
            Diagnostic.displayLineLead(lineDigits, output);
            output = output.write(32).write(32);
            Diagnostic.formatSeverity(severity, output);
            output = output.write(95);
            var i = 1;
            while (i < start._column) {
                output = output.write(95);
                i += 1;
            }
            output = output.write(94);
            if (start._note !== null) {
                output = output.write(32).write(start._note);
            }
            OutputStyle.reset(output);
            output = output.writeln();
        };
        Diagnostic.displayEndLine = function (input, end, severity, line, lineDigits, output) {
            Diagnostic.displayLineLeadNumber(line, lineDigits, output);
            output = output.write(32);
            Diagnostic.formatSeverity(severity, output);
            output = output.write(124);
            OutputStyle.reset(output);
            output = output.write(32);
            Diagnostic.displayLineText(input, line, output);
            Diagnostic.displayLineLead(lineDigits, output);
            output = output.write(32);
            Diagnostic.formatSeverity(severity, output);
            output = output.write(124).write(95);
            var i = 1;
            while (i < end._column) {
                output = output.write(95);
                i += 1;
            }
            output = output.write(94);
            if (end._note !== null) {
                output = output.write(32).write(end._note);
            }
            OutputStyle.reset(output);
        };
        Diagnostic.displayMidLine = function (input, severity, line, lineDigits, output) {
            Diagnostic.displayLineLeadNumber(line, lineDigits, output);
            output = output.write(32);
            Diagnostic.formatSeverity(severity, output);
            output = output.write(124);
            OutputStyle.reset(output);
            output = output.write(32);
            Diagnostic.displayLineText(input, line, output);
        };
        Diagnostic.displayLineComment = function (label, comment, lineDigits, output) {
            Diagnostic.displayLineLeadComment(lineDigits, output);
            output = output.write(32);
            OutputStyle.bold(output);
            output = output.write(label).write(58);
            OutputStyle.reset(output);
            if (comment != null) {
                output = output.write(32).write(comment);
            }
        };
        Diagnostic.displayLineLead = function (lineDigits, output) {
            OutputStyle.blueBold(output);
            var padding = 1 + lineDigits;
            for (var i = 0; i < padding; i += 1) {
                output = output.write(32);
            }
            output = output.write(124);
            OutputStyle.reset(output);
        };
        Diagnostic.displayLineLeadComment = function (lineDigits, output) {
            OutputStyle.blueBold(output);
            var padding = 1 + lineDigits;
            for (var i = 0; i < padding; i += 1) {
                output = output.write(32);
            }
            output = output.write(61);
            OutputStyle.reset(output);
        };
        Diagnostic.displayLineLeadArrow = function (lineDigits, output) {
            for (var i = 0; i < lineDigits; i += 1) {
                output = output.write(32);
            }
            OutputStyle.blueBold(output);
            output = output.write(45).write(45).write(62);
            OutputStyle.reset(output);
        };
        Diagnostic.displayLineLeadEllipsis = function (lineDigits, output) {
            OutputStyle.blueBold(output);
            for (var i = 0; i < lineDigits; i += 1) {
                output = output.write(46);
            }
            OutputStyle.reset(output);
            output = output.write(32).write(32);
        };
        Diagnostic.displayLineLeadNumber = function (line, lineDigits, output) {
            var padding = lineDigits - Base10.countDigits(line);
            for (var i = 0; i < padding; i += 1) {
                output = output.write(32);
            }
            OutputStyle.blueBold(output);
            Format.displayNumber(line, output);
            output = output.write(32).write(124);
            OutputStyle.reset(output);
        };
        Diagnostic.displayLineText = function (input, line, output) {
            while (input.isCont() && input.line() === line) {
                output = output.write(input.head());
                input = input.step();
            }
            if (input.line() === line) {
                output = output.writeln();
            }
        };
        Diagnostic.consumeLineText = function (input, line) {
            while (input.isCont() && input.line() === line) {
                input = input.step();
            }
        };
        Diagnostic.formatSeverity = function (severity, output) {
            switch (severity.level()) {
                case util.Severity.FATAL_LEVEL:
                case util.Severity.ALERT_LEVEL:
                case util.Severity.ERROR_LEVEL:
                    OutputStyle.redBold(output);
                    break;
                case util.Severity.WARNING_LEVEL:
                    OutputStyle.yellowBold(output);
                    break;
                case util.Severity.NOTE_LEVEL:
                    OutputStyle.greenBold(output);
                    break;
                case util.Severity.INFO_LEVEL:
                    OutputStyle.cyanBold(output);
                    break;
                case util.Severity.DEBUG_LEVEL:
                case util.Severity.TRACE_LEVEL:
                default:
                    OutputStyle.magentaBold(output);
            }
        };
        return Diagnostic;
    }());

    var ParserException = (function (_super) {
        __extends(ParserException, _super);
        function ParserException(message) {
            var _this = _super.call(this, message instanceof Diagnostic ? message.message() || void 0 : message) || this;
            if (message instanceof Diagnostic) {
                _this.diagnostic = message;
            }
            _this.__proto__ = ParserException.prototype;
            return _this;
        }
        ParserException.prototype.toString = function () {
            if (this.diagnostic) {
                return this.diagnostic.toString();
            }
            else {
                return _super.prototype.toString.call(this);
            }
        };
        return ParserException;
    }(Error));

    var Parser = (function () {
        function Parser() {
        }
        Parser.prototype.isCont = function () {
            return true;
        };
        Parser.prototype.isDone = function () {
            return false;
        };
        Parser.prototype.isError = function () {
            return false;
        };
        Parser.prototype.fork = function (condition) {
            return this;
        };
        Parser.prototype.bind = function () {
            throw new Error();
        };
        Parser.prototype.trap = function () {
            throw new Error();
        };
        Parser.prototype.asError = function () {
            throw new Error();
        };
        Parser.done = function (output) {
            if (output === void 0) {
                if (!Parser._done) {
                    Parser._done = new ParserDone(void 0);
                }
                return Parser._done;
            }
            else {
                return new ParserDone(output);
            }
        };
        Parser.error = function (error) {
            if (error instanceof Error) {
                return new ParserError(error);
            }
            else {
                return new ParserError(new ParserException(error));
            }
        };
        return Parser;
    }());
    var ParserDone = (function (_super) {
        __extends(ParserDone, _super);
        function ParserDone(output) {
            var _this = _super.call(this) || this;
            _this._output = output;
            return _this;
        }
        ParserDone.prototype.isCont = function () {
            return false;
        };
        ParserDone.prototype.isDone = function () {
            return true;
        };
        ParserDone.prototype.feed = function (input) {
            return this;
        };
        ParserDone.prototype.bind = function () {
            return this._output;
        };
        return ParserDone;
    }(Parser));
    var ParserError = (function (_super) {
        __extends(ParserError, _super);
        function ParserError(error) {
            var _this = _super.call(this) || this;
            _this._error = error;
            return _this;
        }
        ParserError.prototype.isCont = function () {
            return false;
        };
        ParserError.prototype.isError = function () {
            return true;
        };
        ParserError.prototype.feed = function (input) {
            return this;
        };
        ParserError.prototype.bind = function () {
            throw this._error;
        };
        ParserError.prototype.trap = function () {
            return this._error;
        };
        ParserError.prototype.asError = function () {
            return this;
        };
        return ParserError;
    }(Parser));

    var UtfErrorMode = (function () {
        function UtfErrorMode() {
        }
        UtfErrorMode.prototype.isFatal = function () {
            return false;
        };
        UtfErrorMode.prototype.isReplacement = function () {
            return false;
        };
        UtfErrorMode.prototype.replacementChar = function () {
            return 0xfffd;
        };
        UtfErrorMode.prototype.toString = function () {
            return Format.debug(this);
        };
        UtfErrorMode.fatal = function () {
            if (!UtfErrorMode._fatal) {
                UtfErrorMode._fatal = new UtfFatalErrorMode(false);
            }
            return UtfErrorMode._fatal;
        };
        UtfErrorMode.fatalNonZero = function () {
            if (!UtfErrorMode._fatalNonZero) {
                UtfErrorMode._fatalNonZero = new UtfFatalErrorMode(true);
            }
            return UtfErrorMode._fatalNonZero;
        };
        UtfErrorMode.replacement = function (replacementChar) {
            if (replacementChar === void 0 || replacementChar === 0xfffd) {
                if (!UtfErrorMode._replacement) {
                    UtfErrorMode._replacement = new UtfReplacementErrorMode(0xfffd, false);
                }
                return UtfErrorMode._replacement;
            }
            else {
                return new UtfReplacementErrorMode(replacementChar, false);
            }
        };
        UtfErrorMode.replacementNonZero = function (replacementChar) {
            if (replacementChar === void 0 || replacementChar === 0xfffd) {
                if (!UtfErrorMode._replacementNonZero) {
                    UtfErrorMode._replacementNonZero = new UtfReplacementErrorMode(0xfffd, true);
                }
                return UtfErrorMode._replacementNonZero;
            }
            else {
                return new UtfReplacementErrorMode(replacementChar, true);
            }
        };
        return UtfErrorMode;
    }());
    var UtfFatalErrorMode = (function (_super) {
        __extends(UtfFatalErrorMode, _super);
        function UtfFatalErrorMode(isNonZero) {
            var _this = _super.call(this) || this;
            _this._isNonZero = isNonZero;
            return _this;
        }
        UtfFatalErrorMode.prototype.isFatal = function () {
            return true;
        };
        UtfFatalErrorMode.prototype.isNonZero = function (isNonZero) {
            if (isNonZero === void 0) {
                return this._isNonZero;
            }
            else if (isNonZero) {
                return UtfErrorMode.fatalNonZero();
            }
            else {
                return UtfErrorMode.fatal();
            }
        };
        UtfFatalErrorMode.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UtfFatalErrorMode) {
                return this._isNonZero === that._isNonZero;
            }
            return false;
        };
        UtfFatalErrorMode.prototype.hashCode = function () {
            if (UtfFatalErrorMode._hashSeed === void 0) {
                UtfFatalErrorMode._hashSeed = util.Murmur3.seed(UtfFatalErrorMode);
            }
            return util.Murmur3.mash(util.Murmur3.mix(UtfFatalErrorMode._hashSeed, util.Murmur3.hash(this._isNonZero)));
        };
        UtfFatalErrorMode.prototype.debug = function (output) {
            output = output.write("UtfErrorMode").write(46)
                .write(this.isNonZero ? "fatalNonZero" : "fatal")
                .write(40).write(41);
        };
        return UtfFatalErrorMode;
    }(UtfErrorMode));
    var UtfReplacementErrorMode = (function (_super) {
        __extends(UtfReplacementErrorMode, _super);
        function UtfReplacementErrorMode(replacementChar, isNonZero) {
            var _this = _super.call(this) || this;
            _this._replacementChar = replacementChar;
            _this._isNonZero = isNonZero;
            return _this;
        }
        UtfReplacementErrorMode.prototype.isReplacement = function () {
            return true;
        };
        UtfReplacementErrorMode.prototype.replacementChar = function () {
            return this._replacementChar;
        };
        UtfReplacementErrorMode.prototype.isNonZero = function (isNonZero) {
            if (isNonZero === void 0) {
                return this._isNonZero;
            }
            else if (this._replacementChar === 0xfffd) {
                if (isNonZero) {
                    return UtfErrorMode.replacementNonZero();
                }
                else {
                    return UtfErrorMode.replacement();
                }
            }
            else {
                return new UtfReplacementErrorMode(this._replacementChar, isNonZero);
            }
        };
        UtfReplacementErrorMode.prototype.equals = function (that) {
            if (this === that) {
                return true;
            }
            else if (that instanceof UtfReplacementErrorMode) {
                return this.replacementChar === that.replacementChar
                    && this.isNonZero === that.isNonZero;
            }
            return false;
        };
        UtfReplacementErrorMode.prototype.hashCode = function () {
            if (UtfReplacementErrorMode._hashSeed === void 0) {
                UtfReplacementErrorMode._hashSeed = util.Murmur3.seed(UtfReplacementErrorMode);
            }
            return util.Murmur3.mash(util.Murmur3.mix(util.Murmur3.mix(UtfReplacementErrorMode._hashSeed, this._replacementChar), util.Murmur3.hash(this._isNonZero)));
        };
        UtfReplacementErrorMode.prototype.debug = function (output) {
            output = output.write("UtfErrorMode").write(46)
                .write(this._isNonZero ? "replacementNonZero" : "replacement")
                .write(40);
            if (this._replacementChar !== 0xfffd) {
                Format.debugChar(this._replacementChar, output);
            }
            output = output.write(41);
        };
        return UtfReplacementErrorMode;
    }(UtfErrorMode));

    var Uint8ArrayOutput = (function (_super) {
        __extends(Uint8ArrayOutput, _super);
        function Uint8ArrayOutput(array, index, limit, settings, isPart) {
            if (settings === void 0) { settings = OutputSettings.standard(); }
            if (isPart === void 0) { isPart = false; }
            var _this = _super.call(this) || this;
            _this._array = array;
            _this._index = index;
            _this._limit = limit;
            _this._settings = settings;
            _this._isPart = isPart;
            return _this;
        }
        Uint8ArrayOutput.prototype.isCont = function () {
            return this._index < this._limit;
        };
        Uint8ArrayOutput.prototype.isFull = function () {
            return this._isPart && this._index >= this._limit;
        };
        Uint8ArrayOutput.prototype.isDone = function () {
            return !this._isPart && this._index >= this._limit;
        };
        Uint8ArrayOutput.prototype.isError = function () {
            return false;
        };
        Uint8ArrayOutput.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return this._isPart;
            }
            else {
                this._isPart = isPart;
                return this;
            }
        };
        Uint8ArrayOutput.prototype.index = function (index) {
            if (index === void 0) {
                return this._index;
            }
            else if (0 <= index && index <= this._limit) {
                this._index = index;
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid index"), this._settings);
            }
        };
        Uint8ArrayOutput.prototype.limit = function (limit) {
            if (limit === void 0) {
                return this._limit;
            }
            else if (0 <= limit && limit <= this._array.length) {
                this._limit = limit;
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid limit"), this._settings);
            }
        };
        Uint8ArrayOutput.prototype.capacity = function () {
            return this._array.length;
        };
        Uint8ArrayOutput.prototype.remaining = function () {
            return this._limit - this._index;
        };
        Uint8ArrayOutput.prototype.has = function (index) {
            return 0 <= index && index < this._limit;
        };
        Uint8ArrayOutput.prototype.get = function (index) {
            if (0 <= index && index < this._limit) {
                return this._array[index];
            }
            else {
                throw new OutputException();
            }
        };
        Uint8ArrayOutput.prototype.set = function (index, token) {
            if (0 <= index && index < this._limit) {
                this._array[index] = token;
            }
            else {
                throw new OutputException();
            }
        };
        Uint8ArrayOutput.prototype.write = function (token) {
            if (typeof token === "number") {
                var index = this._index;
                if (index < this._limit) {
                    this._array[index] = token;
                    this._index = index + 1;
                    return this;
                }
                else {
                    return OutputBuffer.error(new OutputException("full"), this._settings);
                }
            }
            else {
                return OutputBuffer.error(new OutputException("binary output"), this._settings);
            }
        };
        Uint8ArrayOutput.prototype.writeln = function (string) {
            return OutputBuffer.error(new OutputException("binary output"), this._settings);
        };
        Uint8ArrayOutput.prototype.step = function (offset) {
            var index = this._index + offset;
            if (0 <= index && index <= this._limit) {
                this._index = index;
                return this;
            }
            else {
                return OutputBuffer.error(new OutputException("invalid step"), this._settings);
            }
        };
        Uint8ArrayOutput.prototype.bind = function () {
            return new Uint8Array(this._array.buffer, 0, this._index);
        };
        Uint8ArrayOutput.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                this._settings = OutputSettings.fromAny(settings);
                return this;
            }
        };
        Uint8ArrayOutput.prototype.clone = function () {
            return new Uint8ArrayOutput(this._array, this._index, this._limit, this._settings, this._isPart);
        };
        return Uint8ArrayOutput;
    }(OutputBuffer));

    var ByteOutput = (function (_super) {
        __extends(ByteOutput, _super);
        function ByteOutput(array, size, settings) {
            var _this = _super.call(this) || this;
            _this._array = array;
            _this._size = size;
            _this._settings = settings;
            return _this;
        }
        ByteOutput.prototype.isCont = function () {
            return true;
        };
        ByteOutput.prototype.isFull = function () {
            return false;
        };
        ByteOutput.prototype.isDone = function () {
            return false;
        };
        ByteOutput.prototype.isError = function () {
            return false;
        };
        ByteOutput.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return false;
            }
            else {
                return this;
            }
        };
        ByteOutput.prototype.write = function (b) {
            if (typeof b === "number") {
                var n = this._size;
                var oldArray = this._array;
                var newArray = void 0;
                if (oldArray === null || n + 1 > oldArray.length) {
                    newArray = new Uint8Array(ByteOutput.expand(n + 1));
                    if (oldArray !== null) {
                        newArray.set(oldArray, 0);
                    }
                    this._array = newArray;
                }
                else {
                    newArray = oldArray;
                }
                newArray[n] = b;
                this._size = n + 1;
                return this;
            }
            else {
                throw new TypeError("" + b);
            }
        };
        ByteOutput.prototype.writeln = function (string) {
            throw new TypeError("" + string);
        };
        ByteOutput.prototype.toUint8Array = function () {
            var n = this._size;
            var oldArray = this._array;
            if (oldArray !== null && n === oldArray.length) {
                return oldArray;
            }
            else {
                var newArray = new Uint8Array(n);
                if (oldArray !== null) {
                    newArray.set(oldArray.slice(0, n), 0);
                }
                this._array = newArray;
                return newArray;
            }
        };
        ByteOutput.prototype.cloneArray = function () {
            var oldArray = this._array;
            if (oldArray !== null) {
                return oldArray.slice(0, this._size);
            }
            else {
                return null;
            }
        };
        ByteOutput.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._settings;
            }
            else {
                this._settings = OutputSettings.fromAny(settings);
                return this;
            }
        };
        ByteOutput.expand = function (n) {
            n = Math.max(32, n) - 1;
            n |= n >> 1;
            n |= n >> 2;
            n |= n >> 4;
            n |= n >> 8;
            n |= n >> 16;
            return n + 1;
        };
        return ByteOutput;
    }(Output));

    var ByteOutputUint8Array = (function (_super) {
        __extends(ByteOutputUint8Array, _super);
        function ByteOutputUint8Array(array, size, settings) {
            return _super.call(this, array, size, settings) || this;
        }
        ByteOutputUint8Array.prototype.bind = function () {
            return this.toUint8Array();
        };
        ByteOutputUint8Array.prototype.clone = function () {
            return new ByteOutputUint8Array(this.cloneArray(), this._size, this._settings);
        };
        return ByteOutputUint8Array;
    }(ByteOutput));

    var Binary = (function () {
        function Binary() {
        }
        Binary.outputBuffer = function (array, offset, length) {
            if (offset === void 0) { offset = 0; }
            if (length === void 0) { length = array.length; }
            return new Uint8ArrayOutput(array, offset, offset + length);
        };
        Binary.uint8ArrayOutput = function (initialCapacity, settings) {
            if (settings === void 0 && typeof initialCapacity !== "number") {
                settings = initialCapacity;
                initialCapacity = void 0;
            }
            else if (typeof initialCapacity !== "number") {
                initialCapacity = void 0;
            }
            var array;
            if (typeof initialCapacity === "number") {
                array = new Uint8Array(initialCapacity);
            }
            else {
                array = null;
            }
            settings = OutputSettings.fromAny(settings);
            return new ByteOutputUint8Array(array, 0, settings);
        };
        return Binary;
    }());

    var Base16 = (function () {
        function Base16(alphabet) {
            this._alphabet = alphabet;
        }
        Base16.prototype.alphabet = function () {
            return this._alphabet;
        };
        Base16.prototype.encodeDigit = function (b) {
            return this._alphabet.charCodeAt(b);
        };
        Base16.prototype.uint8ArrayWriter = function (input) {
            if (input === void 0) {
                return new Base16.Writer(void 0, void 0, this);
            }
            else {
                return new Base16.Writer(input, input, this);
            }
        };
        Base16.prototype.writeUint8Array = function (input, output) {
            return Base16.Writer.write(output, void 0, input, this);
        };
        Base16.prototype.writeInteger = function (input, output, width) {
            if (width === void 0) { width = 0; }
            return Base16.IntegerWriter.write(output, void 0, input, width, this);
        };
        Base16.prototype.writeIntegerLiteral = function (input, output, width) {
            if (width === void 0) { width = 0; }
            return Base16.IntegerWriter.writeLiteral(output, void 0, input, width, this);
        };
        Base16.lowercase = function () {
            if (!Base16._lowercase) {
                Base16._lowercase = new Base16("0123456789abcdef");
            }
            return Base16._lowercase;
        };
        Base16.uppercase = function () {
            if (!Base16._uppercase) {
                Base16._uppercase = new Base16("0123456789ABCDEF");
            }
            return Base16._uppercase;
        };
        Base16.isDigit = function (c) {
            return c >= 48 && c <= 57
                || c >= 65 && c <= 70
                || c >= 97 && c <= 102;
        };
        Base16.decodeDigit = function (c) {
            if (c >= 48 && c <= 57) {
                return c - 48;
            }
            else if (c >= 65 && c <= 70) {
                return 10 + (c - 65);
            }
            else if (c >= 97 && c <= 102) {
                return 10 + (c - 97);
            }
            else {
                var message = Unicode.stringOutput();
                message.write("Invalid base-16 digit: ");
                Format.debugChar(c, message);
                throw new Error(message.bind());
            }
        };
        Base16.writeQuantum = function (c1, c2, output) {
            var x = Base16.decodeDigit(c1);
            var y = Base16.decodeDigit(c2);
            output = output.write(x << 4 | y);
        };
        Base16.parser = function (output) {
            return new Base16.Parser(output);
        };
        Base16.parse = function (input, output) {
            return Base16.Parser.parse(input, output);
        };
        Base16.parseUint8Array = function (input) {
            return Base16.Parser.parse(input, Binary.uint8ArrayOutput());
        };
        return Base16;
    }());

    var Utf8DecodedOutput = (function (_super) {
        __extends(Utf8DecodedOutput, _super);
        function Utf8DecodedOutput(output, errorMode, c1, c2, c3, have) {
            if (c1 === void 0) { c1 = -1; }
            if (c2 === void 0) { c2 = -1; }
            if (c3 === void 0) { c3 = -1; }
            if (have === void 0) { have = 0; }
            var _this = _super.call(this) || this;
            _this._output = output;
            _this._errorMode = errorMode;
            _this._c1 = c1;
            _this._c2 = c2;
            _this._c3 = c3;
            _this._have = have;
            return _this;
        }
        Utf8DecodedOutput.prototype.isCont = function () {
            return this._output.isCont();
        };
        Utf8DecodedOutput.prototype.isFull = function () {
            return this._output.isFull();
        };
        Utf8DecodedOutput.prototype.isDone = function () {
            return this._output.isDone();
        };
        Utf8DecodedOutput.prototype.isError = function () {
            return this._output.isError();
        };
        Utf8DecodedOutput.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return this._output.isPart();
            }
            else {
                this._output = this._output.isPart(isPart);
                return this;
            }
        };
        Utf8DecodedOutput.prototype.write = function (token) {
            if (typeof token === "number") {
                var c1 = this._c1;
                var c2 = this._c2;
                var c3 = this._c3;
                var c4 = -1;
                var have = this._have;
                if (token >= 0) {
                    switch (have) {
                        case 0:
                            c1 = token & 0xff;
                            have = 1;
                            break;
                        case 1:
                            c2 = token & 0xff;
                            have = 2;
                            break;
                        case 2:
                            c3 = token & 0xff;
                            have = 3;
                            break;
                        case 3:
                            c4 = token & 0xff;
                            have = 4;
                            break;
                        default:
                            throw new Error("unreachable");
                    }
                }
                if (c1 === 0 && this._errorMode.isNonZero()) {
                    return Output.error(new OutputException("unexpected NUL byte"));
                }
                else if (c1 >= 0 && c1 <= 0x7f) {
                    this._output = this._output.write(c1);
                    this._have = 0;
                }
                else if (c1 >= 0xc2 && c1 <= 0xf4) {
                    if (c1 >= 0xc2 && c1 <= 0xdf && c2 >= 0x80 && c2 <= 0xbf) {
                        this._output = this._output.write((c1 & 0x1f) << 6 | c2 & 0x3f);
                        this._c1 = -1;
                        this._have = 0;
                    }
                    else if (c1 === 0xe0 && c2 >= 0xa0 && c2 <= 0xbf
                        || c1 >= 0xe1 && c1 <= 0xec && c2 >= 0x80 && c2 <= 0xbf
                        || c1 === 0xed && c2 >= 0x80 && c2 <= 0x9f
                        || c1 >= 0xee && c1 <= 0xef && c2 >= 0x80 && c2 <= 0xbf) {
                        if (c3 >= 0x80 && c3 <= 0xbf) {
                            this._output = this._output.write((c1 & 0x0f) << 12 | (c2 & 0x3f) << 6 | c3 & 0x3f);
                            this._c1 = -1;
                            this._c2 = -1;
                            this._have = 0;
                        }
                        else if (c3 >= 0) {
                            if (this._errorMode.isFatal()) {
                                return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2, c3)));
                            }
                            this._output = this._output.write(this._errorMode.replacementChar());
                            this._c1 = c3;
                            this._c2 = -1;
                            this._have = 1;
                        }
                        else if (token < 0 || this._output.isDone()) {
                            return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2)));
                        }
                        else {
                            this._c2 = c2;
                            this._have = 2;
                        }
                    }
                    else if (c1 === 0xf0 && c2 >= 0x90 && c2 <= 0xbf
                        || c1 >= 0xf1 && c1 <= 0xf3 && c2 >= 0x80 && c2 <= 0xbf
                        || c1 === 0xf4 && c2 >= 0x80 && c2 <= 0x8f) {
                        if (c3 >= 0x80 && c3 <= 0xbf) {
                            if (c4 >= 0x80 && c4 <= 0xbf) {
                                this._have = 4;
                                this._output = this._output.write((c1 & 0x07) << 18 | (c2 & 0x3f) << 12 | (c3 & 0x3f) << 6 | c4 & 0x3f);
                                this._c1 = -1;
                                this._c2 = -1;
                                this._c3 = -1;
                                this._have = 0;
                            }
                            else if (c4 >= 0) {
                                if (this._errorMode.isFatal()) {
                                    return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2, c3, c4)));
                                }
                                this._output = this._output.write(this._errorMode.replacementChar());
                                this._c1 = c4;
                                this._c2 = -1;
                                this._c3 = -1;
                                this._have = 1;
                            }
                            else if (token < 0 || this._output.isDone()) {
                                return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2, c3)));
                            }
                            else {
                                this._c3 = c3;
                                this._have = 3;
                            }
                        }
                        else if (c3 >= 0) {
                            if (this._errorMode.isFatal()) {
                                return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2, c3)));
                            }
                            this._output = this._output.write(this._errorMode.replacementChar());
                            this._c1 = c3;
                            this._c2 = -1;
                            this._have = 1;
                        }
                        else if (token < 0 || this._output.isDone()) {
                            return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2)));
                        }
                        else {
                            this._c2 = c2;
                            this._have = 2;
                        }
                    }
                    else if (c2 >= 0) {
                        if (this._errorMode.isFatal()) {
                            return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2)));
                        }
                        this._output = this._output.write(this._errorMode.replacementChar());
                        this._c1 = c2;
                        this._have = 1;
                    }
                    else if (token < 0 || this._output.isDone()) {
                        return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1)));
                    }
                    else {
                        this._c1 = c1;
                        this._have = 1;
                    }
                }
                else if (c1 >= 0) {
                    if (this._errorMode.isFatal()) {
                        return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1)));
                    }
                    this._output = this._output.write(this._errorMode.replacementChar());
                    this._have = 0;
                }
                if (this._output.isError()) {
                    return this._output;
                }
                return this;
            }
            else if (typeof token === "string") {
                this._output.write(token);
                return this;
            }
            else {
                throw new TypeError("" + token);
            }
        };
        Utf8DecodedOutput.invalid = function (c1, c2, c3, c4) {
            var output = Unicode.stringOutput();
            output = output.write("invalid UTF-8 code unit sequence: ");
            Base16.uppercase().writeIntegerLiteral(c1, output, 2);
            if (c2 !== void 0) {
                output = output.write(' ');
                Base16.uppercase().writeIntegerLiteral(c2, output, 2);
                if (c3 !== void 0) {
                    output = output.write(' ');
                    Base16.uppercase().writeIntegerLiteral(c3, output, 2);
                    if (c4 !== void 0) {
                        output = output.write(' ');
                        Base16.uppercase().writeIntegerLiteral(c4, output, 2);
                    }
                }
            }
            return output.bind();
        };
        Utf8DecodedOutput.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._output.settings();
            }
            else {
                this._output.settings(settings);
                return this;
            }
        };
        Utf8DecodedOutput.prototype.bind = function () {
            if (this._have === 0) {
                return this._output.bind();
            }
            else {
                return this.write(-1).bind();
            }
        };
        Utf8DecodedOutput.prototype.trap = function () {
            return this._output.trap();
        };
        Utf8DecodedOutput.prototype.clone = function () {
            return new Utf8DecodedOutput(this._output.clone(), this._errorMode, this._c1, this._c2, this._c3, this._have);
        };
        return Utf8DecodedOutput;
    }(Output));

    var Utf8EncodedOutput = (function (_super) {
        __extends(Utf8EncodedOutput, _super);
        function Utf8EncodedOutput(output, errorMode, c2, c3, c4, index) {
            if (c2 === void 0) { c2 = 0; }
            if (c3 === void 0) { c3 = 0; }
            if (c4 === void 0) { c4 = 0; }
            if (index === void 0) { index = 4; }
            var _this = _super.call(this) || this;
            _this._output = output;
            _this._errorMode = errorMode;
            _this._c2 = c2;
            _this._c3 = c3;
            _this._c4 = c4;
            _this._index = index;
            return _this;
        }
        Utf8EncodedOutput.prototype.isCont = function () {
            return this._output.isCont();
        };
        Utf8EncodedOutput.prototype.isFull = function () {
            return this._output.isFull();
        };
        Utf8EncodedOutput.prototype.isDone = function () {
            return this._output.isDone();
        };
        Utf8EncodedOutput.prototype.isError = function () {
            return false;
        };
        Utf8EncodedOutput.prototype.isPart = function (isPart) {
            if (isPart === void 0) {
                return this._output.isPart();
            }
            else {
                this._output = this._output.isPart(isPart);
                return this;
            }
        };
        Utf8EncodedOutput.prototype.write = function (token) {
            if (typeof token === "number") {
                var c1 = 0;
                var c2 = this._c2;
                var c3 = this._c3;
                var c4 = this._c4;
                var index = this._index;
                while (index < 4) {
                    if (this._output.isCont()) {
                        switch (index) {
                            case 1:
                                this._output = this._output.write(c2);
                                this._c2 = 0;
                                break;
                            case 2:
                                this._output = this._output.write(c3);
                                this._c3 = 0;
                                break;
                            case 3:
                                this._output = this._output.write(c4);
                                this._c4 = 0;
                                break;
                            default: throw new Error("unreachable");
                        }
                        index += 1;
                    }
                    else {
                        return Output.error(new OutputException("unable to flush buffered code units"));
                    }
                }
                if (token >= 0 && token <= 0x7f) {
                    c4 = token;
                    index = 3;
                }
                else if (token >= 0x80 && token <= 0x7ff) {
                    c3 = 0xc0 | (token >>> 6);
                    c4 = 0x80 | (token & 0x3f);
                    index = 2;
                }
                else if (token >= 0x0800 && token <= 0xffff ||
                    token >= 0xe000 && token <= 0xffff) {
                    c2 = 0xe0 | (token >>> 12);
                    c3 = 0x80 | ((token >>> 6) & 0x3f);
                    c4 = 0x80 | (token & 0x3f);
                    index = 1;
                }
                else if (token >= 0x10000 && token <= 0x10ffff) {
                    c1 = 0xf0 | (token >>> 18);
                    c2 = 0x80 | ((token >>> 12) & 0x3f);
                    c3 = 0x80 | ((token >>> 6) & 0x3f);
                    c4 = 0x80 | (token & 0x3f);
                    index = 0;
                }
                else {
                    if (this._errorMode.isFatal()) {
                        return Output.error(new OutputException("invalid code point: " + token));
                    }
                    else {
                        return this.write(this._errorMode.replacementChar());
                    }
                }
                do {
                    switch (index) {
                        case 0:
                            this._output = this._output.write(c1);
                            break;
                        case 1:
                            this._output = this._output.write(c2);
                            this._c2 = 0;
                            break;
                        case 2:
                            this._output = this._output.write(c3);
                            this._c3 = 0;
                            break;
                        case 3:
                            this._output = this._output.write(c4);
                            this._c4 = 0;
                            break;
                        default: throw new Error("unreachable");
                    }
                    index += 1;
                } while (index < 4 && this._output.isCont());
                if (index < 4) {
                    if (index < 3) {
                        if (index < 2) {
                            this._c2 = c2;
                        }
                        this._c3 = c3;
                    }
                    this._c4 = c4;
                }
                this._index = index;
                return this;
            }
            else if (typeof token === "string") {
                this._output.write(token);
                return this;
            }
            else {
                throw new TypeError("" + token);
            }
        };
        Utf8EncodedOutput.prototype.flush = function () {
            var index = this._index;
            while (index < 4) {
                if (this._output.isCont()) {
                    switch (index) {
                        case 1:
                            this._output = this._output.write(this._c2);
                            this._c2 = 0;
                            break;
                        case 2:
                            this._output = this._output.write(this._c3);
                            this._c3 = 0;
                            break;
                        case 3:
                            this._output = this._output.write(this._c4);
                            this._c4 = 0;
                            break;
                        default: throw new Error("unreachable");
                    }
                    index += 1;
                }
                else {
                    return Output.error(new OutputException("unable to flush buffered code units"));
                }
            }
            this._index = index;
            return this;
        };
        Utf8EncodedOutput.prototype.settings = function (settings) {
            if (settings === void 0) {
                return this._output.settings();
            }
            else {
                this._output.settings(settings);
                return this;
            }
        };
        Utf8EncodedOutput.prototype.bind = function () {
            return this._output.bind();
        };
        Utf8EncodedOutput.prototype.clone = function () {
            return new Utf8EncodedOutput(this._output.clone(), this._errorMode, this._c2, this._c3, this._c4, this._index);
        };
        return Utf8EncodedOutput;
    }(Output));

    var Utf8 = (function () {
        function Utf8() {
        }
        Utf8.sizeOf = function (u, errorMode) {
            if (typeof u === "number" || u === void 0) {
                if (typeof u === "number") {
                    if (u === 0x0000 && errorMode !== void 0 && errorMode.isNonZero()) {
                        return 2;
                    }
                    else if (u >= 0x0000 && u <= 0x007F) {
                        return 1;
                    }
                    else if (u >= 0x0080 && u <= 0x07FF) {
                        return 2;
                    }
                    else if (u >= 0x0800 && u <= 0xFFFF ||
                        u >= 0xE000 && u <= 0xFFFF) {
                        return 3;
                    }
                    else if (u >= 0x10000 && u <= 0x10FFFF) {
                        return 4;
                    }
                }
                if (errorMode === void 0) {
                    return 3;
                }
                else if (errorMode.isReplacement()) {
                    return Utf8.sizeOf(errorMode.replacementChar());
                }
                else {
                    return 0;
                }
            }
            else if (typeof u === "string") {
                var size = 0;
                for (var i = 0, n = u.length; i < n; i = u.offsetByCodePoints(i, 1)) {
                    size += Utf8.sizeOf(u.charCodeAt(i), errorMode);
                }
                return size;
            }
            else {
                throw new TypeError("" + u);
            }
        };
        Utf8.decodedOutput = function (output, errorMode) {
            if (errorMode === void 0) { errorMode = UtfErrorMode.fatal(); }
            return new Utf8DecodedOutput(output, errorMode);
        };
        Utf8.encodedOutput = function (output, errorMode) {
            if (errorMode === void 0) { errorMode = UtfErrorMode.fatal(); }
            return new Utf8EncodedOutput(output, errorMode);
        };
        Utf8.decodedString = function () {
            return Utf8.decodedOutput(Unicode.stringOutput());
        };
        return Utf8;
    }());

    var Base10NumberParser = (function (_super) {
        __extends(Base10NumberParser, _super);
        function Base10NumberParser(sign, value, mode, step) {
            var _this = _super.call(this) || this;
            _this._sign = sign;
            _this._value = value;
            _this._mode = mode;
            _this._step = step;
            return _this;
        }
        Base10NumberParser.prototype.feed = function (input) {
            return Base10NumberParser.parse(input, this._sign, this._value, this._mode, this._step);
        };
        Base10NumberParser.parse = function (input, sign, value, mode, step) {
            if (sign === void 0) { sign = 1; }
            if (value === void 0) { value = 0; }
            if (mode === void 0) { mode = 2; }
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 45) {
                        input = input.step();
                        sign = -1;
                    }
                    step = 2;
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("number", input));
                }
            }
            if (step === 2) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 48) {
                        input = input.step();
                        step = 4;
                    }
                    else if (c >= 49 && c <= 57) {
                        input = input.step();
                        value = sign * (c - 48);
                        step = 3;
                    }
                    else if (mode > 0 && c === 46) {
                        var output = Unicode.stringOutput();
                        if (sign < 0) {
                            output = output.write(45);
                        }
                        return Base10DecimalParser.parse(input, output, mode);
                    }
                    else {
                        return Parser.error(Diagnostic.expected("number", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("number", input));
                }
            }
            if (step === 3) {
                while (input.isCont()) {
                    c = input.head();
                    if (c >= 48 && c <= 57) {
                        var newValue = 10 * value + sign * (c - 48);
                        if (-9007199254740991 <= newValue && newValue <= 9007199254740992) {
                            value = newValue;
                            input = input.step();
                        }
                        else {
                            return Parser.error(Diagnostic.message("integer overflow", input));
                        }
                    }
                    else {
                        break;
                    }
                }
                if (input.isCont()) {
                    step = 4;
                }
                else if (input.isDone()) {
                    return Parser.done(value);
                }
            }
            if (step === 4) {
                if (input.isCont()) {
                    c = input.head();
                    if (mode > 0 && c === 46 || mode > 1 && (c === 69 || c === 101)) {
                        var output = Unicode.stringOutput();
                        if (sign < 0 && value === 0) {
                            output = output.write(45).write(48);
                        }
                        else {
                            output = output.write("" + value);
                        }
                        return Base10DecimalParser.parse(input, output, mode);
                    }
                    else {
                        return Parser.done(value);
                    }
                }
                else if (input.isDone()) {
                    return Parser.done(value);
                }
            }
            return new Base10NumberParser(sign, value, mode, step);
        };
        return Base10NumberParser;
    }(Parser));
    Base10.NumberParser = Base10NumberParser;
    var Base10DecimalParser = (function (_super) {
        __extends(Base10DecimalParser, _super);
        function Base10DecimalParser(output, mode, step) {
            var _this = _super.call(this) || this;
            _this._output = output;
            _this._mode = mode;
            _this._step = step;
            return _this;
        }
        Base10DecimalParser.prototype.feed = function (input) {
            return Base10DecimalParser.parse(input, this._output, this._mode, this._step);
        };
        Base10DecimalParser.parse = function (input, output, mode, step) {
            if (mode === void 0) { mode = 2; }
            if (step === void 0) { step = 1; }
            var c = 0;
            if (step === 1) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 46) {
                        input = input.step();
                        output = output.write(c);
                        step = 2;
                    }
                    else if (mode > 1 && (c === 69 || c === 101)) {
                        input = input.step();
                        output = output.write(c);
                        step = 5;
                    }
                    else {
                        return Parser.error(Diagnostic.expected("decimal or exponent", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("decimal or exponent", input));
                }
            }
            if (step === 2) {
                if (input.isCont()) {
                    c = input.head();
                    if (c >= 48 && c <= 57) {
                        input = input.step();
                        output = output.write(c);
                        step = 3;
                    }
                    else {
                        return Parser.error(Diagnostic.expected("digit", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("digit", input));
                }
            }
            if (step === 3) {
                while (input.isCont()) {
                    c = input.head();
                    if (c >= 48 && c <= 57) {
                        input = input.step();
                        output = output.write(c);
                    }
                    else {
                        break;
                    }
                }
                if (input.isCont()) {
                    if (mode > 1) {
                        step = 4;
                    }
                    else {
                        return Parser.done(+output.bind());
                    }
                }
                else if (input.isDone()) {
                    return Parser.done(+output.bind());
                }
            }
            if (step === 4) {
                c = input.head();
                if (c === 69 || c === 101) {
                    input = input.step();
                    output = output.write(c);
                    step = 5;
                }
                else {
                    return Parser.done(+output.bind());
                }
            }
            if (step === 5) {
                if (input.isCont()) {
                    c = input.head();
                    if (c === 43 || c === 45) {
                        input = input.step();
                        output = output.write(c);
                    }
                    step = 6;
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.unexpected(input));
                }
            }
            if (step === 6) {
                if (input.isCont()) {
                    c = input.head();
                    if (c >= 48 && c <= 57) {
                        input = input.step();
                        output = output.write(c);
                        step = 7;
                    }
                    else {
                        return Parser.error(Diagnostic.expected("digit", input));
                    }
                }
                else if (input.isDone()) {
                    return Parser.error(Diagnostic.expected("digit", input));
                }
            }
            if (step === 7) {
                while (input.isCont()) {
                    c = input.head();
                    if (c >= 48 && c <= 57) {
                        input = input.step();
                        output = output.write(c);
                    }
                    else {
                        break;
                    }
                }
                if (!input.isEmpty()) {
                    return Parser.done(+output.bind());
                }
            }
            return new Base10DecimalParser(output, mode, step);
        };
        return Base10DecimalParser;
    }(Parser));

    var Base10IntegerWriter = (function (_super) {
        __extends(Base10IntegerWriter, _super);
        function Base10IntegerWriter(value, input, index, step) {
            if (index === void 0) { index = 0; }
            if (step === void 0) { step = 1; }
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._input = input;
            _this._index = index;
            _this._step = step;
            return _this;
        }
        Base10IntegerWriter.prototype.pull = function (output) {
            return Base10IntegerWriter.write(output, this._value, this._input, this._index, this._step);
        };
        Base10IntegerWriter.write = function (output, value, input, index, step) {
            if (index === void 0) { index = 0; }
            if (step === void 0) { step = 1; }
            if (step === 0) {
                return Writer.done();
            }
            if (step === 1) {
                if (input < 0) {
                    if (output.isCont()) {
                        output = output.write(45);
                        step = 2;
                    }
                }
                else {
                    step = 2;
                }
            }
            if (step === 2) {
                if (input > -10 && input < 10) {
                    if (output.isCont()) {
                        output = output.write(Base10.encodeDigit(Math.abs(input | 0)));
                        return Writer.done(value);
                    }
                }
                else {
                    var digits = new Array(19);
                    var x = input;
                    var i = 18;
                    while (x) {
                        digits[i] = Math.abs((x % 10) | 0);
                        x = (x / 10) | 0;
                        i -= 1;
                    }
                    i += 1 + index;
                    while (i < 19 && output.isCont()) {
                        output = output.write(Base10.encodeDigit(digits[i]));
                        index += 1;
                        i += 1;
                    }
                    if (i === 19) {
                        return Writer.done(value);
                    }
                }
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new Base10IntegerWriter(value, input, index, step);
        };
        return Base10IntegerWriter;
    }(Writer));
    Base10.IntegerWriter = Base10IntegerWriter;

    var Base16Parser = (function (_super) {
        __extends(Base16Parser, _super);
        function Base16Parser(output, p, step) {
            if (p === void 0) { p = 0; }
            if (step === void 0) { step = 1; }
            var _this = _super.call(this) || this;
            _this._output = output;
            _this._p = p;
            _this._step = step;
            return _this;
        }
        Base16Parser.prototype.feed = function (input) {
            return Base16Parser.parse(input, this._output.clone(), this._p, this._step);
        };
        Base16Parser.parse = function (input, output, p, step) {
            if (p === void 0) { p = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            while (!input.isEmpty()) {
                if (step === 1) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        p = c;
                        step = 2;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.done(output.bind());
                    }
                }
                if (step === 2) {
                    if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {
                        input = input.step();
                        Base16.writeQuantum(p, c, output);
                        p = 0;
                        step = 1;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("base16 digit", input));
                    }
                }
            }
            return new Base16Parser(output, p, step);
        };
        return Base16Parser;
    }(Parser));
    Base16.Parser = Base16Parser;

    var Base16Writer = (function (_super) {
        __extends(Base16Writer, _super);
        function Base16Writer(value, input, base16, index, step) {
            if (index === void 0) { index = 0; }
            if (step === void 0) { step = 1; }
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._input = input;
            _this._base16 = base16;
            _this._index = index;
            _this._step = step;
            return _this;
        }
        Base16Writer.prototype.feed = function (value) {
            if (value instanceof Uint8Array) {
                return new Base16Writer(undefined, value, this._base16);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Base16Writer.prototype.pull = function (output) {
            return Base16Writer.write(output, this._value, this._input, this._base16, this._index, this._step);
        };
        Base16Writer.write = function (output, value, input, base16, index, step) {
            if (index === void 0) { index = 0; }
            if (step === void 0) { step = 1; }
            while (index < input.length) {
                var x = input[index];
                if (step === 1 && output.isCont()) {
                    output = output.write(base16.encodeDigit(x >>> 4));
                    step = 2;
                }
                if (step === 2 && output.isCont()) {
                    output = output.write(base16.encodeDigit(x & 0x0f));
                    index += 1;
                    step = 1;
                }
            }
            if (index === input.length) {
                return Writer.done(value);
            }
            else if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new Base16Writer(value, input, base16, index, step);
        };
        return Base16Writer;
    }(Writer));
    Base16.Writer = Base16Writer;

    var Base16IntegerWriter = (function (_super) {
        __extends(Base16IntegerWriter, _super);
        function Base16IntegerWriter(value, input, width, base16, index, step) {
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._input = input;
            _this._width = width;
            _this._base16 = base16;
            _this._index = index;
            _this._step = step;
            return _this;
        }
        Base16IntegerWriter.prototype.pull = function (output) {
            return Base16IntegerWriter.write(output, this._value, this._input, this._width, this._base16, this._index, this._step);
        };
        Base16IntegerWriter.write = function (output, value, input, width, base16, index, step) {
            if (index === void 0) { index = 0; }
            if (step === void 0) { step = 3; }
            if (step <= 0) {
                return Writer.done();
            }
            if (step === 1 && output.isCont()) {
                output = output.write(48);
                step = 2;
            }
            if (step === 2 && output.isCont()) {
                output = output.write(120);
                step = 3;
            }
            if (step === 3) {
                if (input >= 0 && input < 16 && width <= 1) {
                    if (output.isCont()) {
                        output = output.write(base16.encodeDigit(input));
                        return Writer.done(value);
                    }
                }
                else {
                    var i = 15;
                    var digits = new Array(16);
                    var x = input;
                    while (x !== 0 || i >= 16 - width) {
                        digits[i] = x & 0xf;
                        x >>>= 4;
                        i -= 1;
                    }
                    i += 1 + index;
                    while (i < 16 && output.isCont()) {
                        output = output.write(base16.encodeDigit(digits[i]));
                        index += 1;
                        i += 1;
                    }
                    if (i === 16) {
                        return Writer.done(value);
                    }
                }
            }
            if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new Base16IntegerWriter(value, input, width, base16, index, step);
        };
        Base16IntegerWriter.writeLiteral = function (output, value, input, width, base16) {
            return Base16IntegerWriter.write(output, value, input, width, base16, 0, 1);
        };
        return Base16IntegerWriter;
    }(Writer));
    Base16.IntegerWriter = Base16IntegerWriter;

    var Base64 = (function () {
        function Base64() {
        }
        Base64.prototype.decodeDigit = function (c) {
            if (c >= 65 && c <= 90) {
                return c - 65;
            }
            else if (c >= 97 && c <= 122) {
                return c + (26 - 97);
            }
            else if (c >= 48 && c <= 57) {
                return c + (52 - 48);
            }
            else if (c === 43 || c === 45) {
                return 62;
            }
            else if (c === 47 || c === 95) {
                return 63;
            }
            else {
                var message = Unicode.stringOutput();
                message.write("Invalid base-64 digit: ");
                Format.debugChar(c, message);
                throw new Error(message.bind());
            }
        };
        Base64.prototype.encodeDigit = function (b) {
            return this.alphabet().charCodeAt(b);
        };
        Base64.prototype.writeQuantum = function (c1, c2, c3, c4, output) {
            var x = this.decodeDigit(c1);
            var y = this.decodeDigit(c2);
            if (c3 !== 61) {
                var z = this.decodeDigit(c3);
                if (c4 !== 61) {
                    var w = this.decodeDigit(c4);
                    output = output.write((x << 2) | (y >>> 4));
                    output = output.write((y << 4) | (z >>> 2));
                    output = output.write((z << 6) | w);
                }
                else {
                    output = output.write((x << 2) | (y >>> 4));
                    output = output.write((y << 4) | (z >>> 2));
                }
            }
            else {
                if (c4 !== 61) {
                    throw new Error("Improperly padded base-64");
                }
                output = output.write((x << 2) | (y >>> 4));
            }
        };
        Base64.prototype.parser = function (output) {
            return new Base64.Parser(output, this);
        };
        Base64.prototype.parse = function (input, output) {
            return Base64.Parser.parse(input, output, this);
        };
        Base64.prototype.parseUint8Array = function (input) {
            return Base64.Parser.parse(input, Binary.uint8ArrayOutput(), this);
        };
        Base64.prototype.uint8ArrayWriter = function (input) {
            if (input === void 0) {
                return new Base64.Writer(void 0, void 0, this);
            }
            else {
                return new Base64.Writer(input, input, this);
            }
        };
        Base64.prototype.writeUint8Array = function (input, output) {
            return Base64.Writer.write(output, void 0, input, this);
        };
        Base64.standard = function (isPadded) {
            if (isPadded === void 0) { isPadded = true; }
            if (isPadded) {
                if (!Base64._standard) {
                    Base64._standard = new Base64Standard(true);
                }
                return Base64._standard;
            }
            else {
                if (!Base64._standardUnpadded) {
                    Base64._standardUnpadded = new Base64Standard(true);
                }
                return Base64._standardUnpadded;
            }
        };
        Base64.url = function (isPadded) {
            if (isPadded === void 0) { isPadded = true; }
            if (isPadded) {
                if (!Base64._url) {
                    Base64._url = new Base64Url(true);
                }
                return Base64._url;
            }
            else {
                if (!Base64._urlUnpadded) {
                    Base64._urlUnpadded = new Base64Url(false);
                }
                return Base64._urlUnpadded;
            }
        };
        return Base64;
    }());
    var Base64Standard = (function (_super) {
        __extends(Base64Standard, _super);
        function Base64Standard(isPadded) {
            var _this = _super.call(this) || this;
            _this._isPadded = isPadded;
            return _this;
        }
        Base64Standard.prototype.alphabet = function () {
            return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        };
        Base64Standard.prototype.isPadded = function (isPadded) {
            if (isPadded === void 0) {
                return this._isPadded;
            }
            else {
                if (isPadded === this._isPadded) {
                    return this;
                }
                else {
                    return Base64.standard(isPadded);
                }
            }
        };
        Base64Standard.prototype.isDigit = function (c) {
            return c >= 48 && c <= 57
                || c >= 65 && c <= 90
                || c >= 97 && c <= 122
                || c === 43 || c === 47;
        };
        return Base64Standard;
    }(Base64));
    var Base64Url = (function (_super) {
        __extends(Base64Url, _super);
        function Base64Url(isPadded) {
            var _this = _super.call(this) || this;
            _this._isPadded = isPadded;
            return _this;
        }
        Base64Url.prototype.alphabet = function () {
            return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
        };
        Base64Url.prototype.isPadded = function (isPadded) {
            if (isPadded === void 0) {
                return this._isPadded;
            }
            else {
                if (isPadded === this._isPadded) {
                    return this;
                }
                else {
                    return Base64.url(isPadded);
                }
            }
        };
        Base64Url.prototype.isDigit = function (c) {
            return c >= 48 && c <= 57
                || c >= 65 && c <= 90
                || c >= 97 && c <= 122
                || c === 45 || c === 95;
        };
        return Base64Url;
    }(Base64));

    var Base64Parser = (function (_super) {
        __extends(Base64Parser, _super);
        function Base64Parser(output, base64, p, q, r, step) {
            if (p === void 0) { p = 0; }
            if (q === void 0) { q = 0; }
            if (r === void 0) { r = 0; }
            if (step === void 0) { step = 1; }
            var _this = _super.call(this) || this;
            _this._output = output;
            _this._base64 = base64;
            _this._p = p;
            _this._q = q;
            _this._r = r;
            _this._step = step;
            return _this;
        }
        Base64Parser.prototype.feed = function (input) {
            return Base64Parser.parse(input, this._output.clone(), this._base64, this._p, this._q, this._r, this._step);
        };
        Base64Parser.parse = function (input, output, base64, p, q, r, step) {
            if (p === void 0) { p = 0; }
            if (q === void 0) { q = 0; }
            if (r === void 0) { r = 0; }
            if (step === void 0) { step = 1; }
            var c = 0;
            while (!input.isEmpty()) {
                if (step === 1) {
                    if (input.isCont() && (c = input.head(), base64.isDigit(c))) {
                        input = input.step();
                        p = c;
                        step = 2;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.done(output.bind());
                    }
                }
                if (step === 2) {
                    if (input.isCont() && (c = input.head(), base64.isDigit(c))) {
                        input = input.step();
                        q = c;
                        step = 3;
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected("base64 digit", input));
                    }
                }
                if (step === 3) {
                    if (input.isCont() && (c = input.head(), base64.isDigit(c) || c === 61)) {
                        input = input.step();
                        r = c;
                        if (c !== 61) {
                            step = 4;
                        }
                        else {
                            step = 5;
                        }
                    }
                    else if (!input.isEmpty()) {
                        if (!base64.isPadded()) {
                            base64.writeQuantum(p, q, 61, 61, output);
                            return Parser.done(output.bind());
                        }
                        else {
                            return Parser.error(Diagnostic.unexpected(input));
                        }
                    }
                }
                if (step === 4) {
                    if (input.isCont() && (c = input.head(), base64.isDigit(c) || c === 61)) {
                        input = input.step();
                        base64.writeQuantum(p, q, r, c, output);
                        r = 0;
                        q = 0;
                        p = 0;
                        if (c !== 61) {
                            step = 1;
                        }
                        else {
                            return Parser.done(output.bind());
                        }
                    }
                    else if (!input.isEmpty()) {
                        if (!base64.isPadded()) {
                            base64.writeQuantum(p, q, r, 61, output);
                            return Parser.done(output.bind());
                        }
                        else {
                            return Parser.error(Diagnostic.unexpected(input));
                        }
                    }
                }
                else if (step === 5) {
                    if (input.isCont() && (c = input.head(), c === 61)) {
                        input = input.step();
                        base64.writeQuantum(p, q, r, c, output);
                        r = 0;
                        q = 0;
                        p = 0;
                        return Parser.done(output.bind());
                    }
                    else if (!input.isEmpty()) {
                        return Parser.error(Diagnostic.expected(61, input));
                    }
                }
            }
            return new Base64Parser(output, base64, p, q, r, step);
        };
        return Base64Parser;
    }(Parser));
    Base64.Parser = Base64Parser;

    var Base64Writer = (function (_super) {
        __extends(Base64Writer, _super);
        function Base64Writer(value, input, base64, index, step) {
            if (index === void 0) { index = 0; }
            if (step === void 0) { step = 1; }
            var _this = _super.call(this) || this;
            _this._value = value;
            _this._input = input;
            _this._base64 = base64;
            _this._index = index;
            _this._step = step;
            return _this;
        }
        Base64Writer.prototype.feed = function (value) {
            if (value instanceof Uint8Array) {
                return new Base64Writer(undefined, value, this._base64);
            }
            else {
                throw new TypeError("" + value);
            }
        };
        Base64Writer.prototype.pull = function (output) {
            return Base64Writer.write(output, this._value, this._input, this._base64, this._index, this._step);
        };
        Base64Writer.write = function (output, value, input, base64, index, step) {
            if (index === void 0) { index = 0; }
            if (step === void 0) { step = 1; }
            while (index + 2 < input.length && output.isCont()) {
                var x = input[index];
                var y = input[index + 1];
                var z = input[index + 2];
                if (step === 1 && output.isCont()) {
                    output = output.write(base64.encodeDigit(x >>> 2));
                    step = 2;
                }
                if (step === 2 && output.isCont()) {
                    output = output.write(base64.encodeDigit(((x << 4) | (y >>> 4)) & 0x3f));
                    step = 3;
                }
                if (step === 3 && output.isCont()) {
                    output = output.write(base64.encodeDigit(((y << 2) | (z >>> 6)) & 0x3f));
                    step = 4;
                }
                if (step === 4 && output.isCont()) {
                    output = output.write(base64.encodeDigit(z & 0x3f));
                    index += 3;
                    step = 1;
                }
            }
            if (index + 1 < input.length && output.isCont()) {
                var x = input[index];
                var y = input[index + 1];
                if (step === 1 && output.isCont()) {
                    output = output.write(base64.encodeDigit(x >>> 2));
                    step = 2;
                }
                if (step === 2 && output.isCont()) {
                    output = output.write(base64.encodeDigit(((x << 4) | (y >>> 4)) & 0x3f));
                    step = 3;
                }
                if (step === 3 && output.isCont()) {
                    output = output.write(base64.encodeDigit((y << 2) & 0x3f));
                    step = 4;
                }
                if (step === 4) {
                    if (!base64.isPadded()) {
                        index += 2;
                    }
                    else if (output.isCont()) {
                        output = output.write(61);
                        index += 2;
                    }
                }
            }
            else if (index < input.length && output.isCont()) {
                var x = input[index];
                if (step === 1 && output.isCont()) {
                    output = output.write(base64.encodeDigit(x >>> 2));
                    step = 2;
                }
                if (step === 2 && output.isCont()) {
                    output = output.write(base64.encodeDigit((x << 4) & 0x3f));
                    step = 3;
                }
                if (step === 3) {
                    if (!base64.isPadded()) {
                        index += 1;
                    }
                    else if (output.isCont()) {
                        output = output.write(61);
                        step = 4;
                    }
                }
                if (step === 4 && output.isCont()) {
                    output = output.write(61);
                    index += 1;
                }
            }
            if (index === input.length) {
                return Writer.done(value);
            }
            else if (output.isDone()) {
                return Writer.error(new WriterException("truncated"));
            }
            else if (output.isError()) {
                return Writer.error(output.trap());
            }
            return new Base64Writer(value, input, base64, index, step);
        };
        return Base64Writer;
    }(Writer));
    Base64.Writer = Base64Writer;

    exports.Base10 = Base10;
    exports.Base10IntegerWriter = Base10IntegerWriter;
    exports.Base10NumberParser = Base10NumberParser;
    exports.Base16 = Base16;
    exports.Base16IntegerWriter = Base16IntegerWriter;
    exports.Base16Parser = Base16Parser;
    exports.Base16Writer = Base16Writer;
    exports.Base64 = Base64;
    exports.Base64Parser = Base64Parser;
    exports.Base64Writer = Base64Writer;
    exports.Binary = Binary;
    exports.Diagnostic = Diagnostic;
    exports.Format = Format;
    exports.Input = Input;
    exports.InputBuffer = InputBuffer;
    exports.InputException = InputException;
    exports.InputSettings = InputSettings;
    exports.Mark = Mark;
    exports.Output = Output;
    exports.OutputBuffer = OutputBuffer;
    exports.OutputException = OutputException;
    exports.OutputSettings = OutputSettings;
    exports.OutputStyle = OutputStyle;
    exports.Parser = Parser;
    exports.ParserException = ParserException;
    exports.Span = Span;
    exports.Tag = Tag;
    exports.Unicode = Unicode;
    exports.Utf8 = Utf8;
    exports.UtfErrorMode = UtfErrorMode;
    exports.Writer = Writer;
    exports.WriterException = WriterException;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=swim-codec.js.map